
bbl-q:     file format elf64-littleriscv


Disassembly of section .text:

0000000008000000 <_ftext>:

  .option norvc
  .section .text.init,"ax",@progbits
  .globl reset_vector
reset_vector:
  j do_reset
 8000000:	1f80006f          	j	80001f8 <do_reset>

0000000008000004 <trap_vector>:

trap_vector:
  csrrw sp, mscratch, sp
 8000004:	34011173          	csrrw	sp,mscratch,sp
  beqz sp, .Ltrap_from_machine_mode
 8000008:	1a010863          	beqz	sp,80001b8 <restore_regs+0x80>

  STORE a0, 10*REGBYTES(sp)
 800000c:	04a13823          	sd	a0,80(sp)
  STORE a1, 11*REGBYTES(sp)
 8000010:	04b13c23          	sd	a1,88(sp)

  csrr a1, mcause
 8000014:	342025f3          	csrr	a1,mcause
  bgez a1, .Lhandle_trap_in_machine_mode
 8000018:	0805d263          	bgez	a1,800009c <trap_vector+0x98>

  # This is an interrupt.  Discard the mcause MSB and decode the rest.
  sll a1, a1, 1
 800001c:	00159593          	slli	a1,a1,0x1

  # Is it a machine timer interrupt?
  li a0, IRQ_M_TIMER * 2
 8000020:	00e00513          	li	a0,14
  bne a0, a1, 1f
 8000024:	02b51263          	bne	a0,a1,8000048 <trap_vector+0x44>

  # Yes.  Simply clear MTIE and raise STIP.
  li a0, MIP_MTIP
 8000028:	08000513          	li	a0,128
  csrc mie, a0
 800002c:	30453073          	csrc	mie,a0
  li a0, MIP_STIP
 8000030:	02000513          	li	a0,32
  csrs mip, a0
 8000034:	34452073          	csrs	mip,a0

.Lmret:
  # Go back whence we came.
  LOAD a0, 10*REGBYTES(sp)
 8000038:	05013503          	ld	a0,80(sp)
  LOAD a1, 11*REGBYTES(sp)
 800003c:	05813583          	ld	a1,88(sp)
  csrrw sp, mscratch, sp
 8000040:	34011173          	csrrw	sp,mscratch,sp
  mret
 8000044:	30200073          	mret

1:
  # Is it an IPI?
  li a0, IRQ_M_SOFT * 2
 8000048:	00600513          	li	a0,6
  bne a0, a1, .Lbad_trap
 800004c:	18b51263          	bne	a0,a1,80001d0 <restore_regs+0x98>

  # Yes.  First, clear the MIPI bit.
  LOAD a0, MENTRY_IPI_OFFSET(sp)
 8000050:	10013503          	ld	a0,256(sp)
  sw x0, (a0)
 8000054:	00052023          	sw	zero,0(a0)
  fence
 8000058:	0ff0000f          	fence

  # Now, decode the cause(s).
#ifdef __riscv_atomic
  addi a0, sp, MENTRY_IPI_PENDING_OFFSET
 800005c:	10810513          	addi	a0,sp,264
  amoswap.w a0, x0, (a0)
 8000060:	0805252f          	amoswap.w	a0,zero,(a0)
#else
  lw a0, MENTRY_IPI_PENDING_OFFSET(sp)
  sw x0, MENTRY_IPI_PENDING_OFFSET(sp)
#endif
  and a1, a0, IPI_SOFT
 8000064:	00157593          	andi	a1,a0,1
  beqz a1, 1f
 8000068:	00058463          	beqz	a1,8000070 <trap_vector+0x6c>
  csrs mip, MIP_SSIP
 800006c:	34416073          	csrsi	mip,2
1:
  andi a1, a0, IPI_FENCE_I
 8000070:	00257593          	andi	a1,a0,2
  beqz a1, 1f
 8000074:	00058463          	beqz	a1,800007c <trap_vector+0x78>
  fence.i
 8000078:	0000100f          	fence.i
1:
  andi a1, a0, IPI_SFENCE_VMA
 800007c:	00457593          	andi	a1,a0,4
  beqz a1, 1f
 8000080:	00058463          	beqz	a1,8000088 <trap_vector+0x84>
  sfence.vma
 8000084:	12000073          	sfence.vma
1:
  andi a1, a0, IPI_HALT
 8000088:	00857593          	andi	a1,a0,8
  beqz a1, 1f
 800008c:	00058663          	beqz	a1,8000098 <trap_vector+0x94>
  wfi
 8000090:	10500073          	wfi
  j 1b
 8000094:	ff5ff06f          	j	8000088 <trap_vector+0x84>
1:
  j .Lmret
 8000098:	fa1ff06f          	j	8000038 <trap_vector+0x34>


.Lhandle_trap_in_machine_mode:
  # Preserve the registers.  Compute the address of the trap handler.
  STORE ra, 1*REGBYTES(sp)
 800009c:	00113423          	sd	ra,8(sp)
  STORE gp, 3*REGBYTES(sp)
 80000a0:	00313c23          	sd	gp,24(sp)
  STORE tp, 4*REGBYTES(sp)
 80000a4:	02413023          	sd	tp,32(sp)
  STORE t0, 5*REGBYTES(sp)
 80000a8:	02513423          	sd	t0,40(sp)
1:auipc t0, %pcrel_hi(trap_table)  # t0 <- %hi(trap_table)
 80000ac:	0000e297          	auipc	t0,0xe
  STORE t1, 6*REGBYTES(sp)
 80000b0:	02613823          	sd	t1,48(sp)
  sll t1, a1, LOG_REGBYTES         # t1 <- mcause * ptr size
 80000b4:	00359313          	slli	t1,a1,0x3
  STORE t2, 7*REGBYTES(sp)
 80000b8:	02713c23          	sd	t2,56(sp)
  add t1, t0, t1                   # t1 <- %hi(trap_table)[mcause]
 80000bc:	00628333          	add	t1,t0,t1
  STORE s0, 8*REGBYTES(sp)
 80000c0:	04813023          	sd	s0,64(sp)
  LOAD t1, %pcrel_lo(1b)(t1)       # t1 <- trap_table[mcause]
 80000c4:	f5433303          	ld	t1,-172(t1)
  STORE s1, 9*REGBYTES(sp)
 80000c8:	04913423          	sd	s1,72(sp)
  mv a0, sp                        # a0 <- regs
 80000cc:	00010513          	mv	a0,sp
  STORE a2,12*REGBYTES(sp)
 80000d0:	06c13023          	sd	a2,96(sp)
  csrr a2, mepc                    # a2 <- mepc
 80000d4:	34102673          	csrr	a2,mepc
  STORE a3,13*REGBYTES(sp)
 80000d8:	06d13423          	sd	a3,104(sp)
  csrrw t0, mscratch, x0           # t0 <- user sp
 80000dc:	340012f3          	csrrw	t0,mscratch,zero
  STORE a4,14*REGBYTES(sp)
 80000e0:	06e13823          	sd	a4,112(sp)
  STORE a5,15*REGBYTES(sp)
 80000e4:	06f13c23          	sd	a5,120(sp)
  STORE a6,16*REGBYTES(sp)
 80000e8:	09013023          	sd	a6,128(sp)
  STORE a7,17*REGBYTES(sp)
 80000ec:	09113423          	sd	a7,136(sp)
  STORE s2,18*REGBYTES(sp)
 80000f0:	09213823          	sd	s2,144(sp)
  STORE s3,19*REGBYTES(sp)
 80000f4:	09313c23          	sd	s3,152(sp)
  STORE s4,20*REGBYTES(sp)
 80000f8:	0b413023          	sd	s4,160(sp)
  STORE s5,21*REGBYTES(sp)
 80000fc:	0b513423          	sd	s5,168(sp)
  STORE s6,22*REGBYTES(sp)
 8000100:	0b613823          	sd	s6,176(sp)
  STORE s7,23*REGBYTES(sp)
 8000104:	0b713c23          	sd	s7,184(sp)
  STORE s8,24*REGBYTES(sp)
 8000108:	0d813023          	sd	s8,192(sp)
  STORE s9,25*REGBYTES(sp)
 800010c:	0d913423          	sd	s9,200(sp)
  STORE s10,26*REGBYTES(sp)
 8000110:	0da13823          	sd	s10,208(sp)
  STORE s11,27*REGBYTES(sp)
 8000114:	0db13c23          	sd	s11,216(sp)
  STORE t3,28*REGBYTES(sp)
 8000118:	0fc13023          	sd	t3,224(sp)
  STORE t4,29*REGBYTES(sp)
 800011c:	0fd13423          	sd	t4,232(sp)
  STORE t5,30*REGBYTES(sp)
 8000120:	0fe13823          	sd	t5,240(sp)
  STORE t6,31*REGBYTES(sp)
 8000124:	0ff13c23          	sd	t6,248(sp)
  STORE t0, 2*REGBYTES(sp)         # sp
 8000128:	00513823          	sd	t0,16(sp)

#ifndef __riscv_flen
  lw tp, (sp) # Move the emulated FCSR from x0's save slot into tp.
#endif
  STORE x0, (sp) # Zero x0's save slot.
 800012c:	00013023          	sd	zero,0(sp)

  # Invoke the handler.
  jalr t1
 8000130:	000300e7          	jalr	t1

0000000008000134 <restore_mscratch>:
  sw tp, (sp) # Move the emulated FCSR from tp into x0's save slot.
#endif

restore_mscratch:
  # Restore mscratch, so future traps will know they didn't come from M-mode.
  csrw mscratch, sp
 8000134:	34011073          	csrw	mscratch,sp

0000000008000138 <restore_regs>:

restore_regs:
  # Restore all of the registers.
  LOAD ra, 1*REGBYTES(sp)
 8000138:	00813083          	ld	ra,8(sp)
  LOAD gp, 3*REGBYTES(sp)
 800013c:	01813183          	ld	gp,24(sp)
  LOAD tp, 4*REGBYTES(sp)
 8000140:	02013203          	ld	tp,32(sp)
  LOAD t0, 5*REGBYTES(sp)
 8000144:	02813283          	ld	t0,40(sp)
  LOAD t1, 6*REGBYTES(sp)
 8000148:	03013303          	ld	t1,48(sp)
  LOAD t2, 7*REGBYTES(sp)
 800014c:	03813383          	ld	t2,56(sp)
  LOAD s0, 8*REGBYTES(sp)
 8000150:	04013403          	ld	s0,64(sp)
  LOAD s1, 9*REGBYTES(sp)
 8000154:	04813483          	ld	s1,72(sp)
  LOAD a0,10*REGBYTES(sp)
 8000158:	05013503          	ld	a0,80(sp)
  LOAD a1,11*REGBYTES(sp)
 800015c:	05813583          	ld	a1,88(sp)
  LOAD a2,12*REGBYTES(sp)
 8000160:	06013603          	ld	a2,96(sp)
  LOAD a3,13*REGBYTES(sp)
 8000164:	06813683          	ld	a3,104(sp)
  LOAD a4,14*REGBYTES(sp)
 8000168:	07013703          	ld	a4,112(sp)
  LOAD a5,15*REGBYTES(sp)
 800016c:	07813783          	ld	a5,120(sp)
  LOAD a6,16*REGBYTES(sp)
 8000170:	08013803          	ld	a6,128(sp)
  LOAD a7,17*REGBYTES(sp)
 8000174:	08813883          	ld	a7,136(sp)
  LOAD s2,18*REGBYTES(sp)
 8000178:	09013903          	ld	s2,144(sp)
  LOAD s3,19*REGBYTES(sp)
 800017c:	09813983          	ld	s3,152(sp)
  LOAD s4,20*REGBYTES(sp)
 8000180:	0a013a03          	ld	s4,160(sp)
  LOAD s5,21*REGBYTES(sp)
 8000184:	0a813a83          	ld	s5,168(sp)
  LOAD s6,22*REGBYTES(sp)
 8000188:	0b013b03          	ld	s6,176(sp)
  LOAD s7,23*REGBYTES(sp)
 800018c:	0b813b83          	ld	s7,184(sp)
  LOAD s8,24*REGBYTES(sp)
 8000190:	0c013c03          	ld	s8,192(sp)
  LOAD s9,25*REGBYTES(sp)
 8000194:	0c813c83          	ld	s9,200(sp)
  LOAD s10,26*REGBYTES(sp)
 8000198:	0d013d03          	ld	s10,208(sp)
  LOAD s11,27*REGBYTES(sp)
 800019c:	0d813d83          	ld	s11,216(sp)
  LOAD t3,28*REGBYTES(sp)
 80001a0:	0e013e03          	ld	t3,224(sp)
  LOAD t4,29*REGBYTES(sp)
 80001a4:	0e813e83          	ld	t4,232(sp)
  LOAD t5,30*REGBYTES(sp)
 80001a8:	0f013f03          	ld	t5,240(sp)
  LOAD t6,31*REGBYTES(sp)
 80001ac:	0f813f83          	ld	t6,248(sp)
  LOAD sp, 2*REGBYTES(sp)
 80001b0:	01013103          	ld	sp,16(sp)
  mret
 80001b4:	30200073          	mret

.Ltrap_from_machine_mode:
  csrr sp, mscratch
 80001b8:	34002173          	csrr	sp,mscratch
  addi sp, sp, -INTEGER_CONTEXT_SIZE
 80001bc:	f0010113          	addi	sp,sp,-256
  STORE a0,10*REGBYTES(sp)
 80001c0:	04a13823          	sd	a0,80(sp)
  STORE a1,11*REGBYTES(sp)
 80001c4:	04b13c23          	sd	a1,88(sp)
  li a1, TRAP_FROM_MACHINE_MODE_VECTOR
 80001c8:	00d00593          	li	a1,13
  j .Lhandle_trap_in_machine_mode
 80001cc:	ed1ff06f          	j	800009c <trap_vector+0x98>

.Lbad_trap:
  li a1, BAD_TRAP_VECTOR
 80001d0:	00000593          	li	a1,0
  j .Lhandle_trap_in_machine_mode
 80001d4:	ec9ff06f          	j	800009c <trap_vector+0x98>

00000000080001d8 <__redirect_trap>:

  .globl __redirect_trap
__redirect_trap:
  # reset sp to top of M-mode stack
  li t0, MACHINE_STACK_SIZE
 80001d8:	000012b7          	lui	t0,0x1
  add sp, sp, t0
 80001dc:	00510133          	add	sp,sp,t0
  neg t0, t0
 80001e0:	405002b3          	neg	t0,t0
  and sp, sp, t0
 80001e4:	00517133          	and	sp,sp,t0
  addi sp, sp, -MENTRY_FRAME_SIZE
 80001e8:	ec010113          	addi	sp,sp,-320
  j restore_mscratch
 80001ec:	f49ff06f          	j	8000134 <restore_mscratch>

00000000080001f0 <__trap_from_machine_mode>:

__trap_from_machine_mode:
  jal trap_from_machine_mode
 80001f0:	760020ef          	jal	ra,8002950 <trap_from_machine_mode>
  j restore_regs
 80001f4:	f45ff06f          	j	8000138 <restore_regs>

00000000080001f8 <do_reset>:

do_reset:
  li x1, 0
 80001f8:	00000093          	li	ra,0
  li x2, 0
 80001fc:	00000113          	li	sp,0
  li x3, 0
 8000200:	00000193          	li	gp,0
  li x4, 0
 8000204:	00000213          	li	tp,0
  li x5, 0
 8000208:	00000293          	li	t0,0
  li x6, 0
 800020c:	00000313          	li	t1,0
  li x7, 0
 8000210:	00000393          	li	t2,0
  li x8, 0
 8000214:	00000413          	li	s0,0
  li x9, 0
 8000218:	00000493          	li	s1,0
// save a0 and a1; arguments from previous boot loader stage:
//  li x10, 0
//  li x11, 0
  li x12, 0
 800021c:	00000613          	li	a2,0
  li x13, 0
 8000220:	00000693          	li	a3,0
  li x14, 0
 8000224:	00000713          	li	a4,0
  li x15, 0
 8000228:	00000793          	li	a5,0
  li x16, 0
 800022c:	00000813          	li	a6,0
  li x17, 0
 8000230:	00000893          	li	a7,0
  li x18, 0
 8000234:	00000913          	li	s2,0
  li x19, 0
 8000238:	00000993          	li	s3,0
  li x20, 0
 800023c:	00000a13          	li	s4,0
  li x21, 0
 8000240:	00000a93          	li	s5,0
  li x22, 0
 8000244:	00000b13          	li	s6,0
  li x23, 0
 8000248:	00000b93          	li	s7,0
  li x24, 0
 800024c:	00000c13          	li	s8,0
  li x25, 0
 8000250:	00000c93          	li	s9,0
  li x26, 0
 8000254:	00000d13          	li	s10,0
  li x27, 0
 8000258:	00000d93          	li	s11,0
  li x28, 0
 800025c:	00000e13          	li	t3,0
  li x29, 0
 8000260:	00000e93          	li	t4,0
  li x30, 0
 8000264:	00000f13          	li	t5,0
  li x31, 0
 8000268:	00000f93          	li	t6,0
  csrw mscratch, x0
 800026c:	34001073          	csrw	mscratch,zero
  csrs CSR_MSTATUS, t0
#endif
#endif

  # write mtvec and make sure it sticks
  la t0, trap_vector
 8000270:	00000297          	auipc	t0,0x0
 8000274:	d9428293          	addi	t0,t0,-620 # 8000004 <trap_vector>
  csrw mtvec, t0
 8000278:	30529073          	csrw	mtvec,t0
  csrr t1, mtvec
 800027c:	30502373          	csrr	t1,mtvec
1:bne t0, t1, 1b
 8000280:	00629063          	bne	t0,t1,8000280 <do_reset+0x88>

  la sp, stacks + RISCV_PGSIZE - MENTRY_FRAME_SIZE
 8000284:	00011117          	auipc	sp,0x11
 8000288:	c3c10113          	addi	sp,sp,-964 # 8010ec0 <stacks+0xec0>

  csrr a3, mhartid
 800028c:	f14026f3          	csrr	a3,mhartid
  slli a2, a3, RISCV_PGSHIFT
 8000290:	00c69613          	slli	a2,a3,0xc
  add sp, sp, a2
 8000294:	00c10133          	add	sp,sp,a2

  bnez a3, .LmultiHartInit
 8000298:	00069463          	bnez	a3,80002a0 <do_reset+0xa8>
  # Boot on the first hart
#ifdef CUSTOM_DTS
  csrr a0, mhartid
  la a1, dtb_start
#endif
  j init_first_hart
 800029c:	59f0206f          	j	800303a <init_first_hart>

.LmultiHartInit:
  # set MSIE bit to receive IPI
  li a2, MIP_MSIP
 80002a0:	00800613          	li	a2,8
  csrw mie, a2
 80002a4:	30461073          	csrw	mie,a2

.LmultiHart:
#if MAX_HARTS > 1
  # wait for an IPI to signal that it's safe to boot
  wfi
 80002a8:	10500073          	wfi

  # masked harts never start
  la a4, disabled_hart_mask
 80002ac:	00018717          	auipc	a4,0x18
 80002b0:	d5470713          	addi	a4,a4,-684 # 8018000 <disabled_hart_mask>
  LOAD a4, 0(a4)
 80002b4:	00073703          	ld	a4,0(a4)
  srl a4, a4, a3
 80002b8:	00d75733          	srl	a4,a4,a3
  andi a4, a4, 1
 80002bc:	00177713          	andi	a4,a4,1
  bnez a4, .LmultiHart
 80002c0:	fe0714e3          	bnez	a4,80002a8 <do_reset+0xb0>

  # only start if mip is set
  csrr a2, mip
 80002c4:	34402673          	csrr	a2,mip
  andi a2, a2, MIP_MSIP
 80002c8:	00867613          	andi	a2,a2,8
  beqz a2, .LmultiHart
 80002cc:	fc060ee3          	beqz	a2,80002a8 <do_reset+0xb0>

  # make sure our hart id is within a valid range
  fence
 80002d0:	0ff0000f          	fence
  li a2, MAX_HARTS
 80002d4:	00800613          	li	a2,8
  bgeu a3, a2, .Lcont
 80002d8:	00c6f463          	bleu	a2,a3,80002e0 <do_reset+0xe8>
  j init_other_hart
 80002dc:	5f70206f          	j	80030d2 <init_other_hart>
.Lcont:
#endif
  wfi
 80002e0:	10500073          	wfi
  j .LmultiHart
 80002e4:	fc5ff06f          	j	80002a8 <do_reset+0xb0>

00000000080002e8 <dtb_output>:
#endif
static const void* entry_point;
long disabled_hart_mask;

static uintptr_t dtb_output()
{
 80002e8:	1101                	addi	sp,sp,-32
 80002ea:	ec22                	sd	s0,24(sp)
 80002ec:	1000                	addi	s0,sp,32
   *
   * Note: linux kernel calls __va(dtb) to get the device-tree virtual
   * address. The kernel's virtual mapping begins at its load address,
   * thus mandating device-tree is in physical memory after the kernel.
   */
  uintptr_t end = kernel_end ? ROUNDUP((uintptr_t)kernel_end, MEGAPAGE_SIZE)
 80002ee:	00018797          	auipc	a5,0x18
 80002f2:	d3a78793          	addi	a5,a5,-710 # 8018028 <kernel_end>
 80002f6:	639c                	ld	a5,0(a5)
                             : (uintptr_t)PAYLOAD_END;
 80002f8:	cf99                	beqz	a5,8000316 <dtb_output+0x2e>
  uintptr_t end = kernel_end ? ROUNDUP((uintptr_t)kernel_end, MEGAPAGE_SIZE)
 80002fa:	00018797          	auipc	a5,0x18
 80002fe:	d2e78793          	addi	a5,a5,-722 # 8018028 <kernel_end>
 8000302:	639c                	ld	a5,0(a5)
 8000304:	fff78713          	addi	a4,a5,-1
 8000308:	ffe007b7          	lui	a5,0xffe00
 800030c:	8f7d                	and	a4,a4,a5
                             : (uintptr_t)PAYLOAD_END;
 800030e:	002007b7          	lui	a5,0x200
 8000312:	97ba                	add	a5,a5,a4
 8000314:	a829                	j	800032e <dtb_output+0x46>
 8000316:	007cc797          	auipc	a5,0x7cc
 800031a:	c8a78793          	addi	a5,a5,-886 # 87cbfa0 <_payload_end>
 800031e:	fff78713          	addi	a4,a5,-1
 8000322:	ffe007b7          	lui	a5,0xffe00
 8000326:	8f7d                	and	a4,a4,a5
 8000328:	002007b7          	lui	a5,0x200
 800032c:	97ba                	add	a5,a5,a4
  uintptr_t end = kernel_end ? ROUNDUP((uintptr_t)kernel_end, MEGAPAGE_SIZE)
 800032e:	fef43423          	sd	a5,-24(s0)
  return end;
 8000332:	fe843783          	ld	a5,-24(s0)
}
 8000336:	853e                	mv	a0,a5
 8000338:	6462                	ld	s0,24(sp)
 800033a:	6105                	addi	sp,sp,32
 800033c:	8082                	ret

000000000800033e <filter_dtb>:

static void filter_dtb(uintptr_t source)
{
 800033e:	7179                	addi	sp,sp,-48
 8000340:	f406                	sd	ra,40(sp)
 8000342:	f022                	sd	s0,32(sp)
 8000344:	1800                	addi	s0,sp,48
 8000346:	fca43c23          	sd	a0,-40(s0)
  uintptr_t dest = dtb_output();
 800034a:	f9fff0ef          	jal	ra,80002e8 <dtb_output>
 800034e:	fea43423          	sd	a0,-24(s0)
  uint32_t size = fdt_size(source);
 8000352:	fd843503          	ld	a0,-40(s0)
 8000356:	62e000ef          	jal	ra,8000984 <fdt_size>
 800035a:	87aa                	mv	a5,a0
 800035c:	fef42223          	sw	a5,-28(s0)
  memcpy((void*)dest, (void*)source, size);
 8000360:	fe843783          	ld	a5,-24(s0)
 8000364:	fd843703          	ld	a4,-40(s0)
 8000368:	fe446683          	lwu	a3,-28(s0)
 800036c:	8636                	mv	a2,a3
 800036e:	85ba                	mv	a1,a4
 8000370:	853e                	mv	a0,a5
 8000372:	03b0b0ef          	jal	ra,800bbac <memcpy>

#ifndef CUSTOM_DTS
  // Remove information from the chained FDT
  filter_harts(dest, &disabled_hart_mask);
 8000376:	00018597          	auipc	a1,0x18
 800037a:	c8a58593          	addi	a1,a1,-886 # 8018000 <disabled_hart_mask>
 800037e:	fe843503          	ld	a0,-24(s0)
 8000382:	627010ef          	jal	ra,80021a8 <filter_harts>
  filter_plic(dest);
 8000386:	fe843503          	ld	a0,-24(s0)
 800038a:	7b8010ef          	jal	ra,8001b42 <filter_plic>
  filter_compat(dest, "riscv,clint0");
 800038e:	0000c597          	auipc	a1,0xc
 8000392:	b6a58593          	addi	a1,a1,-1174 # 800bef8 <atol+0xe2>
 8000396:	fe843503          	ld	a0,-24(s0)
 800039a:	0f7010ef          	jal	ra,8001c90 <filter_compat>
  filter_compat(dest, "riscv,debug-013");
 800039e:	0000c597          	auipc	a1,0xc
 80003a2:	b6a58593          	addi	a1,a1,-1174 # 800bf08 <atol+0xf2>
 80003a6:	fe843503          	ld	a0,-24(s0)
 80003aa:	0e7010ef          	jal	ra,8001c90 <filter_compat>
#endif
}
 80003ae:	0001                	nop
 80003b0:	70a2                	ld	ra,40(sp)
 80003b2:	7402                	ld	s0,32(sp)
 80003b4:	6145                	addi	sp,sp,48
 80003b6:	8082                	ret

00000000080003b8 <protect_memory>:

static void protect_memory(void)
{
 80003b8:	7139                	addi	sp,sp,-64
 80003ba:	fc06                	sd	ra,56(sp)
 80003bc:	f822                	sd	s0,48(sp)
 80003be:	0080                	addi	s0,sp,64
  // Check to see if up to four PMP registers are implemented.
  // Ignore the illegal-instruction trap if PMPs aren't supported.
  uintptr_t a0 = 0, a1 = 0, a2 = 0, a3 = 0, tmp, cfg;
 80003c0:	fe043423          	sd	zero,-24(s0)
 80003c4:	fe043023          	sd	zero,-32(s0)
 80003c8:	fc043c23          	sd	zero,-40(s0)
 80003cc:	fc043823          	sd	zero,-48(s0)
  asm volatile ("la %[tmp], 1f\n\t"
 80003d0:	55fd                	li	a1,-1
 80003d2:	fe843603          	ld	a2,-24(s0)
 80003d6:	fe043683          	ld	a3,-32(s0)
 80003da:	fd843703          	ld	a4,-40(s0)
 80003de:	fd043783          	ld	a5,-48(s0)
 80003e2:	00000517          	auipc	a0,0x0
 80003e6:	02e50513          	addi	a0,a0,46 # 8000410 <protect_memory+0x58>
 80003ea:	30551573          	csrrw	a0,mtvec,a0
 80003ee:	3b059073          	csrw	pmpaddr0,a1
 80003f2:	3b002673          	csrr	a2,pmpaddr0
 80003f6:	3b159073          	csrw	pmpaddr1,a1
 80003fa:	3b1026f3          	csrr	a3,pmpaddr1
 80003fe:	3b259073          	csrw	pmpaddr2,a1
 8000402:	3b202773          	csrr	a4,pmpaddr2
 8000406:	3b359073          	csrw	pmpaddr3,a1
 800040a:	3b3027f3          	csrr	a5,pmpaddr3
 800040e:	0001                	nop
 8000410:	30551073          	csrw	mtvec,a0
 8000414:	fca43423          	sd	a0,-56(s0)
 8000418:	fec43423          	sd	a2,-24(s0)
 800041c:	fed43023          	sd	a3,-32(s0)
 8000420:	fce43c23          	sd	a4,-40(s0)
 8000424:	fcf43823          	sd	a5,-48(s0)
                : [tmp] "=&r" (tmp),
                  [a0] "+r" (a0), [a1] "+r" (a1), [a2] "+r" (a2), [a3] "+r" (a3)
                : [m1] "r" (-1UL));

  // We need at least four PMP registers to protect M-mode from S-mode.
  if (!(a0 & a1 & a2 & a3))
 8000428:	fe843703          	ld	a4,-24(s0)
 800042c:	fe043783          	ld	a5,-32(s0)
 8000430:	8f7d                	and	a4,a4,a5
 8000432:	fd843783          	ld	a5,-40(s0)
 8000436:	8f7d                	and	a4,a4,a5
 8000438:	fd043783          	ld	a5,-48(s0)
 800043c:	8ff9                	and	a5,a5,a4
 800043e:	e781                	bnez	a5,8000446 <protect_memory+0x8e>
    return setup_pmp();
 8000440:	4bd020ef          	jal	ra,80030fc <setup_pmp>
 8000444:	a0a5                	j	80004ac <protect_memory+0xf4>

  // Prevent S-mode access to our part of memory.
  extern char _ftext, _end;
  a0 = (uintptr_t)&_ftext >> PMP_SHIFT;
 8000446:	00000797          	auipc	a5,0x0
 800044a:	bba78793          	addi	a5,a5,-1094 # 8000000 <_ftext>
 800044e:	8389                	srli	a5,a5,0x2
 8000450:	fef43423          	sd	a5,-24(s0)
  a1 = (uintptr_t)&_end >> PMP_SHIFT;
 8000454:	00019797          	auipc	a5,0x19
 8000458:	bac78793          	addi	a5,a5,-1108 # 8019000 <_end>
 800045c:	8389                	srli	a5,a5,0x2
 800045e:	fef43023          	sd	a5,-32(s0)
  cfg = PMP_TOR << 8;
 8000462:	6785                	lui	a5,0x1
 8000464:	80078793          	addi	a5,a5,-2048 # 800 <MEM_START-0x7fff800>
 8000468:	fcf43023          	sd	a5,-64(s0)
  // Give S-mode free rein of everything else.
  a2 = -1;
 800046c:	57fd                	li	a5,-1
 800046e:	fcf43c23          	sd	a5,-40(s0)
  cfg |= (PMP_NAPOT | PMP_R | PMP_W | PMP_X) << 16;
 8000472:	fc043703          	ld	a4,-64(s0)
 8000476:	001f07b7          	lui	a5,0x1f0
 800047a:	8fd9                	or	a5,a5,a4
 800047c:	fcf43023          	sd	a5,-64(s0)
  // No use for PMP 3 just yet.
  a3 = 0;
 8000480:	fc043823          	sd	zero,-48(s0)

  // Plug it all in.
  asm volatile ("csrw pmpaddr0, %[a0]\n\t"
 8000484:	fe843783          	ld	a5,-24(s0)
 8000488:	fe043703          	ld	a4,-32(s0)
 800048c:	fd843683          	ld	a3,-40(s0)
 8000490:	fd043603          	ld	a2,-48(s0)
 8000494:	fc043583          	ld	a1,-64(s0)
 8000498:	3b079073          	csrw	pmpaddr0,a5
 800049c:	3b171073          	csrw	pmpaddr1,a4
 80004a0:	3b269073          	csrw	pmpaddr2,a3
 80004a4:	3b361073          	csrw	pmpaddr3,a2
 80004a8:	3a059073          	csrw	pmpcfg0,a1
                "csrw pmpaddr2, %[a2]\n\t"
                "csrw pmpaddr3, %[a3]\n\t"
                "csrw pmpcfg0, %[cfg]"
                :: [a0] "r" (a0), [a1] "r" (a1), [a2] "r" (a2), [a3] "r" (a3),
                   [cfg] "r" (cfg));
}
 80004ac:	70e2                	ld	ra,56(sp)
 80004ae:	7442                	ld	s0,48(sp)
 80004b0:	6121                	addi	sp,sp,64
 80004b2:	8082                	ret

00000000080004b4 <boot_other_hart>:

void boot_other_hart(uintptr_t unused __attribute__((unused)))
{
 80004b4:	715d                	addi	sp,sp,-80
 80004b6:	e486                	sd	ra,72(sp)
 80004b8:	e0a2                	sd	s0,64(sp)
 80004ba:	fc26                	sd	s1,56(sp)
 80004bc:	f84a                	sd	s2,48(sp)
 80004be:	0880                	addi	s0,sp,80
 80004c0:	faa43c23          	sd	a0,-72(s0)
  const void* entry;
  do {
    entry = entry_point;
 80004c4:	0000f797          	auipc	a5,0xf
 80004c8:	b3c78793          	addi	a5,a5,-1220 # 800f000 <entry_point>
 80004cc:	639c                	ld	a5,0(a5)
 80004ce:	fcf43c23          	sd	a5,-40(s0)
    mb();
 80004d2:	0ff0000f          	fence
  } while (!entry);
 80004d6:	fd843783          	ld	a5,-40(s0)
 80004da:	d7ed                	beqz	a5,80004c4 <boot_other_hart+0x10>

  long hartid = read_csr(mhartid);
 80004dc:	f14027f3          	csrr	a5,mhartid
 80004e0:	fcf43823          	sd	a5,-48(s0)
 80004e4:	fd043783          	ld	a5,-48(s0)
 80004e8:	fcf43423          	sd	a5,-56(s0)
  if ((1 << hartid) & disabled_hart_mask) {
 80004ec:	fc843783          	ld	a5,-56(s0)
 80004f0:	2781                	sext.w	a5,a5
 80004f2:	4705                	li	a4,1
 80004f4:	00f717bb          	sllw	a5,a4,a5
 80004f8:	2781                	sext.w	a5,a5
 80004fa:	873e                	mv	a4,a5
 80004fc:	00018797          	auipc	a5,0x18
 8000500:	b0478793          	addi	a5,a5,-1276 # 8018000 <disabled_hart_mask>
 8000504:	639c                	ld	a5,0(a5)
 8000506:	8ff9                	and	a5,a5,a4
 8000508:	c791                	beqz	a5,8000514 <boot_other_hart+0x60>
    while (1) {
      __asm__ volatile("wfi");
 800050a:	10500073          	wfi
#ifdef __riscv_div
      __asm__ volatile("div x0, x0, x0");
 800050e:	02004033          	div	zero,zero,zero
      __asm__ volatile("wfi");
 8000512:	bfe5                	j	800050a <boot_other_hart+0x56>
  }

#ifdef BBL_BOOT_MACHINE
  enter_machine_mode(entry, hartid, dtb_output());
#else /* Run bbl in supervisor mode */
  protect_memory();
 8000514:	ea5ff0ef          	jal	ra,80003b8 <protect_memory>
  enter_supervisor_mode(entry, hartid, dtb_output());
 8000518:	fd843483          	ld	s1,-40(s0)
 800051c:	fc843903          	ld	s2,-56(s0)
 8000520:	dc9ff0ef          	jal	ra,80002e8 <dtb_output>
 8000524:	87aa                	mv	a5,a0
 8000526:	863e                	mv	a2,a5
 8000528:	85ca                	mv	a1,s2
 800052a:	8526                	mv	a0,s1
 800052c:	405020ef          	jal	ra,8003130 <enter_supervisor_mode>

0000000008000530 <boot_loader>:
#endif
}

void boot_loader(uintptr_t dtb)
{
 8000530:	1101                	addi	sp,sp,-32
 8000532:	ec06                	sd	ra,24(sp)
 8000534:	e822                	sd	s0,16(sp)
 8000536:	1000                	addi	s0,sp,32
 8000538:	fea43423          	sd	a0,-24(s0)
  filter_dtb(dtb);
 800053c:	fe843503          	ld	a0,-24(s0)
 8000540:	dffff0ef          	jal	ra,800033e <filter_dtb>
  print_logo();
#endif
#ifdef PK_PRINT_DEVICE_TREE
  fdt_print(dtb_output());
#endif
  mb();
 8000544:	0ff0000f          	fence
  /* Use optional FDT preloaded external payload if present */
  entry_point = kernel_start ? kernel_start : PAYLOAD_START;
 8000548:	00018797          	auipc	a5,0x18
 800054c:	af078793          	addi	a5,a5,-1296 # 8018038 <kernel_start>
 8000550:	639c                	ld	a5,0(a5)
 8000552:	c799                	beqz	a5,8000560 <boot_loader+0x30>
 8000554:	00018797          	auipc	a5,0x18
 8000558:	ae478793          	addi	a5,a5,-1308 # 8018038 <kernel_start>
 800055c:	639c                	ld	a5,0(a5)
 800055e:	a029                	j	8000568 <boot_loader+0x38>
 8000560:	00200797          	auipc	a5,0x200
 8000564:	aa078793          	addi	a5,a5,-1376 # 8200000 <_payload_start>
 8000568:	0000f717          	auipc	a4,0xf
 800056c:	a9870713          	addi	a4,a4,-1384 # 800f000 <entry_point>
 8000570:	e31c                	sd	a5,0(a4)
  boot_other_hart(0);
 8000572:	4501                	li	a0,0
 8000574:	f41ff0ef          	jal	ra,80004b4 <boot_other_hart>
}
 8000578:	0001                	nop
 800057a:	60e2                	ld	ra,24(sp)
 800057c:	6442                	ld	s0,16(sp)
 800057e:	6105                	addi	sp,sp,32
 8000580:	8082                	ret
	...

0000000008000584 <bswap>:
#include "config.h"
#include "fdt.h"
#include "mtrap.h"

static inline uint32_t bswap(uint32_t x)
{
 8000584:	7179                	addi	sp,sp,-48
 8000586:	f422                	sd	s0,40(sp)
 8000588:	1800                	addi	s0,sp,48
 800058a:	87aa                	mv	a5,a0
 800058c:	fcf42e23          	sw	a5,-36(s0)
#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
  uint32_t y = (x & 0x00FF00FF) <<  8 | (x & 0xFF00FF00) >>  8;
 8000590:	fdc42783          	lw	a5,-36(s0)
 8000594:	0087979b          	slliw	a5,a5,0x8
 8000598:	2781                	sext.w	a5,a5
 800059a:	873e                	mv	a4,a5
 800059c:	ff0107b7          	lui	a5,0xff010
 80005a0:	f0078793          	addi	a5,a5,-256 # ffffffffff00ff00 <_payload_end+0xfffffffff6843f60>
 80005a4:	8ff9                	and	a5,a5,a4
 80005a6:	0007871b          	sext.w	a4,a5
 80005aa:	fdc42783          	lw	a5,-36(s0)
 80005ae:	0087d79b          	srliw	a5,a5,0x8
 80005b2:	2781                	sext.w	a5,a5
 80005b4:	86be                	mv	a3,a5
 80005b6:	00ff07b7          	lui	a5,0xff0
 80005ba:	0ff78793          	addi	a5,a5,255 # ff00ff <MEM_START-0x700ff01>
 80005be:	8ff5                	and	a5,a5,a3
 80005c0:	2781                	sext.w	a5,a5
 80005c2:	8fd9                	or	a5,a5,a4
 80005c4:	fef42623          	sw	a5,-20(s0)
  uint32_t z = (y & 0x0000FFFF) << 16 | (y & 0xFFFF0000) >> 16;
 80005c8:	fec42783          	lw	a5,-20(s0)
 80005cc:	0107971b          	slliw	a4,a5,0x10
 80005d0:	0107d79b          	srliw	a5,a5,0x10
 80005d4:	8fd9                	or	a5,a5,a4
 80005d6:	fef42423          	sw	a5,-24(s0)
  return z;
 80005da:	fe842783          	lw	a5,-24(s0)
#else
  /* No need to swap on big endian */
  return x;
#endif
}
 80005de:	853e                	mv	a0,a5
 80005e0:	7422                	ld	s0,40(sp)
 80005e2:	6145                	addi	sp,sp,48
 80005e4:	8082                	ret

00000000080005e6 <fdt_scan_helper>:
static uint32_t *fdt_scan_helper(
  uint32_t *lex,
  const char *strings,
  struct fdt_scan_node *node,
  const struct fdt_cb *cb)
{
 80005e6:	7175                	addi	sp,sp,-144
 80005e8:	e506                	sd	ra,136(sp)
 80005ea:	e122                	sd	s0,128(sp)
 80005ec:	fca6                	sd	s1,120(sp)
 80005ee:	0900                	addi	s0,sp,144
 80005f0:	f8a43423          	sd	a0,-120(s0)
 80005f4:	f8b43023          	sd	a1,-128(s0)
 80005f8:	f6c43c23          	sd	a2,-136(s0)
 80005fc:	f6d43823          	sd	a3,-144(s0)
  struct fdt_scan_node child;
  struct fdt_scan_prop prop;
  int last = 0;
 8000600:	fc042e23          	sw	zero,-36(s0)

  child.parent = node;
 8000604:	f7843783          	ld	a5,-136(s0)
 8000608:	faf43c23          	sd	a5,-72(s0)
  // these are the default cell counts, as per the FDT spec
  child.address_cells = 2;
 800060c:	4789                	li	a5,2
 800060e:	fcf42423          	sw	a5,-56(s0)
  child.size_cells = 1;
 8000612:	4785                	li	a5,1
 8000614:	fcf42623          	sw	a5,-52(s0)
  prop.node = node;
 8000618:	f7843783          	ld	a5,-136(s0)
 800061c:	f8f43c23          	sd	a5,-104(s0)

  while (1) {
    switch (bswap(lex[0])) {
 8000620:	f8843783          	ld	a5,-120(s0)
 8000624:	439c                	lw	a5,0(a5)
 8000626:	853e                	mv	a0,a5
 8000628:	f5dff0ef          	jal	ra,8000584 <bswap>
 800062c:	87aa                	mv	a5,a0
 800062e:	2781                	sext.w	a5,a5
 8000630:	86be                	mv	a3,a5
 8000632:	4709                	li	a4,2
 8000634:	22e68a63          	beq	a3,a4,8000868 <fdt_scan_helper+0x282>
 8000638:	86be                	mv	a3,a5
 800063a:	4709                	li	a4,2
 800063c:	00d76763          	bltu	a4,a3,800064a <fdt_scan_helper+0x64>
 8000640:	873e                	mv	a4,a5
 8000642:	4785                	li	a5,1
 8000644:	14f70363          	beq	a4,a5,800078a <fdt_scan_helper+0x1a4>
 8000648:	ac89                	j	800089a <fdt_scan_helper+0x2b4>
 800064a:	86be                	mv	a3,a5
 800064c:	470d                	li	a4,3
 800064e:	00e68c63          	beq	a3,a4,8000666 <fdt_scan_helper+0x80>
 8000652:	873e                	mv	a4,a5
 8000654:	4791                	li	a5,4
 8000656:	24f71263          	bne	a4,a5,800089a <fdt_scan_helper+0x2b4>
      case FDT_NOP: {
        lex += 1;
 800065a:	f8843783          	ld	a5,-120(s0)
 800065e:	0791                	addi	a5,a5,4
 8000660:	f8f43423          	sd	a5,-120(s0)
        break;
 8000664:	a49d                	j	80008ca <fdt_scan_helper+0x2e4>
      }
      case FDT_PROP: {
        assert (!last);
 8000666:	fdc42783          	lw	a5,-36(s0)
 800066a:	2781                	sext.w	a5,a5
 800066c:	c795                	beqz	a5,8000698 <fdt_scan_helper+0xb2>
 800066e:	0000c697          	auipc	a3,0xc
 8000672:	8aa68693          	addi	a3,a3,-1878 # 800bf18 <atol+0x102>
 8000676:	03a00613          	li	a2,58
 800067a:	0000c597          	auipc	a1,0xc
 800067e:	8a658593          	addi	a1,a1,-1882 # 800bf20 <atol+0x10a>
 8000682:	0000c517          	auipc	a0,0xc
 8000686:	8b650513          	addi	a0,a0,-1866 # 800bf38 <atol+0x122>
 800068a:	4f9010ef          	jal	ra,8002382 <printm>
 800068e:	67c1                	lui	a5,0x10
 8000690:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7ff0001>
 8000694:	338020ef          	jal	ra,80029cc <poweroff>
        prop.name  = strings + bswap(lex[2]);
 8000698:	f8843783          	ld	a5,-120(s0)
 800069c:	07a1                	addi	a5,a5,8
 800069e:	439c                	lw	a5,0(a5)
 80006a0:	853e                	mv	a0,a5
 80006a2:	ee3ff0ef          	jal	ra,8000584 <bswap>
 80006a6:	87aa                	mv	a5,a0
 80006a8:	2781                	sext.w	a5,a5
 80006aa:	1782                	slli	a5,a5,0x20
 80006ac:	9381                	srli	a5,a5,0x20
 80006ae:	f8043703          	ld	a4,-128(s0)
 80006b2:	97ba                	add	a5,a5,a4
 80006b4:	faf43023          	sd	a5,-96(s0)
        prop.len   = bswap(lex[1]);
 80006b8:	f8843783          	ld	a5,-120(s0)
 80006bc:	0791                	addi	a5,a5,4
 80006be:	439c                	lw	a5,0(a5)
 80006c0:	853e                	mv	a0,a5
 80006c2:	ec3ff0ef          	jal	ra,8000584 <bswap>
 80006c6:	87aa                	mv	a5,a0
 80006c8:	2781                	sext.w	a5,a5
 80006ca:	2781                	sext.w	a5,a5
 80006cc:	faf42823          	sw	a5,-80(s0)
        prop.value = lex + 3;
 80006d0:	f8843783          	ld	a5,-120(s0)
 80006d4:	07b1                	addi	a5,a5,12
 80006d6:	faf43423          	sd	a5,-88(s0)
        if (node && !strcmp(prop.name, "#address-cells")) { node->address_cells = bswap(lex[3]); }
 80006da:	f7843783          	ld	a5,-136(s0)
 80006de:	cb95                	beqz	a5,8000712 <fdt_scan_helper+0x12c>
 80006e0:	fa043783          	ld	a5,-96(s0)
 80006e4:	0000c597          	auipc	a1,0xc
 80006e8:	87458593          	addi	a1,a1,-1932 # 800bf58 <atol+0x142>
 80006ec:	853e                	mv	a0,a5
 80006ee:	66e0b0ef          	jal	ra,800bd5c <strcmp>
 80006f2:	87aa                	mv	a5,a0
 80006f4:	ef99                	bnez	a5,8000712 <fdt_scan_helper+0x12c>
 80006f6:	f8843783          	ld	a5,-120(s0)
 80006fa:	07b1                	addi	a5,a5,12
 80006fc:	439c                	lw	a5,0(a5)
 80006fe:	853e                	mv	a0,a5
 8000700:	e85ff0ef          	jal	ra,8000584 <bswap>
 8000704:	87aa                	mv	a5,a0
 8000706:	2781                	sext.w	a5,a5
 8000708:	0007871b          	sext.w	a4,a5
 800070c:	f7843783          	ld	a5,-136(s0)
 8000710:	cb98                	sw	a4,16(a5)
        if (node && !strcmp(prop.name, "#size-cells"))    { node->size_cells    = bswap(lex[3]); }
 8000712:	f7843783          	ld	a5,-136(s0)
 8000716:	cb95                	beqz	a5,800074a <fdt_scan_helper+0x164>
 8000718:	fa043783          	ld	a5,-96(s0)
 800071c:	0000c597          	auipc	a1,0xc
 8000720:	84c58593          	addi	a1,a1,-1972 # 800bf68 <atol+0x152>
 8000724:	853e                	mv	a0,a5
 8000726:	6360b0ef          	jal	ra,800bd5c <strcmp>
 800072a:	87aa                	mv	a5,a0
 800072c:	ef99                	bnez	a5,800074a <fdt_scan_helper+0x164>
 800072e:	f8843783          	ld	a5,-120(s0)
 8000732:	07b1                	addi	a5,a5,12
 8000734:	439c                	lw	a5,0(a5)
 8000736:	853e                	mv	a0,a5
 8000738:	e4dff0ef          	jal	ra,8000584 <bswap>
 800073c:	87aa                	mv	a5,a0
 800073e:	2781                	sext.w	a5,a5
 8000740:	0007871b          	sext.w	a4,a5
 8000744:	f7843783          	ld	a5,-136(s0)
 8000748:	cbd8                	sw	a4,20(a5)
        lex += 3 + (prop.len+3)/4;
 800074a:	fb042783          	lw	a5,-80(s0)
 800074e:	278d                	addiw	a5,a5,3
 8000750:	2781                	sext.w	a5,a5
 8000752:	41f7d71b          	sraiw	a4,a5,0x1f
 8000756:	01e7571b          	srliw	a4,a4,0x1e
 800075a:	9fb9                	addw	a5,a5,a4
 800075c:	4027d79b          	sraiw	a5,a5,0x2
 8000760:	2781                	sext.w	a5,a5
 8000762:	278d                	addiw	a5,a5,3
 8000764:	2781                	sext.w	a5,a5
 8000766:	078a                	slli	a5,a5,0x2
 8000768:	f8843703          	ld	a4,-120(s0)
 800076c:	97ba                	add	a5,a5,a4
 800076e:	f8f43423          	sd	a5,-120(s0)
        cb->prop(&prop, cb->extra);
 8000772:	f7043783          	ld	a5,-144(s0)
 8000776:	6794                	ld	a3,8(a5)
 8000778:	f7043783          	ld	a5,-144(s0)
 800077c:	7398                	ld	a4,32(a5)
 800077e:	f9840793          	addi	a5,s0,-104
 8000782:	85ba                	mv	a1,a4
 8000784:	853e                	mv	a0,a5
 8000786:	9682                	jalr	a3
        break;
 8000788:	a289                	j	80008ca <fdt_scan_helper+0x2e4>
      }
      case FDT_BEGIN_NODE: {
        uint32_t *lex_next;
        if (!last && node && cb->done) cb->done(node, cb->extra);
 800078a:	fdc42783          	lw	a5,-36(s0)
 800078e:	2781                	sext.w	a5,a5
 8000790:	e395                	bnez	a5,80007b4 <fdt_scan_helper+0x1ce>
 8000792:	f7843783          	ld	a5,-136(s0)
 8000796:	cf99                	beqz	a5,80007b4 <fdt_scan_helper+0x1ce>
 8000798:	f7043783          	ld	a5,-144(s0)
 800079c:	6b9c                	ld	a5,16(a5)
 800079e:	cb99                	beqz	a5,80007b4 <fdt_scan_helper+0x1ce>
 80007a0:	f7043783          	ld	a5,-144(s0)
 80007a4:	6b98                	ld	a4,16(a5)
 80007a6:	f7043783          	ld	a5,-144(s0)
 80007aa:	739c                	ld	a5,32(a5)
 80007ac:	85be                	mv	a1,a5
 80007ae:	f7843503          	ld	a0,-136(s0)
 80007b2:	9702                	jalr	a4
        last = 1;
 80007b4:	4785                	li	a5,1
 80007b6:	fcf42e23          	sw	a5,-36(s0)
        child.name = (const char *)(lex+1);
 80007ba:	f8843783          	ld	a5,-120(s0)
 80007be:	0791                	addi	a5,a5,4
 80007c0:	fcf43023          	sd	a5,-64(s0)
        if (cb->open) cb->open(&child, cb->extra);
 80007c4:	f7043783          	ld	a5,-144(s0)
 80007c8:	639c                	ld	a5,0(a5)
 80007ca:	cf81                	beqz	a5,80007e2 <fdt_scan_helper+0x1fc>
 80007cc:	f7043783          	ld	a5,-144(s0)
 80007d0:	6394                	ld	a3,0(a5)
 80007d2:	f7043783          	ld	a5,-144(s0)
 80007d6:	7398                	ld	a4,32(a5)
 80007d8:	fb840793          	addi	a5,s0,-72
 80007dc:	85ba                	mv	a1,a4
 80007de:	853e                	mv	a0,a5
 80007e0:	9682                	jalr	a3
        lex_next = fdt_scan_helper(
          lex + 2 + strlen(child.name)/4,
 80007e2:	fc043783          	ld	a5,-64(s0)
 80007e6:	853e                	mv	a0,a5
 80007e8:	5380b0ef          	jal	ra,800bd20 <strlen>
 80007ec:	87aa                	mv	a5,a0
 80007ee:	9bf1                	andi	a5,a5,-4
 80007f0:	07a1                	addi	a5,a5,8
        lex_next = fdt_scan_helper(
 80007f2:	f8843703          	ld	a4,-120(s0)
 80007f6:	97ba                	add	a5,a5,a4
 80007f8:	fb840713          	addi	a4,s0,-72
 80007fc:	f7043683          	ld	a3,-144(s0)
 8000800:	863a                	mv	a2,a4
 8000802:	f8043583          	ld	a1,-128(s0)
 8000806:	853e                	mv	a0,a5
 8000808:	ddfff0ef          	jal	ra,80005e6 <fdt_scan_helper>
 800080c:	fca43823          	sd	a0,-48(s0)
          strings, &child, cb);
        if (cb->close && cb->close(&child, cb->extra) == -1)
 8000810:	f7043783          	ld	a5,-144(s0)
 8000814:	6f9c                	ld	a5,24(a5)
 8000816:	c7a1                	beqz	a5,800085e <fdt_scan_helper+0x278>
 8000818:	f7043783          	ld	a5,-144(s0)
 800081c:	6f94                	ld	a3,24(a5)
 800081e:	f7043783          	ld	a5,-144(s0)
 8000822:	7398                	ld	a4,32(a5)
 8000824:	fb840793          	addi	a5,s0,-72
 8000828:	85ba                	mv	a1,a4
 800082a:	853e                	mv	a0,a5
 800082c:	9682                	jalr	a3
 800082e:	87aa                	mv	a5,a0
 8000830:	873e                	mv	a4,a5
 8000832:	57fd                	li	a5,-1
 8000834:	02f71563          	bne	a4,a5,800085e <fdt_scan_helper+0x278>
          while (lex != lex_next) *lex++ = bswap(FDT_NOP);
 8000838:	a829                	j	8000852 <fdt_scan_helper+0x26c>
 800083a:	f8843483          	ld	s1,-120(s0)
 800083e:	00448793          	addi	a5,s1,4
 8000842:	f8f43423          	sd	a5,-120(s0)
 8000846:	4511                	li	a0,4
 8000848:	d3dff0ef          	jal	ra,8000584 <bswap>
 800084c:	87aa                	mv	a5,a0
 800084e:	2781                	sext.w	a5,a5
 8000850:	c09c                	sw	a5,0(s1)
 8000852:	f8843703          	ld	a4,-120(s0)
 8000856:	fd043783          	ld	a5,-48(s0)
 800085a:	fef710e3          	bne	a4,a5,800083a <fdt_scan_helper+0x254>
        lex = lex_next;
 800085e:	fd043783          	ld	a5,-48(s0)
 8000862:	f8f43423          	sd	a5,-120(s0)
        break;
 8000866:	a095                	j	80008ca <fdt_scan_helper+0x2e4>
      }
      case FDT_END_NODE: {
        if (!last && node && cb->done) cb->done(node, cb->extra);
 8000868:	fdc42783          	lw	a5,-36(s0)
 800086c:	2781                	sext.w	a5,a5
 800086e:	e395                	bnez	a5,8000892 <fdt_scan_helper+0x2ac>
 8000870:	f7843783          	ld	a5,-136(s0)
 8000874:	cf99                	beqz	a5,8000892 <fdt_scan_helper+0x2ac>
 8000876:	f7043783          	ld	a5,-144(s0)
 800087a:	6b9c                	ld	a5,16(a5)
 800087c:	cb99                	beqz	a5,8000892 <fdt_scan_helper+0x2ac>
 800087e:	f7043783          	ld	a5,-144(s0)
 8000882:	6b98                	ld	a4,16(a5)
 8000884:	f7043783          	ld	a5,-144(s0)
 8000888:	739c                	ld	a5,32(a5)
 800088a:	85be                	mv	a1,a5
 800088c:	f7843503          	ld	a0,-136(s0)
 8000890:	9702                	jalr	a4
        return lex + 1;
 8000892:	f8843783          	ld	a5,-120(s0)
 8000896:	0791                	addi	a5,a5,4
 8000898:	a815                	j	80008cc <fdt_scan_helper+0x2e6>
      }
      default: { // FDT_END
        if (!last && node && cb->done) cb->done(node, cb->extra);
 800089a:	fdc42783          	lw	a5,-36(s0)
 800089e:	2781                	sext.w	a5,a5
 80008a0:	e395                	bnez	a5,80008c4 <fdt_scan_helper+0x2de>
 80008a2:	f7843783          	ld	a5,-136(s0)
 80008a6:	cf99                	beqz	a5,80008c4 <fdt_scan_helper+0x2de>
 80008a8:	f7043783          	ld	a5,-144(s0)
 80008ac:	6b9c                	ld	a5,16(a5)
 80008ae:	cb99                	beqz	a5,80008c4 <fdt_scan_helper+0x2de>
 80008b0:	f7043783          	ld	a5,-144(s0)
 80008b4:	6b98                	ld	a4,16(a5)
 80008b6:	f7043783          	ld	a5,-144(s0)
 80008ba:	739c                	ld	a5,32(a5)
 80008bc:	85be                	mv	a1,a5
 80008be:	f7843503          	ld	a0,-136(s0)
 80008c2:	9702                	jalr	a4
        return lex;
 80008c4:	f8843783          	ld	a5,-120(s0)
 80008c8:	a011                	j	80008cc <fdt_scan_helper+0x2e6>
    switch (bswap(lex[0])) {
 80008ca:	bb99                	j	8000620 <fdt_scan_helper+0x3a>
      }
    }
  }
}
 80008cc:	853e                	mv	a0,a5
 80008ce:	60aa                	ld	ra,136(sp)
 80008d0:	640a                	ld	s0,128(sp)
 80008d2:	74e6                	ld	s1,120(sp)
 80008d4:	6149                	addi	sp,sp,144
 80008d6:	8082                	ret

00000000080008d8 <fdt_scan>:

void fdt_scan(uintptr_t fdt, const struct fdt_cb *cb)
{
 80008d8:	7139                	addi	sp,sp,-64
 80008da:	fc06                	sd	ra,56(sp)
 80008dc:	f822                	sd	s0,48(sp)
 80008de:	0080                	addi	s0,sp,64
 80008e0:	fca43423          	sd	a0,-56(s0)
 80008e4:	fcb43023          	sd	a1,-64(s0)
  struct fdt_header *header = (struct fdt_header *)fdt;
 80008e8:	fc843783          	ld	a5,-56(s0)
 80008ec:	fef43423          	sd	a5,-24(s0)

  // Only process FDT that we understand
  if (bswap(header->magic) != FDT_MAGIC ||
 80008f0:	fe843783          	ld	a5,-24(s0)
 80008f4:	439c                	lw	a5,0(a5)
 80008f6:	853e                	mv	a0,a5
 80008f8:	c8dff0ef          	jal	ra,8000584 <bswap>
 80008fc:	87aa                	mv	a5,a0
 80008fe:	2781                	sext.w	a5,a5
 8000900:	873e                	mv	a4,a5
 8000902:	d00e07b7          	lui	a5,0xd00e0
 8000906:	eed78793          	addi	a5,a5,-275 # ffffffffd00dfeed <_payload_end+0xffffffffc7913f4d>
 800090a:	06f71863          	bne	a4,a5,800097a <fdt_scan+0xa2>
      bswap(header->last_comp_version) > FDT_VERSION) return;
 800090e:	fe843783          	ld	a5,-24(s0)
 8000912:	4f9c                	lw	a5,24(a5)
 8000914:	853e                	mv	a0,a5
 8000916:	c6fff0ef          	jal	ra,8000584 <bswap>
 800091a:	87aa                	mv	a5,a0
 800091c:	2781                	sext.w	a5,a5
  if (bswap(header->magic) != FDT_MAGIC ||
 800091e:	873e                	mv	a4,a5
 8000920:	47c5                	li	a5,17
 8000922:	04e7ec63          	bltu	a5,a4,800097a <fdt_scan+0xa2>

  const char *strings = (const char *)(fdt + bswap(header->off_dt_strings));
 8000926:	fe843783          	ld	a5,-24(s0)
 800092a:	47dc                	lw	a5,12(a5)
 800092c:	853e                	mv	a0,a5
 800092e:	c57ff0ef          	jal	ra,8000584 <bswap>
 8000932:	87aa                	mv	a5,a0
 8000934:	2781                	sext.w	a5,a5
 8000936:	02079713          	slli	a4,a5,0x20
 800093a:	9301                	srli	a4,a4,0x20
 800093c:	fc843783          	ld	a5,-56(s0)
 8000940:	97ba                	add	a5,a5,a4
 8000942:	fef43023          	sd	a5,-32(s0)
  uint32_t *lex = (uint32_t *)(fdt + bswap(header->off_dt_struct));
 8000946:	fe843783          	ld	a5,-24(s0)
 800094a:	479c                	lw	a5,8(a5)
 800094c:	853e                	mv	a0,a5
 800094e:	c37ff0ef          	jal	ra,8000584 <bswap>
 8000952:	87aa                	mv	a5,a0
 8000954:	2781                	sext.w	a5,a5
 8000956:	02079713          	slli	a4,a5,0x20
 800095a:	9301                	srli	a4,a4,0x20
 800095c:	fc843783          	ld	a5,-56(s0)
 8000960:	97ba                	add	a5,a5,a4
 8000962:	fcf43c23          	sd	a5,-40(s0)

  fdt_scan_helper(lex, strings, 0, cb);
 8000966:	fc043683          	ld	a3,-64(s0)
 800096a:	4601                	li	a2,0
 800096c:	fe043583          	ld	a1,-32(s0)
 8000970:	fd843503          	ld	a0,-40(s0)
 8000974:	c73ff0ef          	jal	ra,80005e6 <fdt_scan_helper>
 8000978:	a011                	j	800097c <fdt_scan+0xa4>
      bswap(header->last_comp_version) > FDT_VERSION) return;
 800097a:	0001                	nop
}
 800097c:	70e2                	ld	ra,56(sp)
 800097e:	7442                	ld	s0,48(sp)
 8000980:	6121                	addi	sp,sp,64
 8000982:	8082                	ret

0000000008000984 <fdt_size>:

uint32_t fdt_size(uintptr_t fdt)
{
 8000984:	7179                	addi	sp,sp,-48
 8000986:	f406                	sd	ra,40(sp)
 8000988:	f022                	sd	s0,32(sp)
 800098a:	1800                	addi	s0,sp,48
 800098c:	fca43c23          	sd	a0,-40(s0)
  struct fdt_header *header = (struct fdt_header *)fdt;
 8000990:	fd843783          	ld	a5,-40(s0)
 8000994:	fef43423          	sd	a5,-24(s0)

  // Only process FDT that we understand
  if (bswap(header->magic) != FDT_MAGIC ||
 8000998:	fe843783          	ld	a5,-24(s0)
 800099c:	439c                	lw	a5,0(a5)
 800099e:	853e                	mv	a0,a5
 80009a0:	be5ff0ef          	jal	ra,8000584 <bswap>
 80009a4:	87aa                	mv	a5,a0
 80009a6:	2781                	sext.w	a5,a5
 80009a8:	873e                	mv	a4,a5
 80009aa:	d00e07b7          	lui	a5,0xd00e0
 80009ae:	eed78793          	addi	a5,a5,-275 # ffffffffd00dfeed <_payload_end+0xffffffffc7913f4d>
 80009b2:	00f71e63          	bne	a4,a5,80009ce <fdt_size+0x4a>
      bswap(header->last_comp_version) > FDT_VERSION) return 0;
 80009b6:	fe843783          	ld	a5,-24(s0)
 80009ba:	4f9c                	lw	a5,24(a5)
 80009bc:	853e                	mv	a0,a5
 80009be:	bc7ff0ef          	jal	ra,8000584 <bswap>
 80009c2:	87aa                	mv	a5,a0
 80009c4:	2781                	sext.w	a5,a5
  if (bswap(header->magic) != FDT_MAGIC ||
 80009c6:	873e                	mv	a4,a5
 80009c8:	47c5                	li	a5,17
 80009ca:	00e7f463          	bleu	a4,a5,80009d2 <fdt_size+0x4e>
      bswap(header->last_comp_version) > FDT_VERSION) return 0;
 80009ce:	4781                	li	a5,0
 80009d0:	a809                	j	80009e2 <fdt_size+0x5e>
  return bswap(header->totalsize);
 80009d2:	fe843783          	ld	a5,-24(s0)
 80009d6:	43dc                	lw	a5,4(a5)
 80009d8:	853e                	mv	a0,a5
 80009da:	babff0ef          	jal	ra,8000584 <bswap>
 80009de:	87aa                	mv	a5,a0
 80009e0:	2781                	sext.w	a5,a5
}
 80009e2:	853e                	mv	a0,a5
 80009e4:	70a2                	ld	ra,40(sp)
 80009e6:	7402                	ld	s0,32(sp)
 80009e8:	6145                	addi	sp,sp,48
 80009ea:	8082                	ret

00000000080009ec <fdt_get_address>:

const uint32_t *fdt_get_address(const struct fdt_scan_node *node, const uint32_t *value, uint64_t *result)
{
 80009ec:	715d                	addi	sp,sp,-80
 80009ee:	e486                	sd	ra,72(sp)
 80009f0:	e0a2                	sd	s0,64(sp)
 80009f2:	fc26                	sd	s1,56(sp)
 80009f4:	0880                	addi	s0,sp,80
 80009f6:	fca43423          	sd	a0,-56(s0)
 80009fa:	fcb43023          	sd	a1,-64(s0)
 80009fe:	fac43c23          	sd	a2,-72(s0)
  *result = 0;
 8000a02:	fb843783          	ld	a5,-72(s0)
 8000a06:	0007b023          	sd	zero,0(a5)
  for (int cells = node->address_cells; cells > 0; --cells)
 8000a0a:	fc843783          	ld	a5,-56(s0)
 8000a0e:	4b9c                	lw	a5,16(a5)
 8000a10:	fcf42e23          	sw	a5,-36(s0)
 8000a14:	a835                	j	8000a50 <fdt_get_address+0x64>
    *result = (*result << 32) + bswap(*value++);
 8000a16:	fb843783          	ld	a5,-72(s0)
 8000a1a:	639c                	ld	a5,0(a5)
 8000a1c:	02079493          	slli	s1,a5,0x20
 8000a20:	fc043783          	ld	a5,-64(s0)
 8000a24:	00478713          	addi	a4,a5,4
 8000a28:	fce43023          	sd	a4,-64(s0)
 8000a2c:	439c                	lw	a5,0(a5)
 8000a2e:	853e                	mv	a0,a5
 8000a30:	b55ff0ef          	jal	ra,8000584 <bswap>
 8000a34:	87aa                	mv	a5,a0
 8000a36:	2781                	sext.w	a5,a5
 8000a38:	1782                	slli	a5,a5,0x20
 8000a3a:	9381                	srli	a5,a5,0x20
 8000a3c:	00f48733          	add	a4,s1,a5
 8000a40:	fb843783          	ld	a5,-72(s0)
 8000a44:	e398                	sd	a4,0(a5)
  for (int cells = node->address_cells; cells > 0; --cells)
 8000a46:	fdc42783          	lw	a5,-36(s0)
 8000a4a:	37fd                	addiw	a5,a5,-1
 8000a4c:	fcf42e23          	sw	a5,-36(s0)
 8000a50:	fdc42783          	lw	a5,-36(s0)
 8000a54:	2781                	sext.w	a5,a5
 8000a56:	fcf040e3          	bgtz	a5,8000a16 <fdt_get_address+0x2a>
  return value;
 8000a5a:	fc043783          	ld	a5,-64(s0)
}
 8000a5e:	853e                	mv	a0,a5
 8000a60:	60a6                	ld	ra,72(sp)
 8000a62:	6406                	ld	s0,64(sp)
 8000a64:	74e2                	ld	s1,56(sp)
 8000a66:	6161                	addi	sp,sp,80
 8000a68:	8082                	ret

0000000008000a6a <fdt_get_size>:

const uint32_t *fdt_get_size(const struct fdt_scan_node *node, const uint32_t *value, uint64_t *result)
{
 8000a6a:	715d                	addi	sp,sp,-80
 8000a6c:	e486                	sd	ra,72(sp)
 8000a6e:	e0a2                	sd	s0,64(sp)
 8000a70:	fc26                	sd	s1,56(sp)
 8000a72:	0880                	addi	s0,sp,80
 8000a74:	fca43423          	sd	a0,-56(s0)
 8000a78:	fcb43023          	sd	a1,-64(s0)
 8000a7c:	fac43c23          	sd	a2,-72(s0)
  *result = 0;
 8000a80:	fb843783          	ld	a5,-72(s0)
 8000a84:	0007b023          	sd	zero,0(a5)
  for (int cells = node->size_cells; cells > 0; --cells)
 8000a88:	fc843783          	ld	a5,-56(s0)
 8000a8c:	4bdc                	lw	a5,20(a5)
 8000a8e:	fcf42e23          	sw	a5,-36(s0)
 8000a92:	a835                	j	8000ace <fdt_get_size+0x64>
    *result = (*result << 32) + bswap(*value++);
 8000a94:	fb843783          	ld	a5,-72(s0)
 8000a98:	639c                	ld	a5,0(a5)
 8000a9a:	02079493          	slli	s1,a5,0x20
 8000a9e:	fc043783          	ld	a5,-64(s0)
 8000aa2:	00478713          	addi	a4,a5,4
 8000aa6:	fce43023          	sd	a4,-64(s0)
 8000aaa:	439c                	lw	a5,0(a5)
 8000aac:	853e                	mv	a0,a5
 8000aae:	ad7ff0ef          	jal	ra,8000584 <bswap>
 8000ab2:	87aa                	mv	a5,a0
 8000ab4:	2781                	sext.w	a5,a5
 8000ab6:	1782                	slli	a5,a5,0x20
 8000ab8:	9381                	srli	a5,a5,0x20
 8000aba:	00f48733          	add	a4,s1,a5
 8000abe:	fb843783          	ld	a5,-72(s0)
 8000ac2:	e398                	sd	a4,0(a5)
  for (int cells = node->size_cells; cells > 0; --cells)
 8000ac4:	fdc42783          	lw	a5,-36(s0)
 8000ac8:	37fd                	addiw	a5,a5,-1
 8000aca:	fcf42e23          	sw	a5,-36(s0)
 8000ace:	fdc42783          	lw	a5,-36(s0)
 8000ad2:	2781                	sext.w	a5,a5
 8000ad4:	fcf040e3          	bgtz	a5,8000a94 <fdt_get_size+0x2a>
  return value;
 8000ad8:	fc043783          	ld	a5,-64(s0)
}
 8000adc:	853e                	mv	a0,a5
 8000ade:	60a6                	ld	ra,72(sp)
 8000ae0:	6406                	ld	s0,64(sp)
 8000ae2:	74e2                	ld	s1,56(sp)
 8000ae4:	6161                	addi	sp,sp,80
 8000ae6:	8082                	ret

0000000008000ae8 <fdt_get_value>:

uint32_t fdt_get_value(const struct fdt_scan_prop *prop, uint32_t index)
{
 8000ae8:	1101                	addi	sp,sp,-32
 8000aea:	ec06                	sd	ra,24(sp)
 8000aec:	e822                	sd	s0,16(sp)
 8000aee:	1000                	addi	s0,sp,32
 8000af0:	fea43423          	sd	a0,-24(s0)
 8000af4:	87ae                	mv	a5,a1
 8000af6:	fef42223          	sw	a5,-28(s0)
  return bswap(prop->value[index]);
 8000afa:	fe843783          	ld	a5,-24(s0)
 8000afe:	6b98                	ld	a4,16(a5)
 8000b00:	fe446783          	lwu	a5,-28(s0)
 8000b04:	078a                	slli	a5,a5,0x2
 8000b06:	97ba                	add	a5,a5,a4
 8000b08:	439c                	lw	a5,0(a5)
 8000b0a:	853e                	mv	a0,a5
 8000b0c:	a79ff0ef          	jal	ra,8000584 <bswap>
 8000b10:	87aa                	mv	a5,a0
 8000b12:	2781                	sext.w	a5,a5
}
 8000b14:	853e                	mv	a0,a5
 8000b16:	60e2                	ld	ra,24(sp)
 8000b18:	6442                	ld	s0,16(sp)
 8000b1a:	6105                	addi	sp,sp,32
 8000b1c:	8082                	ret

0000000008000b1e <fdt_string_list_index>:

int fdt_string_list_index(const struct fdt_scan_prop *prop, const char *str)
{
 8000b1e:	7139                	addi	sp,sp,-64
 8000b20:	fc06                	sd	ra,56(sp)
 8000b22:	f822                	sd	s0,48(sp)
 8000b24:	0080                	addi	s0,sp,64
 8000b26:	fca43423          	sd	a0,-56(s0)
 8000b2a:	fcb43023          	sd	a1,-64(s0)
  const char *list = (const char *)prop->value;
 8000b2e:	fc843783          	ld	a5,-56(s0)
 8000b32:	6b9c                	ld	a5,16(a5)
 8000b34:	fef43423          	sd	a5,-24(s0)
  const char *end = list + prop->len;
 8000b38:	fc843783          	ld	a5,-56(s0)
 8000b3c:	4f9c                	lw	a5,24(a5)
 8000b3e:	873e                	mv	a4,a5
 8000b40:	fe843783          	ld	a5,-24(s0)
 8000b44:	97ba                	add	a5,a5,a4
 8000b46:	fcf43c23          	sd	a5,-40(s0)
  int index = 0;
 8000b4a:	fe042223          	sw	zero,-28(s0)
  while (end - list > 0) {
 8000b4e:	a825                	j	8000b86 <fdt_string_list_index+0x68>
    if (!strcmp(list, str)) return index;
 8000b50:	fc043583          	ld	a1,-64(s0)
 8000b54:	fe843503          	ld	a0,-24(s0)
 8000b58:	2040b0ef          	jal	ra,800bd5c <strcmp>
 8000b5c:	87aa                	mv	a5,a0
 8000b5e:	e781                	bnez	a5,8000b66 <fdt_string_list_index+0x48>
 8000b60:	fe442783          	lw	a5,-28(s0)
 8000b64:	a815                	j	8000b98 <fdt_string_list_index+0x7a>
    ++index;
 8000b66:	fe442783          	lw	a5,-28(s0)
 8000b6a:	2785                	addiw	a5,a5,1
 8000b6c:	fef42223          	sw	a5,-28(s0)
    list += strlen(list) + 1;
 8000b70:	fe843503          	ld	a0,-24(s0)
 8000b74:	1ac0b0ef          	jal	ra,800bd20 <strlen>
 8000b78:	87aa                	mv	a5,a0
 8000b7a:	0785                	addi	a5,a5,1
 8000b7c:	fe843703          	ld	a4,-24(s0)
 8000b80:	97ba                	add	a5,a5,a4
 8000b82:	fef43423          	sd	a5,-24(s0)
  while (end - list > 0) {
 8000b86:	fd843703          	ld	a4,-40(s0)
 8000b8a:	fe843783          	ld	a5,-24(s0)
 8000b8e:	40f707b3          	sub	a5,a4,a5
 8000b92:	faf04fe3          	bgtz	a5,8000b50 <fdt_string_list_index+0x32>
  }
  return -1;
 8000b96:	57fd                	li	a5,-1
}
 8000b98:	853e                	mv	a0,a5
 8000b9a:	70e2                	ld	ra,56(sp)
 8000b9c:	7442                	ld	s0,48(sp)
 8000b9e:	6121                	addi	sp,sp,64
 8000ba0:	8082                	ret

0000000008000ba2 <mem_open>:
  const uint32_t *reg_value;
  int reg_len;
};

static void mem_open(const struct fdt_scan_node *node, void *extra)
{
 8000ba2:	7179                	addi	sp,sp,-48
 8000ba4:	f406                	sd	ra,40(sp)
 8000ba6:	f022                	sd	s0,32(sp)
 8000ba8:	1800                	addi	s0,sp,48
 8000baa:	fca43c23          	sd	a0,-40(s0)
 8000bae:	fcb43823          	sd	a1,-48(s0)
  struct mem_scan *scan = (struct mem_scan *)extra;
 8000bb2:	fd043783          	ld	a5,-48(s0)
 8000bb6:	fef43423          	sd	a5,-24(s0)
  memset(scan, 0, sizeof(*scan));
 8000bba:	4661                	li	a2,24
 8000bbc:	4581                	li	a1,0
 8000bbe:	fe843503          	ld	a0,-24(s0)
 8000bc2:	0900b0ef          	jal	ra,800bc52 <memset>
}
 8000bc6:	0001                	nop
 8000bc8:	70a2                	ld	ra,40(sp)
 8000bca:	7402                	ld	s0,32(sp)
 8000bcc:	6145                	addi	sp,sp,48
 8000bce:	8082                	ret

0000000008000bd0 <mem_prop>:

static void mem_prop(const struct fdt_scan_prop *prop, void *extra)
{
 8000bd0:	7179                	addi	sp,sp,-48
 8000bd2:	f406                	sd	ra,40(sp)
 8000bd4:	f022                	sd	s0,32(sp)
 8000bd6:	1800                	addi	s0,sp,48
 8000bd8:	fca43c23          	sd	a0,-40(s0)
 8000bdc:	fcb43823          	sd	a1,-48(s0)
  struct mem_scan *scan = (struct mem_scan *)extra;
 8000be0:	fd043783          	ld	a5,-48(s0)
 8000be4:	fef43423          	sd	a5,-24(s0)
  if (!strcmp(prop->name, "device_type") && !strcmp((const char*)prop->value, "memory")) {
 8000be8:	fd843783          	ld	a5,-40(s0)
 8000bec:	679c                	ld	a5,8(a5)
 8000bee:	0000b597          	auipc	a1,0xb
 8000bf2:	38a58593          	addi	a1,a1,906 # 800bf78 <atol+0x162>
 8000bf6:	853e                	mv	a0,a5
 8000bf8:	1640b0ef          	jal	ra,800bd5c <strcmp>
 8000bfc:	87aa                	mv	a5,a0
 8000bfe:	e395                	bnez	a5,8000c22 <mem_prop+0x52>
 8000c00:	fd843783          	ld	a5,-40(s0)
 8000c04:	6b9c                	ld	a5,16(a5)
 8000c06:	0000b597          	auipc	a1,0xb
 8000c0a:	38258593          	addi	a1,a1,898 # 800bf88 <atol+0x172>
 8000c0e:	853e                	mv	a0,a5
 8000c10:	14c0b0ef          	jal	ra,800bd5c <strcmp>
 8000c14:	87aa                	mv	a5,a0
 8000c16:	e791                	bnez	a5,8000c22 <mem_prop+0x52>
    scan->memory = 1;
 8000c18:	fe843783          	ld	a5,-24(s0)
 8000c1c:	4705                	li	a4,1
 8000c1e:	c398                	sw	a4,0(a5)
  } else if (!strcmp(prop->name, "reg")) {
    scan->reg_value = prop->value;
    scan->reg_len = prop->len;
  }
}
 8000c20:	a80d                	j	8000c52 <mem_prop+0x82>
  } else if (!strcmp(prop->name, "reg")) {
 8000c22:	fd843783          	ld	a5,-40(s0)
 8000c26:	679c                	ld	a5,8(a5)
 8000c28:	0000b597          	auipc	a1,0xb
 8000c2c:	36858593          	addi	a1,a1,872 # 800bf90 <atol+0x17a>
 8000c30:	853e                	mv	a0,a5
 8000c32:	12a0b0ef          	jal	ra,800bd5c <strcmp>
 8000c36:	87aa                	mv	a5,a0
 8000c38:	ef89                	bnez	a5,8000c52 <mem_prop+0x82>
    scan->reg_value = prop->value;
 8000c3a:	fd843783          	ld	a5,-40(s0)
 8000c3e:	6b98                	ld	a4,16(a5)
 8000c40:	fe843783          	ld	a5,-24(s0)
 8000c44:	e798                	sd	a4,8(a5)
    scan->reg_len = prop->len;
 8000c46:	fd843783          	ld	a5,-40(s0)
 8000c4a:	4f98                	lw	a4,24(a5)
 8000c4c:	fe843783          	ld	a5,-24(s0)
 8000c50:	cb98                	sw	a4,16(a5)
}
 8000c52:	0001                	nop
 8000c54:	70a2                	ld	ra,40(sp)
 8000c56:	7402                	ld	s0,32(sp)
 8000c58:	6145                	addi	sp,sp,48
 8000c5a:	8082                	ret

0000000008000c5c <mem_done>:

static void mem_done(const struct fdt_scan_node *node, void *extra)
{
 8000c5c:	715d                	addi	sp,sp,-80
 8000c5e:	e486                	sd	ra,72(sp)
 8000c60:	e0a2                	sd	s0,64(sp)
 8000c62:	0880                	addi	s0,sp,80
 8000c64:	faa43c23          	sd	a0,-72(s0)
 8000c68:	fab43823          	sd	a1,-80(s0)
  struct mem_scan *scan = (struct mem_scan *)extra;
 8000c6c:	fb043783          	ld	a5,-80(s0)
 8000c70:	fef43023          	sd	a5,-32(s0)
  const uint32_t *value = scan->reg_value;
 8000c74:	fe043783          	ld	a5,-32(s0)
 8000c78:	679c                	ld	a5,8(a5)
 8000c7a:	fef43423          	sd	a5,-24(s0)
  const uint32_t *end = value + scan->reg_len/4;
 8000c7e:	fe043783          	ld	a5,-32(s0)
 8000c82:	4b9c                	lw	a5,16(a5)
 8000c84:	41f7d71b          	sraiw	a4,a5,0x1f
 8000c88:	01e7571b          	srliw	a4,a4,0x1e
 8000c8c:	9fb9                	addw	a5,a5,a4
 8000c8e:	4027d79b          	sraiw	a5,a5,0x2
 8000c92:	2781                	sext.w	a5,a5
 8000c94:	078a                	slli	a5,a5,0x2
 8000c96:	fe843703          	ld	a4,-24(s0)
 8000c9a:	97ba                	add	a5,a5,a4
 8000c9c:	fcf43c23          	sd	a5,-40(s0)
  uintptr_t self = (uintptr_t)mem_done;
 8000ca0:	00000797          	auipc	a5,0x0
 8000ca4:	fbc78793          	addi	a5,a5,-68 # 8000c5c <mem_done>
 8000ca8:	fcf43823          	sd	a5,-48(s0)

  if (!scan->memory) return;
 8000cac:	fe043783          	ld	a5,-32(s0)
 8000cb0:	439c                	lw	a5,0(a5)
 8000cb2:	0e078563          	beqz	a5,8000d9c <mem_done+0x140>
  assert (scan->reg_value && scan->reg_len % 4 == 0);
 8000cb6:	fe043783          	ld	a5,-32(s0)
 8000cba:	679c                	ld	a5,8(a5)
 8000cbc:	cb81                	beqz	a5,8000ccc <mem_done+0x70>
 8000cbe:	fe043783          	ld	a5,-32(s0)
 8000cc2:	4b9c                	lw	a5,16(a5)
 8000cc4:	2781                	sext.w	a5,a5
 8000cc6:	8b8d                	andi	a5,a5,3
 8000cc8:	2781                	sext.w	a5,a5
 8000cca:	c7d1                	beqz	a5,8000d56 <mem_done+0xfa>
 8000ccc:	0000b697          	auipc	a3,0xb
 8000cd0:	2cc68693          	addi	a3,a3,716 # 800bf98 <atol+0x182>
 8000cd4:	0b900613          	li	a2,185
 8000cd8:	0000b597          	auipc	a1,0xb
 8000cdc:	24858593          	addi	a1,a1,584 # 800bf20 <atol+0x10a>
 8000ce0:	0000b517          	auipc	a0,0xb
 8000ce4:	25850513          	addi	a0,a0,600 # 800bf38 <atol+0x122>
 8000ce8:	69a010ef          	jal	ra,8002382 <printm>
 8000cec:	67c1                	lui	a5,0x10
 8000cee:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7ff0001>
 8000cf2:	4db010ef          	jal	ra,80029cc <poweroff>

  while (end - value > 0) {
    uint64_t base, size;
    value = fdt_get_address(node->parent, value, &base);
 8000cf6:	fb843783          	ld	a5,-72(s0)
 8000cfa:	639c                	ld	a5,0(a5)
 8000cfc:	fc840713          	addi	a4,s0,-56
 8000d00:	863a                	mv	a2,a4
 8000d02:	fe843583          	ld	a1,-24(s0)
 8000d06:	853e                	mv	a0,a5
 8000d08:	ce5ff0ef          	jal	ra,80009ec <fdt_get_address>
 8000d0c:	fea43423          	sd	a0,-24(s0)
    value = fdt_get_size   (node->parent, value, &size);
 8000d10:	fb843783          	ld	a5,-72(s0)
 8000d14:	639c                	ld	a5,0(a5)
 8000d16:	fc040713          	addi	a4,s0,-64
 8000d1a:	863a                	mv	a2,a4
 8000d1c:	fe843583          	ld	a1,-24(s0)
 8000d20:	853e                	mv	a0,a5
 8000d22:	d49ff0ef          	jal	ra,8000a6a <fdt_get_size>
 8000d26:	fea43423          	sd	a0,-24(s0)
    if (base <= self && self <= base + size) { mem_size = size; }
 8000d2a:	fc843783          	ld	a5,-56(s0)
 8000d2e:	fd043703          	ld	a4,-48(s0)
 8000d32:	02f76263          	bltu	a4,a5,8000d56 <mem_done+0xfa>
 8000d36:	fc843703          	ld	a4,-56(s0)
 8000d3a:	fc043783          	ld	a5,-64(s0)
 8000d3e:	97ba                	add	a5,a5,a4
 8000d40:	fd043703          	ld	a4,-48(s0)
 8000d44:	00e7e963          	bltu	a5,a4,8000d56 <mem_done+0xfa>
 8000d48:	fc043703          	ld	a4,-64(s0)
 8000d4c:	00017797          	auipc	a5,0x17
 8000d50:	2d478793          	addi	a5,a5,724 # 8018020 <mem_size>
 8000d54:	e398                	sd	a4,0(a5)
  while (end - value > 0) {
 8000d56:	fd843703          	ld	a4,-40(s0)
 8000d5a:	fe843783          	ld	a5,-24(s0)
 8000d5e:	40f707b3          	sub	a5,a4,a5
 8000d62:	f8f04ae3          	bgtz	a5,8000cf6 <mem_done+0x9a>
  }
  assert (end == value);
 8000d66:	fd843703          	ld	a4,-40(s0)
 8000d6a:	fe843783          	ld	a5,-24(s0)
 8000d6e:	02f70863          	beq	a4,a5,8000d9e <mem_done+0x142>
 8000d72:	0000b697          	auipc	a3,0xb
 8000d76:	25668693          	addi	a3,a3,598 # 800bfc8 <atol+0x1b2>
 8000d7a:	0c100613          	li	a2,193
 8000d7e:	0000b597          	auipc	a1,0xb
 8000d82:	1a258593          	addi	a1,a1,418 # 800bf20 <atol+0x10a>
 8000d86:	0000b517          	auipc	a0,0xb
 8000d8a:	1b250513          	addi	a0,a0,434 # 800bf38 <atol+0x122>
 8000d8e:	5f4010ef          	jal	ra,8002382 <printm>
 8000d92:	67c1                	lui	a5,0x10
 8000d94:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7ff0001>
 8000d98:	435010ef          	jal	ra,80029cc <poweroff>
  if (!scan->memory) return;
 8000d9c:	0001                	nop
}
 8000d9e:	60a6                	ld	ra,72(sp)
 8000da0:	6406                	ld	s0,64(sp)
 8000da2:	6161                	addi	sp,sp,80
 8000da4:	8082                	ret

0000000008000da6 <query_mem>:

void query_mem(uintptr_t fdt)
{
 8000da6:	711d                	addi	sp,sp,-96
 8000da8:	ec86                	sd	ra,88(sp)
 8000daa:	e8a2                	sd	s0,80(sp)
 8000dac:	1080                	addi	s0,sp,96
 8000dae:	faa43423          	sd	a0,-88(s0)
  struct fdt_cb cb;
  struct mem_scan scan;

  memset(&cb, 0, sizeof(cb));
 8000db2:	fc840793          	addi	a5,s0,-56
 8000db6:	02800613          	li	a2,40
 8000dba:	4581                	li	a1,0
 8000dbc:	853e                	mv	a0,a5
 8000dbe:	6950a0ef          	jal	ra,800bc52 <memset>
  cb.open = mem_open;
 8000dc2:	00000797          	auipc	a5,0x0
 8000dc6:	de078793          	addi	a5,a5,-544 # 8000ba2 <mem_open>
 8000dca:	fcf43423          	sd	a5,-56(s0)
  cb.prop = mem_prop;
 8000dce:	00000797          	auipc	a5,0x0
 8000dd2:	e0278793          	addi	a5,a5,-510 # 8000bd0 <mem_prop>
 8000dd6:	fcf43823          	sd	a5,-48(s0)
  cb.done = mem_done;
 8000dda:	00000797          	auipc	a5,0x0
 8000dde:	e8278793          	addi	a5,a5,-382 # 8000c5c <mem_done>
 8000de2:	fcf43c23          	sd	a5,-40(s0)
  cb.extra = &scan;
 8000de6:	fb040793          	addi	a5,s0,-80
 8000dea:	fef43423          	sd	a5,-24(s0)

  mem_size = 0;
 8000dee:	00017797          	auipc	a5,0x17
 8000df2:	23278793          	addi	a5,a5,562 # 8018020 <mem_size>
 8000df6:	0007b023          	sd	zero,0(a5)
  fdt_scan(fdt, &cb);
 8000dfa:	fc840793          	addi	a5,s0,-56
 8000dfe:	85be                	mv	a1,a5
 8000e00:	fa843503          	ld	a0,-88(s0)
 8000e04:	ad5ff0ef          	jal	ra,80008d8 <fdt_scan>
  assert (mem_size > 0);
 8000e08:	00017797          	auipc	a5,0x17
 8000e0c:	21878793          	addi	a5,a5,536 # 8018020 <mem_size>
 8000e10:	639c                	ld	a5,0(a5)
 8000e12:	e795                	bnez	a5,8000e3e <query_mem+0x98>
 8000e14:	0000b697          	auipc	a3,0xb
 8000e18:	1c468693          	addi	a3,a3,452 # 800bfd8 <atol+0x1c2>
 8000e1c:	0d100613          	li	a2,209
 8000e20:	0000b597          	auipc	a1,0xb
 8000e24:	10058593          	addi	a1,a1,256 # 800bf20 <atol+0x10a>
 8000e28:	0000b517          	auipc	a0,0xb
 8000e2c:	11050513          	addi	a0,a0,272 # 800bf38 <atol+0x122>
 8000e30:	552010ef          	jal	ra,8002382 <printm>
 8000e34:	67c1                	lui	a5,0x10
 8000e36:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7ff0001>
 8000e3a:	393010ef          	jal	ra,80029cc <poweroff>
}
 8000e3e:	0001                	nop
 8000e40:	60e6                	ld	ra,88(sp)
 8000e42:	6446                	ld	s0,80(sp)
 8000e44:	6125                	addi	sp,sp,96
 8000e46:	8082                	ret

0000000008000e48 <hart_open>:
  int cells;
  uint32_t phandle;
};

static void hart_open(const struct fdt_scan_node *node, void *extra)
{
 8000e48:	7179                	addi	sp,sp,-48
 8000e4a:	f422                	sd	s0,40(sp)
 8000e4c:	1800                	addi	s0,sp,48
 8000e4e:	fca43c23          	sd	a0,-40(s0)
 8000e52:	fcb43823          	sd	a1,-48(s0)
  struct hart_scan *scan = (struct hart_scan *)extra;
 8000e56:	fd043783          	ld	a5,-48(s0)
 8000e5a:	fef43423          	sd	a5,-24(s0)
  if (!scan->cpu) {
 8000e5e:	fe843783          	ld	a5,-24(s0)
 8000e62:	639c                	ld	a5,0(a5)
 8000e64:	e789                	bnez	a5,8000e6e <hart_open+0x26>
    scan->hart = -1;
 8000e66:	fe843783          	ld	a5,-24(s0)
 8000e6a:	577d                	li	a4,-1
 8000e6c:	c798                	sw	a4,8(a5)
  }
  if (!scan->controller) {
 8000e6e:	fe843783          	ld	a5,-24(s0)
 8000e72:	6b9c                	ld	a5,16(a5)
 8000e74:	eb89                	bnez	a5,8000e86 <hart_open+0x3e>
    scan->cells = 0;
 8000e76:	fe843783          	ld	a5,-24(s0)
 8000e7a:	0007ac23          	sw	zero,24(a5)
    scan->phandle = 0;
 8000e7e:	fe843783          	ld	a5,-24(s0)
 8000e82:	0007ae23          	sw	zero,28(a5)
  }
}
 8000e86:	0001                	nop
 8000e88:	7422                	ld	s0,40(sp)
 8000e8a:	6145                	addi	sp,sp,48
 8000e8c:	8082                	ret

0000000008000e8e <hart_prop>:

static void hart_prop(const struct fdt_scan_prop *prop, void *extra)
{
 8000e8e:	7179                	addi	sp,sp,-48
 8000e90:	f406                	sd	ra,40(sp)
 8000e92:	f022                	sd	s0,32(sp)
 8000e94:	1800                	addi	s0,sp,48
 8000e96:	fca43c23          	sd	a0,-40(s0)
 8000e9a:	fcb43823          	sd	a1,-48(s0)
  struct hart_scan *scan = (struct hart_scan *)extra;
 8000e9e:	fd043783          	ld	a5,-48(s0)
 8000ea2:	fef43423          	sd	a5,-24(s0)
  if (!strcmp(prop->name, "device_type") && !strcmp((const char*)prop->value, "cpu")) {
 8000ea6:	fd843783          	ld	a5,-40(s0)
 8000eaa:	679c                	ld	a5,8(a5)
 8000eac:	0000b597          	auipc	a1,0xb
 8000eb0:	0cc58593          	addi	a1,a1,204 # 800bf78 <atol+0x162>
 8000eb4:	853e                	mv	a0,a5
 8000eb6:	6a70a0ef          	jal	ra,800bd5c <strcmp>
 8000eba:	87aa                	mv	a5,a0
 8000ebc:	efa9                	bnez	a5,8000f16 <hart_prop+0x88>
 8000ebe:	fd843783          	ld	a5,-40(s0)
 8000ec2:	6b9c                	ld	a5,16(a5)
 8000ec4:	0000b597          	auipc	a1,0xb
 8000ec8:	12458593          	addi	a1,a1,292 # 800bfe8 <atol+0x1d2>
 8000ecc:	853e                	mv	a0,a5
 8000ece:	68f0a0ef          	jal	ra,800bd5c <strcmp>
 8000ed2:	87aa                	mv	a5,a0
 8000ed4:	e3a9                	bnez	a5,8000f16 <hart_prop+0x88>
    assert (!scan->cpu);
 8000ed6:	fe843783          	ld	a5,-24(s0)
 8000eda:	639c                	ld	a5,0(a5)
 8000edc:	c795                	beqz	a5,8000f08 <hart_prop+0x7a>
 8000ede:	0000b697          	auipc	a3,0xb
 8000ee2:	11268693          	addi	a3,a3,274 # 800bff0 <atol+0x1da>
 8000ee6:	0f100613          	li	a2,241
 8000eea:	0000b597          	auipc	a1,0xb
 8000eee:	03658593          	addi	a1,a1,54 # 800bf20 <atol+0x10a>
 8000ef2:	0000b517          	auipc	a0,0xb
 8000ef6:	04650513          	addi	a0,a0,70 # 800bf38 <atol+0x122>
 8000efa:	488010ef          	jal	ra,8002382 <printm>
 8000efe:	67c1                	lui	a5,0x10
 8000f00:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7ff0001>
 8000f04:	2c9010ef          	jal	ra,80029cc <poweroff>
    scan->cpu = prop->node;
 8000f08:	fd843783          	ld	a5,-40(s0)
 8000f0c:	6398                	ld	a4,0(a5)
 8000f0e:	fe843783          	ld	a5,-24(s0)
 8000f12:	e398                	sd	a4,0(a5)
  } else if (!strcmp(prop->name, "reg")) {
    uint64_t reg;
    fdt_get_address(prop->node->parent, prop->value, &reg);
    scan->hart = reg;
  }
}
 8000f14:	a219                	j	800101a <hart_prop+0x18c>
  } else if (!strcmp(prop->name, "interrupt-controller")) {
 8000f16:	fd843783          	ld	a5,-40(s0)
 8000f1a:	679c                	ld	a5,8(a5)
 8000f1c:	0000b597          	auipc	a1,0xb
 8000f20:	0e458593          	addi	a1,a1,228 # 800c000 <atol+0x1ea>
 8000f24:	853e                	mv	a0,a5
 8000f26:	6370a0ef          	jal	ra,800bd5c <strcmp>
 8000f2a:	87aa                	mv	a5,a0
 8000f2c:	e3a9                	bnez	a5,8000f6e <hart_prop+0xe0>
    assert (!scan->controller);
 8000f2e:	fe843783          	ld	a5,-24(s0)
 8000f32:	6b9c                	ld	a5,16(a5)
 8000f34:	c795                	beqz	a5,8000f60 <hart_prop+0xd2>
 8000f36:	0000b697          	auipc	a3,0xb
 8000f3a:	0e268693          	addi	a3,a3,226 # 800c018 <atol+0x202>
 8000f3e:	0f400613          	li	a2,244
 8000f42:	0000b597          	auipc	a1,0xb
 8000f46:	fde58593          	addi	a1,a1,-34 # 800bf20 <atol+0x10a>
 8000f4a:	0000b517          	auipc	a0,0xb
 8000f4e:	fee50513          	addi	a0,a0,-18 # 800bf38 <atol+0x122>
 8000f52:	430010ef          	jal	ra,8002382 <printm>
 8000f56:	67c1                	lui	a5,0x10
 8000f58:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7ff0001>
 8000f5c:	271010ef          	jal	ra,80029cc <poweroff>
    scan->controller = prop->node;
 8000f60:	fd843783          	ld	a5,-40(s0)
 8000f64:	6398                	ld	a4,0(a5)
 8000f66:	fe843783          	ld	a5,-24(s0)
 8000f6a:	eb98                	sd	a4,16(a5)
}
 8000f6c:	a07d                	j	800101a <hart_prop+0x18c>
  } else if (!strcmp(prop->name, "#interrupt-cells")) {
 8000f6e:	fd843783          	ld	a5,-40(s0)
 8000f72:	679c                	ld	a5,8(a5)
 8000f74:	0000b597          	auipc	a1,0xb
 8000f78:	0bc58593          	addi	a1,a1,188 # 800c030 <atol+0x21a>
 8000f7c:	853e                	mv	a0,a5
 8000f7e:	5df0a0ef          	jal	ra,800bd5c <strcmp>
 8000f82:	87aa                	mv	a5,a0
 8000f84:	e385                	bnez	a5,8000fa4 <hart_prop+0x116>
    scan->cells = bswap(prop->value[0]);
 8000f86:	fd843783          	ld	a5,-40(s0)
 8000f8a:	6b9c                	ld	a5,16(a5)
 8000f8c:	439c                	lw	a5,0(a5)
 8000f8e:	853e                	mv	a0,a5
 8000f90:	df4ff0ef          	jal	ra,8000584 <bswap>
 8000f94:	87aa                	mv	a5,a0
 8000f96:	2781                	sext.w	a5,a5
 8000f98:	0007871b          	sext.w	a4,a5
 8000f9c:	fe843783          	ld	a5,-24(s0)
 8000fa0:	cf98                	sw	a4,24(a5)
}
 8000fa2:	a8a5                	j	800101a <hart_prop+0x18c>
  } else if (!strcmp(prop->name, "phandle")) {
 8000fa4:	fd843783          	ld	a5,-40(s0)
 8000fa8:	679c                	ld	a5,8(a5)
 8000faa:	0000b597          	auipc	a1,0xb
 8000fae:	09e58593          	addi	a1,a1,158 # 800c048 <atol+0x232>
 8000fb2:	853e                	mv	a0,a5
 8000fb4:	5a90a0ef          	jal	ra,800bd5c <strcmp>
 8000fb8:	87aa                	mv	a5,a0
 8000fba:	ef99                	bnez	a5,8000fd8 <hart_prop+0x14a>
    scan->phandle = bswap(prop->value[0]);
 8000fbc:	fd843783          	ld	a5,-40(s0)
 8000fc0:	6b9c                	ld	a5,16(a5)
 8000fc2:	439c                	lw	a5,0(a5)
 8000fc4:	853e                	mv	a0,a5
 8000fc6:	dbeff0ef          	jal	ra,8000584 <bswap>
 8000fca:	87aa                	mv	a5,a0
 8000fcc:	0007871b          	sext.w	a4,a5
 8000fd0:	fe843783          	ld	a5,-24(s0)
 8000fd4:	cfd8                	sw	a4,28(a5)
}
 8000fd6:	a091                	j	800101a <hart_prop+0x18c>
  } else if (!strcmp(prop->name, "reg")) {
 8000fd8:	fd843783          	ld	a5,-40(s0)
 8000fdc:	679c                	ld	a5,8(a5)
 8000fde:	0000b597          	auipc	a1,0xb
 8000fe2:	fb258593          	addi	a1,a1,-78 # 800bf90 <atol+0x17a>
 8000fe6:	853e                	mv	a0,a5
 8000fe8:	5750a0ef          	jal	ra,800bd5c <strcmp>
 8000fec:	87aa                	mv	a5,a0
 8000fee:	e795                	bnez	a5,800101a <hart_prop+0x18c>
    fdt_get_address(prop->node->parent, prop->value, &reg);
 8000ff0:	fd843783          	ld	a5,-40(s0)
 8000ff4:	639c                	ld	a5,0(a5)
 8000ff6:	6398                	ld	a4,0(a5)
 8000ff8:	fd843783          	ld	a5,-40(s0)
 8000ffc:	6b9c                	ld	a5,16(a5)
 8000ffe:	fe040693          	addi	a3,s0,-32
 8001002:	8636                	mv	a2,a3
 8001004:	85be                	mv	a1,a5
 8001006:	853a                	mv	a0,a4
 8001008:	9e5ff0ef          	jal	ra,80009ec <fdt_get_address>
    scan->hart = reg;
 800100c:	fe043783          	ld	a5,-32(s0)
 8001010:	0007871b          	sext.w	a4,a5
 8001014:	fe843783          	ld	a5,-24(s0)
 8001018:	c798                	sw	a4,8(a5)
}
 800101a:	0001                	nop
 800101c:	70a2                	ld	ra,40(sp)
 800101e:	7402                	ld	s0,32(sp)
 8001020:	6145                	addi	sp,sp,48
 8001022:	8082                	ret

0000000008001024 <hart_done>:

static void hart_done(const struct fdt_scan_node *node, void *extra)
{
 8001024:	7179                	addi	sp,sp,-48
 8001026:	f406                	sd	ra,40(sp)
 8001028:	f022                	sd	s0,32(sp)
 800102a:	1800                	addi	s0,sp,48
 800102c:	fca43c23          	sd	a0,-40(s0)
 8001030:	fcb43823          	sd	a1,-48(s0)
  struct hart_scan *scan = (struct hart_scan *)extra;
 8001034:	fd043783          	ld	a5,-48(s0)
 8001038:	fef43423          	sd	a5,-24(s0)

  if (scan->cpu == node) {
 800103c:	fe843783          	ld	a5,-24(s0)
 8001040:	639c                	ld	a5,0(a5)
 8001042:	fd843703          	ld	a4,-40(s0)
 8001046:	02f71c63          	bne	a4,a5,800107e <hart_done+0x5a>
    assert (scan->hart >= 0);
 800104a:	fe843783          	ld	a5,-24(s0)
 800104e:	479c                	lw	a5,8(a5)
 8001050:	0207d763          	bgez	a5,800107e <hart_done+0x5a>
 8001054:	0000b697          	auipc	a3,0xb
 8001058:	ffc68693          	addi	a3,a3,-4 # 800c050 <atol+0x23a>
 800105c:	10600613          	li	a2,262
 8001060:	0000b597          	auipc	a1,0xb
 8001064:	ec058593          	addi	a1,a1,-320 # 800bf20 <atol+0x10a>
 8001068:	0000b517          	auipc	a0,0xb
 800106c:	ed050513          	addi	a0,a0,-304 # 800bf38 <atol+0x122>
 8001070:	312010ef          	jal	ra,8002382 <printm>
 8001074:	67c1                	lui	a5,0x10
 8001076:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7ff0001>
 800107a:	153010ef          	jal	ra,80029cc <poweroff>
  }

  if (scan->controller == node && scan->cpu) {
 800107e:	fe843783          	ld	a5,-24(s0)
 8001082:	6b9c                	ld	a5,16(a5)
 8001084:	fd843703          	ld	a4,-40(s0)
 8001088:	0cf71863          	bne	a4,a5,8001158 <hart_done+0x134>
 800108c:	fe843783          	ld	a5,-24(s0)
 8001090:	639c                	ld	a5,0(a5)
 8001092:	c3f9                	beqz	a5,8001158 <hart_done+0x134>
    assert (scan->phandle > 0);
 8001094:	fe843783          	ld	a5,-24(s0)
 8001098:	4fdc                	lw	a5,28(a5)
 800109a:	e795                	bnez	a5,80010c6 <hart_done+0xa2>
 800109c:	0000b697          	auipc	a3,0xb
 80010a0:	fc468693          	addi	a3,a3,-60 # 800c060 <atol+0x24a>
 80010a4:	10a00613          	li	a2,266
 80010a8:	0000b597          	auipc	a1,0xb
 80010ac:	e7858593          	addi	a1,a1,-392 # 800bf20 <atol+0x10a>
 80010b0:	0000b517          	auipc	a0,0xb
 80010b4:	e8850513          	addi	a0,a0,-376 # 800bf38 <atol+0x122>
 80010b8:	2ca010ef          	jal	ra,8002382 <printm>
 80010bc:	67c1                	lui	a5,0x10
 80010be:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7ff0001>
 80010c2:	10b010ef          	jal	ra,80029cc <poweroff>
    assert (scan->cells == 1);
 80010c6:	fe843783          	ld	a5,-24(s0)
 80010ca:	4f9c                	lw	a5,24(a5)
 80010cc:	873e                	mv	a4,a5
 80010ce:	4785                	li	a5,1
 80010d0:	02f70763          	beq	a4,a5,80010fe <hart_done+0xda>
 80010d4:	0000b697          	auipc	a3,0xb
 80010d8:	fa468693          	addi	a3,a3,-92 # 800c078 <atol+0x262>
 80010dc:	10b00613          	li	a2,267
 80010e0:	0000b597          	auipc	a1,0xb
 80010e4:	e4058593          	addi	a1,a1,-448 # 800bf20 <atol+0x10a>
 80010e8:	0000b517          	auipc	a0,0xb
 80010ec:	e5050513          	addi	a0,a0,-432 # 800bf38 <atol+0x122>
 80010f0:	292010ef          	jal	ra,8002382 <printm>
 80010f4:	67c1                	lui	a5,0x10
 80010f6:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7ff0001>
 80010fa:	0d3010ef          	jal	ra,80029cc <poweroff>

    if (scan->hart < MAX_HARTS) {
 80010fe:	fe843783          	ld	a5,-24(s0)
 8001102:	479c                	lw	a5,8(a5)
 8001104:	873e                	mv	a4,a5
 8001106:	479d                	li	a5,7
 8001108:	04e7c863          	blt	a5,a4,8001158 <hart_done+0x134>
      hart_phandles[scan->hart] = scan->phandle;
 800110c:	fe843783          	ld	a5,-24(s0)
 8001110:	479c                	lw	a5,8(a5)
 8001112:	fe843703          	ld	a4,-24(s0)
 8001116:	4f58                	lw	a4,28(a4)
 8001118:	0000e697          	auipc	a3,0xe
 800111c:	ef068693          	addi	a3,a3,-272 # 800f008 <hart_phandles>
 8001120:	078a                	slli	a5,a5,0x2
 8001122:	97b6                	add	a5,a5,a3
 8001124:	c398                	sw	a4,0(a5)
      hart_mask |= 1 << scan->hart;
 8001126:	fe843783          	ld	a5,-24(s0)
 800112a:	479c                	lw	a5,8(a5)
 800112c:	4705                	li	a4,1
 800112e:	00f717bb          	sllw	a5,a4,a5
 8001132:	2781                	sext.w	a5,a5
 8001134:	873e                	mv	a4,a5
 8001136:	00017797          	auipc	a5,0x17
 800113a:	ed278793          	addi	a5,a5,-302 # 8018008 <hart_mask>
 800113e:	639c                	ld	a5,0(a5)
 8001140:	8f5d                	or	a4,a4,a5
 8001142:	00017797          	auipc	a5,0x17
 8001146:	ec678793          	addi	a5,a5,-314 # 8018008 <hart_mask>
 800114a:	e398                	sd	a4,0(a5)
      hls_init(scan->hart);
 800114c:	fe843783          	ld	a5,-24(s0)
 8001150:	479c                	lw	a5,8(a5)
 8001152:	853e                	mv	a0,a5
 8001154:	2eb010ef          	jal	ra,8002c3e <hls_init>
    }
  }
}
 8001158:	0001                	nop
 800115a:	70a2                	ld	ra,40(sp)
 800115c:	7402                	ld	s0,32(sp)
 800115e:	6145                	addi	sp,sp,48
 8001160:	8082                	ret

0000000008001162 <hart_close>:

static int hart_close(const struct fdt_scan_node *node, void *extra)
{
 8001162:	7179                	addi	sp,sp,-48
 8001164:	f422                	sd	s0,40(sp)
 8001166:	1800                	addi	s0,sp,48
 8001168:	fca43c23          	sd	a0,-40(s0)
 800116c:	fcb43823          	sd	a1,-48(s0)
  struct hart_scan *scan = (struct hart_scan *)extra;
 8001170:	fd043783          	ld	a5,-48(s0)
 8001174:	fef43423          	sd	a5,-24(s0)
  if (scan->cpu == node) scan->cpu = 0;
 8001178:	fe843783          	ld	a5,-24(s0)
 800117c:	639c                	ld	a5,0(a5)
 800117e:	fd843703          	ld	a4,-40(s0)
 8001182:	00f71663          	bne	a4,a5,800118e <hart_close+0x2c>
 8001186:	fe843783          	ld	a5,-24(s0)
 800118a:	0007b023          	sd	zero,0(a5)
  if (scan->controller == node) scan->controller = 0;
 800118e:	fe843783          	ld	a5,-24(s0)
 8001192:	6b9c                	ld	a5,16(a5)
 8001194:	fd843703          	ld	a4,-40(s0)
 8001198:	00f71663          	bne	a4,a5,80011a4 <hart_close+0x42>
 800119c:	fe843783          	ld	a5,-24(s0)
 80011a0:	0007b823          	sd	zero,16(a5)
  return 0;
 80011a4:	4781                	li	a5,0
}
 80011a6:	853e                	mv	a0,a5
 80011a8:	7422                	ld	s0,40(sp)
 80011aa:	6145                	addi	sp,sp,48
 80011ac:	8082                	ret

00000000080011ae <query_harts>:

void query_harts(uintptr_t fdt)
{
 80011ae:	7159                	addi	sp,sp,-112
 80011b0:	f486                	sd	ra,104(sp)
 80011b2:	f0a2                	sd	s0,96(sp)
 80011b4:	1880                	addi	s0,sp,112
 80011b6:	f8a43c23          	sd	a0,-104(s0)
  struct fdt_cb cb;
  struct hart_scan scan;

  memset(&cb, 0, sizeof(cb));
 80011ba:	fc040793          	addi	a5,s0,-64
 80011be:	02800613          	li	a2,40
 80011c2:	4581                	li	a1,0
 80011c4:	853e                	mv	a0,a5
 80011c6:	28d0a0ef          	jal	ra,800bc52 <memset>
  memset(&scan, 0, sizeof(scan));
 80011ca:	fa040793          	addi	a5,s0,-96
 80011ce:	02000613          	li	a2,32
 80011d2:	4581                	li	a1,0
 80011d4:	853e                	mv	a0,a5
 80011d6:	27d0a0ef          	jal	ra,800bc52 <memset>
  cb.open = hart_open;
 80011da:	00000797          	auipc	a5,0x0
 80011de:	c6e78793          	addi	a5,a5,-914 # 8000e48 <hart_open>
 80011e2:	fcf43023          	sd	a5,-64(s0)
  cb.prop = hart_prop;
 80011e6:	00000797          	auipc	a5,0x0
 80011ea:	ca878793          	addi	a5,a5,-856 # 8000e8e <hart_prop>
 80011ee:	fcf43423          	sd	a5,-56(s0)
  cb.done = hart_done;
 80011f2:	00000797          	auipc	a5,0x0
 80011f6:	e3278793          	addi	a5,a5,-462 # 8001024 <hart_done>
 80011fa:	fcf43823          	sd	a5,-48(s0)
  cb.close= hart_close;
 80011fe:	00000797          	auipc	a5,0x0
 8001202:	f6478793          	addi	a5,a5,-156 # 8001162 <hart_close>
 8001206:	fcf43c23          	sd	a5,-40(s0)
  cb.extra = &scan;
 800120a:	fa040793          	addi	a5,s0,-96
 800120e:	fef43023          	sd	a5,-32(s0)

  fdt_scan(fdt, &cb);
 8001212:	fc040793          	addi	a5,s0,-64
 8001216:	85be                	mv	a1,a5
 8001218:	f9843503          	ld	a0,-104(s0)
 800121c:	ebcff0ef          	jal	ra,80008d8 <fdt_scan>

  // The current hart should have been detected
  assert ((hart_mask >> read_csr(mhartid)) != 0);
 8001220:	00017797          	auipc	a5,0x17
 8001224:	de878793          	addi	a5,a5,-536 # 8018008 <hart_mask>
 8001228:	639c                	ld	a5,0(a5)
 800122a:	f1402773          	csrr	a4,mhartid
 800122e:	fee43423          	sd	a4,-24(s0)
 8001232:	fe843703          	ld	a4,-24(s0)
 8001236:	2701                	sext.w	a4,a4
 8001238:	00e7d7b3          	srl	a5,a5,a4
 800123c:	e795                	bnez	a5,8001268 <query_harts+0xba>
 800123e:	0000b697          	auipc	a3,0xb
 8001242:	e5268693          	addi	a3,a3,-430 # 800c090 <atol+0x27a>
 8001246:	12d00613          	li	a2,301
 800124a:	0000b597          	auipc	a1,0xb
 800124e:	cd658593          	addi	a1,a1,-810 # 800bf20 <atol+0x10a>
 8001252:	0000b517          	auipc	a0,0xb
 8001256:	ce650513          	addi	a0,a0,-794 # 800bf38 <atol+0x122>
 800125a:	128010ef          	jal	ra,8002382 <printm>
 800125e:	67c1                	lui	a5,0x10
 8001260:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7ff0001>
 8001264:	768010ef          	jal	ra,80029cc <poweroff>
}
 8001268:	0001                	nop
 800126a:	70a6                	ld	ra,104(sp)
 800126c:	7406                	ld	s0,96(sp)
 800126e:	6165                	addi	sp,sp,112
 8001270:	8082                	ret

0000000008001272 <clint_open>:
  int int_len;
  int done;
};

static void clint_open(const struct fdt_scan_node *node, void *extra)
{
 8001272:	7179                	addi	sp,sp,-48
 8001274:	f422                	sd	s0,40(sp)
 8001276:	1800                	addi	s0,sp,48
 8001278:	fca43c23          	sd	a0,-40(s0)
 800127c:	fcb43823          	sd	a1,-48(s0)
  struct clint_scan *scan = (struct clint_scan *)extra;
 8001280:	fd043783          	ld	a5,-48(s0)
 8001284:	fef43423          	sd	a5,-24(s0)
  scan->compat = 0;
 8001288:	fe843783          	ld	a5,-24(s0)
 800128c:	0007a023          	sw	zero,0(a5)
  scan->reg = 0;
 8001290:	fe843783          	ld	a5,-24(s0)
 8001294:	0007b423          	sd	zero,8(a5)
  scan->int_value = 0;
 8001298:	fe843783          	ld	a5,-24(s0)
 800129c:	0007b823          	sd	zero,16(a5)
}
 80012a0:	0001                	nop
 80012a2:	7422                	ld	s0,40(sp)
 80012a4:	6145                	addi	sp,sp,48
 80012a6:	8082                	ret

00000000080012a8 <clint_prop>:

static void clint_prop(const struct fdt_scan_prop *prop, void *extra)
{
 80012a8:	7179                	addi	sp,sp,-48
 80012aa:	f406                	sd	ra,40(sp)
 80012ac:	f022                	sd	s0,32(sp)
 80012ae:	1800                	addi	s0,sp,48
 80012b0:	fca43c23          	sd	a0,-40(s0)
 80012b4:	fcb43823          	sd	a1,-48(s0)
  struct clint_scan *scan = (struct clint_scan *)extra;
 80012b8:	fd043783          	ld	a5,-48(s0)
 80012bc:	fef43423          	sd	a5,-24(s0)
  if (!strcmp(prop->name, "compatible") && fdt_string_list_index(prop, "riscv,clint0") >= 0) {
 80012c0:	fd843783          	ld	a5,-40(s0)
 80012c4:	679c                	ld	a5,8(a5)
 80012c6:	0000b597          	auipc	a1,0xb
 80012ca:	df258593          	addi	a1,a1,-526 # 800c0b8 <atol+0x2a2>
 80012ce:	853e                	mv	a0,a5
 80012d0:	28d0a0ef          	jal	ra,800bd5c <strcmp>
 80012d4:	87aa                	mv	a5,a0
 80012d6:	e38d                	bnez	a5,80012f8 <clint_prop+0x50>
 80012d8:	0000b597          	auipc	a1,0xb
 80012dc:	df058593          	addi	a1,a1,-528 # 800c0c8 <atol+0x2b2>
 80012e0:	fd843503          	ld	a0,-40(s0)
 80012e4:	83bff0ef          	jal	ra,8000b1e <fdt_string_list_index>
 80012e8:	87aa                	mv	a5,a0
 80012ea:	0007c763          	bltz	a5,80012f8 <clint_prop+0x50>
    scan->compat = 1;
 80012ee:	fe843783          	ld	a5,-24(s0)
 80012f2:	4705                	li	a4,1
 80012f4:	c398                	sw	a4,0(a5)
    fdt_get_address(prop->node->parent, prop->value, &scan->reg);
  } else if (!strcmp(prop->name, "interrupts-extended")) {
    scan->int_value = prop->value;
    scan->int_len = prop->len;
  }
}
 80012f6:	a0ad                	j	8001360 <clint_prop+0xb8>
  } else if (!strcmp(prop->name, "reg")) {
 80012f8:	fd843783          	ld	a5,-40(s0)
 80012fc:	679c                	ld	a5,8(a5)
 80012fe:	0000b597          	auipc	a1,0xb
 8001302:	c9258593          	addi	a1,a1,-878 # 800bf90 <atol+0x17a>
 8001306:	853e                	mv	a0,a5
 8001308:	2550a0ef          	jal	ra,800bd5c <strcmp>
 800130c:	87aa                	mv	a5,a0
 800130e:	e38d                	bnez	a5,8001330 <clint_prop+0x88>
    fdt_get_address(prop->node->parent, prop->value, &scan->reg);
 8001310:	fd843783          	ld	a5,-40(s0)
 8001314:	639c                	ld	a5,0(a5)
 8001316:	6398                	ld	a4,0(a5)
 8001318:	fd843783          	ld	a5,-40(s0)
 800131c:	6b94                	ld	a3,16(a5)
 800131e:	fe843783          	ld	a5,-24(s0)
 8001322:	07a1                	addi	a5,a5,8
 8001324:	863e                	mv	a2,a5
 8001326:	85b6                	mv	a1,a3
 8001328:	853a                	mv	a0,a4
 800132a:	ec2ff0ef          	jal	ra,80009ec <fdt_get_address>
}
 800132e:	a80d                	j	8001360 <clint_prop+0xb8>
  } else if (!strcmp(prop->name, "interrupts-extended")) {
 8001330:	fd843783          	ld	a5,-40(s0)
 8001334:	679c                	ld	a5,8(a5)
 8001336:	0000b597          	auipc	a1,0xb
 800133a:	da258593          	addi	a1,a1,-606 # 800c0d8 <atol+0x2c2>
 800133e:	853e                	mv	a0,a5
 8001340:	21d0a0ef          	jal	ra,800bd5c <strcmp>
 8001344:	87aa                	mv	a5,a0
 8001346:	ef89                	bnez	a5,8001360 <clint_prop+0xb8>
    scan->int_value = prop->value;
 8001348:	fd843783          	ld	a5,-40(s0)
 800134c:	6b98                	ld	a4,16(a5)
 800134e:	fe843783          	ld	a5,-24(s0)
 8001352:	eb98                	sd	a4,16(a5)
    scan->int_len = prop->len;
 8001354:	fd843783          	ld	a5,-40(s0)
 8001358:	4f98                	lw	a4,24(a5)
 800135a:	fe843783          	ld	a5,-24(s0)
 800135e:	cf98                	sw	a4,24(a5)
}
 8001360:	0001                	nop
 8001362:	70a2                	ld	ra,40(sp)
 8001364:	7402                	ld	s0,32(sp)
 8001366:	6145                	addi	sp,sp,48
 8001368:	8082                	ret

000000000800136a <clint_done>:

static void clint_done(const struct fdt_scan_node *node, void *extra)
{
 800136a:	711d                	addi	sp,sp,-96
 800136c:	ec86                	sd	ra,88(sp)
 800136e:	e8a2                	sd	s0,80(sp)
 8001370:	1080                	addi	s0,sp,96
 8001372:	faa43423          	sd	a0,-88(s0)
 8001376:	fab43023          	sd	a1,-96(s0)
  struct clint_scan *scan = (struct clint_scan *)extra;
 800137a:	fa043783          	ld	a5,-96(s0)
 800137e:	fcf43c23          	sd	a5,-40(s0)
  const uint32_t *value = scan->int_value;
 8001382:	fd843783          	ld	a5,-40(s0)
 8001386:	6b9c                	ld	a5,16(a5)
 8001388:	fef43423          	sd	a5,-24(s0)
  const uint32_t *end = value + scan->int_len/4;
 800138c:	fd843783          	ld	a5,-40(s0)
 8001390:	4f9c                	lw	a5,24(a5)
 8001392:	41f7d71b          	sraiw	a4,a5,0x1f
 8001396:	01e7571b          	srliw	a4,a4,0x1e
 800139a:	9fb9                	addw	a5,a5,a4
 800139c:	4027d79b          	sraiw	a5,a5,0x2
 80013a0:	2781                	sext.w	a5,a5
 80013a2:	078a                	slli	a5,a5,0x2
 80013a4:	fe843703          	ld	a4,-24(s0)
 80013a8:	97ba                	add	a5,a5,a4
 80013aa:	fcf43823          	sd	a5,-48(s0)

  if (!scan->compat) return;
 80013ae:	fd843783          	ld	a5,-40(s0)
 80013b2:	439c                	lw	a5,0(a5)
 80013b4:	1a078f63          	beqz	a5,8001572 <clint_done+0x208>
  assert (scan->reg != 0);
 80013b8:	fd843783          	ld	a5,-40(s0)
 80013bc:	679c                	ld	a5,8(a5)
 80013be:	e795                	bnez	a5,80013ea <clint_done+0x80>
 80013c0:	0000b697          	auipc	a3,0xb
 80013c4:	d3068693          	addi	a3,a3,-720 # 800c0f0 <atol+0x2da>
 80013c8:	15700613          	li	a2,343
 80013cc:	0000b597          	auipc	a1,0xb
 80013d0:	b5458593          	addi	a1,a1,-1196 # 800bf20 <atol+0x10a>
 80013d4:	0000b517          	auipc	a0,0xb
 80013d8:	b6450513          	addi	a0,a0,-1180 # 800bf38 <atol+0x122>
 80013dc:	7a7000ef          	jal	ra,8002382 <printm>
 80013e0:	67c1                	lui	a5,0x10
 80013e2:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7ff0001>
 80013e6:	5e6010ef          	jal	ra,80029cc <poweroff>
  assert (scan->int_value && scan->int_len % 16 == 0);
 80013ea:	fd843783          	ld	a5,-40(s0)
 80013ee:	6b9c                	ld	a5,16(a5)
 80013f0:	cb81                	beqz	a5,8001400 <clint_done+0x96>
 80013f2:	fd843783          	ld	a5,-40(s0)
 80013f6:	4f9c                	lw	a5,24(a5)
 80013f8:	2781                	sext.w	a5,a5
 80013fa:	8bbd                	andi	a5,a5,15
 80013fc:	2781                	sext.w	a5,a5
 80013fe:	c795                	beqz	a5,800142a <clint_done+0xc0>
 8001400:	0000b697          	auipc	a3,0xb
 8001404:	d0068693          	addi	a3,a3,-768 # 800c100 <atol+0x2ea>
 8001408:	15800613          	li	a2,344
 800140c:	0000b597          	auipc	a1,0xb
 8001410:	b1458593          	addi	a1,a1,-1260 # 800bf20 <atol+0x10a>
 8001414:	0000b517          	auipc	a0,0xb
 8001418:	b2450513          	addi	a0,a0,-1244 # 800bf38 <atol+0x122>
 800141c:	767000ef          	jal	ra,8002382 <printm>
 8001420:	67c1                	lui	a5,0x10
 8001422:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7ff0001>
 8001426:	5a6010ef          	jal	ra,80029cc <poweroff>
  assert (!scan->done); // only one clint
 800142a:	fd843783          	ld	a5,-40(s0)
 800142e:	4fdc                	lw	a5,28(a5)
 8001430:	c795                	beqz	a5,800145c <clint_done+0xf2>
 8001432:	0000b697          	auipc	a3,0xb
 8001436:	cfe68693          	addi	a3,a3,-770 # 800c130 <atol+0x31a>
 800143a:	15900613          	li	a2,345
 800143e:	0000b597          	auipc	a1,0xb
 8001442:	ae258593          	addi	a1,a1,-1310 # 800bf20 <atol+0x10a>
 8001446:	0000b517          	auipc	a0,0xb
 800144a:	af250513          	addi	a0,a0,-1294 # 800bf38 <atol+0x122>
 800144e:	735000ef          	jal	ra,8002382 <printm>
 8001452:	67c1                	lui	a5,0x10
 8001454:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7ff0001>
 8001458:	574010ef          	jal	ra,80029cc <poweroff>

  scan->done = 1;
 800145c:	fd843783          	ld	a5,-40(s0)
 8001460:	4705                	li	a4,1
 8001462:	cfd8                	sw	a4,28(a5)
  mtime = (void*)((uintptr_t)scan->reg + 0xbff8);
 8001464:	fd843783          	ld	a5,-40(s0)
 8001468:	6798                	ld	a4,8(a5)
 800146a:	67b1                	lui	a5,0xc
 800146c:	17e1                	addi	a5,a5,-8
 800146e:	97ba                	add	a5,a5,a4
 8001470:	873e                	mv	a4,a5
 8001472:	00017797          	auipc	a5,0x17
 8001476:	bbe78793          	addi	a5,a5,-1090 # 8018030 <mtime>
 800147a:	e398                	sd	a4,0(a5)

  for (int index = 0; end - value > 0; ++index) {
 800147c:	fe042223          	sw	zero,-28(s0)
 8001480:	a0c5                	j	8001560 <clint_done+0x1f6>
    uint32_t phandle = bswap(value[0]);
 8001482:	fe843783          	ld	a5,-24(s0)
 8001486:	439c                	lw	a5,0(a5)
 8001488:	853e                	mv	a0,a5
 800148a:	8faff0ef          	jal	ra,8000584 <bswap>
 800148e:	87aa                	mv	a5,a0
 8001490:	fcf42623          	sw	a5,-52(s0)
    int hart;
    for (hart = 0; hart < MAX_HARTS; ++hart)
 8001494:	fe042023          	sw	zero,-32(s0)
 8001498:	a025                	j	80014c0 <clint_done+0x156>
      if (hart_phandles[hart] == phandle)
 800149a:	0000e717          	auipc	a4,0xe
 800149e:	b6e70713          	addi	a4,a4,-1170 # 800f008 <hart_phandles>
 80014a2:	fe042783          	lw	a5,-32(s0)
 80014a6:	078a                	slli	a5,a5,0x2
 80014a8:	97ba                	add	a5,a5,a4
 80014aa:	4398                	lw	a4,0(a5)
 80014ac:	fcc42783          	lw	a5,-52(s0)
 80014b0:	2781                	sext.w	a5,a5
 80014b2:	00e78f63          	beq	a5,a4,80014d0 <clint_done+0x166>
    for (hart = 0; hart < MAX_HARTS; ++hart)
 80014b6:	fe042783          	lw	a5,-32(s0)
 80014ba:	2785                	addiw	a5,a5,1
 80014bc:	fef42023          	sw	a5,-32(s0)
 80014c0:	fe042783          	lw	a5,-32(s0)
 80014c4:	0007871b          	sext.w	a4,a5
 80014c8:	479d                	li	a5,7
 80014ca:	fce7d8e3          	ble	a4,a5,800149a <clint_done+0x130>
 80014ce:	a011                	j	80014d2 <clint_done+0x168>
        break;
 80014d0:	0001                	nop
    if (hart < MAX_HARTS) {
 80014d2:	fe042783          	lw	a5,-32(s0)
 80014d6:	0007871b          	sext.w	a4,a5
 80014da:	479d                	li	a5,7
 80014dc:	06e7c863          	blt	a5,a4,800154c <clint_done+0x1e2>
      hls_t *hls = OTHER_HLS(hart);
 80014e0:	87a2                	mv	a5,s0
 80014e2:	fcf43023          	sd	a5,-64(s0)
 80014e6:	fc043703          	ld	a4,-64(s0)
 80014ea:	6785                	lui	a5,0x1
 80014ec:	973e                	add	a4,a4,a5
 80014ee:	77fd                	lui	a5,0xfffff
 80014f0:	8ff9                	and	a5,a5,a4
 80014f2:	86be                	mv	a3,a5
 80014f4:	fe042703          	lw	a4,-32(s0)
 80014f8:	f14027f3          	csrr	a5,mhartid
 80014fc:	faf43c23          	sd	a5,-72(s0)
 8001500:	fb843783          	ld	a5,-72(s0)
 8001504:	40f707b3          	sub	a5,a4,a5
 8001508:	07b2                	slli	a5,a5,0xc
 800150a:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xfffffffff7833020>
 800150e:	97b6                	add	a5,a5,a3
 8001510:	faf43823          	sd	a5,-80(s0)
      hls->ipi = (void*)((uintptr_t)scan->reg + index * 4);
 8001514:	fd843783          	ld	a5,-40(s0)
 8001518:	679c                	ld	a5,8(a5)
 800151a:	fe442703          	lw	a4,-28(s0)
 800151e:	0027171b          	slliw	a4,a4,0x2
 8001522:	2701                	sext.w	a4,a4
 8001524:	97ba                	add	a5,a5,a4
 8001526:	873e                	mv	a4,a5
 8001528:	fb043783          	ld	a5,-80(s0)
 800152c:	e398                	sd	a4,0(a5)
      hls->timecmp = (void*)((uintptr_t)scan->reg + 0x4000 + (index * 8));
 800152e:	fd843783          	ld	a5,-40(s0)
 8001532:	679c                	ld	a5,8(a5)
 8001534:	fe442703          	lw	a4,-28(s0)
 8001538:	0037171b          	slliw	a4,a4,0x3
 800153c:	2701                	sext.w	a4,a4
 800153e:	973e                	add	a4,a4,a5
 8001540:	6791                	lui	a5,0x4
 8001542:	97ba                	add	a5,a5,a4
 8001544:	873e                	mv	a4,a5
 8001546:	fb043783          	ld	a5,-80(s0)
 800154a:	eb98                	sd	a4,16(a5)
    }
    value += 4;
 800154c:	fe843783          	ld	a5,-24(s0)
 8001550:	07c1                	addi	a5,a5,16
 8001552:	fef43423          	sd	a5,-24(s0)
  for (int index = 0; end - value > 0; ++index) {
 8001556:	fe442783          	lw	a5,-28(s0)
 800155a:	2785                	addiw	a5,a5,1
 800155c:	fef42223          	sw	a5,-28(s0)
 8001560:	fd043703          	ld	a4,-48(s0)
 8001564:	fe843783          	ld	a5,-24(s0)
 8001568:	40f707b3          	sub	a5,a4,a5
 800156c:	f0f04be3          	bgtz	a5,8001482 <clint_done+0x118>
 8001570:	a011                	j	8001574 <clint_done+0x20a>
  if (!scan->compat) return;
 8001572:	0001                	nop
  }
}
 8001574:	60e6                	ld	ra,88(sp)
 8001576:	6446                	ld	s0,80(sp)
 8001578:	6125                	addi	sp,sp,96
 800157a:	8082                	ret

000000000800157c <query_clint>:

void query_clint(uintptr_t fdt)
{
 800157c:	7159                	addi	sp,sp,-112
 800157e:	f486                	sd	ra,104(sp)
 8001580:	f0a2                	sd	s0,96(sp)
 8001582:	1880                	addi	s0,sp,112
 8001584:	f8a43c23          	sd	a0,-104(s0)
  struct fdt_cb cb;
  struct clint_scan scan;

  memset(&cb, 0, sizeof(cb));
 8001588:	fc840793          	addi	a5,s0,-56
 800158c:	02800613          	li	a2,40
 8001590:	4581                	li	a1,0
 8001592:	853e                	mv	a0,a5
 8001594:	6be0a0ef          	jal	ra,800bc52 <memset>
  cb.open = clint_open;
 8001598:	00000797          	auipc	a5,0x0
 800159c:	cda78793          	addi	a5,a5,-806 # 8001272 <clint_open>
 80015a0:	fcf43423          	sd	a5,-56(s0)
  cb.prop = clint_prop;
 80015a4:	00000797          	auipc	a5,0x0
 80015a8:	d0478793          	addi	a5,a5,-764 # 80012a8 <clint_prop>
 80015ac:	fcf43823          	sd	a5,-48(s0)
  cb.done = clint_done;
 80015b0:	00000797          	auipc	a5,0x0
 80015b4:	dba78793          	addi	a5,a5,-582 # 800136a <clint_done>
 80015b8:	fcf43c23          	sd	a5,-40(s0)
  cb.extra = &scan;
 80015bc:	fa840793          	addi	a5,s0,-88
 80015c0:	fef43423          	sd	a5,-24(s0)

  scan.done = 0;
 80015c4:	fc042223          	sw	zero,-60(s0)
  fdt_scan(fdt, &cb);
 80015c8:	fc840793          	addi	a5,s0,-56
 80015cc:	85be                	mv	a1,a5
 80015ce:	f9843503          	ld	a0,-104(s0)
 80015d2:	b06ff0ef          	jal	ra,80008d8 <fdt_scan>
  assert (scan.done);
 80015d6:	fc442783          	lw	a5,-60(s0)
 80015da:	e795                	bnez	a5,8001606 <query_clint+0x8a>
 80015dc:	0000b697          	auipc	a3,0xb
 80015e0:	b6468693          	addi	a3,a3,-1180 # 800c140 <atol+0x32a>
 80015e4:	17a00613          	li	a2,378
 80015e8:	0000b597          	auipc	a1,0xb
 80015ec:	93858593          	addi	a1,a1,-1736 # 800bf20 <atol+0x10a>
 80015f0:	0000b517          	auipc	a0,0xb
 80015f4:	94850513          	addi	a0,a0,-1720 # 800bf38 <atol+0x122>
 80015f8:	58b000ef          	jal	ra,8002382 <printm>
 80015fc:	67c1                	lui	a5,0x10
 80015fe:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7ff0001>
 8001602:	3ca010ef          	jal	ra,80029cc <poweroff>
}
 8001606:	0001                	nop
 8001608:	70a6                	ld	ra,104(sp)
 800160a:	7406                	ld	s0,96(sp)
 800160c:	6165                	addi	sp,sp,112
 800160e:	8082                	ret

0000000008001610 <plic_open>:
  int done;
  int ndev;
};

static void plic_open(const struct fdt_scan_node *node, void *extra)
{
 8001610:	7179                	addi	sp,sp,-48
 8001612:	f422                	sd	s0,40(sp)
 8001614:	1800                	addi	s0,sp,48
 8001616:	fca43c23          	sd	a0,-40(s0)
 800161a:	fcb43823          	sd	a1,-48(s0)
  struct plic_scan *scan = (struct plic_scan *)extra;
 800161e:	fd043783          	ld	a5,-48(s0)
 8001622:	fef43423          	sd	a5,-24(s0)
  scan->compat = 0;
 8001626:	fe843783          	ld	a5,-24(s0)
 800162a:	0007a023          	sw	zero,0(a5)
  scan->reg = 0;
 800162e:	fe843783          	ld	a5,-24(s0)
 8001632:	0007b423          	sd	zero,8(a5)
  scan->int_value = 0;
 8001636:	fe843783          	ld	a5,-24(s0)
 800163a:	0007b823          	sd	zero,16(a5)
}
 800163e:	0001                	nop
 8001640:	7422                	ld	s0,40(sp)
 8001642:	6145                	addi	sp,sp,48
 8001644:	8082                	ret

0000000008001646 <plic_prop>:

static void plic_prop(const struct fdt_scan_prop *prop, void *extra)
{
 8001646:	7179                	addi	sp,sp,-48
 8001648:	f406                	sd	ra,40(sp)
 800164a:	f022                	sd	s0,32(sp)
 800164c:	1800                	addi	s0,sp,48
 800164e:	fca43c23          	sd	a0,-40(s0)
 8001652:	fcb43823          	sd	a1,-48(s0)
  struct plic_scan *scan = (struct plic_scan *)extra;
 8001656:	fd043783          	ld	a5,-48(s0)
 800165a:	fef43423          	sd	a5,-24(s0)
  if (!strcmp(prop->name, "compatible") && fdt_string_list_index(prop, "riscv,plic0") >= 0) {
 800165e:	fd843783          	ld	a5,-40(s0)
 8001662:	679c                	ld	a5,8(a5)
 8001664:	0000b597          	auipc	a1,0xb
 8001668:	a5458593          	addi	a1,a1,-1452 # 800c0b8 <atol+0x2a2>
 800166c:	853e                	mv	a0,a5
 800166e:	6ee0a0ef          	jal	ra,800bd5c <strcmp>
 8001672:	87aa                	mv	a5,a0
 8001674:	e38d                	bnez	a5,8001696 <plic_prop+0x50>
 8001676:	0000b597          	auipc	a1,0xb
 800167a:	ada58593          	addi	a1,a1,-1318 # 800c150 <atol+0x33a>
 800167e:	fd843503          	ld	a0,-40(s0)
 8001682:	c9cff0ef          	jal	ra,8000b1e <fdt_string_list_index>
 8001686:	87aa                	mv	a5,a0
 8001688:	0007c763          	bltz	a5,8001696 <plic_prop+0x50>
    scan->compat = 1;
 800168c:	fe843783          	ld	a5,-24(s0)
 8001690:	4705                	li	a4,1
 8001692:	c398                	sw	a4,0(a5)
    scan->int_value = prop->value;
    scan->int_len = prop->len;
  } else if (!strcmp(prop->name, "riscv,ndev")) {
    scan->ndev = bswap(prop->value[0]);
  }
}
 8001694:	a045                	j	8001734 <plic_prop+0xee>
  } else if (!strcmp(prop->name, "reg")) {
 8001696:	fd843783          	ld	a5,-40(s0)
 800169a:	679c                	ld	a5,8(a5)
 800169c:	0000b597          	auipc	a1,0xb
 80016a0:	8f458593          	addi	a1,a1,-1804 # 800bf90 <atol+0x17a>
 80016a4:	853e                	mv	a0,a5
 80016a6:	6b60a0ef          	jal	ra,800bd5c <strcmp>
 80016aa:	87aa                	mv	a5,a0
 80016ac:	e38d                	bnez	a5,80016ce <plic_prop+0x88>
    fdt_get_address(prop->node->parent, prop->value, &scan->reg);
 80016ae:	fd843783          	ld	a5,-40(s0)
 80016b2:	639c                	ld	a5,0(a5)
 80016b4:	6398                	ld	a4,0(a5)
 80016b6:	fd843783          	ld	a5,-40(s0)
 80016ba:	6b94                	ld	a3,16(a5)
 80016bc:	fe843783          	ld	a5,-24(s0)
 80016c0:	07a1                	addi	a5,a5,8
 80016c2:	863e                	mv	a2,a5
 80016c4:	85b6                	mv	a1,a3
 80016c6:	853a                	mv	a0,a4
 80016c8:	b24ff0ef          	jal	ra,80009ec <fdt_get_address>
}
 80016cc:	a0a5                	j	8001734 <plic_prop+0xee>
  } else if (!strcmp(prop->name, "interrupts-extended")) {
 80016ce:	fd843783          	ld	a5,-40(s0)
 80016d2:	679c                	ld	a5,8(a5)
 80016d4:	0000b597          	auipc	a1,0xb
 80016d8:	a0458593          	addi	a1,a1,-1532 # 800c0d8 <atol+0x2c2>
 80016dc:	853e                	mv	a0,a5
 80016de:	67e0a0ef          	jal	ra,800bd5c <strcmp>
 80016e2:	87aa                	mv	a5,a0
 80016e4:	ef91                	bnez	a5,8001700 <plic_prop+0xba>
    scan->int_value = prop->value;
 80016e6:	fd843783          	ld	a5,-40(s0)
 80016ea:	6b98                	ld	a4,16(a5)
 80016ec:	fe843783          	ld	a5,-24(s0)
 80016f0:	eb98                	sd	a4,16(a5)
    scan->int_len = prop->len;
 80016f2:	fd843783          	ld	a5,-40(s0)
 80016f6:	4f98                	lw	a4,24(a5)
 80016f8:	fe843783          	ld	a5,-24(s0)
 80016fc:	cf98                	sw	a4,24(a5)
}
 80016fe:	a81d                	j	8001734 <plic_prop+0xee>
  } else if (!strcmp(prop->name, "riscv,ndev")) {
 8001700:	fd843783          	ld	a5,-40(s0)
 8001704:	679c                	ld	a5,8(a5)
 8001706:	0000b597          	auipc	a1,0xb
 800170a:	a5a58593          	addi	a1,a1,-1446 # 800c160 <atol+0x34a>
 800170e:	853e                	mv	a0,a5
 8001710:	64c0a0ef          	jal	ra,800bd5c <strcmp>
 8001714:	87aa                	mv	a5,a0
 8001716:	ef99                	bnez	a5,8001734 <plic_prop+0xee>
    scan->ndev = bswap(prop->value[0]);
 8001718:	fd843783          	ld	a5,-40(s0)
 800171c:	6b9c                	ld	a5,16(a5)
 800171e:	439c                	lw	a5,0(a5)
 8001720:	853e                	mv	a0,a5
 8001722:	e63fe0ef          	jal	ra,8000584 <bswap>
 8001726:	87aa                	mv	a5,a0
 8001728:	2781                	sext.w	a5,a5
 800172a:	0007871b          	sext.w	a4,a5
 800172e:	fe843783          	ld	a5,-24(s0)
 8001732:	d398                	sw	a4,32(a5)
}
 8001734:	0001                	nop
 8001736:	70a2                	ld	ra,40(sp)
 8001738:	7402                	ld	s0,32(sp)
 800173a:	6145                	addi	sp,sp,48
 800173c:	8082                	ret

000000000800173e <plic_done>:
#define HART_SIZE	0x1000
#define ENABLE_BASE	0x2000
#define ENABLE_SIZE	0x80

static void plic_done(const struct fdt_scan_node *node, void *extra)
{
 800173e:	711d                	addi	sp,sp,-96
 8001740:	ec86                	sd	ra,88(sp)
 8001742:	e8a2                	sd	s0,80(sp)
 8001744:	1080                	addi	s0,sp,96
 8001746:	faa43423          	sd	a0,-88(s0)
 800174a:	fab43023          	sd	a1,-96(s0)
  struct plic_scan *scan = (struct plic_scan *)extra;
 800174e:	fa043783          	ld	a5,-96(s0)
 8001752:	fcf43c23          	sd	a5,-40(s0)
  const uint32_t *value = scan->int_value;
 8001756:	fd843783          	ld	a5,-40(s0)
 800175a:	6b9c                	ld	a5,16(a5)
 800175c:	fef43423          	sd	a5,-24(s0)
  const uint32_t *end = value + scan->int_len/4;
 8001760:	fd843783          	ld	a5,-40(s0)
 8001764:	4f9c                	lw	a5,24(a5)
 8001766:	41f7d71b          	sraiw	a4,a5,0x1f
 800176a:	01e7571b          	srliw	a4,a4,0x1e
 800176e:	9fb9                	addw	a5,a5,a4
 8001770:	4027d79b          	sraiw	a5,a5,0x2
 8001774:	2781                	sext.w	a5,a5
 8001776:	078a                	slli	a5,a5,0x2
 8001778:	fe843703          	ld	a4,-24(s0)
 800177c:	97ba                	add	a5,a5,a4
 800177e:	fcf43823          	sd	a5,-48(s0)

  if (!scan->compat) return;
 8001782:	fd843783          	ld	a5,-40(s0)
 8001786:	439c                	lw	a5,0(a5)
 8001788:	28078f63          	beqz	a5,8001a26 <plic_done+0x2e8>
  assert (scan->reg != 0);
 800178c:	fd843783          	ld	a5,-40(s0)
 8001790:	679c                	ld	a5,8(a5)
 8001792:	e795                	bnez	a5,80017be <plic_done+0x80>
 8001794:	0000b697          	auipc	a3,0xb
 8001798:	95c68693          	addi	a3,a3,-1700 # 800c0f0 <atol+0x2da>
 800179c:	1ac00613          	li	a2,428
 80017a0:	0000a597          	auipc	a1,0xa
 80017a4:	78058593          	addi	a1,a1,1920 # 800bf20 <atol+0x10a>
 80017a8:	0000a517          	auipc	a0,0xa
 80017ac:	79050513          	addi	a0,a0,1936 # 800bf38 <atol+0x122>
 80017b0:	3d3000ef          	jal	ra,8002382 <printm>
 80017b4:	67c1                	lui	a5,0x10
 80017b6:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7ff0001>
 80017ba:	212010ef          	jal	ra,80029cc <poweroff>
  assert (scan->int_value && scan->int_len % 8 == 0);
 80017be:	fd843783          	ld	a5,-40(s0)
 80017c2:	6b9c                	ld	a5,16(a5)
 80017c4:	cb81                	beqz	a5,80017d4 <plic_done+0x96>
 80017c6:	fd843783          	ld	a5,-40(s0)
 80017ca:	4f9c                	lw	a5,24(a5)
 80017cc:	2781                	sext.w	a5,a5
 80017ce:	8b9d                	andi	a5,a5,7
 80017d0:	2781                	sext.w	a5,a5
 80017d2:	c795                	beqz	a5,80017fe <plic_done+0xc0>
 80017d4:	0000b697          	auipc	a3,0xb
 80017d8:	99c68693          	addi	a3,a3,-1636 # 800c170 <atol+0x35a>
 80017dc:	1ad00613          	li	a2,429
 80017e0:	0000a597          	auipc	a1,0xa
 80017e4:	74058593          	addi	a1,a1,1856 # 800bf20 <atol+0x10a>
 80017e8:	0000a517          	auipc	a0,0xa
 80017ec:	75050513          	addi	a0,a0,1872 # 800bf38 <atol+0x122>
 80017f0:	393000ef          	jal	ra,8002382 <printm>
 80017f4:	67c1                	lui	a5,0x10
 80017f6:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7ff0001>
 80017fa:	1d2010ef          	jal	ra,80029cc <poweroff>
  assert (scan->ndev >= 0 && scan->ndev < 1024);
 80017fe:	fd843783          	ld	a5,-40(s0)
 8001802:	539c                	lw	a5,32(a5)
 8001804:	0007ca63          	bltz	a5,8001818 <plic_done+0xda>
 8001808:	fd843783          	ld	a5,-40(s0)
 800180c:	539c                	lw	a5,32(a5)
 800180e:	873e                	mv	a4,a5
 8001810:	3ff00793          	li	a5,1023
 8001814:	02e7d763          	ble	a4,a5,8001842 <plic_done+0x104>
 8001818:	0000b697          	auipc	a3,0xb
 800181c:	98868693          	addi	a3,a3,-1656 # 800c1a0 <atol+0x38a>
 8001820:	1ae00613          	li	a2,430
 8001824:	0000a597          	auipc	a1,0xa
 8001828:	6fc58593          	addi	a1,a1,1788 # 800bf20 <atol+0x10a>
 800182c:	0000a517          	auipc	a0,0xa
 8001830:	70c50513          	addi	a0,a0,1804 # 800bf38 <atol+0x122>
 8001834:	34f000ef          	jal	ra,8002382 <printm>
 8001838:	67c1                	lui	a5,0x10
 800183a:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7ff0001>
 800183e:	18e010ef          	jal	ra,80029cc <poweroff>
  assert (!scan->done); // only one plic
 8001842:	fd843783          	ld	a5,-40(s0)
 8001846:	4fdc                	lw	a5,28(a5)
 8001848:	c795                	beqz	a5,8001874 <plic_done+0x136>
 800184a:	0000b697          	auipc	a3,0xb
 800184e:	8e668693          	addi	a3,a3,-1818 # 800c130 <atol+0x31a>
 8001852:	1af00613          	li	a2,431
 8001856:	0000a597          	auipc	a1,0xa
 800185a:	6ca58593          	addi	a1,a1,1738 # 800bf20 <atol+0x10a>
 800185e:	0000a517          	auipc	a0,0xa
 8001862:	6da50513          	addi	a0,a0,1754 # 800bf38 <atol+0x122>
 8001866:	31d000ef          	jal	ra,8002382 <printm>
 800186a:	67c1                	lui	a5,0x10
 800186c:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7ff0001>
 8001870:	15c010ef          	jal	ra,80029cc <poweroff>

  scan->done = 1;
 8001874:	fd843783          	ld	a5,-40(s0)
 8001878:	4705                	li	a4,1
 800187a:	cfd8                	sw	a4,28(a5)
  plic_priorities = (uint32_t*)(uintptr_t)scan->reg;
 800187c:	fd843783          	ld	a5,-40(s0)
 8001880:	679c                	ld	a5,8(a5)
 8001882:	873e                	mv	a4,a5
 8001884:	00016797          	auipc	a5,0x16
 8001888:	79478793          	addi	a5,a5,1940 # 8018018 <plic_priorities>
 800188c:	e398                	sd	a4,0(a5)
  plic_ndevs = scan->ndev;
 800188e:	fd843783          	ld	a5,-40(s0)
 8001892:	539c                	lw	a5,32(a5)
 8001894:	873e                	mv	a4,a5
 8001896:	00016797          	auipc	a5,0x16
 800189a:	77a78793          	addi	a5,a5,1914 # 8018010 <plic_ndevs>
 800189e:	e398                	sd	a4,0(a5)

  for (int index = 0; end - value > 0; ++index) {
 80018a0:	fe042223          	sw	zero,-28(s0)
 80018a4:	aa85                	j	8001a14 <plic_done+0x2d6>
    uint32_t phandle = bswap(value[0]);
 80018a6:	fe843783          	ld	a5,-24(s0)
 80018aa:	439c                	lw	a5,0(a5)
 80018ac:	853e                	mv	a0,a5
 80018ae:	cd7fe0ef          	jal	ra,8000584 <bswap>
 80018b2:	87aa                	mv	a5,a0
 80018b4:	fcf42623          	sw	a5,-52(s0)
    uint32_t cpu_int = bswap(value[1]);
 80018b8:	fe843783          	ld	a5,-24(s0)
 80018bc:	0791                	addi	a5,a5,4
 80018be:	439c                	lw	a5,0(a5)
 80018c0:	853e                	mv	a0,a5
 80018c2:	cc3fe0ef          	jal	ra,8000584 <bswap>
 80018c6:	87aa                	mv	a5,a0
 80018c8:	fcf42423          	sw	a5,-56(s0)
    int hart;
    for (hart = 0; hart < MAX_HARTS; ++hart)
 80018cc:	fe042023          	sw	zero,-32(s0)
 80018d0:	a025                	j	80018f8 <plic_done+0x1ba>
      if (hart_phandles[hart] == phandle)
 80018d2:	0000d717          	auipc	a4,0xd
 80018d6:	73670713          	addi	a4,a4,1846 # 800f008 <hart_phandles>
 80018da:	fe042783          	lw	a5,-32(s0)
 80018de:	078a                	slli	a5,a5,0x2
 80018e0:	97ba                	add	a5,a5,a4
 80018e2:	4398                	lw	a4,0(a5)
 80018e4:	fcc42783          	lw	a5,-52(s0)
 80018e8:	2781                	sext.w	a5,a5
 80018ea:	00e78f63          	beq	a5,a4,8001908 <plic_done+0x1ca>
    for (hart = 0; hart < MAX_HARTS; ++hart)
 80018ee:	fe042783          	lw	a5,-32(s0)
 80018f2:	2785                	addiw	a5,a5,1
 80018f4:	fef42023          	sw	a5,-32(s0)
 80018f8:	fe042783          	lw	a5,-32(s0)
 80018fc:	0007871b          	sext.w	a4,a5
 8001900:	479d                	li	a5,7
 8001902:	fce7d8e3          	ble	a4,a5,80018d2 <plic_done+0x194>
 8001906:	a011                	j	800190a <plic_done+0x1cc>
        break;
 8001908:	0001                	nop
    if (hart < MAX_HARTS) {
 800190a:	fe042783          	lw	a5,-32(s0)
 800190e:	0007871b          	sext.w	a4,a5
 8001912:	479d                	li	a5,7
 8001914:	0ee7c663          	blt	a5,a4,8001a00 <plic_done+0x2c2>
      hls_t *hls = OTHER_HLS(hart);
 8001918:	87a2                	mv	a5,s0
 800191a:	fcf43023          	sd	a5,-64(s0)
 800191e:	fc043703          	ld	a4,-64(s0)
 8001922:	6785                	lui	a5,0x1
 8001924:	973e                	add	a4,a4,a5
 8001926:	77fd                	lui	a5,0xfffff
 8001928:	8ff9                	and	a5,a5,a4
 800192a:	86be                	mv	a3,a5
 800192c:	fe042703          	lw	a4,-32(s0)
 8001930:	f14027f3          	csrr	a5,mhartid
 8001934:	faf43c23          	sd	a5,-72(s0)
 8001938:	fb843783          	ld	a5,-72(s0)
 800193c:	40f707b3          	sub	a5,a4,a5
 8001940:	07b2                	slli	a5,a5,0xc
 8001942:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xfffffffff7833020>
 8001946:	97b6                	add	a5,a5,a3
 8001948:	faf43823          	sd	a5,-80(s0)
      if (cpu_int == IRQ_M_EXT) {
 800194c:	fc842783          	lw	a5,-56(s0)
 8001950:	0007871b          	sext.w	a4,a5
 8001954:	47ad                	li	a5,11
 8001956:	04f71263          	bne	a4,a5,800199a <plic_done+0x25c>
        hls->plic_m_ie     = (uint32_t*)((uintptr_t)scan->reg + ENABLE_BASE + ENABLE_SIZE * index);
 800195a:	fd843783          	ld	a5,-40(s0)
 800195e:	679c                	ld	a5,8(a5)
 8001960:	fe442703          	lw	a4,-28(s0)
 8001964:	0077171b          	slliw	a4,a4,0x7
 8001968:	2701                	sext.w	a4,a4
 800196a:	973e                	add	a4,a4,a5
 800196c:	6789                	lui	a5,0x2
 800196e:	97ba                	add	a5,a5,a4
 8001970:	873e                	mv	a4,a5
 8001972:	fb043783          	ld	a5,-80(s0)
 8001976:	f398                	sd	a4,32(a5)
        hls->plic_m_thresh = (uint32_t*) ((uintptr_t)scan->reg + HART_BASE   + HART_SIZE   * index);
 8001978:	fd843783          	ld	a5,-40(s0)
 800197c:	679c                	ld	a5,8(a5)
 800197e:	fe442703          	lw	a4,-28(s0)
 8001982:	00c7171b          	slliw	a4,a4,0xc
 8001986:	2701                	sext.w	a4,a4
 8001988:	973e                	add	a4,a4,a5
 800198a:	002007b7          	lui	a5,0x200
 800198e:	97ba                	add	a5,a5,a4
 8001990:	873e                	mv	a4,a5
 8001992:	fb043783          	ld	a5,-80(s0)
 8001996:	ef98                	sd	a4,24(a5)
 8001998:	a0a5                	j	8001a00 <plic_done+0x2c2>
      } else if (cpu_int == IRQ_S_EXT) {
 800199a:	fc842783          	lw	a5,-56(s0)
 800199e:	0007871b          	sext.w	a4,a5
 80019a2:	47a5                	li	a5,9
 80019a4:	04f71263          	bne	a4,a5,80019e8 <plic_done+0x2aa>
        hls->plic_s_ie     = (uint32_t*)((uintptr_t)scan->reg + ENABLE_BASE + ENABLE_SIZE * index);
 80019a8:	fd843783          	ld	a5,-40(s0)
 80019ac:	679c                	ld	a5,8(a5)
 80019ae:	fe442703          	lw	a4,-28(s0)
 80019b2:	0077171b          	slliw	a4,a4,0x7
 80019b6:	2701                	sext.w	a4,a4
 80019b8:	973e                	add	a4,a4,a5
 80019ba:	6789                	lui	a5,0x2
 80019bc:	97ba                	add	a5,a5,a4
 80019be:	873e                	mv	a4,a5
 80019c0:	fb043783          	ld	a5,-80(s0)
 80019c4:	fb98                	sd	a4,48(a5)
        hls->plic_s_thresh = (uint32_t*) ((uintptr_t)scan->reg + HART_BASE   + HART_SIZE   * index);
 80019c6:	fd843783          	ld	a5,-40(s0)
 80019ca:	679c                	ld	a5,8(a5)
 80019cc:	fe442703          	lw	a4,-28(s0)
 80019d0:	00c7171b          	slliw	a4,a4,0xc
 80019d4:	2701                	sext.w	a4,a4
 80019d6:	973e                	add	a4,a4,a5
 80019d8:	002007b7          	lui	a5,0x200
 80019dc:	97ba                	add	a5,a5,a4
 80019de:	873e                	mv	a4,a5
 80019e0:	fb043783          	ld	a5,-80(s0)
 80019e4:	f798                	sd	a4,40(a5)
 80019e6:	a829                	j	8001a00 <plic_done+0x2c2>
      } else {
        printm("PLIC wired hart %d to wrong interrupt %d", hart, cpu_int);
 80019e8:	fc842703          	lw	a4,-56(s0)
 80019ec:	fe042783          	lw	a5,-32(s0)
 80019f0:	863a                	mv	a2,a4
 80019f2:	85be                	mv	a1,a5
 80019f4:	0000a517          	auipc	a0,0xa
 80019f8:	7d450513          	addi	a0,a0,2004 # 800c1c8 <atol+0x3b2>
 80019fc:	187000ef          	jal	ra,8002382 <printm>
      }
    }
    value += 2;
 8001a00:	fe843783          	ld	a5,-24(s0)
 8001a04:	07a1                	addi	a5,a5,8
 8001a06:	fef43423          	sd	a5,-24(s0)
  for (int index = 0; end - value > 0; ++index) {
 8001a0a:	fe442783          	lw	a5,-28(s0)
 8001a0e:	2785                	addiw	a5,a5,1
 8001a10:	fef42223          	sw	a5,-28(s0)
 8001a14:	fd043703          	ld	a4,-48(s0)
 8001a18:	fe843783          	ld	a5,-24(s0)
 8001a1c:	40f707b3          	sub	a5,a4,a5
 8001a20:	e8f043e3          	bgtz	a5,80018a6 <plic_done+0x168>
 8001a24:	a011                	j	8001a28 <plic_done+0x2ea>
  if (!scan->compat) return;
 8001a26:	0001                	nop
  for (int i = 0; i < MAX_HARTS; ++i) {
    hls_t *hls = OTHER_HLS(i);
    printm("CPU %d: %x %x %x %x\r\n", i, (uint32_t)(uintptr_t)hls->plic_m_ie, (uint32_t)(uintptr_t)hls->plic_m_thresh, (uint32_t)(uintptr_t)hls->plic_s_ie, (uint32_t)(uintptr_t)hls->plic_s_thresh);
  }
#endif
}
 8001a28:	60e6                	ld	ra,88(sp)
 8001a2a:	6446                	ld	s0,80(sp)
 8001a2c:	6125                	addi	sp,sp,96
 8001a2e:	8082                	ret

0000000008001a30 <query_plic>:

void query_plic(uintptr_t fdt)
{
 8001a30:	7159                	addi	sp,sp,-112
 8001a32:	f486                	sd	ra,104(sp)
 8001a34:	f0a2                	sd	s0,96(sp)
 8001a36:	1880                	addi	s0,sp,112
 8001a38:	f8a43c23          	sd	a0,-104(s0)
  struct fdt_cb cb;
  struct plic_scan scan;

  memset(&cb, 0, sizeof(cb));
 8001a3c:	fc840793          	addi	a5,s0,-56
 8001a40:	02800613          	li	a2,40
 8001a44:	4581                	li	a1,0
 8001a46:	853e                	mv	a0,a5
 8001a48:	20a0a0ef          	jal	ra,800bc52 <memset>
  cb.open = plic_open;
 8001a4c:	00000797          	auipc	a5,0x0
 8001a50:	bc478793          	addi	a5,a5,-1084 # 8001610 <plic_open>
 8001a54:	fcf43423          	sd	a5,-56(s0)
  cb.prop = plic_prop;
 8001a58:	00000797          	auipc	a5,0x0
 8001a5c:	bee78793          	addi	a5,a5,-1042 # 8001646 <plic_prop>
 8001a60:	fcf43823          	sd	a5,-48(s0)
  cb.done = plic_done;
 8001a64:	00000797          	auipc	a5,0x0
 8001a68:	cda78793          	addi	a5,a5,-806 # 800173e <plic_done>
 8001a6c:	fcf43c23          	sd	a5,-40(s0)
  cb.extra = &scan;
 8001a70:	fa040793          	addi	a5,s0,-96
 8001a74:	fef43423          	sd	a5,-24(s0)

  scan.done = 0;
 8001a78:	fa042e23          	sw	zero,-68(s0)
  fdt_scan(fdt, &cb);
 8001a7c:	fc840793          	addi	a5,s0,-56
 8001a80:	85be                	mv	a1,a5
 8001a82:	f9843503          	ld	a0,-104(s0)
 8001a86:	e53fe0ef          	jal	ra,80008d8 <fdt_scan>
}
 8001a8a:	0001                	nop
 8001a8c:	70a6                	ld	ra,104(sp)
 8001a8e:	7406                	ld	s0,96(sp)
 8001a90:	6165                	addi	sp,sp,112
 8001a92:	8082                	ret

0000000008001a94 <plic_redact>:

static void plic_redact(const struct fdt_scan_node *node, void *extra)
{
 8001a94:	715d                	addi	sp,sp,-80
 8001a96:	e486                	sd	ra,72(sp)
 8001a98:	e0a2                	sd	s0,64(sp)
 8001a9a:	fc26                	sd	s1,56(sp)
 8001a9c:	0880                	addi	s0,sp,80
 8001a9e:	faa43c23          	sd	a0,-72(s0)
 8001aa2:	fab43823          	sd	a1,-80(s0)
  struct plic_scan *scan = (struct plic_scan *)extra;
 8001aa6:	fb043783          	ld	a5,-80(s0)
 8001aaa:	fcf43823          	sd	a5,-48(s0)
  uint32_t *value = scan->int_value;
 8001aae:	fd043783          	ld	a5,-48(s0)
 8001ab2:	6b9c                	ld	a5,16(a5)
 8001ab4:	fcf43c23          	sd	a5,-40(s0)
  uint32_t *end = value + scan->int_len/4;
 8001ab8:	fd043783          	ld	a5,-48(s0)
 8001abc:	4f9c                	lw	a5,24(a5)
 8001abe:	41f7d71b          	sraiw	a4,a5,0x1f
 8001ac2:	01e7571b          	srliw	a4,a4,0x1e
 8001ac6:	9fb9                	addw	a5,a5,a4
 8001ac8:	4027d79b          	sraiw	a5,a5,0x2
 8001acc:	2781                	sext.w	a5,a5
 8001ace:	078a                	slli	a5,a5,0x2
 8001ad0:	fd843703          	ld	a4,-40(s0)
 8001ad4:	97ba                	add	a5,a5,a4
 8001ad6:	fcf43423          	sd	a5,-56(s0)

  if (!scan->compat) return;
 8001ada:	fd043783          	ld	a5,-48(s0)
 8001ade:	439c                	lw	a5,0(a5)
 8001ae0:	cbb9                	beqz	a5,8001b36 <plic_redact+0xa2>
  scan->done = 1;
 8001ae2:	fd043783          	ld	a5,-48(s0)
 8001ae6:	4705                	li	a4,1
 8001ae8:	cfd8                	sw	a4,28(a5)

  while (end - value > 0) {
 8001aea:	a82d                	j	8001b24 <plic_redact+0x90>
    if (bswap(value[1]) == IRQ_M_EXT) value[1] = bswap(-1);
 8001aec:	fd843783          	ld	a5,-40(s0)
 8001af0:	0791                	addi	a5,a5,4
 8001af2:	439c                	lw	a5,0(a5)
 8001af4:	853e                	mv	a0,a5
 8001af6:	a8ffe0ef          	jal	ra,8000584 <bswap>
 8001afa:	87aa                	mv	a5,a0
 8001afc:	2781                	sext.w	a5,a5
 8001afe:	873e                	mv	a4,a5
 8001b00:	47ad                	li	a5,11
 8001b02:	00f71c63          	bne	a4,a5,8001b1a <plic_redact+0x86>
 8001b06:	fd843783          	ld	a5,-40(s0)
 8001b0a:	00478493          	addi	s1,a5,4
 8001b0e:	557d                	li	a0,-1
 8001b10:	a75fe0ef          	jal	ra,8000584 <bswap>
 8001b14:	87aa                	mv	a5,a0
 8001b16:	2781                	sext.w	a5,a5
 8001b18:	c09c                	sw	a5,0(s1)
    value += 2;
 8001b1a:	fd843783          	ld	a5,-40(s0)
 8001b1e:	07a1                	addi	a5,a5,8
 8001b20:	fcf43c23          	sd	a5,-40(s0)
  while (end - value > 0) {
 8001b24:	fc843703          	ld	a4,-56(s0)
 8001b28:	fd843783          	ld	a5,-40(s0)
 8001b2c:	40f707b3          	sub	a5,a4,a5
 8001b30:	faf04ee3          	bgtz	a5,8001aec <plic_redact+0x58>
 8001b34:	a011                	j	8001b38 <plic_redact+0xa4>
  if (!scan->compat) return;
 8001b36:	0001                	nop
  }
}
 8001b38:	60a6                	ld	ra,72(sp)
 8001b3a:	6406                	ld	s0,64(sp)
 8001b3c:	74e2                	ld	s1,56(sp)
 8001b3e:	6161                	addi	sp,sp,80
 8001b40:	8082                	ret

0000000008001b42 <filter_plic>:

void filter_plic(uintptr_t fdt)
{
 8001b42:	7159                	addi	sp,sp,-112
 8001b44:	f486                	sd	ra,104(sp)
 8001b46:	f0a2                	sd	s0,96(sp)
 8001b48:	1880                	addi	s0,sp,112
 8001b4a:	f8a43c23          	sd	a0,-104(s0)
  struct fdt_cb cb;
  struct plic_scan scan;

  memset(&cb, 0, sizeof(cb));
 8001b4e:	fc840793          	addi	a5,s0,-56
 8001b52:	02800613          	li	a2,40
 8001b56:	4581                	li	a1,0
 8001b58:	853e                	mv	a0,a5
 8001b5a:	0f80a0ef          	jal	ra,800bc52 <memset>
  cb.open = plic_open;
 8001b5e:	00000797          	auipc	a5,0x0
 8001b62:	ab278793          	addi	a5,a5,-1358 # 8001610 <plic_open>
 8001b66:	fcf43423          	sd	a5,-56(s0)
  cb.prop = plic_prop;
 8001b6a:	00000797          	auipc	a5,0x0
 8001b6e:	adc78793          	addi	a5,a5,-1316 # 8001646 <plic_prop>
 8001b72:	fcf43823          	sd	a5,-48(s0)
  cb.done = plic_redact;
 8001b76:	00000797          	auipc	a5,0x0
 8001b7a:	f1e78793          	addi	a5,a5,-226 # 8001a94 <plic_redact>
 8001b7e:	fcf43c23          	sd	a5,-40(s0)
  cb.extra = &scan;
 8001b82:	fa040793          	addi	a5,s0,-96
 8001b86:	fef43423          	sd	a5,-24(s0)

  scan.done = 0;
 8001b8a:	fa042e23          	sw	zero,-68(s0)
  fdt_scan(fdt, &cb);
 8001b8e:	fc840793          	addi	a5,s0,-56
 8001b92:	85be                	mv	a1,a5
 8001b94:	f9843503          	ld	a0,-104(s0)
 8001b98:	d41fe0ef          	jal	ra,80008d8 <fdt_scan>
}
 8001b9c:	0001                	nop
 8001b9e:	70a6                	ld	ra,104(sp)
 8001ba0:	7406                	ld	s0,96(sp)
 8001ba2:	6165                	addi	sp,sp,112
 8001ba4:	8082                	ret

0000000008001ba6 <compat_open>:
  int depth;
  int kill;
};

static void compat_open(const struct fdt_scan_node *node, void *extra)
{
 8001ba6:	7179                	addi	sp,sp,-48
 8001ba8:	f422                	sd	s0,40(sp)
 8001baa:	1800                	addi	s0,sp,48
 8001bac:	fca43c23          	sd	a0,-40(s0)
 8001bb0:	fcb43823          	sd	a1,-48(s0)
  struct compat_scan *scan = (struct compat_scan *)extra;
 8001bb4:	fd043783          	ld	a5,-48(s0)
 8001bb8:	fef43423          	sd	a5,-24(s0)
  ++scan->depth;
 8001bbc:	fe843783          	ld	a5,-24(s0)
 8001bc0:	479c                	lw	a5,8(a5)
 8001bc2:	2785                	addiw	a5,a5,1
 8001bc4:	0007871b          	sext.w	a4,a5
 8001bc8:	fe843783          	ld	a5,-24(s0)
 8001bcc:	c798                	sw	a4,8(a5)
}
 8001bce:	0001                	nop
 8001bd0:	7422                	ld	s0,40(sp)
 8001bd2:	6145                	addi	sp,sp,48
 8001bd4:	8082                	ret

0000000008001bd6 <compat_prop>:

static void compat_prop(const struct fdt_scan_prop *prop, void *extra)
{
 8001bd6:	7179                	addi	sp,sp,-48
 8001bd8:	f406                	sd	ra,40(sp)
 8001bda:	f022                	sd	s0,32(sp)
 8001bdc:	1800                	addi	s0,sp,48
 8001bde:	fca43c23          	sd	a0,-40(s0)
 8001be2:	fcb43823          	sd	a1,-48(s0)
  struct compat_scan *scan = (struct compat_scan *)extra;
 8001be6:	fd043783          	ld	a5,-48(s0)
 8001bea:	fef43423          	sd	a5,-24(s0)
  if (!strcmp(prop->name, "compatible") && fdt_string_list_index(prop, scan->compat) >= 0)
 8001bee:	fd843783          	ld	a5,-40(s0)
 8001bf2:	679c                	ld	a5,8(a5)
 8001bf4:	0000a597          	auipc	a1,0xa
 8001bf8:	4c458593          	addi	a1,a1,1220 # 800c0b8 <atol+0x2a2>
 8001bfc:	853e                	mv	a0,a5
 8001bfe:	15e0a0ef          	jal	ra,800bd5c <strcmp>
 8001c02:	87aa                	mv	a5,a0
 8001c04:	eb95                	bnez	a5,8001c38 <compat_prop+0x62>
 8001c06:	fe843783          	ld	a5,-24(s0)
 8001c0a:	639c                	ld	a5,0(a5)
 8001c0c:	85be                	mv	a1,a5
 8001c0e:	fd843503          	ld	a0,-40(s0)
 8001c12:	f0dfe0ef          	jal	ra,8000b1e <fdt_string_list_index>
 8001c16:	87aa                	mv	a5,a0
 8001c18:	0207c063          	bltz	a5,8001c38 <compat_prop+0x62>
    if (scan->depth < scan->kill)
 8001c1c:	fe843783          	ld	a5,-24(s0)
 8001c20:	4798                	lw	a4,8(a5)
 8001c22:	fe843783          	ld	a5,-24(s0)
 8001c26:	47dc                	lw	a5,12(a5)
 8001c28:	00f75863          	ble	a5,a4,8001c38 <compat_prop+0x62>
      scan->kill = scan->depth;
 8001c2c:	fe843783          	ld	a5,-24(s0)
 8001c30:	4798                	lw	a4,8(a5)
 8001c32:	fe843783          	ld	a5,-24(s0)
 8001c36:	c7d8                	sw	a4,12(a5)
}
 8001c38:	0001                	nop
 8001c3a:	70a2                	ld	ra,40(sp)
 8001c3c:	7402                	ld	s0,32(sp)
 8001c3e:	6145                	addi	sp,sp,48
 8001c40:	8082                	ret

0000000008001c42 <compat_close>:

static int compat_close(const struct fdt_scan_node *node, void *extra)
{
 8001c42:	7179                	addi	sp,sp,-48
 8001c44:	f422                	sd	s0,40(sp)
 8001c46:	1800                	addi	s0,sp,48
 8001c48:	fca43c23          	sd	a0,-40(s0)
 8001c4c:	fcb43823          	sd	a1,-48(s0)
  struct compat_scan *scan = (struct compat_scan *)extra;
 8001c50:	fd043783          	ld	a5,-48(s0)
 8001c54:	fef43423          	sd	a5,-24(s0)
  if (scan->kill == scan->depth--) {
 8001c58:	fe843783          	ld	a5,-24(s0)
 8001c5c:	47d0                	lw	a2,12(a5)
 8001c5e:	fe843783          	ld	a5,-24(s0)
 8001c62:	479c                	lw	a5,8(a5)
 8001c64:	fff7871b          	addiw	a4,a5,-1
 8001c68:	0007069b          	sext.w	a3,a4
 8001c6c:	fe843703          	ld	a4,-24(s0)
 8001c70:	c714                	sw	a3,8(a4)
 8001c72:	8732                	mv	a4,a2
 8001c74:	00f71963          	bne	a4,a5,8001c86 <compat_close+0x44>
    scan->kill = 999;
 8001c78:	fe843783          	ld	a5,-24(s0)
 8001c7c:	3e700713          	li	a4,999
 8001c80:	c7d8                	sw	a4,12(a5)
    return -1;
 8001c82:	57fd                	li	a5,-1
 8001c84:	a011                	j	8001c88 <compat_close+0x46>
  } else {
    return 0;
 8001c86:	4781                	li	a5,0
  }
}
 8001c88:	853e                	mv	a0,a5
 8001c8a:	7422                	ld	s0,40(sp)
 8001c8c:	6145                	addi	sp,sp,48
 8001c8e:	8082                	ret

0000000008001c90 <filter_compat>:

void filter_compat(uintptr_t fdt, const char *compat)
{
 8001c90:	711d                	addi	sp,sp,-96
 8001c92:	ec86                	sd	ra,88(sp)
 8001c94:	e8a2                	sd	s0,80(sp)
 8001c96:	1080                	addi	s0,sp,96
 8001c98:	faa43423          	sd	a0,-88(s0)
 8001c9c:	fab43023          	sd	a1,-96(s0)
  struct fdt_cb cb;
  struct compat_scan scan;

  memset(&cb, 0, sizeof(cb));
 8001ca0:	fc840793          	addi	a5,s0,-56
 8001ca4:	02800613          	li	a2,40
 8001ca8:	4581                	li	a1,0
 8001caa:	853e                	mv	a0,a5
 8001cac:	7a7090ef          	jal	ra,800bc52 <memset>
  cb.open = compat_open;
 8001cb0:	00000797          	auipc	a5,0x0
 8001cb4:	ef678793          	addi	a5,a5,-266 # 8001ba6 <compat_open>
 8001cb8:	fcf43423          	sd	a5,-56(s0)
  cb.prop = compat_prop;
 8001cbc:	00000797          	auipc	a5,0x0
 8001cc0:	f1a78793          	addi	a5,a5,-230 # 8001bd6 <compat_prop>
 8001cc4:	fcf43823          	sd	a5,-48(s0)
  cb.close = compat_close;
 8001cc8:	00000797          	auipc	a5,0x0
 8001ccc:	f7a78793          	addi	a5,a5,-134 # 8001c42 <compat_close>
 8001cd0:	fef43023          	sd	a5,-32(s0)
  cb.extra = &scan;
 8001cd4:	fb840793          	addi	a5,s0,-72
 8001cd8:	fef43423          	sd	a5,-24(s0)

  scan.compat = compat;
 8001cdc:	fa043783          	ld	a5,-96(s0)
 8001ce0:	faf43c23          	sd	a5,-72(s0)
  scan.depth = 0;
 8001ce4:	fc042023          	sw	zero,-64(s0)
  scan.kill = 999;
 8001ce8:	3e700793          	li	a5,999
 8001cec:	fcf42223          	sw	a5,-60(s0)
  fdt_scan(fdt, &cb);
 8001cf0:	fc840793          	addi	a5,s0,-56
 8001cf4:	85be                	mv	a1,a5
 8001cf6:	fa843503          	ld	a0,-88(s0)
 8001cfa:	bdffe0ef          	jal	ra,80008d8 <fdt_scan>
}
 8001cfe:	0001                	nop
 8001d00:	60e6                	ld	ra,88(sp)
 8001d02:	6446                	ld	s0,80(sp)
 8001d04:	6125                	addi	sp,sp,96
 8001d06:	8082                	ret

0000000008001d08 <chosen_open>:
  void* kernel_start;
  void* kernel_end;
};

static void chosen_open(const struct fdt_scan_node *node, void *extra)
{
 8001d08:	7179                	addi	sp,sp,-48
 8001d0a:	f406                	sd	ra,40(sp)
 8001d0c:	f022                	sd	s0,32(sp)
 8001d0e:	1800                	addi	s0,sp,48
 8001d10:	fca43c23          	sd	a0,-40(s0)
 8001d14:	fcb43823          	sd	a1,-48(s0)
  struct chosen_scan *scan = (struct chosen_scan *)extra;
 8001d18:	fd043783          	ld	a5,-48(s0)
 8001d1c:	fef43423          	sd	a5,-24(s0)
  if (!strcmp(node->name, "chosen")) {
 8001d20:	fd843783          	ld	a5,-40(s0)
 8001d24:	679c                	ld	a5,8(a5)
 8001d26:	0000a597          	auipc	a1,0xa
 8001d2a:	4d258593          	addi	a1,a1,1234 # 800c1f8 <atol+0x3e2>
 8001d2e:	853e                	mv	a0,a5
 8001d30:	02c0a0ef          	jal	ra,800bd5c <strcmp>
 8001d34:	87aa                	mv	a5,a0
 8001d36:	e791                	bnez	a5,8001d42 <chosen_open+0x3a>
    scan->chosen = node;
 8001d38:	fe843783          	ld	a5,-24(s0)
 8001d3c:	fd843703          	ld	a4,-40(s0)
 8001d40:	e398                	sd	a4,0(a5)
  }
}
 8001d42:	0001                	nop
 8001d44:	70a2                	ld	ra,40(sp)
 8001d46:	7402                	ld	s0,32(sp)
 8001d48:	6145                	addi	sp,sp,48
 8001d4a:	8082                	ret

0000000008001d4c <chosen_close>:

static int chosen_close(const struct fdt_scan_node *node, void *extra)
{
 8001d4c:	7179                	addi	sp,sp,-48
 8001d4e:	f422                	sd	s0,40(sp)
 8001d50:	1800                	addi	s0,sp,48
 8001d52:	fca43c23          	sd	a0,-40(s0)
 8001d56:	fcb43823          	sd	a1,-48(s0)
  struct chosen_scan *scan = (struct chosen_scan *)extra;
 8001d5a:	fd043783          	ld	a5,-48(s0)
 8001d5e:	fef43423          	sd	a5,-24(s0)
  if (scan->chosen && scan->chosen == node) {
 8001d62:	fe843783          	ld	a5,-24(s0)
 8001d66:	639c                	ld	a5,0(a5)
 8001d68:	cf81                	beqz	a5,8001d80 <chosen_close+0x34>
 8001d6a:	fe843783          	ld	a5,-24(s0)
 8001d6e:	639c                	ld	a5,0(a5)
 8001d70:	fd843703          	ld	a4,-40(s0)
 8001d74:	00f71663          	bne	a4,a5,8001d80 <chosen_close+0x34>
    scan->chosen = NULL;
 8001d78:	fe843783          	ld	a5,-24(s0)
 8001d7c:	0007b023          	sd	zero,0(a5)
  }
  return 0;
 8001d80:	4781                	li	a5,0
}
 8001d82:	853e                	mv	a0,a5
 8001d84:	7422                	ld	s0,40(sp)
 8001d86:	6145                	addi	sp,sp,48
 8001d88:	8082                	ret

0000000008001d8a <chosen_prop>:

static void chosen_prop(const struct fdt_scan_prop *prop, void *extra)
{
 8001d8a:	7179                	addi	sp,sp,-48
 8001d8c:	f406                	sd	ra,40(sp)
 8001d8e:	f022                	sd	s0,32(sp)
 8001d90:	1800                	addi	s0,sp,48
 8001d92:	fca43c23          	sd	a0,-40(s0)
 8001d96:	fcb43823          	sd	a1,-48(s0)
  struct chosen_scan *scan = (struct chosen_scan *)extra;
 8001d9a:	fd043783          	ld	a5,-48(s0)
 8001d9e:	fef43423          	sd	a5,-24(s0)
  uint64_t val;
  if (!scan->chosen) return;
 8001da2:	fe843783          	ld	a5,-24(s0)
 8001da6:	639c                	ld	a5,0(a5)
 8001da8:	c3d9                	beqz	a5,8001e2e <chosen_prop+0xa4>
  if (!strcmp(prop->name, "riscv,kernel-start")) {
 8001daa:	fd843783          	ld	a5,-40(s0)
 8001dae:	679c                	ld	a5,8(a5)
 8001db0:	0000a597          	auipc	a1,0xa
 8001db4:	45058593          	addi	a1,a1,1104 # 800c200 <atol+0x3ea>
 8001db8:	853e                	mv	a0,a5
 8001dba:	7a3090ef          	jal	ra,800bd5c <strcmp>
 8001dbe:	87aa                	mv	a5,a0
 8001dc0:	e795                	bnez	a5,8001dec <chosen_prop+0x62>
    fdt_get_address(prop->node->parent, prop->value, &val);
 8001dc2:	fd843783          	ld	a5,-40(s0)
 8001dc6:	639c                	ld	a5,0(a5)
 8001dc8:	6398                	ld	a4,0(a5)
 8001dca:	fd843783          	ld	a5,-40(s0)
 8001dce:	6b9c                	ld	a5,16(a5)
 8001dd0:	fe040693          	addi	a3,s0,-32
 8001dd4:	8636                	mv	a2,a3
 8001dd6:	85be                	mv	a1,a5
 8001dd8:	853a                	mv	a0,a4
 8001dda:	c13fe0ef          	jal	ra,80009ec <fdt_get_address>
    scan->kernel_start = (void*)(uintptr_t)val;
 8001dde:	fe043783          	ld	a5,-32(s0)
 8001de2:	873e                	mv	a4,a5
 8001de4:	fe843783          	ld	a5,-24(s0)
 8001de8:	e798                	sd	a4,8(a5)
 8001dea:	a099                	j	8001e30 <chosen_prop+0xa6>
  } else if (!strcmp(prop->name, "riscv,kernel-end")) {
 8001dec:	fd843783          	ld	a5,-40(s0)
 8001df0:	679c                	ld	a5,8(a5)
 8001df2:	0000a597          	auipc	a1,0xa
 8001df6:	42658593          	addi	a1,a1,1062 # 800c218 <atol+0x402>
 8001dfa:	853e                	mv	a0,a5
 8001dfc:	761090ef          	jal	ra,800bd5c <strcmp>
 8001e00:	87aa                	mv	a5,a0
 8001e02:	e79d                	bnez	a5,8001e30 <chosen_prop+0xa6>
    fdt_get_address(prop->node->parent, prop->value, &val);
 8001e04:	fd843783          	ld	a5,-40(s0)
 8001e08:	639c                	ld	a5,0(a5)
 8001e0a:	6398                	ld	a4,0(a5)
 8001e0c:	fd843783          	ld	a5,-40(s0)
 8001e10:	6b9c                	ld	a5,16(a5)
 8001e12:	fe040693          	addi	a3,s0,-32
 8001e16:	8636                	mv	a2,a3
 8001e18:	85be                	mv	a1,a5
 8001e1a:	853a                	mv	a0,a4
 8001e1c:	bd1fe0ef          	jal	ra,80009ec <fdt_get_address>
    scan->kernel_end = (void*)(uintptr_t)val;
 8001e20:	fe043783          	ld	a5,-32(s0)
 8001e24:	873e                	mv	a4,a5
 8001e26:	fe843783          	ld	a5,-24(s0)
 8001e2a:	eb98                	sd	a4,16(a5)
 8001e2c:	a011                	j	8001e30 <chosen_prop+0xa6>
  if (!scan->chosen) return;
 8001e2e:	0001                	nop
  }
}
 8001e30:	70a2                	ld	ra,40(sp)
 8001e32:	7402                	ld	s0,32(sp)
 8001e34:	6145                	addi	sp,sp,48
 8001e36:	8082                	ret

0000000008001e38 <query_chosen>:

void query_chosen(uintptr_t fdt)
{
 8001e38:	711d                	addi	sp,sp,-96
 8001e3a:	ec86                	sd	ra,88(sp)
 8001e3c:	e8a2                	sd	s0,80(sp)
 8001e3e:	1080                	addi	s0,sp,96
 8001e40:	faa43423          	sd	a0,-88(s0)
  struct fdt_cb cb;
  struct chosen_scan chosen;

  memset(&cb, 0, sizeof(cb));
 8001e44:	fc840793          	addi	a5,s0,-56
 8001e48:	02800613          	li	a2,40
 8001e4c:	4581                	li	a1,0
 8001e4e:	853e                	mv	a0,a5
 8001e50:	603090ef          	jal	ra,800bc52 <memset>
  cb.open = chosen_open;
 8001e54:	00000797          	auipc	a5,0x0
 8001e58:	eb478793          	addi	a5,a5,-332 # 8001d08 <chosen_open>
 8001e5c:	fcf43423          	sd	a5,-56(s0)
  cb.close = chosen_close;
 8001e60:	00000797          	auipc	a5,0x0
 8001e64:	eec78793          	addi	a5,a5,-276 # 8001d4c <chosen_close>
 8001e68:	fef43023          	sd	a5,-32(s0)
  cb.prop = chosen_prop;
 8001e6c:	00000797          	auipc	a5,0x0
 8001e70:	f1e78793          	addi	a5,a5,-226 # 8001d8a <chosen_prop>
 8001e74:	fcf43823          	sd	a5,-48(s0)

  memset(&chosen, 0, sizeof(chosen));
 8001e78:	fb040793          	addi	a5,s0,-80
 8001e7c:	4661                	li	a2,24
 8001e7e:	4581                	li	a1,0
 8001e80:	853e                	mv	a0,a5
 8001e82:	5d1090ef          	jal	ra,800bc52 <memset>
  cb.extra = &chosen;
 8001e86:	fb040793          	addi	a5,s0,-80
 8001e8a:	fef43423          	sd	a5,-24(s0)

  fdt_scan(fdt, &cb);
 8001e8e:	fc840793          	addi	a5,s0,-56
 8001e92:	85be                	mv	a1,a5
 8001e94:	fa843503          	ld	a0,-88(s0)
 8001e98:	a41fe0ef          	jal	ra,80008d8 <fdt_scan>
  kernel_start = chosen.kernel_start;
 8001e9c:	fb843703          	ld	a4,-72(s0)
 8001ea0:	00016797          	auipc	a5,0x16
 8001ea4:	19878793          	addi	a5,a5,408 # 8018038 <kernel_start>
 8001ea8:	e398                	sd	a4,0(a5)
  kernel_end = chosen.kernel_end;
 8001eaa:	fc043703          	ld	a4,-64(s0)
 8001eae:	00016797          	auipc	a5,0x16
 8001eb2:	17a78793          	addi	a5,a5,378 # 8018028 <kernel_end>
 8001eb6:	e398                	sd	a4,0(a5)
}
 8001eb8:	0001                	nop
 8001eba:	60e6                	ld	ra,88(sp)
 8001ebc:	6446                	ld	s0,80(sp)
 8001ebe:	6125                	addi	sp,sp,96
 8001ec0:	8082                	ret

0000000008001ec2 <hart_filter_open>:
  char *mmu_type;
  long *disabled_hart_mask;
};

static void hart_filter_open(const struct fdt_scan_node *node, void *extra)
{
 8001ec2:	7179                	addi	sp,sp,-48
 8001ec4:	f422                	sd	s0,40(sp)
 8001ec6:	1800                	addi	s0,sp,48
 8001ec8:	fca43c23          	sd	a0,-40(s0)
 8001ecc:	fcb43823          	sd	a1,-48(s0)
  struct hart_filter *filter = (struct hart_filter *)extra;
 8001ed0:	fd043783          	ld	a5,-48(s0)
 8001ed4:	fef43423          	sd	a5,-24(s0)
  filter->status = NULL;
 8001ed8:	fe843783          	ld	a5,-24(s0)
 8001edc:	0007b423          	sd	zero,8(a5)
  filter->mmu_type = NULL;
 8001ee0:	fe843783          	ld	a5,-24(s0)
 8001ee4:	0007b823          	sd	zero,16(a5)
  filter->compat = 0;
 8001ee8:	fe843783          	ld	a5,-24(s0)
 8001eec:	0007a023          	sw	zero,0(a5)
  filter->hart = -1;
 8001ef0:	fe843783          	ld	a5,-24(s0)
 8001ef4:	577d                	li	a4,-1
 8001ef6:	c3d8                	sw	a4,4(a5)
}
 8001ef8:	0001                	nop
 8001efa:	7422                	ld	s0,40(sp)
 8001efc:	6145                	addi	sp,sp,48
 8001efe:	8082                	ret

0000000008001f00 <hart_filter_prop>:

static void hart_filter_prop(const struct fdt_scan_prop *prop, void *extra)
{
 8001f00:	7179                	addi	sp,sp,-48
 8001f02:	f406                	sd	ra,40(sp)
 8001f04:	f022                	sd	s0,32(sp)
 8001f06:	1800                	addi	s0,sp,48
 8001f08:	fca43c23          	sd	a0,-40(s0)
 8001f0c:	fcb43823          	sd	a1,-48(s0)
  struct hart_filter *filter = (struct hart_filter *)extra;
 8001f10:	fd043783          	ld	a5,-48(s0)
 8001f14:	fef43423          	sd	a5,-24(s0)
  if (!strcmp(prop->name, "device_type") && !strcmp((const char*)prop->value, "cpu")) {
 8001f18:	fd843783          	ld	a5,-40(s0)
 8001f1c:	679c                	ld	a5,8(a5)
 8001f1e:	0000a597          	auipc	a1,0xa
 8001f22:	05a58593          	addi	a1,a1,90 # 800bf78 <atol+0x162>
 8001f26:	853e                	mv	a0,a5
 8001f28:	635090ef          	jal	ra,800bd5c <strcmp>
 8001f2c:	87aa                	mv	a5,a0
 8001f2e:	e395                	bnez	a5,8001f52 <hart_filter_prop+0x52>
 8001f30:	fd843783          	ld	a5,-40(s0)
 8001f34:	6b9c                	ld	a5,16(a5)
 8001f36:	0000a597          	auipc	a1,0xa
 8001f3a:	0b258593          	addi	a1,a1,178 # 800bfe8 <atol+0x1d2>
 8001f3e:	853e                	mv	a0,a5
 8001f40:	61d090ef          	jal	ra,800bd5c <strcmp>
 8001f44:	87aa                	mv	a5,a0
 8001f46:	e791                	bnez	a5,8001f52 <hart_filter_prop+0x52>
    filter->compat = 1;
 8001f48:	fe843783          	ld	a5,-24(s0)
 8001f4c:	4705                	li	a4,1
 8001f4e:	c398                	sw	a4,0(a5)
  } else if (!strcmp(prop->name, "status")) {
    filter->status = (char*)prop->value;
  } else if (!strcmp(prop->name, "mmu-type")) {
    filter->mmu_type = (char*)prop->value;
  }
}
 8001f50:	a841                	j	8001fe0 <hart_filter_prop+0xe0>
  } else if (!strcmp(prop->name, "reg")) {
 8001f52:	fd843783          	ld	a5,-40(s0)
 8001f56:	679c                	ld	a5,8(a5)
 8001f58:	0000a597          	auipc	a1,0xa
 8001f5c:	03858593          	addi	a1,a1,56 # 800bf90 <atol+0x17a>
 8001f60:	853e                	mv	a0,a5
 8001f62:	5fb090ef          	jal	ra,800bd5c <strcmp>
 8001f66:	87aa                	mv	a5,a0
 8001f68:	e79d                	bnez	a5,8001f96 <hart_filter_prop+0x96>
    fdt_get_address(prop->node->parent, prop->value, &reg);
 8001f6a:	fd843783          	ld	a5,-40(s0)
 8001f6e:	639c                	ld	a5,0(a5)
 8001f70:	6398                	ld	a4,0(a5)
 8001f72:	fd843783          	ld	a5,-40(s0)
 8001f76:	6b9c                	ld	a5,16(a5)
 8001f78:	fe040693          	addi	a3,s0,-32
 8001f7c:	8636                	mv	a2,a3
 8001f7e:	85be                	mv	a1,a5
 8001f80:	853a                	mv	a0,a4
 8001f82:	a6bfe0ef          	jal	ra,80009ec <fdt_get_address>
    filter->hart = reg;
 8001f86:	fe043783          	ld	a5,-32(s0)
 8001f8a:	0007871b          	sext.w	a4,a5
 8001f8e:	fe843783          	ld	a5,-24(s0)
 8001f92:	c3d8                	sw	a4,4(a5)
}
 8001f94:	a0b1                	j	8001fe0 <hart_filter_prop+0xe0>
  } else if (!strcmp(prop->name, "status")) {
 8001f96:	fd843783          	ld	a5,-40(s0)
 8001f9a:	679c                	ld	a5,8(a5)
 8001f9c:	0000a597          	auipc	a1,0xa
 8001fa0:	29458593          	addi	a1,a1,660 # 800c230 <atol+0x41a>
 8001fa4:	853e                	mv	a0,a5
 8001fa6:	5b7090ef          	jal	ra,800bd5c <strcmp>
 8001faa:	87aa                	mv	a5,a0
 8001fac:	eb81                	bnez	a5,8001fbc <hart_filter_prop+0xbc>
    filter->status = (char*)prop->value;
 8001fae:	fd843783          	ld	a5,-40(s0)
 8001fb2:	6b98                	ld	a4,16(a5)
 8001fb4:	fe843783          	ld	a5,-24(s0)
 8001fb8:	e798                	sd	a4,8(a5)
}
 8001fba:	a01d                	j	8001fe0 <hart_filter_prop+0xe0>
  } else if (!strcmp(prop->name, "mmu-type")) {
 8001fbc:	fd843783          	ld	a5,-40(s0)
 8001fc0:	679c                	ld	a5,8(a5)
 8001fc2:	0000a597          	auipc	a1,0xa
 8001fc6:	27658593          	addi	a1,a1,630 # 800c238 <atol+0x422>
 8001fca:	853e                	mv	a0,a5
 8001fcc:	591090ef          	jal	ra,800bd5c <strcmp>
 8001fd0:	87aa                	mv	a5,a0
 8001fd2:	e799                	bnez	a5,8001fe0 <hart_filter_prop+0xe0>
    filter->mmu_type = (char*)prop->value;
 8001fd4:	fd843783          	ld	a5,-40(s0)
 8001fd8:	6b98                	ld	a4,16(a5)
 8001fda:	fe843783          	ld	a5,-24(s0)
 8001fde:	eb98                	sd	a4,16(a5)
}
 8001fe0:	0001                	nop
 8001fe2:	70a2                	ld	ra,40(sp)
 8001fe4:	7402                	ld	s0,32(sp)
 8001fe6:	6145                	addi	sp,sp,48
 8001fe8:	8082                	ret

0000000008001fea <hart_filter_mask>:

static bool hart_filter_mask(const struct hart_filter *filter)
{
 8001fea:	1101                	addi	sp,sp,-32
 8001fec:	ec06                	sd	ra,24(sp)
 8001fee:	e822                	sd	s0,16(sp)
 8001ff0:	1000                	addi	s0,sp,32
 8001ff2:	fea43423          	sd	a0,-24(s0)
  if (filter->mmu_type == NULL) return true;
 8001ff6:	fe843783          	ld	a5,-24(s0)
 8001ffa:	6b9c                	ld	a5,16(a5)
 8001ffc:	e399                	bnez	a5,8002002 <hart_filter_mask+0x18>
 8001ffe:	4785                	li	a5,1
 8002000:	a895                	j	8002074 <hart_filter_mask+0x8a>
  if (strcmp(filter->status, "okay")) return true;
 8002002:	fe843783          	ld	a5,-24(s0)
 8002006:	679c                	ld	a5,8(a5)
 8002008:	0000a597          	auipc	a1,0xa
 800200c:	24058593          	addi	a1,a1,576 # 800c248 <atol+0x432>
 8002010:	853e                	mv	a0,a5
 8002012:	54b090ef          	jal	ra,800bd5c <strcmp>
 8002016:	87aa                	mv	a5,a0
 8002018:	c399                	beqz	a5,800201e <hart_filter_mask+0x34>
 800201a:	4785                	li	a5,1
 800201c:	a8a1                	j	8002074 <hart_filter_mask+0x8a>
#if __riscv_xlen == 32
  if (!strcmp(filter->mmu_type, "riscv,sv32")) return false;
#else
  if (!strcmp(filter->mmu_type, "riscv,sv39")) return false;
 800201e:	fe843783          	ld	a5,-24(s0)
 8002022:	6b9c                	ld	a5,16(a5)
 8002024:	0000a597          	auipc	a1,0xa
 8002028:	22c58593          	addi	a1,a1,556 # 800c250 <atol+0x43a>
 800202c:	853e                	mv	a0,a5
 800202e:	52f090ef          	jal	ra,800bd5c <strcmp>
 8002032:	87aa                	mv	a5,a0
 8002034:	e399                	bnez	a5,800203a <hart_filter_mask+0x50>
 8002036:	4781                	li	a5,0
 8002038:	a835                	j	8002074 <hart_filter_mask+0x8a>
  if (!strcmp(filter->mmu_type, "riscv,sv48")) return false;
 800203a:	fe843783          	ld	a5,-24(s0)
 800203e:	6b9c                	ld	a5,16(a5)
 8002040:	0000a597          	auipc	a1,0xa
 8002044:	22058593          	addi	a1,a1,544 # 800c260 <atol+0x44a>
 8002048:	853e                	mv	a0,a5
 800204a:	513090ef          	jal	ra,800bd5c <strcmp>
 800204e:	87aa                	mv	a5,a0
 8002050:	e399                	bnez	a5,8002056 <hart_filter_mask+0x6c>
 8002052:	4781                	li	a5,0
 8002054:	a005                	j	8002074 <hart_filter_mask+0x8a>
#endif
  printm("hart_filter_mask saw unknown hart type: status=\"%s\", mmu_type=\"%s\"\n",
 8002056:	fe843783          	ld	a5,-24(s0)
 800205a:	6798                	ld	a4,8(a5)
 800205c:	fe843783          	ld	a5,-24(s0)
 8002060:	6b9c                	ld	a5,16(a5)
 8002062:	863e                	mv	a2,a5
 8002064:	85ba                	mv	a1,a4
 8002066:	0000a517          	auipc	a0,0xa
 800206a:	20a50513          	addi	a0,a0,522 # 800c270 <atol+0x45a>
 800206e:	314000ef          	jal	ra,8002382 <printm>
         filter->status, filter->mmu_type);
  return true;
 8002072:	4785                	li	a5,1
}
 8002074:	853e                	mv	a0,a5
 8002076:	60e2                	ld	ra,24(sp)
 8002078:	6442                	ld	s0,16(sp)
 800207a:	6105                	addi	sp,sp,32
 800207c:	8082                	ret

000000000800207e <hart_filter_done>:

static void hart_filter_done(const struct fdt_scan_node *node, void *extra)
{
 800207e:	7139                	addi	sp,sp,-64
 8002080:	fc06                	sd	ra,56(sp)
 8002082:	f822                	sd	s0,48(sp)
 8002084:	f426                	sd	s1,40(sp)
 8002086:	0080                	addi	s0,sp,64
 8002088:	fca43423          	sd	a0,-56(s0)
 800208c:	fcb43023          	sd	a1,-64(s0)
  struct hart_filter *filter = (struct hart_filter *)extra;
 8002090:	fc043783          	ld	a5,-64(s0)
 8002094:	fcf43c23          	sd	a5,-40(s0)

  if (!filter->compat) return;
 8002098:	fd843783          	ld	a5,-40(s0)
 800209c:	439c                	lw	a5,0(a5)
 800209e:	0e078f63          	beqz	a5,800219c <hart_filter_done+0x11e>
  assert (filter->status);
 80020a2:	fd843783          	ld	a5,-40(s0)
 80020a6:	679c                	ld	a5,8(a5)
 80020a8:	e795                	bnez	a5,80020d4 <hart_filter_done+0x56>
 80020aa:	0000a697          	auipc	a3,0xa
 80020ae:	20e68693          	addi	a3,a3,526 # 800c2b8 <atol+0x4a2>
 80020b2:	2a300613          	li	a2,675
 80020b6:	0000a597          	auipc	a1,0xa
 80020ba:	e6a58593          	addi	a1,a1,-406 # 800bf20 <atol+0x10a>
 80020be:	0000a517          	auipc	a0,0xa
 80020c2:	e7a50513          	addi	a0,a0,-390 # 800bf38 <atol+0x122>
 80020c6:	2bc000ef          	jal	ra,8002382 <printm>
 80020ca:	67c1                	lui	a5,0x10
 80020cc:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7ff0001>
 80020d0:	0fd000ef          	jal	ra,80029cc <poweroff>
  assert (filter->hart >= 0);
 80020d4:	fd843783          	ld	a5,-40(s0)
 80020d8:	43dc                	lw	a5,4(a5)
 80020da:	0207d763          	bgez	a5,8002108 <hart_filter_done+0x8a>
 80020de:	0000a697          	auipc	a3,0xa
 80020e2:	1ea68693          	addi	a3,a3,490 # 800c2c8 <atol+0x4b2>
 80020e6:	2a400613          	li	a2,676
 80020ea:	0000a597          	auipc	a1,0xa
 80020ee:	e3658593          	addi	a1,a1,-458 # 800bf20 <atol+0x10a>
 80020f2:	0000a517          	auipc	a0,0xa
 80020f6:	e4650513          	addi	a0,a0,-442 # 800bf38 <atol+0x122>
 80020fa:	288000ef          	jal	ra,8002382 <printm>
 80020fe:	67c1                	lui	a5,0x10
 8002100:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7ff0001>
 8002104:	0c9000ef          	jal	ra,80029cc <poweroff>

  if (hart_filter_mask(filter)) {
 8002108:	fd843503          	ld	a0,-40(s0)
 800210c:	edfff0ef          	jal	ra,8001fea <hart_filter_mask>
 8002110:	87aa                	mv	a5,a0
 8002112:	c7d1                	beqz	a5,800219e <hart_filter_done+0x120>
    strcpy(filter->status, "masked");
 8002114:	fd843783          	ld	a5,-40(s0)
 8002118:	679c                	ld	a5,8(a5)
 800211a:	0000a717          	auipc	a4,0xa
 800211e:	1c670713          	addi	a4,a4,454 # 800c2e0 <atol+0x4ca>
 8002122:	00074883          	lbu	a7,0(a4)
 8002126:	00174803          	lbu	a6,1(a4)
 800212a:	00274503          	lbu	a0,2(a4)
 800212e:	00374583          	lbu	a1,3(a4)
 8002132:	00474603          	lbu	a2,4(a4)
 8002136:	00574683          	lbu	a3,5(a4)
 800213a:	00674703          	lbu	a4,6(a4)
 800213e:	01178023          	sb	a7,0(a5)
 8002142:	010780a3          	sb	a6,1(a5)
 8002146:	00a78123          	sb	a0,2(a5)
 800214a:	00b781a3          	sb	a1,3(a5)
 800214e:	00c78223          	sb	a2,4(a5)
 8002152:	00d782a3          	sb	a3,5(a5)
 8002156:	00e78323          	sb	a4,6(a5)
    uint32_t *len = (uint32_t*)filter->status;
 800215a:	fd843783          	ld	a5,-40(s0)
 800215e:	679c                	ld	a5,8(a5)
 8002160:	fcf43823          	sd	a5,-48(s0)
    len[-2] = bswap(strlen("masked")+1);
 8002164:	fd043783          	ld	a5,-48(s0)
 8002168:	ff878493          	addi	s1,a5,-8
 800216c:	451d                	li	a0,7
 800216e:	c16fe0ef          	jal	ra,8000584 <bswap>
 8002172:	87aa                	mv	a5,a0
 8002174:	2781                	sext.w	a5,a5
 8002176:	c09c                	sw	a5,0(s1)
    *filter->disabled_hart_mask |= (1 << filter->hart);
 8002178:	fd843783          	ld	a5,-40(s0)
 800217c:	6f9c                	ld	a5,24(a5)
 800217e:	6398                	ld	a4,0(a5)
 8002180:	fd843783          	ld	a5,-40(s0)
 8002184:	43dc                	lw	a5,4(a5)
 8002186:	4685                	li	a3,1
 8002188:	00f697bb          	sllw	a5,a3,a5
 800218c:	2781                	sext.w	a5,a5
 800218e:	86be                	mv	a3,a5
 8002190:	fd843783          	ld	a5,-40(s0)
 8002194:	6f9c                	ld	a5,24(a5)
 8002196:	8f55                	or	a4,a4,a3
 8002198:	e398                	sd	a4,0(a5)
 800219a:	a011                	j	800219e <hart_filter_done+0x120>
  if (!filter->compat) return;
 800219c:	0001                	nop
  }
}
 800219e:	70e2                	ld	ra,56(sp)
 80021a0:	7442                	ld	s0,48(sp)
 80021a2:	74a2                	ld	s1,40(sp)
 80021a4:	6121                	addi	sp,sp,64
 80021a6:	8082                	ret

00000000080021a8 <filter_harts>:

void filter_harts(uintptr_t fdt, long *disabled_hart_mask)
{
 80021a8:	7159                	addi	sp,sp,-112
 80021aa:	f486                	sd	ra,104(sp)
 80021ac:	f0a2                	sd	s0,96(sp)
 80021ae:	1880                	addi	s0,sp,112
 80021b0:	f8a43c23          	sd	a0,-104(s0)
 80021b4:	f8b43823          	sd	a1,-112(s0)
  struct fdt_cb cb;
  struct hart_filter filter;

  memset(&cb, 0, sizeof(cb));
 80021b8:	fc840793          	addi	a5,s0,-56
 80021bc:	02800613          	li	a2,40
 80021c0:	4581                	li	a1,0
 80021c2:	853e                	mv	a0,a5
 80021c4:	28f090ef          	jal	ra,800bc52 <memset>
  cb.open = hart_filter_open;
 80021c8:	00000797          	auipc	a5,0x0
 80021cc:	cfa78793          	addi	a5,a5,-774 # 8001ec2 <hart_filter_open>
 80021d0:	fcf43423          	sd	a5,-56(s0)
  cb.prop = hart_filter_prop;
 80021d4:	00000797          	auipc	a5,0x0
 80021d8:	d2c78793          	addi	a5,a5,-724 # 8001f00 <hart_filter_prop>
 80021dc:	fcf43823          	sd	a5,-48(s0)
  cb.done = hart_filter_done;
 80021e0:	00000797          	auipc	a5,0x0
 80021e4:	e9e78793          	addi	a5,a5,-354 # 800207e <hart_filter_done>
 80021e8:	fcf43c23          	sd	a5,-40(s0)
  cb.extra = &filter;
 80021ec:	fa840793          	addi	a5,s0,-88
 80021f0:	fef43423          	sd	a5,-24(s0)

  filter.disabled_hart_mask = disabled_hart_mask;
 80021f4:	f9043783          	ld	a5,-112(s0)
 80021f8:	fcf43023          	sd	a5,-64(s0)
  *disabled_hart_mask = 0;
 80021fc:	f9043783          	ld	a5,-112(s0)
 8002200:	0007b023          	sd	zero,0(a5)
  fdt_scan(fdt, &cb);
 8002204:	fc840793          	addi	a5,s0,-56
 8002208:	85be                	mv	a1,a5
 800220a:	f9843503          	ld	a0,-104(s0)
 800220e:	ecafe0ef          	jal	ra,80008d8 <fdt_scan>
}
 8002212:	0001                	nop
 8002214:	70a6                	ld	ra,104(sp)
 8002216:	7406                	ld	s0,96(sp)
 8002218:	6165                	addi	sp,sp,112
 800221a:	8082                	ret

000000000800221c <load_uintptr_t>:
DECLARE_UNPRIVILEGED_STORE_FUNCTION(uint32_t, sw)
#if __riscv_xlen == 64
DECLARE_UNPRIVILEGED_LOAD_FUNCTION(uint32_t, lwu)
DECLARE_UNPRIVILEGED_LOAD_FUNCTION(uint64_t, ld)
DECLARE_UNPRIVILEGED_STORE_FUNCTION(uint64_t, sd)
DECLARE_UNPRIVILEGED_LOAD_FUNCTION(uintptr_t, ld)
 800221c:	7179                	addi	sp,sp,-48
 800221e:	f422                	sd	s0,40(sp)
 8002220:	1800                	addi	s0,sp,48
 8002222:	fca43c23          	sd	a0,-40(s0)
 8002226:	fcb43823          	sd	a1,-48(s0)
 800222a:	000205b7          	lui	a1,0x20
 800222e:	fd043603          	ld	a2,-48(s0)
 8002232:	fd843783          	ld	a5,-40(s0)
 8002236:	3005a6f3          	csrrs	a3,mstatus,a1
 800223a:	6398                	ld	a4,0(a5)
 800223c:	30069073          	csrw	mstatus,a3
 8002240:	87ba                	mv	a5,a4
 8002242:	fef43423          	sd	a5,-24(s0)
 8002246:	fe843783          	ld	a5,-24(s0)
 800224a:	853e                	mv	a0,a5
 800224c:	7422                	ld	s0,40(sp)
 800224e:	6145                	addi	sp,sp,48
 8002250:	8082                	ret

0000000008002252 <bad_trap>:
#include <errno.h>
#include <stdarg.h>
#include <stdio.h>

void __attribute__((noreturn)) bad_trap(uintptr_t* regs, uintptr_t dummy, uintptr_t mepc)
{
 8002252:	7139                	addi	sp,sp,-64
 8002254:	fc06                	sd	ra,56(sp)
 8002256:	f822                	sd	s0,48(sp)
 8002258:	0080                	addi	s0,sp,64
 800225a:	fca43c23          	sd	a0,-40(s0)
 800225e:	fcb43823          	sd	a1,-48(s0)
 8002262:	fcc43423          	sd	a2,-56(s0)
  die("machine mode: unhandlable trap %d @ %p", read_csr(mcause), mepc);
 8002266:	342027f3          	csrr	a5,mcause
 800226a:	fef43423          	sd	a5,-24(s0)
 800226e:	fe843783          	ld	a5,-24(s0)
 8002272:	fc843703          	ld	a4,-56(s0)
 8002276:	86be                	mv	a3,a5
 8002278:	4659                	li	a2,22
 800227a:	0000a597          	auipc	a1,0xa
 800227e:	06e58593          	addi	a1,a1,110 # 800c2e8 <atol+0x4d2>
 8002282:	0000a517          	auipc	a0,0xa
 8002286:	07e50513          	addi	a0,a0,126 # 800c300 <atol+0x4ea>
 800228a:	0f8000ef          	jal	ra,8002382 <printm>
 800228e:	67c1                	lui	a5,0x10
 8002290:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7ff0001>
 8002294:	738000ef          	jal	ra,80029cc <poweroff>

0000000008002298 <mcall_console_putchar>:
}

static uintptr_t mcall_console_putchar(uint8_t ch)
{
 8002298:	1101                	addi	sp,sp,-32
 800229a:	ec06                	sd	ra,24(sp)
 800229c:	e822                	sd	s0,16(sp)
 800229e:	1000                	addi	s0,sp,32
 80022a0:	87aa                	mv	a5,a0
 80022a2:	fef407a3          	sb	a5,-17(s0)
  if (uart) {
 80022a6:	00016797          	auipc	a5,0x16
 80022aa:	daa78793          	addi	a5,a5,-598 # 8018050 <uart>
 80022ae:	639c                	ld	a5,0(a5)
 80022b0:	c799                	beqz	a5,80022be <mcall_console_putchar+0x26>
    uart_putchar(ch);
 80022b2:	fef44783          	lbu	a5,-17(s0)
 80022b6:	853e                	mv	a0,a5
 80022b8:	378010ef          	jal	ra,8003630 <uart_putchar>
 80022bc:	a0a1                	j	8002304 <mcall_console_putchar+0x6c>
  } else if (uart16550) {
 80022be:	00016797          	auipc	a5,0x16
 80022c2:	d9a78793          	addi	a5,a5,-614 # 8018058 <uart16550>
 80022c6:	639c                	ld	a5,0(a5)
 80022c8:	c799                	beqz	a5,80022d6 <mcall_console_putchar+0x3e>
    uart16550_putchar(ch);
 80022ca:	fef44783          	lbu	a5,-17(s0)
 80022ce:	853e                	mv	a0,a5
 80022d0:	554010ef          	jal	ra,8003824 <uart16550_putchar>
 80022d4:	a805                	j	8002304 <mcall_console_putchar+0x6c>
  } else if (uart_litex) {
 80022d6:	00016797          	auipc	a5,0x16
 80022da:	d8a78793          	addi	a5,a5,-630 # 8018060 <uart_litex>
 80022de:	639c                	ld	a5,0(a5)
 80022e0:	c799                	beqz	a5,80022ee <mcall_console_putchar+0x56>
    uart_litex_putchar(ch);
 80022e2:	fef44783          	lbu	a5,-17(s0)
 80022e6:	853e                	mv	a0,a5
 80022e8:	1a9010ef          	jal	ra,8003c90 <uart_litex_putchar>
 80022ec:	a821                	j	8002304 <mcall_console_putchar+0x6c>
  } else if (htif) {
 80022ee:	00016797          	auipc	a5,0x16
 80022f2:	d5278793          	addi	a5,a5,-686 # 8018040 <htif>
 80022f6:	639c                	ld	a5,0(a5)
 80022f8:	c791                	beqz	a5,8002304 <mcall_console_putchar+0x6c>
    htif_console_putchar(ch);
 80022fa:	fef44783          	lbu	a5,-17(s0)
 80022fe:	853e                	mv	a0,a5
 8002300:	1ac010ef          	jal	ra,80034ac <htif_console_putchar>
  }
  return 0;
 8002304:	4781                	li	a5,0
}
 8002306:	853e                	mv	a0,a5
 8002308:	60e2                	ld	ra,24(sp)
 800230a:	6442                	ld	s0,16(sp)
 800230c:	6105                	addi	sp,sp,32
 800230e:	8082                	ret

0000000008002310 <putstring>:

void putstring(const char* s)
{
 8002310:	1101                	addi	sp,sp,-32
 8002312:	ec06                	sd	ra,24(sp)
 8002314:	e822                	sd	s0,16(sp)
 8002316:	1000                	addi	s0,sp,32
 8002318:	fea43423          	sd	a0,-24(s0)
  while (*s)
 800231c:	a821                	j	8002334 <putstring+0x24>
    mcall_console_putchar(*s++);
 800231e:	fe843783          	ld	a5,-24(s0)
 8002322:	00178713          	addi	a4,a5,1
 8002326:	fee43423          	sd	a4,-24(s0)
 800232a:	0007c783          	lbu	a5,0(a5)
 800232e:	853e                	mv	a0,a5
 8002330:	f69ff0ef          	jal	ra,8002298 <mcall_console_putchar>
  while (*s)
 8002334:	fe843783          	ld	a5,-24(s0)
 8002338:	0007c783          	lbu	a5,0(a5)
 800233c:	f3ed                	bnez	a5,800231e <putstring+0xe>
}
 800233e:	0001                	nop
 8002340:	60e2                	ld	ra,24(sp)
 8002342:	6442                	ld	s0,16(sp)
 8002344:	6105                	addi	sp,sp,32
 8002346:	8082                	ret

0000000008002348 <vprintm>:

void vprintm(const char* s, va_list vl)
{
 8002348:	712d                	addi	sp,sp,-288
 800234a:	ee06                	sd	ra,280(sp)
 800234c:	ea22                	sd	s0,272(sp)
 800234e:	1200                	addi	s0,sp,288
 8002350:	eea43423          	sd	a0,-280(s0)
 8002354:	eeb43023          	sd	a1,-288(s0)
  char buf[256];
  vsnprintf(buf, sizeof buf, s, vl);
 8002358:	ef040793          	addi	a5,s0,-272
 800235c:	ee043683          	ld	a3,-288(s0)
 8002360:	ee843603          	ld	a2,-280(s0)
 8002364:	10000593          	li	a1,256
 8002368:	853e                	mv	a0,a5
 800236a:	396090ef          	jal	ra,800b700 <vsnprintf>
  putstring(buf);
 800236e:	ef040793          	addi	a5,s0,-272
 8002372:	853e                	mv	a0,a5
 8002374:	f9dff0ef          	jal	ra,8002310 <putstring>
}
 8002378:	0001                	nop
 800237a:	60f2                	ld	ra,280(sp)
 800237c:	6452                	ld	s0,272(sp)
 800237e:	6115                	addi	sp,sp,288
 8002380:	8082                	ret

0000000008002382 <printm>:

void printm(const char* s, ...)
{
 8002382:	7159                	addi	sp,sp,-112
 8002384:	f406                	sd	ra,40(sp)
 8002386:	f022                	sd	s0,32(sp)
 8002388:	1800                	addi	s0,sp,48
 800238a:	fca43c23          	sd	a0,-40(s0)
 800238e:	e40c                	sd	a1,8(s0)
 8002390:	e810                	sd	a2,16(s0)
 8002392:	ec14                	sd	a3,24(s0)
 8002394:	f018                	sd	a4,32(s0)
 8002396:	f41c                	sd	a5,40(s0)
 8002398:	03043823          	sd	a6,48(s0)
 800239c:	03143c23          	sd	a7,56(s0)
  va_list vl;

  va_start(vl, s);
 80023a0:	04040793          	addi	a5,s0,64
 80023a4:	fc878793          	addi	a5,a5,-56
 80023a8:	fef43423          	sd	a5,-24(s0)
  vprintm(s, vl);
 80023ac:	fe843783          	ld	a5,-24(s0)
 80023b0:	85be                	mv	a1,a5
 80023b2:	fd843503          	ld	a0,-40(s0)
 80023b6:	f93ff0ef          	jal	ra,8002348 <vprintm>
  va_end(vl);
}
 80023ba:	0001                	nop
 80023bc:	70a2                	ld	ra,40(sp)
 80023be:	7402                	ld	s0,32(sp)
 80023c0:	6165                	addi	sp,sp,112
 80023c2:	8082                	ret

00000000080023c4 <send_ipi>:

static void send_ipi(uintptr_t recipient, int event)
{
 80023c4:	7139                	addi	sp,sp,-64
 80023c6:	fc22                	sd	s0,56(sp)
 80023c8:	0080                	addi	s0,sp,64
 80023ca:	fca43423          	sd	a0,-56(s0)
 80023ce:	87ae                	mv	a5,a1
 80023d0:	fcf42223          	sw	a5,-60(s0)
  if (((disabled_hart_mask >> recipient) & 1)) return;
 80023d4:	00016797          	auipc	a5,0x16
 80023d8:	c2c78793          	addi	a5,a5,-980 # 8018000 <disabled_hart_mask>
 80023dc:	6398                	ld	a4,0(a5)
 80023de:	fc843783          	ld	a5,-56(s0)
 80023e2:	2781                	sext.w	a5,a5
 80023e4:	40f757b3          	sra	a5,a4,a5
 80023e8:	8b85                	andi	a5,a5,1
 80023ea:	efb5                	bnez	a5,8002466 <send_ipi+0xa2>
  atomic_or(&OTHER_HLS(recipient)->mipi_pending, event);
 80023ec:	87a2                	mv	a5,s0
 80023ee:	fef43423          	sd	a5,-24(s0)
 80023f2:	fe843703          	ld	a4,-24(s0)
 80023f6:	6785                	lui	a5,0x1
 80023f8:	973e                	add	a4,a4,a5
 80023fa:	77fd                	lui	a5,0xfffff
 80023fc:	8ff9                	and	a5,a5,a4
 80023fe:	86be                	mv	a3,a5
 8002400:	f14027f3          	csrr	a5,mhartid
 8002404:	fef43023          	sd	a5,-32(s0)
 8002408:	fe043783          	ld	a5,-32(s0)
 800240c:	fc843703          	ld	a4,-56(s0)
 8002410:	40f707b3          	sub	a5,a4,a5
 8002414:	07b2                	slli	a5,a5,0xc
 8002416:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xfffffffff7833020>
 800241a:	97b6                	add	a5,a5,a3
 800241c:	07a1                	addi	a5,a5,8
 800241e:	fc442703          	lw	a4,-60(s0)
 8002422:	0f50000f          	fence	iorw,ow
 8002426:	44e7a02f          	amoor.w.aq	zero,a4,(a5)
  mb();
 800242a:	0ff0000f          	fence
  *OTHER_HLS(recipient)->ipi = 1;
 800242e:	87a2                	mv	a5,s0
 8002430:	fcf43c23          	sd	a5,-40(s0)
 8002434:	fd843703          	ld	a4,-40(s0)
 8002438:	6785                	lui	a5,0x1
 800243a:	973e                	add	a4,a4,a5
 800243c:	77fd                	lui	a5,0xfffff
 800243e:	8ff9                	and	a5,a5,a4
 8002440:	86be                	mv	a3,a5
 8002442:	f14027f3          	csrr	a5,mhartid
 8002446:	fcf43823          	sd	a5,-48(s0)
 800244a:	fd043783          	ld	a5,-48(s0)
 800244e:	fc843703          	ld	a4,-56(s0)
 8002452:	40f707b3          	sub	a5,a4,a5
 8002456:	07b2                	slli	a5,a5,0xc
 8002458:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xfffffffff7833020>
 800245c:	97b6                	add	a5,a5,a3
 800245e:	639c                	ld	a5,0(a5)
 8002460:	4705                	li	a4,1
 8002462:	c398                	sw	a4,0(a5)
 8002464:	a011                	j	8002468 <send_ipi+0xa4>
  if (((disabled_hart_mask >> recipient) & 1)) return;
 8002466:	0001                	nop
}
 8002468:	7462                	ld	s0,56(sp)
 800246a:	6121                	addi	sp,sp,64
 800246c:	8082                	ret

000000000800246e <mcall_console_getchar>:

static uintptr_t mcall_console_getchar()
{
 800246e:	1141                	addi	sp,sp,-16
 8002470:	e406                	sd	ra,8(sp)
 8002472:	e022                	sd	s0,0(sp)
 8002474:	0800                	addi	s0,sp,16
  if (uart) {
 8002476:	00016797          	auipc	a5,0x16
 800247a:	bda78793          	addi	a5,a5,-1062 # 8018050 <uart>
 800247e:	639c                	ld	a5,0(a5)
 8002480:	c789                	beqz	a5,800248a <mcall_console_getchar+0x1c>
    return uart_getchar();
 8002482:	1e2010ef          	jal	ra,8003664 <uart_getchar>
 8002486:	87aa                	mv	a5,a0
 8002488:	a081                	j	80024c8 <mcall_console_getchar+0x5a>
  } else if (uart16550) {
 800248a:	00016797          	auipc	a5,0x16
 800248e:	bce78793          	addi	a5,a5,-1074 # 8018058 <uart16550>
 8002492:	639c                	ld	a5,0(a5)
 8002494:	c789                	beqz	a5,800249e <mcall_console_getchar+0x30>
    return uart16550_getchar();
 8002496:	3e6010ef          	jal	ra,800387c <uart16550_getchar>
 800249a:	87aa                	mv	a5,a0
 800249c:	a035                	j	80024c8 <mcall_console_getchar+0x5a>
  } else if (uart_litex) {
 800249e:	00016797          	auipc	a5,0x16
 80024a2:	bc278793          	addi	a5,a5,-1086 # 8018060 <uart_litex>
 80024a6:	639c                	ld	a5,0(a5)
 80024a8:	c789                	beqz	a5,80024b2 <mcall_console_getchar+0x44>
    return uart_litex_getchar();
 80024aa:	025010ef          	jal	ra,8003cce <uart_litex_getchar>
 80024ae:	87aa                	mv	a5,a0
 80024b0:	a821                	j	80024c8 <mcall_console_getchar+0x5a>
  } else if (htif) {
 80024b2:	00016797          	auipc	a5,0x16
 80024b6:	b8e78793          	addi	a5,a5,-1138 # 8018040 <htif>
 80024ba:	639c                	ld	a5,0(a5)
 80024bc:	c789                	beqz	a5,80024c6 <mcall_console_getchar+0x58>
    return htif_console_getchar();
 80024be:	6dd000ef          	jal	ra,800339a <htif_console_getchar>
 80024c2:	87aa                	mv	a5,a0
 80024c4:	a011                	j	80024c8 <mcall_console_getchar+0x5a>
  } else {
    return (uintptr_t)-1;
 80024c6:	57fd                	li	a5,-1
  }
}
 80024c8:	853e                	mv	a0,a5
 80024ca:	60a2                	ld	ra,8(sp)
 80024cc:	6402                	ld	s0,0(sp)
 80024ce:	0141                	addi	sp,sp,16
 80024d0:	8082                	ret

00000000080024d2 <mcall_clear_ipi>:

static uintptr_t mcall_clear_ipi()
{
 80024d2:	1101                	addi	sp,sp,-32
 80024d4:	ec22                	sd	s0,24(sp)
 80024d6:	1000                	addi	s0,sp,32
  return clear_csr(mip, MIP_SSIP) & MIP_SSIP;
 80024d8:	344177f3          	csrrci	a5,mip,2
 80024dc:	fef43423          	sd	a5,-24(s0)
 80024e0:	fe843783          	ld	a5,-24(s0)
 80024e4:	8b89                	andi	a5,a5,2
}
 80024e6:	853e                	mv	a0,a5
 80024e8:	6462                	ld	s0,24(sp)
 80024ea:	6105                	addi	sp,sp,32
 80024ec:	8082                	ret

00000000080024ee <mcall_shutdown>:

static uintptr_t mcall_shutdown()
{
 80024ee:	1141                	addi	sp,sp,-16
 80024f0:	e406                	sd	ra,8(sp)
 80024f2:	e022                	sd	s0,0(sp)
 80024f4:	0800                	addi	s0,sp,16
  poweroff(0);
 80024f6:	4501                	li	a0,0
 80024f8:	4d4000ef          	jal	ra,80029cc <poweroff>

00000000080024fc <mcall_set_timer>:
}

static uintptr_t mcall_set_timer(uint64_t when)
{
 80024fc:	7139                	addi	sp,sp,-64
 80024fe:	fc22                	sd	s0,56(sp)
 8002500:	0080                	addi	s0,sp,64
 8002502:	fca43423          	sd	a0,-56(s0)
  *HLS()->timecmp = when;
 8002506:	87a2                	mv	a5,s0
 8002508:	fef43423          	sd	a5,-24(s0)
 800250c:	fe843703          	ld	a4,-24(s0)
 8002510:	6785                	lui	a5,0x1
 8002512:	973e                	add	a4,a4,a5
 8002514:	77fd                	lui	a5,0xfffff
 8002516:	8ff9                	and	a5,a5,a4
 8002518:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xfffffffff7833020>
 800251c:	6b9c                	ld	a5,16(a5)
 800251e:	fc843703          	ld	a4,-56(s0)
 8002522:	e398                	sd	a4,0(a5)
  clear_csr(mip, MIP_STIP);
 8002524:	02000793          	li	a5,32
 8002528:	3447b7f3          	csrrc	a5,mip,a5
 800252c:	fef43023          	sd	a5,-32(s0)
  set_csr(mie, MIP_MTIP);
 8002530:	08000793          	li	a5,128
 8002534:	3047a7f3          	csrrs	a5,mie,a5
 8002538:	fcf43c23          	sd	a5,-40(s0)
  return 0;
 800253c:	4781                	li	a5,0
}
 800253e:	853e                	mv	a0,a5
 8002540:	7462                	ld	s0,56(sp)
 8002542:	6121                	addi	sp,sp,64
 8002544:	8082                	ret

0000000008002546 <send_ipi_many>:

static void send_ipi_many(uintptr_t* pmask, int event)
{
 8002546:	7119                	addi	sp,sp,-128
 8002548:	fc86                	sd	ra,120(sp)
 800254a:	f8a2                	sd	s0,112(sp)
 800254c:	0100                	addi	s0,sp,128
 800254e:	f8a43423          	sd	a0,-120(s0)
 8002552:	87ae                	mv	a5,a1
 8002554:	f8f42223          	sw	a5,-124(s0)
  _Static_assert(MAX_HARTS <= 8 * sizeof(*pmask), "# harts > uintptr_t bits");
  uintptr_t mask = hart_mask;
 8002558:	00016797          	auipc	a5,0x16
 800255c:	ab078793          	addi	a5,a5,-1360 # 8018008 <hart_mask>
 8002560:	639c                	ld	a5,0(a5)
 8002562:	fef43423          	sd	a5,-24(s0)
  if (pmask)
 8002566:	f8843783          	ld	a5,-120(s0)
 800256a:	c395                	beqz	a5,800258e <send_ipi_many+0x48>
    mask &= load_uintptr_t(pmask, read_csr(mepc));
 800256c:	341027f3          	csrr	a5,mepc
 8002570:	faf43c23          	sd	a5,-72(s0)
 8002574:	fb843783          	ld	a5,-72(s0)
 8002578:	85be                	mv	a1,a5
 800257a:	f8843503          	ld	a0,-120(s0)
 800257e:	c9fff0ef          	jal	ra,800221c <load_uintptr_t>
 8002582:	872a                	mv	a4,a0
 8002584:	fe843783          	ld	a5,-24(s0)
 8002588:	8ff9                	and	a5,a5,a4
 800258a:	fef43423          	sd	a5,-24(s0)

  // send IPIs to everyone
  for (uintptr_t i = 0, m = mask; m; i++, m >>= 1)
 800258e:	fe043023          	sd	zero,-32(s0)
 8002592:	fe843783          	ld	a5,-24(s0)
 8002596:	fcf43c23          	sd	a5,-40(s0)
 800259a:	a035                	j	80025c6 <send_ipi_many+0x80>
    if (m & 1)
 800259c:	fd843783          	ld	a5,-40(s0)
 80025a0:	8b85                	andi	a5,a5,1
 80025a2:	cb81                	beqz	a5,80025b2 <send_ipi_many+0x6c>
      send_ipi(i, event);
 80025a4:	f8442783          	lw	a5,-124(s0)
 80025a8:	85be                	mv	a1,a5
 80025aa:	fe043503          	ld	a0,-32(s0)
 80025ae:	e17ff0ef          	jal	ra,80023c4 <send_ipi>
  for (uintptr_t i = 0, m = mask; m; i++, m >>= 1)
 80025b2:	fe043783          	ld	a5,-32(s0)
 80025b6:	0785                	addi	a5,a5,1
 80025b8:	fef43023          	sd	a5,-32(s0)
 80025bc:	fd843783          	ld	a5,-40(s0)
 80025c0:	8385                	srli	a5,a5,0x1
 80025c2:	fcf43c23          	sd	a5,-40(s0)
 80025c6:	fd843783          	ld	a5,-40(s0)
 80025ca:	fbe9                	bnez	a5,800259c <send_ipi_many+0x56>

  if (event == IPI_SOFT)
 80025cc:	f8442783          	lw	a5,-124(s0)
 80025d0:	0007871b          	sext.w	a4,a5
 80025d4:	4785                	li	a5,1
 80025d6:	0cf70763          	beq	a4,a5,80026a4 <send_ipi_many+0x15e>
    return;

  // wait until all events have been handled.
  // prevent deadlock by consuming incoming IPIs.
  uint32_t incoming_ipi = 0;
 80025da:	fc042a23          	sw	zero,-44(s0)
  for (uintptr_t i = 0, m = mask; m; i++, m >>= 1)
 80025de:	fc043423          	sd	zero,-56(s0)
 80025e2:	fe843783          	ld	a5,-24(s0)
 80025e6:	fcf43023          	sd	a5,-64(s0)
 80025ea:	a061                	j	8002672 <send_ipi_many+0x12c>
    if (m & 1)
 80025ec:	fc043783          	ld	a5,-64(s0)
 80025f0:	8b85                	andi	a5,a5,1
 80025f2:	c7b5                	beqz	a5,800265e <send_ipi_many+0x118>
      while (*OTHER_HLS(i)->ipi)
 80025f4:	a80d                	j	8002626 <send_ipi_many+0xe0>
        incoming_ipi |= atomic_swap(HLS()->ipi, 0);
 80025f6:	87a2                	mv	a5,s0
 80025f8:	faf43023          	sd	a5,-96(s0)
 80025fc:	fa043703          	ld	a4,-96(s0)
 8002600:	6785                	lui	a5,0x1
 8002602:	973e                	add	a4,a4,a5
 8002604:	77fd                	lui	a5,0xfffff
 8002606:	8ff9                	and	a5,a5,a4
 8002608:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xfffffffff7833020>
 800260c:	639c                	ld	a5,0(a5)
 800260e:	4701                	li	a4,0
 8002610:	0ce7a72f          	amoswap.w.aq	a4,a4,(a5)
 8002614:	86ba                	mv	a3,a4
 8002616:	0006879b          	sext.w	a5,a3
 800261a:	873e                	mv	a4,a5
 800261c:	fd442783          	lw	a5,-44(s0)
 8002620:	8fd9                	or	a5,a5,a4
 8002622:	fcf42a23          	sw	a5,-44(s0)
      while (*OTHER_HLS(i)->ipi)
 8002626:	87a2                	mv	a5,s0
 8002628:	faf43823          	sd	a5,-80(s0)
 800262c:	fb043703          	ld	a4,-80(s0)
 8002630:	6785                	lui	a5,0x1
 8002632:	973e                	add	a4,a4,a5
 8002634:	77fd                	lui	a5,0xfffff
 8002636:	8ff9                	and	a5,a5,a4
 8002638:	86be                	mv	a3,a5
 800263a:	f14027f3          	csrr	a5,mhartid
 800263e:	faf43423          	sd	a5,-88(s0)
 8002642:	fa843783          	ld	a5,-88(s0)
 8002646:	fc843703          	ld	a4,-56(s0)
 800264a:	40f707b3          	sub	a5,a4,a5
 800264e:	07b2                	slli	a5,a5,0xc
 8002650:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xfffffffff7833020>
 8002654:	97b6                	add	a5,a5,a3
 8002656:	639c                	ld	a5,0(a5)
 8002658:	439c                	lw	a5,0(a5)
 800265a:	2781                	sext.w	a5,a5
 800265c:	ffc9                	bnez	a5,80025f6 <send_ipi_many+0xb0>
  for (uintptr_t i = 0, m = mask; m; i++, m >>= 1)
 800265e:	fc843783          	ld	a5,-56(s0)
 8002662:	0785                	addi	a5,a5,1
 8002664:	fcf43423          	sd	a5,-56(s0)
 8002668:	fc043783          	ld	a5,-64(s0)
 800266c:	8385                	srli	a5,a5,0x1
 800266e:	fcf43023          	sd	a5,-64(s0)
 8002672:	fc043783          	ld	a5,-64(s0)
 8002676:	fbbd                	bnez	a5,80025ec <send_ipi_many+0xa6>

  // if we got an IPI, restore it; it will be taken after returning
  if (incoming_ipi) {
 8002678:	fd442783          	lw	a5,-44(s0)
 800267c:	2781                	sext.w	a5,a5
 800267e:	c785                	beqz	a5,80026a6 <send_ipi_many+0x160>
    *HLS()->ipi = incoming_ipi;
 8002680:	87a2                	mv	a5,s0
 8002682:	f8f43c23          	sd	a5,-104(s0)
 8002686:	f9843703          	ld	a4,-104(s0)
 800268a:	6785                	lui	a5,0x1
 800268c:	973e                	add	a4,a4,a5
 800268e:	77fd                	lui	a5,0xfffff
 8002690:	8ff9                	and	a5,a5,a4
 8002692:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xfffffffff7833020>
 8002696:	639c                	ld	a5,0(a5)
 8002698:	fd442703          	lw	a4,-44(s0)
 800269c:	c398                	sw	a4,0(a5)
    mb();
 800269e:	0ff0000f          	fence
 80026a2:	a011                	j	80026a6 <send_ipi_many+0x160>
    return;
 80026a4:	0001                	nop
  }
}
 80026a6:	70e6                	ld	ra,120(sp)
 80026a8:	7446                	ld	s0,112(sp)
 80026aa:	6109                	addi	sp,sp,128
 80026ac:	8082                	ret

00000000080026ae <mcall_trap>:

void mcall_trap(uintptr_t* regs, uintptr_t mcause, uintptr_t mepc)
{
 80026ae:	711d                	addi	sp,sp,-96
 80026b0:	ec86                	sd	ra,88(sp)
 80026b2:	e8a2                	sd	s0,80(sp)
 80026b4:	1080                	addi	s0,sp,96
 80026b6:	faa43c23          	sd	a0,-72(s0)
 80026ba:	fab43823          	sd	a1,-80(s0)
 80026be:	fac43423          	sd	a2,-88(s0)
  write_csr(mepc, mepc + 4);
 80026c2:	fa843783          	ld	a5,-88(s0)
 80026c6:	0791                	addi	a5,a5,4
 80026c8:	34179073          	csrw	mepc,a5

  uintptr_t n = regs[17], arg0 = regs[10], arg1 = regs[11], retval, ipi_type;
 80026cc:	fb843783          	ld	a5,-72(s0)
 80026d0:	67dc                	ld	a5,136(a5)
 80026d2:	fcf43c23          	sd	a5,-40(s0)
 80026d6:	fb843783          	ld	a5,-72(s0)
 80026da:	6bbc                	ld	a5,80(a5)
 80026dc:	fcf43823          	sd	a5,-48(s0)
 80026e0:	fb843783          	ld	a5,-72(s0)
 80026e4:	6fbc                	ld	a5,88(a5)
 80026e6:	fcf43423          	sd	a5,-56(s0)

  switch (n)
 80026ea:	fd843703          	ld	a4,-40(s0)
 80026ee:	47a1                	li	a5,8
 80026f0:	08e7eb63          	bltu	a5,a4,8002786 <mcall_trap+0xd8>
 80026f4:	fd843783          	ld	a5,-40(s0)
 80026f8:	00279713          	slli	a4,a5,0x2
 80026fc:	0000a797          	auipc	a5,0xa
 8002700:	c3478793          	addi	a5,a5,-972 # 800c330 <atol+0x51a>
 8002704:	97ba                	add	a5,a5,a4
 8002706:	439c                	lw	a5,0(a5)
 8002708:	0007871b          	sext.w	a4,a5
 800270c:	0000a797          	auipc	a5,0xa
 8002710:	c2478793          	addi	a5,a5,-988 # 800c330 <atol+0x51a>
 8002714:	97ba                	add	a5,a5,a4
 8002716:	8782                	jr	a5
  {
    case SBI_CONSOLE_PUTCHAR:
      retval = mcall_console_putchar(arg0);
 8002718:	fd043783          	ld	a5,-48(s0)
 800271c:	0ff7f793          	andi	a5,a5,255
 8002720:	853e                	mv	a0,a5
 8002722:	b77ff0ef          	jal	ra,8002298 <mcall_console_putchar>
 8002726:	fea43423          	sd	a0,-24(s0)
      break;
 800272a:	a09d                	j	8002790 <mcall_trap+0xe2>
    case SBI_CONSOLE_GETCHAR:
      retval = mcall_console_getchar();
 800272c:	d43ff0ef          	jal	ra,800246e <mcall_console_getchar>
 8002730:	fea43423          	sd	a0,-24(s0)
      break;
 8002734:	a8b1                	j	8002790 <mcall_trap+0xe2>
    case SBI_SEND_IPI:
      ipi_type = IPI_SOFT;
 8002736:	4785                	li	a5,1
 8002738:	fef43023          	sd	a5,-32(s0)
      goto send_ipi;
 800273c:	a801                	j	800274c <mcall_trap+0x9e>
    case SBI_REMOTE_SFENCE_VMA:
    case SBI_REMOTE_SFENCE_VMA_ASID:
      ipi_type = IPI_SFENCE_VMA;
 800273e:	4791                	li	a5,4
 8002740:	fef43023          	sd	a5,-32(s0)
      goto send_ipi;
 8002744:	a021                	j	800274c <mcall_trap+0x9e>
    case SBI_REMOTE_FENCE_I:
      ipi_type = IPI_FENCE_I;
 8002746:	4789                	li	a5,2
 8002748:	fef43023          	sd	a5,-32(s0)
send_ipi:
      send_ipi_many((uintptr_t*)arg0, ipi_type);
 800274c:	fd043783          	ld	a5,-48(s0)
 8002750:	fe043703          	ld	a4,-32(s0)
 8002754:	2701                	sext.w	a4,a4
 8002756:	85ba                	mv	a1,a4
 8002758:	853e                	mv	a0,a5
 800275a:	dedff0ef          	jal	ra,8002546 <send_ipi_many>
      retval = 0;
 800275e:	fe043423          	sd	zero,-24(s0)
      break;
 8002762:	a03d                	j	8002790 <mcall_trap+0xe2>
    case SBI_CLEAR_IPI:
      retval = mcall_clear_ipi();
 8002764:	d6fff0ef          	jal	ra,80024d2 <mcall_clear_ipi>
 8002768:	fea43423          	sd	a0,-24(s0)
      break;
 800276c:	a015                	j	8002790 <mcall_trap+0xe2>
    case SBI_SHUTDOWN:
      retval = mcall_shutdown();
 800276e:	d81ff0ef          	jal	ra,80024ee <mcall_shutdown>
 8002772:	fea43423          	sd	a0,-24(s0)
      break;
 8002776:	a829                	j	8002790 <mcall_trap+0xe2>
    case SBI_SET_TIMER:
#if __riscv_xlen == 32
      retval = mcall_set_timer(arg0 + ((uint64_t)arg1 << 32));
#else
      retval = mcall_set_timer(arg0);
 8002778:	fd043503          	ld	a0,-48(s0)
 800277c:	d81ff0ef          	jal	ra,80024fc <mcall_set_timer>
 8002780:	fea43423          	sd	a0,-24(s0)
#endif
      break;
 8002784:	a031                	j	8002790 <mcall_trap+0xe2>
    default:
      retval = -ENOSYS;
 8002786:	fda00793          	li	a5,-38
 800278a:	fef43423          	sd	a5,-24(s0)
      break;
 800278e:	0001                	nop
  }
  regs[10] = retval;
 8002790:	fb843783          	ld	a5,-72(s0)
 8002794:	05078793          	addi	a5,a5,80
 8002798:	fe843703          	ld	a4,-24(s0)
 800279c:	e398                	sd	a4,0(a5)
}
 800279e:	0001                	nop
 80027a0:	60e6                	ld	ra,88(sp)
 80027a2:	6446                	ld	s0,80(sp)
 80027a4:	6125                	addi	sp,sp,96
 80027a6:	8082                	ret

00000000080027a8 <redirect_trap>:

void redirect_trap(uintptr_t epc, uintptr_t mstatus, uintptr_t badaddr)
{
 80027a8:	715d                	addi	sp,sp,-80
 80027aa:	e486                	sd	ra,72(sp)
 80027ac:	e0a2                	sd	s0,64(sp)
 80027ae:	0880                	addi	s0,sp,80
 80027b0:	fca43423          	sd	a0,-56(s0)
 80027b4:	fcb43023          	sd	a1,-64(s0)
 80027b8:	fac43c23          	sd	a2,-72(s0)
  write_csr(stval, badaddr);
 80027bc:	fb843783          	ld	a5,-72(s0)
 80027c0:	14379073          	csrw	stval,a5
  write_csr(sepc, epc);
 80027c4:	fc843783          	ld	a5,-56(s0)
 80027c8:	14179073          	csrw	sepc,a5
  write_csr(scause, read_csr(mcause));
 80027cc:	342027f3          	csrr	a5,mcause
 80027d0:	fef43423          	sd	a5,-24(s0)
 80027d4:	fe843783          	ld	a5,-24(s0)
 80027d8:	14279073          	csrw	scause,a5
  write_csr(mepc, read_csr(stvec));
 80027dc:	105027f3          	csrr	a5,stvec
 80027e0:	fef43023          	sd	a5,-32(s0)
 80027e4:	fe043783          	ld	a5,-32(s0)
 80027e8:	34179073          	csrw	mepc,a5

  uintptr_t new_mstatus = mstatus & ~(MSTATUS_SPP | MSTATUS_SPIE | MSTATUS_SIE);
 80027ec:	fc043783          	ld	a5,-64(s0)
 80027f0:	edd7f793          	andi	a5,a5,-291
 80027f4:	fcf43c23          	sd	a5,-40(s0)
  uintptr_t mpp_s = MSTATUS_MPP & (MSTATUS_MPP >> 1);
 80027f8:	6785                	lui	a5,0x1
 80027fa:	80078793          	addi	a5,a5,-2048 # 800 <MEM_START-0x7fff800>
 80027fe:	fcf43823          	sd	a5,-48(s0)
  new_mstatus |= (mstatus * (MSTATUS_SPIE / MSTATUS_SIE)) & MSTATUS_SPIE;
 8002802:	fc043783          	ld	a5,-64(s0)
 8002806:	0792                	slli	a5,a5,0x4
 8002808:	0207f793          	andi	a5,a5,32
 800280c:	fd843703          	ld	a4,-40(s0)
 8002810:	8fd9                	or	a5,a5,a4
 8002812:	fcf43c23          	sd	a5,-40(s0)
  new_mstatus |= (mstatus / (mpp_s / MSTATUS_SPP)) & MSTATUS_SPP;
 8002816:	fd043783          	ld	a5,-48(s0)
 800281a:	83a1                	srli	a5,a5,0x8
 800281c:	fc043703          	ld	a4,-64(s0)
 8002820:	02f757b3          	divu	a5,a4,a5
 8002824:	1007f793          	andi	a5,a5,256
 8002828:	fd843703          	ld	a4,-40(s0)
 800282c:	8fd9                	or	a5,a5,a4
 800282e:	fcf43c23          	sd	a5,-40(s0)
  new_mstatus |= mpp_s;
 8002832:	fd843703          	ld	a4,-40(s0)
 8002836:	fd043783          	ld	a5,-48(s0)
 800283a:	8fd9                	or	a5,a5,a4
 800283c:	fcf43c23          	sd	a5,-40(s0)
  write_csr(mstatus, new_mstatus);
 8002840:	fd843783          	ld	a5,-40(s0)
 8002844:	30079073          	csrw	mstatus,a5

  extern void __redirect_trap();
  return __redirect_trap();
 8002848:	991fd0ef          	jal	ra,80001d8 <__redirect_trap>
}
 800284c:	60a6                	ld	ra,72(sp)
 800284e:	6406                	ld	s0,64(sp)
 8002850:	6161                	addi	sp,sp,80
 8002852:	8082                	ret

0000000008002854 <pmp_trap>:

void pmp_trap(uintptr_t* regs, uintptr_t mcause, uintptr_t mepc)
{
 8002854:	7139                	addi	sp,sp,-64
 8002856:	fc06                	sd	ra,56(sp)
 8002858:	f822                	sd	s0,48(sp)
 800285a:	0080                	addi	s0,sp,64
 800285c:	fca43c23          	sd	a0,-40(s0)
 8002860:	fcb43823          	sd	a1,-48(s0)
 8002864:	fcc43423          	sd	a2,-56(s0)
  redirect_trap(mepc, read_csr(mstatus), read_csr(mtval));
 8002868:	300027f3          	csrr	a5,mstatus
 800286c:	fef43423          	sd	a5,-24(s0)
 8002870:	fe843703          	ld	a4,-24(s0)
 8002874:	343027f3          	csrr	a5,mtval
 8002878:	fef43023          	sd	a5,-32(s0)
 800287c:	fe043783          	ld	a5,-32(s0)
 8002880:	863e                	mv	a2,a5
 8002882:	85ba                	mv	a1,a4
 8002884:	fc843503          	ld	a0,-56(s0)
 8002888:	f21ff0ef          	jal	ra,80027a8 <redirect_trap>
}
 800288c:	0001                	nop
 800288e:	70e2                	ld	ra,56(sp)
 8002890:	7442                	ld	s0,48(sp)
 8002892:	6121                	addi	sp,sp,64
 8002894:	8082                	ret

0000000008002896 <machine_page_fault>:

static void machine_page_fault(uintptr_t* regs, uintptr_t mcause, uintptr_t mepc)
{
 8002896:	7139                	addi	sp,sp,-64
 8002898:	fc06                	sd	ra,56(sp)
 800289a:	f822                	sd	s0,48(sp)
 800289c:	0080                	addi	s0,sp,64
 800289e:	fca43c23          	sd	a0,-40(s0)
 80028a2:	fcb43823          	sd	a1,-48(s0)
 80028a6:	fcc43423          	sd	a2,-56(s0)
  // MPRV=1 iff this trap occurred while emulating an instruction on behalf
  // of a lower privilege level. In that case, a2=epc and a3=mstatus.
  // a1 holds MPRV if emulating a load or store, or MPRV | MXR if loading
  // an instruction from memory.  In the latter case, we should report an
  // instruction fault instead of a load fault.
  if (read_csr(mstatus) & MSTATUS_MPRV) {
 80028aa:	300027f3          	csrr	a5,mstatus
 80028ae:	fef43423          	sd	a5,-24(s0)
 80028b2:	fe843703          	ld	a4,-24(s0)
 80028b6:	000207b7          	lui	a5,0x20
 80028ba:	8ff9                	and	a5,a5,a4
 80028bc:	cbad                	beqz	a5,800292e <machine_page_fault+0x98>
    if (regs[11] == (MSTATUS_MPRV | MSTATUS_MXR)) {
 80028be:	fd843783          	ld	a5,-40(s0)
 80028c2:	05878793          	addi	a5,a5,88 # 20058 <MEM_START-0x7fdffa8>
 80028c6:	6398                	ld	a4,0(a5)
 80028c8:	000a07b7          	lui	a5,0xa0
 80028cc:	02f71263          	bne	a4,a5,80028f0 <machine_page_fault+0x5a>
      if (mcause == CAUSE_LOAD_PAGE_FAULT)
 80028d0:	fd043703          	ld	a4,-48(s0)
 80028d4:	47b5                	li	a5,13
 80028d6:	00f71563          	bne	a4,a5,80028e0 <machine_page_fault+0x4a>
        write_csr(mcause, CAUSE_FETCH_PAGE_FAULT);
 80028da:	34265073          	csrwi	mcause,12
 80028de:	a015                	j	8002902 <machine_page_fault+0x6c>
      else if (mcause == CAUSE_LOAD_ACCESS)
 80028e0:	fd043703          	ld	a4,-48(s0)
 80028e4:	4795                	li	a5,5
 80028e6:	04f71663          	bne	a4,a5,8002932 <machine_page_fault+0x9c>
        write_csr(mcause, CAUSE_FETCH_ACCESS);
 80028ea:	3420d073          	csrwi	mcause,1
 80028ee:	a811                	j	8002902 <machine_page_fault+0x6c>
      else
        goto fail;
    } else if (regs[11] != MSTATUS_MPRV) {
 80028f0:	fd843783          	ld	a5,-40(s0)
 80028f4:	05878793          	addi	a5,a5,88 # a0058 <MEM_START-0x7f5ffa8>
 80028f8:	6398                	ld	a4,0(a5)
 80028fa:	000207b7          	lui	a5,0x20
 80028fe:	02f71c63          	bne	a4,a5,8002936 <machine_page_fault+0xa0>
      goto fail;
    }

    return redirect_trap(regs[12], regs[13], read_csr(mtval));
 8002902:	fd843783          	ld	a5,-40(s0)
 8002906:	06078793          	addi	a5,a5,96 # 20060 <MEM_START-0x7fdffa0>
 800290a:	6398                	ld	a4,0(a5)
 800290c:	fd843783          	ld	a5,-40(s0)
 8002910:	06878793          	addi	a5,a5,104
 8002914:	6394                	ld	a3,0(a5)
 8002916:	343027f3          	csrr	a5,mtval
 800291a:	fef43023          	sd	a5,-32(s0)
 800291e:	fe043783          	ld	a5,-32(s0)
 8002922:	863e                	mv	a2,a5
 8002924:	85b6                	mv	a1,a3
 8002926:	853a                	mv	a0,a4
 8002928:	e81ff0ef          	jal	ra,80027a8 <redirect_trap>
 800292c:	a831                	j	8002948 <machine_page_fault+0xb2>
  }

fail:
 800292e:	0001                	nop
 8002930:	a021                	j	8002938 <machine_page_fault+0xa2>
        goto fail;
 8002932:	0001                	nop
 8002934:	a011                	j	8002938 <machine_page_fault+0xa2>
      goto fail;
 8002936:	0001                	nop
  bad_trap(regs, mcause, mepc);
 8002938:	fc843603          	ld	a2,-56(s0)
 800293c:	fd043583          	ld	a1,-48(s0)
 8002940:	fd843503          	ld	a0,-40(s0)
 8002944:	90fff0ef          	jal	ra,8002252 <bad_trap>
}
 8002948:	70e2                	ld	ra,56(sp)
 800294a:	7442                	ld	s0,48(sp)
 800294c:	6121                	addi	sp,sp,64
 800294e:	8082                	ret

0000000008002950 <trap_from_machine_mode>:

void trap_from_machine_mode(uintptr_t* regs, uintptr_t dummy, uintptr_t mepc)
{
 8002950:	7139                	addi	sp,sp,-64
 8002952:	fc06                	sd	ra,56(sp)
 8002954:	f822                	sd	s0,48(sp)
 8002956:	0080                	addi	s0,sp,64
 8002958:	fca43c23          	sd	a0,-40(s0)
 800295c:	fcb43823          	sd	a1,-48(s0)
 8002960:	fcc43423          	sd	a2,-56(s0)
  uintptr_t mcause = read_csr(mcause);
 8002964:	342027f3          	csrr	a5,mcause
 8002968:	fef43423          	sd	a5,-24(s0)
 800296c:	fe843783          	ld	a5,-24(s0)
 8002970:	fef43023          	sd	a5,-32(s0)

  switch (mcause)
 8002974:	fe043703          	ld	a4,-32(s0)
 8002978:	47bd                	li	a5,15
 800297a:	02e7ed63          	bltu	a5,a4,80029b4 <trap_from_machine_mode+0x64>
 800297e:	fe043783          	ld	a5,-32(s0)
 8002982:	00279713          	slli	a4,a5,0x2
 8002986:	0000a797          	auipc	a5,0xa
 800298a:	9ce78793          	addi	a5,a5,-1586 # 800c354 <atol+0x53e>
 800298e:	97ba                	add	a5,a5,a4
 8002990:	439c                	lw	a5,0(a5)
 8002992:	0007871b          	sext.w	a4,a5
 8002996:	0000a797          	auipc	a5,0xa
 800299a:	9be78793          	addi	a5,a5,-1602 # 800c354 <atol+0x53e>
 800299e:	97ba                	add	a5,a5,a4
 80029a0:	8782                	jr	a5
    case CAUSE_LOAD_PAGE_FAULT:
    case CAUSE_STORE_PAGE_FAULT:
    case CAUSE_FETCH_ACCESS:
    case CAUSE_LOAD_ACCESS:
    case CAUSE_STORE_ACCESS:
      return machine_page_fault(regs, mcause, mepc);
 80029a2:	fc843603          	ld	a2,-56(s0)
 80029a6:	fe043583          	ld	a1,-32(s0)
 80029aa:	fd843503          	ld	a0,-40(s0)
 80029ae:	ee9ff0ef          	jal	ra,8002896 <machine_page_fault>
 80029b2:	a809                	j	80029c4 <trap_from_machine_mode+0x74>
    default:
      bad_trap(regs, dummy, mepc);
 80029b4:	fc843603          	ld	a2,-56(s0)
 80029b8:	fd043583          	ld	a1,-48(s0)
 80029bc:	fd843503          	ld	a0,-40(s0)
 80029c0:	893ff0ef          	jal	ra,8002252 <bad_trap>
  }
}
 80029c4:	70e2                	ld	ra,56(sp)
 80029c6:	7442                	ld	s0,48(sp)
 80029c8:	6121                	addi	sp,sp,64
 80029ca:	8082                	ret

00000000080029cc <poweroff>:

void poweroff(uint16_t code)
{
 80029cc:	1101                	addi	sp,sp,-32
 80029ce:	ec06                	sd	ra,24(sp)
 80029d0:	e822                	sd	s0,16(sp)
 80029d2:	1000                	addi	s0,sp,32
 80029d4:	87aa                	mv	a5,a0
 80029d6:	fef41723          	sh	a5,-18(s0)
  printm("Power off\r\n");
 80029da:	0000a517          	auipc	a0,0xa
 80029de:	9be50513          	addi	a0,a0,-1602 # 800c398 <atol+0x582>
 80029e2:	9a1ff0ef          	jal	ra,8002382 <printm>
  finisher_exit(code);
 80029e6:	fee45783          	lhu	a5,-18(s0)
 80029ea:	853e                	mv	a0,a5
 80029ec:	4b8010ef          	jal	ra,8003ea4 <finisher_exit>
  if (htif) {
 80029f0:	00015797          	auipc	a5,0x15
 80029f4:	65078793          	addi	a5,a5,1616 # 8018040 <htif>
 80029f8:	639c                	ld	a5,0(a5)
 80029fa:	c399                	beqz	a5,8002a00 <poweroff+0x34>
    htif_poweroff();
 80029fc:	2ef000ef          	jal	ra,80034ea <htif_poweroff>
  } else {
    send_ipi_many(0, IPI_HALT);
 8002a00:	45a1                	li	a1,8
 8002a02:	4501                	li	a0,0
 8002a04:	b43ff0ef          	jal	ra,8002546 <send_ipi_many>
    while (1) { asm volatile ("wfi\n"); }
 8002a08:	10500073          	wfi
 8002a0c:	bff5                	j	8002a08 <poweroff+0x3c>
	...

0000000008002a10 <supports_extension>:
#define read_const_csr(reg) ({ unsigned long __tmp; \
  asm ("csrr %0, " #reg : "=r"(__tmp)); \
  __tmp; })

static inline int supports_extension(char ext)
{
 8002a10:	7179                	addi	sp,sp,-48
 8002a12:	f422                	sd	s0,40(sp)
 8002a14:	1800                	addi	s0,sp,48
 8002a16:	87aa                	mv	a5,a0
 8002a18:	fcf40fa3          	sb	a5,-33(s0)
  return read_const_csr(misa) & (1 << (ext - 'A'));
 8002a1c:	301027f3          	csrr	a5,misa
 8002a20:	fef43423          	sd	a5,-24(s0)
 8002a24:	fe843783          	ld	a5,-24(s0)
 8002a28:	0007869b          	sext.w	a3,a5
 8002a2c:	fdf44783          	lbu	a5,-33(s0)
 8002a30:	2781                	sext.w	a5,a5
 8002a32:	fbf7879b          	addiw	a5,a5,-65
 8002a36:	2781                	sext.w	a5,a5
 8002a38:	4705                	li	a4,1
 8002a3a:	00f717bb          	sllw	a5,a4,a5
 8002a3e:	2781                	sext.w	a5,a5
 8002a40:	2781                	sext.w	a5,a5
 8002a42:	8736                	mv	a4,a3
 8002a44:	8ff9                	and	a5,a5,a4
 8002a46:	2781                	sext.w	a5,a5
 8002a48:	2781                	sext.w	a5,a5
}
 8002a4a:	853e                	mv	a0,a5
 8002a4c:	7422                	ld	s0,40(sp)
 8002a4e:	6145                	addi	sp,sp,48
 8002a50:	8082                	ret

0000000008002a52 <mstatus_init>:
size_t plic_ndevs;
void* kernel_start;
void* kernel_end;

static void mstatus_init()
{
 8002a52:	1101                	addi	sp,sp,-32
 8002a54:	ec06                	sd	ra,24(sp)
 8002a56:	e822                	sd	s0,16(sp)
 8002a58:	1000                	addi	s0,sp,32
  uintptr_t mstatus = 0;
 8002a5a:	fe043423          	sd	zero,-24(s0)
#endif
  mstatus |= MSTATUS_UBE;
#endif

  // Enable FPU
  if (supports_extension('F'))
 8002a5e:	04600513          	li	a0,70
 8002a62:	fafff0ef          	jal	ra,8002a10 <supports_extension>
 8002a66:	87aa                	mv	a5,a0
 8002a68:	c799                	beqz	a5,8002a76 <mstatus_init+0x24>
    mstatus |= MSTATUS_FS;
 8002a6a:	fe843703          	ld	a4,-24(s0)
 8002a6e:	6799                	lui	a5,0x6
 8002a70:	8fd9                	or	a5,a5,a4
 8002a72:	fef43423          	sd	a5,-24(s0)

  // Enable vector extension
  if (supports_extension('V'))
 8002a76:	05600513          	li	a0,86
 8002a7a:	f97ff0ef          	jal	ra,8002a10 <supports_extension>
 8002a7e:	87aa                	mv	a5,a0
 8002a80:	c799                	beqz	a5,8002a8e <mstatus_init+0x3c>
    mstatus |= MSTATUS_VS;
 8002a82:	fe843783          	ld	a5,-24(s0)
 8002a86:	6007e793          	ori	a5,a5,1536
 8002a8a:	fef43423          	sd	a5,-24(s0)

  write_csr(mstatus, mstatus);
 8002a8e:	fe843783          	ld	a5,-24(s0)
 8002a92:	30079073          	csrw	mstatus,a5
#if __riscv_xlen == 32 && __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
  write_csr(0x310, mstatush); /* mstatush is not known to gas */
#endif

  // Enable user/supervisor use of perf counters
  if (supports_extension('S'))
 8002a96:	05300513          	li	a0,83
 8002a9a:	f77ff0ef          	jal	ra,8002a10 <supports_extension>
 8002a9e:	87aa                	mv	a5,a0
 8002aa0:	c781                	beqz	a5,8002aa8 <mstatus_init+0x56>
    write_csr(scounteren, -1);
 8002aa2:	57fd                	li	a5,-1
 8002aa4:	10679073          	csrw	scounteren,a5
  if (supports_extension('U'))
 8002aa8:	05500513          	li	a0,85
 8002aac:	f65ff0ef          	jal	ra,8002a10 <supports_extension>
 8002ab0:	87aa                	mv	a5,a0
 8002ab2:	c781                	beqz	a5,8002aba <mstatus_init+0x68>
    write_csr(mcounteren, -1);
 8002ab4:	57fd                	li	a5,-1
 8002ab6:	30679073          	csrw	mcounteren,a5

  // Enable software interrupts
  write_csr(mie, MIP_MSIP);
 8002aba:	30445073          	csrwi	mie,8

  // Disable paging
  if (supports_extension('S'))
 8002abe:	05300513          	li	a0,83
 8002ac2:	f4fff0ef          	jal	ra,8002a10 <supports_extension>
 8002ac6:	87aa                	mv	a5,a0
 8002ac8:	c399                	beqz	a5,8002ace <mstatus_init+0x7c>
    write_csr(satp, 0);
 8002aca:	18005073          	csrwi	satp,0
}
 8002ace:	0001                	nop
 8002ad0:	60e2                	ld	ra,24(sp)
 8002ad2:	6442                	ld	s0,16(sp)
 8002ad4:	6105                	addi	sp,sp,32
 8002ad6:	8082                	ret

0000000008002ad8 <delegate_traps>:

// send S-mode interrupts and most exceptions straight to S-mode
static void delegate_traps()
{
 8002ad8:	7179                	addi	sp,sp,-48
 8002ada:	f406                	sd	ra,40(sp)
 8002adc:	f022                	sd	s0,32(sp)
 8002ade:	1800                	addi	s0,sp,48
  if (!supports_extension('S'))
 8002ae0:	05300513          	li	a0,83
 8002ae4:	f2dff0ef          	jal	ra,8002a10 <supports_extension>
 8002ae8:	87aa                	mv	a5,a0
 8002aea:	c3dd                	beqz	a5,8002b90 <delegate_traps+0xb8>
    return;

  uintptr_t interrupts = MIP_SSIP | MIP_STIP | MIP_SEIP;
 8002aec:	22200793          	li	a5,546
 8002af0:	fef43423          	sd	a5,-24(s0)
  uintptr_t exceptions =
 8002af4:	67ad                	lui	a5,0xb
 8002af6:	10978793          	addi	a5,a5,265 # b109 <MEM_START-0x7ff4ef7>
 8002afa:	fef43023          	sd	a5,-32(s0)
    (1U << CAUSE_BREAKPOINT) |
    (1U << CAUSE_LOAD_PAGE_FAULT) |
    (1U << CAUSE_STORE_PAGE_FAULT) |
    (1U << CAUSE_USER_ECALL);

  write_csr(mideleg, interrupts);
 8002afe:	fe843783          	ld	a5,-24(s0)
 8002b02:	30379073          	csrw	mideleg,a5
  write_csr(medeleg, exceptions);
 8002b06:	fe043783          	ld	a5,-32(s0)
 8002b0a:	30279073          	csrw	medeleg,a5
  assert((read_csr(mideleg) & interrupts) == interrupts);
 8002b0e:	303027f3          	csrr	a5,mideleg
 8002b12:	fcf43c23          	sd	a5,-40(s0)
 8002b16:	fd843703          	ld	a4,-40(s0)
 8002b1a:	fe843783          	ld	a5,-24(s0)
 8002b1e:	8ff9                	and	a5,a5,a4
 8002b20:	fe843703          	ld	a4,-24(s0)
 8002b24:	02f70763          	beq	a4,a5,8002b52 <delegate_traps+0x7a>
 8002b28:	0000a697          	auipc	a3,0xa
 8002b2c:	88068693          	addi	a3,a3,-1920 # 800c3a8 <atol+0x592>
 8002b30:	05500613          	li	a2,85
 8002b34:	0000a597          	auipc	a1,0xa
 8002b38:	8a458593          	addi	a1,a1,-1884 # 800c3d8 <atol+0x5c2>
 8002b3c:	0000a517          	auipc	a0,0xa
 8002b40:	8b450513          	addi	a0,a0,-1868 # 800c3f0 <atol+0x5da>
 8002b44:	83fff0ef          	jal	ra,8002382 <printm>
 8002b48:	67c1                	lui	a5,0x10
 8002b4a:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7ff0001>
 8002b4e:	e7fff0ef          	jal	ra,80029cc <poweroff>
  assert(read_csr(medeleg) == exceptions);
 8002b52:	302027f3          	csrr	a5,medeleg
 8002b56:	fcf43823          	sd	a5,-48(s0)
 8002b5a:	fd043703          	ld	a4,-48(s0)
 8002b5e:	fe043783          	ld	a5,-32(s0)
 8002b62:	02f70863          	beq	a4,a5,8002b92 <delegate_traps+0xba>
 8002b66:	0000a697          	auipc	a3,0xa
 8002b6a:	8aa68693          	addi	a3,a3,-1878 # 800c410 <atol+0x5fa>
 8002b6e:	05600613          	li	a2,86
 8002b72:	0000a597          	auipc	a1,0xa
 8002b76:	86658593          	addi	a1,a1,-1946 # 800c3d8 <atol+0x5c2>
 8002b7a:	0000a517          	auipc	a0,0xa
 8002b7e:	87650513          	addi	a0,a0,-1930 # 800c3f0 <atol+0x5da>
 8002b82:	801ff0ef          	jal	ra,8002382 <printm>
 8002b86:	67c1                	lui	a5,0x10
 8002b88:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7ff0001>
 8002b8c:	e41ff0ef          	jal	ra,80029cc <poweroff>
    return;
 8002b90:	0001                	nop
}
 8002b92:	70a2                	ld	ra,40(sp)
 8002b94:	7402                	ld	s0,32(sp)
 8002b96:	6145                	addi	sp,sp,48
 8002b98:	8082                	ret

0000000008002b9a <fp_init>:

static void fp_init()
{
 8002b9a:	7179                	addi	sp,sp,-48
 8002b9c:	f406                	sd	ra,40(sp)
 8002b9e:	f022                	sd	s0,32(sp)
 8002ba0:	1800                	addi	s0,sp,48
  if (!supports_extension('F'))
 8002ba2:	04600513          	li	a0,70
 8002ba6:	e6bff0ef          	jal	ra,8002a10 <supports_extension>
 8002baa:	87aa                	mv	a5,a0
 8002bac:	c7c1                	beqz	a5,8002c34 <fp_init+0x9a>
    return;

  assert(read_csr(mstatus) & MSTATUS_FS);
 8002bae:	300027f3          	csrr	a5,mstatus
 8002bb2:	fef43023          	sd	a5,-32(s0)
 8002bb6:	fe043703          	ld	a4,-32(s0)
 8002bba:	6799                	lui	a5,0x6
 8002bbc:	8ff9                	and	a5,a5,a4
 8002bbe:	e795                	bnez	a5,8002bea <fp_init+0x50>
 8002bc0:	0000a697          	auipc	a3,0xa
 8002bc4:	87068693          	addi	a3,a3,-1936 # 800c430 <atol+0x61a>
 8002bc8:	05e00613          	li	a2,94
 8002bcc:	0000a597          	auipc	a1,0xa
 8002bd0:	80c58593          	addi	a1,a1,-2036 # 800c3d8 <atol+0x5c2>
 8002bd4:	0000a517          	auipc	a0,0xa
 8002bd8:	81c50513          	addi	a0,a0,-2020 # 800c3f0 <atol+0x5da>
 8002bdc:	fa6ff0ef          	jal	ra,8002382 <printm>
 8002be0:	67c1                	lui	a5,0x10
 8002be2:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7ff0001>
 8002be6:	de7ff0ef          	jal	ra,80029cc <poweroff>

#ifdef __riscv_flen
  for (int i = 0; i < 32; i++)
 8002bea:	fe042623          	sw	zero,-20(s0)
 8002bee:	a80d                	j	8002c20 <fp_init+0x86>
    init_fp_reg(i);
 8002bf0:	4501                	li	a0,0
 8002bf2:	fec42783          	lw	a5,-20(s0)
 8002bf6:	0037979b          	slliw	a5,a5,0x3
 8002bfa:	2781                	sext.w	a5,a5
 8002bfc:	0ff7f793          	andi	a5,a5,255
 8002c00:	fcf43c23          	sd	a5,-40(s0)
 8002c04:	fd843703          	ld	a4,-40(s0)
 8002c08:	00001797          	auipc	a5,0x1
 8002c0c:	97ba                	add	a5,a5,a4
 8002c0e:	56e782e7          	jalr	t0,1390(a5) # 8004176 <put_f32_reg>
 8002c12:	fcf43823          	sd	a5,-48(s0)
  for (int i = 0; i < 32; i++)
 8002c16:	fec42783          	lw	a5,-20(s0)
 8002c1a:	2785                	addiw	a5,a5,1
 8002c1c:	fef42623          	sw	a5,-20(s0)
 8002c20:	fec42783          	lw	a5,-20(s0)
 8002c24:	0007871b          	sext.w	a4,a5
 8002c28:	47fd                	li	a5,31
 8002c2a:	fce7d3e3          	ble	a4,a5,8002bf0 <fp_init+0x56>
  write_csr(fcsr, 0);
 8002c2e:	00305073          	csrwi	fcsr,0
 8002c32:	a011                	j	8002c36 <fp_init+0x9c>
    return;
 8002c34:	0001                	nop
#else
  uintptr_t fd_mask = (1 << ('F' - 'A')) | (1 << ('D' - 'A'));
  clear_csr(misa, fd_mask);
  assert(!(read_csr(misa) & fd_mask));
#endif
}
 8002c36:	70a2                	ld	ra,40(sp)
 8002c38:	7402                	ld	s0,32(sp)
 8002c3a:	6145                	addi	sp,sp,48
 8002c3c:	8082                	ret

0000000008002c3e <hls_init>:

hls_t* hls_init(uintptr_t id)
{
 8002c3e:	7139                	addi	sp,sp,-64
 8002c40:	fc06                	sd	ra,56(sp)
 8002c42:	f822                	sd	s0,48(sp)
 8002c44:	0080                	addi	s0,sp,64
 8002c46:	fca43423          	sd	a0,-56(s0)
  hls_t* hls = OTHER_HLS(id);
 8002c4a:	87a2                	mv	a5,s0
 8002c4c:	fef43423          	sd	a5,-24(s0)
 8002c50:	fe843703          	ld	a4,-24(s0)
 8002c54:	6785                	lui	a5,0x1
 8002c56:	973e                	add	a4,a4,a5
 8002c58:	77fd                	lui	a5,0xfffff
 8002c5a:	8ff9                	and	a5,a5,a4
 8002c5c:	86be                	mv	a3,a5
 8002c5e:	f14027f3          	csrr	a5,mhartid
 8002c62:	fef43023          	sd	a5,-32(s0)
 8002c66:	fe043783          	ld	a5,-32(s0)
 8002c6a:	fc843703          	ld	a4,-56(s0)
 8002c6e:	40f707b3          	sub	a5,a4,a5
 8002c72:	07b2                	slli	a5,a5,0xc
 8002c74:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xfffffffff7833020>
 8002c78:	97b6                	add	a5,a5,a3
 8002c7a:	fcf43c23          	sd	a5,-40(s0)
  memset(hls, 0, sizeof(*hls));
 8002c7e:	03800613          	li	a2,56
 8002c82:	4581                	li	a1,0
 8002c84:	fd843503          	ld	a0,-40(s0)
 8002c88:	7cb080ef          	jal	ra,800bc52 <memset>
  return hls;
 8002c8c:	fd843783          	ld	a5,-40(s0)
}
 8002c90:	853e                	mv	a0,a5
 8002c92:	70e2                	ld	ra,56(sp)
 8002c94:	7442                	ld	s0,48(sp)
 8002c96:	6121                	addi	sp,sp,64
 8002c98:	8082                	ret

0000000008002c9a <memory_init>:

static void memory_init()
{
 8002c9a:	1141                	addi	sp,sp,-16
 8002c9c:	e422                	sd	s0,8(sp)
 8002c9e:	0800                	addi	s0,sp,16
  mem_size = mem_size / MEGAPAGE_SIZE * MEGAPAGE_SIZE;
 8002ca0:	00015797          	auipc	a5,0x15
 8002ca4:	38078793          	addi	a5,a5,896 # 8018020 <mem_size>
 8002ca8:	6398                	ld	a4,0(a5)
 8002caa:	ffe007b7          	lui	a5,0xffe00
 8002cae:	8f7d                	and	a4,a4,a5
 8002cb0:	00015797          	auipc	a5,0x15
 8002cb4:	37078793          	addi	a5,a5,880 # 8018020 <mem_size>
 8002cb8:	e398                	sd	a4,0(a5)
}
 8002cba:	0001                	nop
 8002cbc:	6422                	ld	s0,8(sp)
 8002cbe:	0141                	addi	sp,sp,16
 8002cc0:	8082                	ret

0000000008002cc2 <hart_init>:

static void hart_init()
{
 8002cc2:	1141                	addi	sp,sp,-16
 8002cc4:	e406                	sd	ra,8(sp)
 8002cc6:	e022                	sd	s0,0(sp)
 8002cc8:	0800                	addi	s0,sp,16
  mstatus_init();
 8002cca:	d89ff0ef          	jal	ra,8002a52 <mstatus_init>
  fp_init();
 8002cce:	ecdff0ef          	jal	ra,8002b9a <fp_init>
#ifndef BBL_BOOT_MACHINE
  delegate_traps();
 8002cd2:	e07ff0ef          	jal	ra,8002ad8 <delegate_traps>
#endif /* BBL_BOOT_MACHINE */
  setup_pmp();
 8002cd6:	426000ef          	jal	ra,80030fc <setup_pmp>
}
 8002cda:	0001                	nop
 8002cdc:	60a2                	ld	ra,8(sp)
 8002cde:	6402                	ld	s0,0(sp)
 8002ce0:	0141                	addi	sp,sp,16
 8002ce2:	8082                	ret

0000000008002ce4 <plic_init>:

static void plic_init()
{
 8002ce4:	1101                	addi	sp,sp,-32
 8002ce6:	ec22                	sd	s0,24(sp)
 8002ce8:	1000                	addi	s0,sp,32
  for (size_t i = 1; i <= plic_ndevs; i++)
 8002cea:	4785                	li	a5,1
 8002cec:	fef43423          	sd	a5,-24(s0)
 8002cf0:	a00d                	j	8002d12 <plic_init+0x2e>
    plic_priorities[i] = 1;
 8002cf2:	00015797          	auipc	a5,0x15
 8002cf6:	32678793          	addi	a5,a5,806 # 8018018 <plic_priorities>
 8002cfa:	6398                	ld	a4,0(a5)
 8002cfc:	fe843783          	ld	a5,-24(s0)
 8002d00:	078a                	slli	a5,a5,0x2
 8002d02:	97ba                	add	a5,a5,a4
 8002d04:	4705                	li	a4,1
 8002d06:	c398                	sw	a4,0(a5)
  for (size_t i = 1; i <= plic_ndevs; i++)
 8002d08:	fe843783          	ld	a5,-24(s0)
 8002d0c:	0785                	addi	a5,a5,1
 8002d0e:	fef43423          	sd	a5,-24(s0)
 8002d12:	00015797          	auipc	a5,0x15
 8002d16:	2fe78793          	addi	a5,a5,766 # 8018010 <plic_ndevs>
 8002d1a:	639c                	ld	a5,0(a5)
 8002d1c:	fe843703          	ld	a4,-24(s0)
 8002d20:	fce7f9e3          	bleu	a4,a5,8002cf2 <plic_init+0xe>
}
 8002d24:	0001                	nop
 8002d26:	6462                	ld	s0,24(sp)
 8002d28:	6105                	addi	sp,sp,32
 8002d2a:	8082                	ret

0000000008002d2c <prci_test>:

static void prci_test()
{
 8002d2c:	715d                	addi	sp,sp,-80
 8002d2e:	e486                	sd	ra,72(sp)
 8002d30:	e0a2                	sd	s0,64(sp)
 8002d32:	0880                	addi	s0,sp,80
  assert(!(read_csr(mip) & MIP_MSIP));
 8002d34:	344027f3          	csrr	a5,mip
 8002d38:	fef43423          	sd	a5,-24(s0)
 8002d3c:	fe843783          	ld	a5,-24(s0)
 8002d40:	8ba1                	andi	a5,a5,8
 8002d42:	c795                	beqz	a5,8002d6e <prci_test+0x42>
 8002d44:	00009697          	auipc	a3,0x9
 8002d48:	70c68693          	addi	a3,a3,1804 # 800c450 <atol+0x63a>
 8002d4c:	09000613          	li	a2,144
 8002d50:	00009597          	auipc	a1,0x9
 8002d54:	68858593          	addi	a1,a1,1672 # 800c3d8 <atol+0x5c2>
 8002d58:	00009517          	auipc	a0,0x9
 8002d5c:	69850513          	addi	a0,a0,1688 # 800c3f0 <atol+0x5da>
 8002d60:	e22ff0ef          	jal	ra,8002382 <printm>
 8002d64:	67c1                	lui	a5,0x10
 8002d66:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7ff0001>
 8002d6a:	c63ff0ef          	jal	ra,80029cc <poweroff>
  *HLS()->ipi = 1;
 8002d6e:	87a2                	mv	a5,s0
 8002d70:	fef43023          	sd	a5,-32(s0)
 8002d74:	fe043703          	ld	a4,-32(s0)
 8002d78:	6785                	lui	a5,0x1
 8002d7a:	973e                	add	a4,a4,a5
 8002d7c:	77fd                	lui	a5,0xfffff
 8002d7e:	8ff9                	and	a5,a5,a4
 8002d80:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xfffffffff7833020>
 8002d84:	639c                	ld	a5,0(a5)
 8002d86:	4705                	li	a4,1
 8002d88:	c398                	sw	a4,0(a5)
  assert(read_csr(mip) & MIP_MSIP);
 8002d8a:	344027f3          	csrr	a5,mip
 8002d8e:	fcf43c23          	sd	a5,-40(s0)
 8002d92:	fd843783          	ld	a5,-40(s0)
 8002d96:	8ba1                	andi	a5,a5,8
 8002d98:	e795                	bnez	a5,8002dc4 <prci_test+0x98>
 8002d9a:	00009697          	auipc	a3,0x9
 8002d9e:	6d668693          	addi	a3,a3,1750 # 800c470 <atol+0x65a>
 8002da2:	09200613          	li	a2,146
 8002da6:	00009597          	auipc	a1,0x9
 8002daa:	63258593          	addi	a1,a1,1586 # 800c3d8 <atol+0x5c2>
 8002dae:	00009517          	auipc	a0,0x9
 8002db2:	64250513          	addi	a0,a0,1602 # 800c3f0 <atol+0x5da>
 8002db6:	dccff0ef          	jal	ra,8002382 <printm>
 8002dba:	67c1                	lui	a5,0x10
 8002dbc:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7ff0001>
 8002dc0:	c0dff0ef          	jal	ra,80029cc <poweroff>
  *HLS()->ipi = 0;
 8002dc4:	87a2                	mv	a5,s0
 8002dc6:	fcf43823          	sd	a5,-48(s0)
 8002dca:	fd043703          	ld	a4,-48(s0)
 8002dce:	6785                	lui	a5,0x1
 8002dd0:	973e                	add	a4,a4,a5
 8002dd2:	77fd                	lui	a5,0xfffff
 8002dd4:	8ff9                	and	a5,a5,a4
 8002dd6:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xfffffffff7833020>
 8002dda:	639c                	ld	a5,0(a5)
 8002ddc:	0007a023          	sw	zero,0(a5)

  assert(!(read_csr(mip) & MIP_MTIP));
 8002de0:	344027f3          	csrr	a5,mip
 8002de4:	fcf43423          	sd	a5,-56(s0)
 8002de8:	fc843783          	ld	a5,-56(s0)
 8002dec:	0807f793          	andi	a5,a5,128
 8002df0:	c795                	beqz	a5,8002e1c <prci_test+0xf0>
 8002df2:	00009697          	auipc	a3,0x9
 8002df6:	69e68693          	addi	a3,a3,1694 # 800c490 <atol+0x67a>
 8002dfa:	09500613          	li	a2,149
 8002dfe:	00009597          	auipc	a1,0x9
 8002e02:	5da58593          	addi	a1,a1,1498 # 800c3d8 <atol+0x5c2>
 8002e06:	00009517          	auipc	a0,0x9
 8002e0a:	5ea50513          	addi	a0,a0,1514 # 800c3f0 <atol+0x5da>
 8002e0e:	d74ff0ef          	jal	ra,8002382 <printm>
 8002e12:	67c1                	lui	a5,0x10
 8002e14:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7ff0001>
 8002e18:	bb5ff0ef          	jal	ra,80029cc <poweroff>
  *HLS()->timecmp = 0;
 8002e1c:	87a2                	mv	a5,s0
 8002e1e:	fcf43023          	sd	a5,-64(s0)
 8002e22:	fc043703          	ld	a4,-64(s0)
 8002e26:	6785                	lui	a5,0x1
 8002e28:	973e                	add	a4,a4,a5
 8002e2a:	77fd                	lui	a5,0xfffff
 8002e2c:	8ff9                	and	a5,a5,a4
 8002e2e:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xfffffffff7833020>
 8002e32:	6b9c                	ld	a5,16(a5)
 8002e34:	0007b023          	sd	zero,0(a5)
  assert(read_csr(mip) & MIP_MTIP);
 8002e38:	344027f3          	csrr	a5,mip
 8002e3c:	faf43c23          	sd	a5,-72(s0)
 8002e40:	fb843783          	ld	a5,-72(s0)
 8002e44:	0807f793          	andi	a5,a5,128
 8002e48:	e795                	bnez	a5,8002e74 <prci_test+0x148>
 8002e4a:	00009697          	auipc	a3,0x9
 8002e4e:	66668693          	addi	a3,a3,1638 # 800c4b0 <atol+0x69a>
 8002e52:	09700613          	li	a2,151
 8002e56:	00009597          	auipc	a1,0x9
 8002e5a:	58258593          	addi	a1,a1,1410 # 800c3d8 <atol+0x5c2>
 8002e5e:	00009517          	auipc	a0,0x9
 8002e62:	59250513          	addi	a0,a0,1426 # 800c3f0 <atol+0x5da>
 8002e66:	d1cff0ef          	jal	ra,8002382 <printm>
 8002e6a:	67c1                	lui	a5,0x10
 8002e6c:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7ff0001>
 8002e70:	b5dff0ef          	jal	ra,80029cc <poweroff>
  *HLS()->timecmp = -1ULL;
 8002e74:	87a2                	mv	a5,s0
 8002e76:	faf43823          	sd	a5,-80(s0)
 8002e7a:	fb043703          	ld	a4,-80(s0)
 8002e7e:	6785                	lui	a5,0x1
 8002e80:	973e                	add	a4,a4,a5
 8002e82:	77fd                	lui	a5,0xfffff
 8002e84:	8ff9                	and	a5,a5,a4
 8002e86:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xfffffffff7833020>
 8002e8a:	6b9c                	ld	a5,16(a5)
 8002e8c:	577d                	li	a4,-1
 8002e8e:	e398                	sd	a4,0(a5)
}
 8002e90:	0001                	nop
 8002e92:	60a6                	ld	ra,72(sp)
 8002e94:	6406                	ld	s0,64(sp)
 8002e96:	6161                	addi	sp,sp,80
 8002e98:	8082                	ret

0000000008002e9a <hart_plic_init>:

static void hart_plic_init()
{
 8002e9a:	711d                	addi	sp,sp,-96
 8002e9c:	eca2                	sd	s0,88(sp)
 8002e9e:	1080                	addi	s0,sp,96
  // clear pending interrupts
  *HLS()->ipi = 0;
 8002ea0:	87a2                	mv	a5,s0
 8002ea2:	fef43023          	sd	a5,-32(s0)
 8002ea6:	fe043703          	ld	a4,-32(s0)
 8002eaa:	6785                	lui	a5,0x1
 8002eac:	973e                	add	a4,a4,a5
 8002eae:	77fd                	lui	a5,0xfffff
 8002eb0:	8ff9                	and	a5,a5,a4
 8002eb2:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xfffffffff7833020>
 8002eb6:	639c                	ld	a5,0(a5)
 8002eb8:	0007a023          	sw	zero,0(a5)
  *HLS()->timecmp = -1ULL;
 8002ebc:	87a2                	mv	a5,s0
 8002ebe:	fcf43c23          	sd	a5,-40(s0)
 8002ec2:	fd843703          	ld	a4,-40(s0)
 8002ec6:	6785                	lui	a5,0x1
 8002ec8:	973e                	add	a4,a4,a5
 8002eca:	77fd                	lui	a5,0xfffff
 8002ecc:	8ff9                	and	a5,a5,a4
 8002ece:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xfffffffff7833020>
 8002ed2:	6b9c                	ld	a5,16(a5)
 8002ed4:	577d                	li	a4,-1
 8002ed6:	e398                	sd	a4,0(a5)
  write_csr(mip, 0);
 8002ed8:	34405073          	csrwi	mip,0

  if (!plic_ndevs)
 8002edc:	00015797          	auipc	a5,0x15
 8002ee0:	13478793          	addi	a5,a5,308 # 8018010 <plic_ndevs>
 8002ee4:	639c                	ld	a5,0(a5)
 8002ee6:	c3e9                	beqz	a5,8002fa8 <hart_plic_init+0x10e>
    return;

  size_t ie_words = (plic_ndevs + 8 * sizeof(*HLS()->plic_s_ie) - 1) /
 8002ee8:	00015797          	auipc	a5,0x15
 8002eec:	12878793          	addi	a5,a5,296 # 8018010 <plic_ndevs>
 8002ef0:	639c                	ld	a5,0(a5)
 8002ef2:	07fd                	addi	a5,a5,31
 8002ef4:	8395                	srli	a5,a5,0x5
 8002ef6:	fcf43823          	sd	a5,-48(s0)
		(8 * sizeof(*HLS()->plic_s_ie));
  for (size_t i = 0; i < ie_words; i++) {
 8002efa:	fe043423          	sd	zero,-24(s0)
 8002efe:	a0a9                	j	8002f48 <hart_plic_init+0xae>
     if (HLS()->plic_s_ie) {
 8002f00:	87a2                	mv	a5,s0
 8002f02:	fcf43423          	sd	a5,-56(s0)
 8002f06:	fc843703          	ld	a4,-56(s0)
 8002f0a:	6785                	lui	a5,0x1
 8002f0c:	973e                	add	a4,a4,a5
 8002f0e:	77fd                	lui	a5,0xfffff
 8002f10:	8ff9                	and	a5,a5,a4
 8002f12:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xfffffffff7833020>
 8002f16:	7b9c                	ld	a5,48(a5)
 8002f18:	c39d                	beqz	a5,8002f3e <hart_plic_init+0xa4>
        // Supervisor not always present
        HLS()->plic_s_ie[i] = __UINT32_MAX__;
 8002f1a:	87a2                	mv	a5,s0
 8002f1c:	fcf43023          	sd	a5,-64(s0)
 8002f20:	fc043703          	ld	a4,-64(s0)
 8002f24:	6785                	lui	a5,0x1
 8002f26:	973e                	add	a4,a4,a5
 8002f28:	77fd                	lui	a5,0xfffff
 8002f2a:	8ff9                	and	a5,a5,a4
 8002f2c:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xfffffffff7833020>
 8002f30:	7b98                	ld	a4,48(a5)
 8002f32:	fe843783          	ld	a5,-24(s0)
 8002f36:	078a                	slli	a5,a5,0x2
 8002f38:	97ba                	add	a5,a5,a4
 8002f3a:	577d                	li	a4,-1
 8002f3c:	c398                	sw	a4,0(a5)
  for (size_t i = 0; i < ie_words; i++) {
 8002f3e:	fe843783          	ld	a5,-24(s0)
 8002f42:	0785                	addi	a5,a5,1
 8002f44:	fef43423          	sd	a5,-24(s0)
 8002f48:	fe843703          	ld	a4,-24(s0)
 8002f4c:	fd043783          	ld	a5,-48(s0)
 8002f50:	faf768e3          	bltu	a4,a5,8002f00 <hart_plic_init+0x66>
     }
  }
  *HLS()->plic_m_thresh = 1;
 8002f54:	87a2                	mv	a5,s0
 8002f56:	faf43c23          	sd	a5,-72(s0)
 8002f5a:	fb843703          	ld	a4,-72(s0)
 8002f5e:	6785                	lui	a5,0x1
 8002f60:	973e                	add	a4,a4,a5
 8002f62:	77fd                	lui	a5,0xfffff
 8002f64:	8ff9                	and	a5,a5,a4
 8002f66:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xfffffffff7833020>
 8002f6a:	6f9c                	ld	a5,24(a5)
 8002f6c:	4705                	li	a4,1
 8002f6e:	c398                	sw	a4,0(a5)
  if (HLS()->plic_s_thresh) {
 8002f70:	87a2                	mv	a5,s0
 8002f72:	faf43823          	sd	a5,-80(s0)
 8002f76:	fb043703          	ld	a4,-80(s0)
 8002f7a:	6785                	lui	a5,0x1
 8002f7c:	973e                	add	a4,a4,a5
 8002f7e:	77fd                	lui	a5,0xfffff
 8002f80:	8ff9                	and	a5,a5,a4
 8002f82:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xfffffffff7833020>
 8002f86:	779c                	ld	a5,40(a5)
 8002f88:	c38d                	beqz	a5,8002faa <hart_plic_init+0x110>
      // Supervisor not always present
      *HLS()->plic_s_thresh = 0;
 8002f8a:	87a2                	mv	a5,s0
 8002f8c:	faf43423          	sd	a5,-88(s0)
 8002f90:	fa843703          	ld	a4,-88(s0)
 8002f94:	6785                	lui	a5,0x1
 8002f96:	973e                	add	a4,a4,a5
 8002f98:	77fd                	lui	a5,0xfffff
 8002f9a:	8ff9                	and	a5,a5,a4
 8002f9c:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xfffffffff7833020>
 8002fa0:	779c                	ld	a5,40(a5)
 8002fa2:	0007a023          	sw	zero,0(a5)
 8002fa6:	a011                	j	8002faa <hart_plic_init+0x110>
    return;
 8002fa8:	0001                	nop
  }
}
 8002faa:	6466                	ld	s0,88(sp)
 8002fac:	6125                	addi	sp,sp,96
 8002fae:	8082                	ret

0000000008002fb0 <wake_harts>:

static void wake_harts()
{
 8002fb0:	7179                	addi	sp,sp,-48
 8002fb2:	f422                	sd	s0,40(sp)
 8002fb4:	1800                	addi	s0,sp,48
  for (int hart = 0; hart < MAX_HARTS; ++hart)
 8002fb6:	fe042623          	sw	zero,-20(s0)
 8002fba:	a0ad                	j	8003024 <wake_harts+0x74>
    if ((((~disabled_hart_mask & hart_mask) >> hart) & 1))
 8002fbc:	00015797          	auipc	a5,0x15
 8002fc0:	04478793          	addi	a5,a5,68 # 8018000 <disabled_hart_mask>
 8002fc4:	639c                	ld	a5,0(a5)
 8002fc6:	fff7c793          	not	a5,a5
 8002fca:	873e                	mv	a4,a5
 8002fcc:	00015797          	auipc	a5,0x15
 8002fd0:	03c78793          	addi	a5,a5,60 # 8018008 <hart_mask>
 8002fd4:	639c                	ld	a5,0(a5)
 8002fd6:	8f7d                	and	a4,a4,a5
 8002fd8:	fec42783          	lw	a5,-20(s0)
 8002fdc:	00f757b3          	srl	a5,a4,a5
 8002fe0:	8b85                	andi	a5,a5,1
 8002fe2:	cf85                	beqz	a5,800301a <wake_harts+0x6a>
      *OTHER_HLS(hart)->ipi = 1; // wakeup the hart
 8002fe4:	87a2                	mv	a5,s0
 8002fe6:	fef43023          	sd	a5,-32(s0)
 8002fea:	fe043703          	ld	a4,-32(s0)
 8002fee:	6785                	lui	a5,0x1
 8002ff0:	973e                	add	a4,a4,a5
 8002ff2:	77fd                	lui	a5,0xfffff
 8002ff4:	8ff9                	and	a5,a5,a4
 8002ff6:	86be                	mv	a3,a5
 8002ff8:	fec42703          	lw	a4,-20(s0)
 8002ffc:	f14027f3          	csrr	a5,mhartid
 8003000:	fcf43c23          	sd	a5,-40(s0)
 8003004:	fd843783          	ld	a5,-40(s0)
 8003008:	40f707b3          	sub	a5,a4,a5
 800300c:	07b2                	slli	a5,a5,0xc
 800300e:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xfffffffff7833020>
 8003012:	97b6                	add	a5,a5,a3
 8003014:	639c                	ld	a5,0(a5)
 8003016:	4705                	li	a4,1
 8003018:	c398                	sw	a4,0(a5)
  for (int hart = 0; hart < MAX_HARTS; ++hart)
 800301a:	fec42783          	lw	a5,-20(s0)
 800301e:	2785                	addiw	a5,a5,1
 8003020:	fef42623          	sw	a5,-20(s0)
 8003024:	fec42783          	lw	a5,-20(s0)
 8003028:	0007871b          	sext.w	a4,a5
 800302c:	479d                	li	a5,7
 800302e:	f8e7d7e3          	ble	a4,a5,8002fbc <wake_harts+0xc>
}
 8003032:	0001                	nop
 8003034:	7422                	ld	s0,40(sp)
 8003036:	6145                	addi	sp,sp,48
 8003038:	8082                	ret

000000000800303a <init_first_hart>:

void init_first_hart(uintptr_t hartid, uintptr_t dtb)
{
 800303a:	1101                	addi	sp,sp,-32
 800303c:	ec06                	sd	ra,24(sp)
 800303e:	e822                	sd	s0,16(sp)
 8003040:	1000                	addi	s0,sp,32
 8003042:	fea43423          	sd	a0,-24(s0)
 8003046:	feb43023          	sd	a1,-32(s0)
  // Confirm console as early as possible
  query_uart(dtb);
 800304a:	fe043503          	ld	a0,-32(s0)
 800304e:	776000ef          	jal	ra,80037c4 <query_uart>
  query_uart16550(dtb);
 8003052:	fe043503          	ld	a0,-32(s0)
 8003056:	3db000ef          	jal	ra,8003c30 <query_uart16550>
  query_uart_litex(dtb);
 800305a:	fe043503          	ld	a0,-32(s0)
 800305e:	5e7000ef          	jal	ra,8003e44 <query_uart_litex>
  query_htif(dtb);
 8003062:	fe043503          	ld	a0,-32(s0)
 8003066:	56a000ef          	jal	ra,80035d0 <query_htif>
  printm("bbl loader\r\n");
 800306a:	00009517          	auipc	a0,0x9
 800306e:	46650513          	addi	a0,a0,1126 # 800c4d0 <atol+0x6ba>
 8003072:	b10ff0ef          	jal	ra,8002382 <printm>

  hart_init();
 8003076:	c4dff0ef          	jal	ra,8002cc2 <hart_init>
  hls_init(0); // this might get called again from parse_config_string
 800307a:	4501                	li	a0,0
 800307c:	bc3ff0ef          	jal	ra,8002c3e <hls_init>

  // Find the power button early as well so die() works
  query_finisher(dtb);
 8003080:	fe043503          	ld	a0,-32(s0)
 8003084:	793000ef          	jal	ra,8004016 <query_finisher>

  query_mem(dtb);
 8003088:	fe043503          	ld	a0,-32(s0)
 800308c:	d1bfd0ef          	jal	ra,8000da6 <query_mem>
  query_harts(dtb);
 8003090:	fe043503          	ld	a0,-32(s0)
 8003094:	91afe0ef          	jal	ra,80011ae <query_harts>
  query_clint(dtb);
 8003098:	fe043503          	ld	a0,-32(s0)
 800309c:	ce0fe0ef          	jal	ra,800157c <query_clint>
  query_plic(dtb);
 80030a0:	fe043503          	ld	a0,-32(s0)
 80030a4:	98dfe0ef          	jal	ra,8001a30 <query_plic>
  query_chosen(dtb);
 80030a8:	fe043503          	ld	a0,-32(s0)
 80030ac:	d8dfe0ef          	jal	ra,8001e38 <query_chosen>

  wake_harts();
 80030b0:	f01ff0ef          	jal	ra,8002fb0 <wake_harts>

  plic_init();
 80030b4:	c31ff0ef          	jal	ra,8002ce4 <plic_init>
  hart_plic_init();
 80030b8:	de3ff0ef          	jal	ra,8002e9a <hart_plic_init>
  //prci_test();
  memory_init();
 80030bc:	bdfff0ef          	jal	ra,8002c9a <memory_init>
  boot_loader(dtb);
 80030c0:	fe043503          	ld	a0,-32(s0)
 80030c4:	c6cfd0ef          	jal	ra,8000530 <boot_loader>
}
 80030c8:	0001                	nop
 80030ca:	60e2                	ld	ra,24(sp)
 80030cc:	6442                	ld	s0,16(sp)
 80030ce:	6105                	addi	sp,sp,32
 80030d0:	8082                	ret

00000000080030d2 <init_other_hart>:

void init_other_hart(uintptr_t hartid, uintptr_t dtb)
{
 80030d2:	1101                	addi	sp,sp,-32
 80030d4:	ec06                	sd	ra,24(sp)
 80030d6:	e822                	sd	s0,16(sp)
 80030d8:	1000                	addi	s0,sp,32
 80030da:	fea43423          	sd	a0,-24(s0)
 80030de:	feb43023          	sd	a1,-32(s0)
  hart_init();
 80030e2:	be1ff0ef          	jal	ra,8002cc2 <hart_init>
  hart_plic_init();
 80030e6:	db5ff0ef          	jal	ra,8002e9a <hart_plic_init>
  boot_other_hart(dtb);
 80030ea:	fe043503          	ld	a0,-32(s0)
 80030ee:	bc6fd0ef          	jal	ra,80004b4 <boot_other_hart>
}
 80030f2:	0001                	nop
 80030f4:	60e2                	ld	ra,24(sp)
 80030f6:	6442                	ld	s0,16(sp)
 80030f8:	6105                	addi	sp,sp,32
 80030fa:	8082                	ret

00000000080030fc <setup_pmp>:

void setup_pmp(void)
{
 80030fc:	1101                	addi	sp,sp,-32
 80030fe:	ec22                	sd	s0,24(sp)
 8003100:	1000                	addi	s0,sp,32
  // Set up a PMP to permit access to all of memory.
  // Ignore the illegal-instruction trap if PMPs aren't supported.
  uintptr_t pmpc = PMP_NAPOT | PMP_R | PMP_W | PMP_X;
 8003102:	47fd                	li	a5,31
 8003104:	fef43423          	sd	a5,-24(s0)
  asm volatile ("la t0, 1f\n\t"
 8003108:	fe843783          	ld	a5,-24(s0)
 800310c:	577d                	li	a4,-1
 800310e:	00000297          	auipc	t0,0x0
 8003112:	01628293          	addi	t0,t0,22 # 8003124 <setup_pmp+0x28>
 8003116:	305292f3          	csrrw	t0,mtvec,t0
 800311a:	3b071073          	csrw	pmpaddr0,a4
 800311e:	3a079073          	csrw	pmpcfg0,a5
 8003122:	0001                	nop
 8003124:	30529073          	csrw	mtvec,t0
                "csrw pmpaddr0, %1\n\t"
                "csrw pmpcfg0, %0\n\t"
                ".align 2\n\t"
                "1: csrw mtvec, t0"
                : : "r" (pmpc), "r" (-1UL) : "t0");
}
 8003128:	0001                	nop
 800312a:	6462                	ld	s0,24(sp)
 800312c:	6105                	addi	sp,sp,32
 800312e:	8082                	ret

0000000008003130 <enter_supervisor_mode>:

void enter_supervisor_mode(void (*fn)(uintptr_t), uintptr_t arg0, uintptr_t arg1)
{
 8003130:	715d                	addi	sp,sp,-80
 8003132:	e4a2                	sd	s0,72(sp)
 8003134:	0880                	addi	s0,sp,80
 8003136:	fca43423          	sd	a0,-56(s0)
 800313a:	fcb43023          	sd	a1,-64(s0)
 800313e:	fac43c23          	sd	a2,-72(s0)
  uintptr_t mstatus = read_csr(mstatus);
 8003142:	300027f3          	csrr	a5,mstatus
 8003146:	fef43423          	sd	a5,-24(s0)
 800314a:	fe843783          	ld	a5,-24(s0)
 800314e:	fef43023          	sd	a5,-32(s0)
  mstatus = INSERT_FIELD(mstatus, MSTATUS_MPP, PRV_S);
 8003152:	fe043703          	ld	a4,-32(s0)
 8003156:	77f9                	lui	a5,0xffffe
 8003158:	7ff78793          	addi	a5,a5,2047 # ffffffffffffe7ff <_payload_end+0xfffffffff783285f>
 800315c:	8f7d                	and	a4,a4,a5
 800315e:	6785                	lui	a5,0x1
 8003160:	80078793          	addi	a5,a5,-2048 # 800 <MEM_START-0x7fff800>
 8003164:	8fd9                	or	a5,a5,a4
 8003166:	fef43023          	sd	a5,-32(s0)
  mstatus = INSERT_FIELD(mstatus, MSTATUS_MPIE, 0);
 800316a:	fe043783          	ld	a5,-32(s0)
 800316e:	f7f7f793          	andi	a5,a5,-129
 8003172:	fef43023          	sd	a5,-32(s0)
  write_csr(mstatus, mstatus);
 8003176:	fe043783          	ld	a5,-32(s0)
 800317a:	30079073          	csrw	mstatus,a5
  write_csr(mscratch, MACHINE_STACK_TOP() - MENTRY_FRAME_SIZE);
 800317e:	87a2                	mv	a5,s0
 8003180:	fcf43c23          	sd	a5,-40(s0)
 8003184:	fd843703          	ld	a4,-40(s0)
 8003188:	6785                	lui	a5,0x1
 800318a:	973e                	add	a4,a4,a5
 800318c:	77fd                	lui	a5,0xfffff
 800318e:	8ff9                	and	a5,a5,a4
 8003190:	ec078793          	addi	a5,a5,-320 # ffffffffffffeec0 <_payload_end+0xfffffffff7832f20>
 8003194:	34079073          	csrw	mscratch,a5
#ifndef __riscv_flen
  uintptr_t *p_fcsr = (uintptr_t*)(MACHINE_STACK_TOP() - MENTRY_FRAME_SIZE); // the x0's save slot
  *p_fcsr = 0;
#endif
  write_csr(mepc, fn);
 8003198:	fc843783          	ld	a5,-56(s0)
 800319c:	34179073          	csrw	mepc,a5

  register uintptr_t a0 asm ("a0") = arg0;
 80031a0:	fc043503          	ld	a0,-64(s0)
  register uintptr_t a1 asm ("a1") = arg1;
 80031a4:	fb843583          	ld	a1,-72(s0)
  asm volatile ("mret" : : "r" (a0), "r" (a1));
 80031a8:	30200073          	mret

00000000080031ac <enter_machine_mode>:
  __builtin_unreachable();
}

void enter_machine_mode(void (*fn)(uintptr_t, uintptr_t), uintptr_t arg0, uintptr_t arg1)
{
 80031ac:	715d                	addi	sp,sp,-80
 80031ae:	e486                	sd	ra,72(sp)
 80031b0:	e0a2                	sd	s0,64(sp)
 80031b2:	0880                	addi	s0,sp,80
 80031b4:	fca43423          	sd	a0,-56(s0)
 80031b8:	fcb43023          	sd	a1,-64(s0)
 80031bc:	fac43c23          	sd	a2,-72(s0)
  uintptr_t mstatus = read_csr(mstatus);
 80031c0:	300027f3          	csrr	a5,mstatus
 80031c4:	fef43423          	sd	a5,-24(s0)
 80031c8:	fe843783          	ld	a5,-24(s0)
 80031cc:	fef43023          	sd	a5,-32(s0)
  mstatus = INSERT_FIELD(mstatus, MSTATUS_MPIE, 0);
 80031d0:	fe043783          	ld	a5,-32(s0)
 80031d4:	f7f7f793          	andi	a5,a5,-129
 80031d8:	fef43023          	sd	a5,-32(s0)
  write_csr(mstatus, mstatus);
 80031dc:	fe043783          	ld	a5,-32(s0)
 80031e0:	30079073          	csrw	mstatus,a5
  write_csr(mscratch, MACHINE_STACK_TOP() - MENTRY_FRAME_SIZE);
 80031e4:	87a2                	mv	a5,s0
 80031e6:	fcf43c23          	sd	a5,-40(s0)
 80031ea:	fd843703          	ld	a4,-40(s0)
 80031ee:	6785                	lui	a5,0x1
 80031f0:	973e                	add	a4,a4,a5
 80031f2:	77fd                	lui	a5,0xfffff
 80031f4:	8ff9                	and	a5,a5,a4
 80031f6:	ec078793          	addi	a5,a5,-320 # ffffffffffffeec0 <_payload_end+0xfffffffff7832f20>
 80031fa:	34079073          	csrw	mscratch,a5

  /* Jump to the payload's entry point */
  fn(arg0, arg1);
 80031fe:	fc843783          	ld	a5,-56(s0)
 8003202:	fb843583          	ld	a1,-72(s0)
 8003206:	fc043503          	ld	a0,-64(s0)
 800320a:	9782                	jalr	a5

000000000800320c <spinlock_trylock>:
  enable_irqrestore(flags); \
  res; })
#endif

static inline int spinlock_trylock(spinlock_t* lock)
{
 800320c:	7179                	addi	sp,sp,-48
 800320e:	f422                	sd	s0,40(sp)
 8003210:	1800                	addi	s0,sp,48
 8003212:	fca43c23          	sd	a0,-40(s0)
  int res = atomic_swap(&lock->lock, -1);
 8003216:	fd843783          	ld	a5,-40(s0)
 800321a:	577d                	li	a4,-1
 800321c:	0ce7a72f          	amoswap.w.aq	a4,a4,(a5)
 8003220:	86ba                	mv	a3,a4
 8003222:	0006879b          	sext.w	a5,a3
 8003226:	fef42623          	sw	a5,-20(s0)
  mb();
 800322a:	0ff0000f          	fence
  return res;
 800322e:	fec42783          	lw	a5,-20(s0)
}
 8003232:	853e                	mv	a0,a5
 8003234:	7422                	ld	s0,40(sp)
 8003236:	6145                	addi	sp,sp,48
 8003238:	8082                	ret

000000000800323a <spinlock_lock>:

static inline void spinlock_lock(spinlock_t* lock)
{
 800323a:	1101                	addi	sp,sp,-32
 800323c:	ec06                	sd	ra,24(sp)
 800323e:	e822                	sd	s0,16(sp)
 8003240:	1000                	addi	s0,sp,32
 8003242:	fea43423          	sd	a0,-24(s0)
  do
  {
    while (atomic_read(&lock->lock))
 8003246:	0001                	nop
 8003248:	fe843783          	ld	a5,-24(s0)
 800324c:	439c                	lw	a5,0(a5)
 800324e:	2781                	sext.w	a5,a5
 8003250:	ffe5                	bnez	a5,8003248 <spinlock_lock+0xe>
      ;
  } while (spinlock_trylock(lock));
 8003252:	fe843503          	ld	a0,-24(s0)
 8003256:	fb7ff0ef          	jal	ra,800320c <spinlock_trylock>
 800325a:	87aa                	mv	a5,a0
 800325c:	f7ed                	bnez	a5,8003246 <spinlock_lock+0xc>
}
 800325e:	0001                	nop
 8003260:	60e2                	ld	ra,24(sp)
 8003262:	6442                	ld	s0,16(sp)
 8003264:	6105                	addi	sp,sp,32
 8003266:	8082                	ret

0000000008003268 <spinlock_unlock>:

static inline void spinlock_unlock(spinlock_t* lock)
{
 8003268:	1101                	addi	sp,sp,-32
 800326a:	ec22                	sd	s0,24(sp)
 800326c:	1000                	addi	s0,sp,32
 800326e:	fea43423          	sd	a0,-24(s0)
  mb();
 8003272:	0ff0000f          	fence
  atomic_set(&lock->lock,0);
 8003276:	fe843783          	ld	a5,-24(s0)
 800327a:	0007a023          	sw	zero,0(a5)
}
 800327e:	0001                	nop
 8003280:	6462                	ld	s0,24(sp)
 8003282:	6105                	addi	sp,sp,32
 8003284:	8082                	ret

0000000008003286 <__check_fromhost>:

#define TOHOST_OFFSET		((uintptr_t)tohost - (uintptr_t)__htif_base)
#define FROMHOST_OFFSET		((uintptr_t)fromhost - (uintptr_t)__htif_base)

static void __check_fromhost()
{
 8003286:	1101                	addi	sp,sp,-32
 8003288:	ec06                	sd	ra,24(sp)
 800328a:	e822                	sd	s0,16(sp)
 800328c:	1000                	addi	s0,sp,32
  uint64_t fh = fromhost;
 800328e:	0000a797          	auipc	a5,0xa
 8003292:	d7a78793          	addi	a5,a5,-646 # 800d008 <fromhost>
 8003296:	639c                	ld	a5,0(a5)
 8003298:	fef43423          	sd	a5,-24(s0)
  if (!fh)
 800329c:	fe843783          	ld	a5,-24(s0)
 80032a0:	cfd1                	beqz	a5,800333c <__check_fromhost+0xb6>
    return;
  fromhost = 0;
 80032a2:	0000a797          	auipc	a5,0xa
 80032a6:	d6678793          	addi	a5,a5,-666 # 800d008 <fromhost>
 80032aa:	0007b023          	sd	zero,0(a5)

  // this should be from the console
  assert(FROMHOST_DEV(fh) == 1);
 80032ae:	fe843783          	ld	a5,-24(s0)
 80032b2:	0387d713          	srli	a4,a5,0x38
 80032b6:	4785                	li	a5,1
 80032b8:	02f70663          	beq	a4,a5,80032e4 <__check_fromhost+0x5e>
 80032bc:	00009697          	auipc	a3,0x9
 80032c0:	22468693          	addi	a3,a3,548 # 800c4e0 <atol+0x6ca>
 80032c4:	467d                	li	a2,31
 80032c6:	00009597          	auipc	a1,0x9
 80032ca:	23258593          	addi	a1,a1,562 # 800c4f8 <atol+0x6e2>
 80032ce:	00009517          	auipc	a0,0x9
 80032d2:	24250513          	addi	a0,a0,578 # 800c510 <atol+0x6fa>
 80032d6:	8acff0ef          	jal	ra,8002382 <printm>
 80032da:	67c1                	lui	a5,0x10
 80032dc:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7ff0001>
 80032e0:	eecff0ef          	jal	ra,80029cc <poweroff>
  switch (FROMHOST_CMD(fh)) {
 80032e4:	fe843783          	ld	a5,-24(s0)
 80032e8:	07a2                	slli	a5,a5,0x8
 80032ea:	93e1                	srli	a5,a5,0x38
 80032ec:	c789                	beqz	a5,80032f6 <__check_fromhost+0x70>
 80032ee:	4705                	li	a4,1
 80032f0:	04e78863          	beq	a5,a4,8003340 <__check_fromhost+0xba>
 80032f4:	a839                	j	8003312 <__check_fromhost+0x8c>
    case 0:
      htif_console_buf = 1 + (uint8_t)FROMHOST_DATA(fh);
 80032f6:	fe843783          	ld	a5,-24(s0)
 80032fa:	0ff7f793          	andi	a5,a5,255
 80032fe:	2781                	sext.w	a5,a5
 8003300:	2785                	addiw	a5,a5,1
 8003302:	0007871b          	sext.w	a4,a5
 8003306:	00015797          	auipc	a5,0x15
 800330a:	d4278793          	addi	a5,a5,-702 # 8018048 <htif_console_buf>
 800330e:	c398                	sw	a4,0(a5)
      break;
 8003310:	a80d                	j	8003342 <__check_fromhost+0xbc>
    case 1:
      break;
    default:
      assert(0);
 8003312:	00009697          	auipc	a3,0x9
 8003316:	21e68693          	addi	a3,a3,542 # 800c530 <atol+0x71a>
 800331a:	02700613          	li	a2,39
 800331e:	00009597          	auipc	a1,0x9
 8003322:	1da58593          	addi	a1,a1,474 # 800c4f8 <atol+0x6e2>
 8003326:	00009517          	auipc	a0,0x9
 800332a:	1ea50513          	addi	a0,a0,490 # 800c510 <atol+0x6fa>
 800332e:	854ff0ef          	jal	ra,8002382 <printm>
 8003332:	67c1                	lui	a5,0x10
 8003334:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7ff0001>
 8003338:	e94ff0ef          	jal	ra,80029cc <poweroff>
    return;
 800333c:	0001                	nop
 800333e:	a011                	j	8003342 <__check_fromhost+0xbc>
      break;
 8003340:	0001                	nop
  }
}
 8003342:	60e2                	ld	ra,24(sp)
 8003344:	6442                	ld	s0,16(sp)
 8003346:	6105                	addi	sp,sp,32
 8003348:	8082                	ret

000000000800334a <__set_tohost>:

static void __set_tohost(uintptr_t dev, uintptr_t cmd, uintptr_t data)
{
 800334a:	7179                	addi	sp,sp,-48
 800334c:	f406                	sd	ra,40(sp)
 800334e:	f022                	sd	s0,32(sp)
 8003350:	1800                	addi	s0,sp,48
 8003352:	fea43423          	sd	a0,-24(s0)
 8003356:	feb43023          	sd	a1,-32(s0)
 800335a:	fcc43c23          	sd	a2,-40(s0)
  while (tohost)
 800335e:	a019                	j	8003364 <__set_tohost+0x1a>
    __check_fromhost();
 8003360:	f27ff0ef          	jal	ra,8003286 <__check_fromhost>
  while (tohost)
 8003364:	0000a797          	auipc	a5,0xa
 8003368:	c9c78793          	addi	a5,a5,-868 # 800d000 <tohost>
 800336c:	639c                	ld	a5,0(a5)
 800336e:	fbed                	bnez	a5,8003360 <__set_tohost+0x16>
  tohost = TOHOST_CMD(dev, cmd, data);
 8003370:	fe843783          	ld	a5,-24(s0)
 8003374:	03879713          	slli	a4,a5,0x38
 8003378:	fe043783          	ld	a5,-32(s0)
 800337c:	17c2                	slli	a5,a5,0x30
 800337e:	8f5d                	or	a4,a4,a5
 8003380:	fd843783          	ld	a5,-40(s0)
 8003384:	8f5d                	or	a4,a4,a5
 8003386:	0000a797          	auipc	a5,0xa
 800338a:	c7a78793          	addi	a5,a5,-902 # 800d000 <tohost>
 800338e:	e398                	sd	a4,0(a5)
}
 8003390:	0001                	nop
 8003392:	70a2                	ld	ra,40(sp)
 8003394:	7402                	ld	s0,32(sp)
 8003396:	6145                	addi	sp,sp,48
 8003398:	8082                	ret

000000000800339a <htif_console_getchar>:

int htif_console_getchar()
{
 800339a:	1101                	addi	sp,sp,-32
 800339c:	ec06                	sd	ra,24(sp)
 800339e:	e822                	sd	s0,16(sp)
 80033a0:	1000                	addi	s0,sp,32
#if __riscv_xlen == 32
  // HTIF devices are not supported on RV32
  return -1;
#endif

  spinlock_lock(&htif_lock);
 80033a2:	0000c517          	auipc	a0,0xc
 80033a6:	c8650513          	addi	a0,a0,-890 # 800f028 <htif_lock>
 80033aa:	e91ff0ef          	jal	ra,800323a <spinlock_lock>
    __check_fromhost();
 80033ae:	ed9ff0ef          	jal	ra,8003286 <__check_fromhost>
    int ch = htif_console_buf;
 80033b2:	00015797          	auipc	a5,0x15
 80033b6:	c9678793          	addi	a5,a5,-874 # 8018048 <htif_console_buf>
 80033ba:	439c                	lw	a5,0(a5)
 80033bc:	fef42623          	sw	a5,-20(s0)
    if (ch >= 0) {
 80033c0:	fec42783          	lw	a5,-20(s0)
 80033c4:	2781                	sext.w	a5,a5
 80033c6:	0007cd63          	bltz	a5,80033e0 <htif_console_getchar+0x46>
      htif_console_buf = -1;
 80033ca:	00015797          	auipc	a5,0x15
 80033ce:	c7e78793          	addi	a5,a5,-898 # 8018048 <htif_console_buf>
 80033d2:	577d                	li	a4,-1
 80033d4:	c398                	sw	a4,0(a5)
      __set_tohost(1, 0, 0);
 80033d6:	4601                	li	a2,0
 80033d8:	4581                	li	a1,0
 80033da:	4505                	li	a0,1
 80033dc:	f6fff0ef          	jal	ra,800334a <__set_tohost>
    }
  spinlock_unlock(&htif_lock);
 80033e0:	0000c517          	auipc	a0,0xc
 80033e4:	c4850513          	addi	a0,a0,-952 # 800f028 <htif_lock>
 80033e8:	e81ff0ef          	jal	ra,8003268 <spinlock_unlock>

  return ch - 1;
 80033ec:	fec42783          	lw	a5,-20(s0)
 80033f0:	37fd                	addiw	a5,a5,-1
 80033f2:	2781                	sext.w	a5,a5
}
 80033f4:	853e                	mv	a0,a5
 80033f6:	60e2                	ld	ra,24(sp)
 80033f8:	6442                	ld	s0,16(sp)
 80033fa:	6105                	addi	sp,sp,32
 80033fc:	8082                	ret

00000000080033fe <do_tohost_fromhost>:

static void do_tohost_fromhost(uintptr_t dev, uintptr_t cmd, uintptr_t data)
{
 80033fe:	7139                	addi	sp,sp,-64
 8003400:	fc06                	sd	ra,56(sp)
 8003402:	f822                	sd	s0,48(sp)
 8003404:	0080                	addi	s0,sp,64
 8003406:	fca43c23          	sd	a0,-40(s0)
 800340a:	fcb43823          	sd	a1,-48(s0)
 800340e:	fcc43423          	sd	a2,-56(s0)
  spinlock_lock(&htif_lock);
 8003412:	0000c517          	auipc	a0,0xc
 8003416:	c1650513          	addi	a0,a0,-1002 # 800f028 <htif_lock>
 800341a:	e21ff0ef          	jal	ra,800323a <spinlock_lock>
    __set_tohost(dev, cmd, data);
 800341e:	fc843603          	ld	a2,-56(s0)
 8003422:	fd043583          	ld	a1,-48(s0)
 8003426:	fd843503          	ld	a0,-40(s0)
 800342a:	f21ff0ef          	jal	ra,800334a <__set_tohost>

    while (1) {
      uint64_t fh = fromhost;
 800342e:	0000a797          	auipc	a5,0xa
 8003432:	bda78793          	addi	a5,a5,-1062 # 800d008 <fromhost>
 8003436:	639c                	ld	a5,0(a5)
 8003438:	fef43423          	sd	a5,-24(s0)
      if (fh) {
 800343c:	fe843783          	ld	a5,-24(s0)
 8003440:	d7fd                	beqz	a5,800342e <do_tohost_fromhost+0x30>
        if (FROMHOST_DEV(fh) == dev && FROMHOST_CMD(fh) == cmd) {
 8003442:	fe843783          	ld	a5,-24(s0)
 8003446:	93e1                	srli	a5,a5,0x38
 8003448:	fd843703          	ld	a4,-40(s0)
 800344c:	02f71163          	bne	a4,a5,800346e <do_tohost_fromhost+0x70>
 8003450:	fe843783          	ld	a5,-24(s0)
 8003454:	07a2                	slli	a5,a5,0x8
 8003456:	93e1                	srli	a5,a5,0x38
 8003458:	fd043703          	ld	a4,-48(s0)
 800345c:	00f71963          	bne	a4,a5,800346e <do_tohost_fromhost+0x70>
          fromhost = 0;
 8003460:	0000a797          	auipc	a5,0xa
 8003464:	ba878793          	addi	a5,a5,-1112 # 800d008 <fromhost>
 8003468:	0007b023          	sd	zero,0(a5)
          break;
 800346c:	a021                	j	8003474 <do_tohost_fromhost+0x76>
        }
        __check_fromhost();
 800346e:	e19ff0ef          	jal	ra,8003286 <__check_fromhost>
    while (1) {
 8003472:	bf75                	j	800342e <do_tohost_fromhost+0x30>
      }
    }
  spinlock_unlock(&htif_lock);
 8003474:	0000c517          	auipc	a0,0xc
 8003478:	bb450513          	addi	a0,a0,-1100 # 800f028 <htif_lock>
 800347c:	dedff0ef          	jal	ra,8003268 <spinlock_unlock>
}
 8003480:	0001                	nop
 8003482:	70e2                	ld	ra,56(sp)
 8003484:	7442                	ld	s0,48(sp)
 8003486:	6121                	addi	sp,sp,64
 8003488:	8082                	ret

000000000800348a <htif_syscall>:

void htif_syscall(uintptr_t arg)
{
 800348a:	1101                	addi	sp,sp,-32
 800348c:	ec06                	sd	ra,24(sp)
 800348e:	e822                	sd	s0,16(sp)
 8003490:	1000                	addi	s0,sp,32
 8003492:	fea43423          	sd	a0,-24(s0)
  do_tohost_fromhost(0, 0, arg);
 8003496:	fe843603          	ld	a2,-24(s0)
 800349a:	4581                	li	a1,0
 800349c:	4501                	li	a0,0
 800349e:	f61ff0ef          	jal	ra,80033fe <do_tohost_fromhost>
}
 80034a2:	0001                	nop
 80034a4:	60e2                	ld	ra,24(sp)
 80034a6:	6442                	ld	s0,16(sp)
 80034a8:	6105                	addi	sp,sp,32
 80034aa:	8082                	ret

00000000080034ac <htif_console_putchar>:

void htif_console_putchar(uint8_t ch)
{
 80034ac:	1101                	addi	sp,sp,-32
 80034ae:	ec06                	sd	ra,24(sp)
 80034b0:	e822                	sd	s0,16(sp)
 80034b2:	1000                	addi	s0,sp,32
 80034b4:	87aa                	mv	a5,a0
 80034b6:	fef407a3          	sb	a5,-17(s0)
  magic_mem[1] = 1;
  magic_mem[2] = (uintptr_t)&ch;
  magic_mem[3] = 1;
  do_tohost_fromhost(0, 0, (uintptr_t)magic_mem);
#else
  spinlock_lock(&htif_lock);
 80034ba:	0000c517          	auipc	a0,0xc
 80034be:	b6e50513          	addi	a0,a0,-1170 # 800f028 <htif_lock>
 80034c2:	d79ff0ef          	jal	ra,800323a <spinlock_lock>
    __set_tohost(1, 1, ch);
 80034c6:	fef44783          	lbu	a5,-17(s0)
 80034ca:	863e                	mv	a2,a5
 80034cc:	4585                	li	a1,1
 80034ce:	4505                	li	a0,1
 80034d0:	e7bff0ef          	jal	ra,800334a <__set_tohost>
  spinlock_unlock(&htif_lock);
 80034d4:	0000c517          	auipc	a0,0xc
 80034d8:	b5450513          	addi	a0,a0,-1196 # 800f028 <htif_lock>
 80034dc:	d8dff0ef          	jal	ra,8003268 <spinlock_unlock>
#endif
}
 80034e0:	0001                	nop
 80034e2:	60e2                	ld	ra,24(sp)
 80034e4:	6442                	ld	s0,16(sp)
 80034e6:	6105                	addi	sp,sp,32
 80034e8:	8082                	ret

00000000080034ea <htif_poweroff>:

void htif_poweroff()
{
 80034ea:	1141                	addi	sp,sp,-16
 80034ec:	e406                	sd	ra,8(sp)
 80034ee:	e022                	sd	s0,0(sp)
 80034f0:	0800                	addi	s0,sp,16
  while (1) {
    spinlock_lock(&htif_lock);
 80034f2:	0000c517          	auipc	a0,0xc
 80034f6:	b3650513          	addi	a0,a0,-1226 # 800f028 <htif_lock>
 80034fa:	d41ff0ef          	jal	ra,800323a <spinlock_lock>
    __set_tohost(0, 0, 1);
 80034fe:	4605                	li	a2,1
 8003500:	4581                	li	a1,0
 8003502:	4501                	li	a0,0
 8003504:	e47ff0ef          	jal	ra,800334a <__set_tohost>
    spinlock_unlock(&htif_lock);
 8003508:	0000c517          	auipc	a0,0xc
 800350c:	b2050513          	addi	a0,a0,-1248 # 800f028 <htif_lock>
 8003510:	d59ff0ef          	jal	ra,8003268 <spinlock_unlock>
    spinlock_lock(&htif_lock);
 8003514:	bff9                	j	80034f2 <htif_poweroff+0x8>

0000000008003516 <htif_open>:
{
  int compat;
};

static void htif_open(const struct fdt_scan_node *node, void *extra)
{
 8003516:	7179                	addi	sp,sp,-48
 8003518:	f406                	sd	ra,40(sp)
 800351a:	f022                	sd	s0,32(sp)
 800351c:	1800                	addi	s0,sp,48
 800351e:	fca43c23          	sd	a0,-40(s0)
 8003522:	fcb43823          	sd	a1,-48(s0)
  struct htif_scan *scan = (struct htif_scan *)extra;
 8003526:	fd043783          	ld	a5,-48(s0)
 800352a:	fef43423          	sd	a5,-24(s0)
  memset(scan, 0, sizeof(*scan));
 800352e:	4611                	li	a2,4
 8003530:	4581                	li	a1,0
 8003532:	fe843503          	ld	a0,-24(s0)
 8003536:	71c080ef          	jal	ra,800bc52 <memset>
}
 800353a:	0001                	nop
 800353c:	70a2                	ld	ra,40(sp)
 800353e:	7402                	ld	s0,32(sp)
 8003540:	6145                	addi	sp,sp,48
 8003542:	8082                	ret

0000000008003544 <htif_prop>:

static void htif_prop(const struct fdt_scan_prop *prop, void *extra)
{
 8003544:	7179                	addi	sp,sp,-48
 8003546:	f406                	sd	ra,40(sp)
 8003548:	f022                	sd	s0,32(sp)
 800354a:	1800                	addi	s0,sp,48
 800354c:	fca43c23          	sd	a0,-40(s0)
 8003550:	fcb43823          	sd	a1,-48(s0)
  struct htif_scan *scan = (struct htif_scan *)extra;
 8003554:	fd043783          	ld	a5,-48(s0)
 8003558:	fef43423          	sd	a5,-24(s0)
  if (!strcmp(prop->name, "compatible") && fdt_string_list_index(prop, "ucb,htif0") >= 0) {
 800355c:	fd843783          	ld	a5,-40(s0)
 8003560:	679c                	ld	a5,8(a5)
 8003562:	00009597          	auipc	a1,0x9
 8003566:	fd658593          	addi	a1,a1,-42 # 800c538 <atol+0x722>
 800356a:	853e                	mv	a0,a5
 800356c:	7f0080ef          	jal	ra,800bd5c <strcmp>
 8003570:	87aa                	mv	a5,a0
 8003572:	e385                	bnez	a5,8003592 <htif_prop+0x4e>
 8003574:	00009597          	auipc	a1,0x9
 8003578:	fd458593          	addi	a1,a1,-44 # 800c548 <atol+0x732>
 800357c:	fd843503          	ld	a0,-40(s0)
 8003580:	d9efd0ef          	jal	ra,8000b1e <fdt_string_list_index>
 8003584:	87aa                	mv	a5,a0
 8003586:	0007c663          	bltz	a5,8003592 <htif_prop+0x4e>
    scan->compat = 1;
 800358a:	fe843783          	ld	a5,-24(s0)
 800358e:	4705                	li	a4,1
 8003590:	c398                	sw	a4,0(a5)
  }
}
 8003592:	0001                	nop
 8003594:	70a2                	ld	ra,40(sp)
 8003596:	7402                	ld	s0,32(sp)
 8003598:	6145                	addi	sp,sp,48
 800359a:	8082                	ret

000000000800359c <htif_done>:

static void htif_done(const struct fdt_scan_node *node, void *extra)
{
 800359c:	7179                	addi	sp,sp,-48
 800359e:	f422                	sd	s0,40(sp)
 80035a0:	1800                	addi	s0,sp,48
 80035a2:	fca43c23          	sd	a0,-40(s0)
 80035a6:	fcb43823          	sd	a1,-48(s0)
  struct htif_scan *scan = (struct htif_scan *)extra;
 80035aa:	fd043783          	ld	a5,-48(s0)
 80035ae:	fef43423          	sd	a5,-24(s0)
  if (!scan->compat) return;
 80035b2:	fe843783          	ld	a5,-24(s0)
 80035b6:	439c                	lw	a5,0(a5)
 80035b8:	cb81                	beqz	a5,80035c8 <htif_done+0x2c>

  htif = 1;
 80035ba:	00015797          	auipc	a5,0x15
 80035be:	a8678793          	addi	a5,a5,-1402 # 8018040 <htif>
 80035c2:	4705                	li	a4,1
 80035c4:	e398                	sd	a4,0(a5)
 80035c6:	a011                	j	80035ca <htif_done+0x2e>
  if (!scan->compat) return;
 80035c8:	0001                	nop
}
 80035ca:	7422                	ld	s0,40(sp)
 80035cc:	6145                	addi	sp,sp,48
 80035ce:	8082                	ret

00000000080035d0 <query_htif>:

void query_htif(uintptr_t fdt)
{
 80035d0:	715d                	addi	sp,sp,-80
 80035d2:	e486                	sd	ra,72(sp)
 80035d4:	e0a2                	sd	s0,64(sp)
 80035d6:	0880                	addi	s0,sp,80
 80035d8:	faa43c23          	sd	a0,-72(s0)
  struct fdt_cb cb;
  struct htif_scan scan;

  memset(&cb, 0, sizeof(cb));
 80035dc:	fc840793          	addi	a5,s0,-56
 80035e0:	02800613          	li	a2,40
 80035e4:	4581                	li	a1,0
 80035e6:	853e                	mv	a0,a5
 80035e8:	66a080ef          	jal	ra,800bc52 <memset>
  cb.open = htif_open;
 80035ec:	00000797          	auipc	a5,0x0
 80035f0:	f2a78793          	addi	a5,a5,-214 # 8003516 <htif_open>
 80035f4:	fcf43423          	sd	a5,-56(s0)
  cb.prop = htif_prop;
 80035f8:	00000797          	auipc	a5,0x0
 80035fc:	f4c78793          	addi	a5,a5,-180 # 8003544 <htif_prop>
 8003600:	fcf43823          	sd	a5,-48(s0)
  cb.done = htif_done;
 8003604:	00000797          	auipc	a5,0x0
 8003608:	f9878793          	addi	a5,a5,-104 # 800359c <htif_done>
 800360c:	fcf43c23          	sd	a5,-40(s0)
  cb.extra = &scan;
 8003610:	fc040793          	addi	a5,s0,-64
 8003614:	fef43423          	sd	a5,-24(s0)

  fdt_scan(fdt, &cb);
 8003618:	fc840793          	addi	a5,s0,-56
 800361c:	85be                	mv	a1,a5
 800361e:	fb843503          	ld	a0,-72(s0)
 8003622:	ab6fd0ef          	jal	ra,80008d8 <fdt_scan>
}
 8003626:	0001                	nop
 8003628:	60a6                	ld	ra,72(sp)
 800362a:	6406                	ld	s0,64(sp)
 800362c:	6161                	addi	sp,sp,80
 800362e:	8082                	ret

0000000008003630 <uart_putchar>:
#include "fdt.h"

volatile uint32_t* uart;

void uart_putchar(uint8_t ch)
{
 8003630:	7179                	addi	sp,sp,-48
 8003632:	f422                	sd	s0,40(sp)
 8003634:	1800                	addi	s0,sp,48
 8003636:	87aa                	mv	a5,a0
 8003638:	fcf40fa3          	sb	a5,-33(s0)
#ifdef __riscv_atomic
    int32_t r;
    do {
      __asm__ __volatile__ (
        "amoor.w %0, %2, %1\n"
        : "=r" (r), "+A" (uart[UART_REG_TXFIFO])
 800363c:	00015797          	auipc	a5,0x15
 8003640:	a1478793          	addi	a5,a5,-1516 # 8018050 <uart>
 8003644:	639c                	ld	a5,0(a5)
      __asm__ __volatile__ (
 8003646:	fdf44703          	lbu	a4,-33(s0)
 800364a:	40e7a72f          	amoor.w	a4,a4,(a5)
 800364e:	fee42623          	sw	a4,-20(s0)
        : "r" (ch));
    } while (r < 0);
 8003652:	fec42783          	lw	a5,-20(s0)
 8003656:	2781                	sext.w	a5,a5
 8003658:	fe07c2e3          	bltz	a5,800363c <uart_putchar+0xc>
#else
    volatile uint32_t *tx = uart + UART_REG_TXFIFO;
    while ((int32_t)(*tx) < 0);
    *tx = ch;
#endif
}
 800365c:	0001                	nop
 800365e:	7422                	ld	s0,40(sp)
 8003660:	6145                	addi	sp,sp,48
 8003662:	8082                	ret

0000000008003664 <uart_getchar>:

int uart_getchar()
{
 8003664:	1101                	addi	sp,sp,-32
 8003666:	ec22                	sd	s0,24(sp)
 8003668:	1000                	addi	s0,sp,32
  int32_t ch = uart[UART_REG_RXFIFO];
 800366a:	00015797          	auipc	a5,0x15
 800366e:	9e678793          	addi	a5,a5,-1562 # 8018050 <uart>
 8003672:	639c                	ld	a5,0(a5)
 8003674:	0791                	addi	a5,a5,4
 8003676:	439c                	lw	a5,0(a5)
 8003678:	2781                	sext.w	a5,a5
 800367a:	fef42623          	sw	a5,-20(s0)
  if (ch < 0) return -1;
 800367e:	fec42783          	lw	a5,-20(s0)
 8003682:	2781                	sext.w	a5,a5
 8003684:	0007d463          	bgez	a5,800368c <uart_getchar+0x28>
 8003688:	57fd                	li	a5,-1
 800368a:	a019                	j	8003690 <uart_getchar+0x2c>
  return ch;
 800368c:	fec42783          	lw	a5,-20(s0)
}
 8003690:	853e                	mv	a0,a5
 8003692:	6462                	ld	s0,24(sp)
 8003694:	6105                	addi	sp,sp,32
 8003696:	8082                	ret

0000000008003698 <uart_open>:
  int compat;
  uint64_t reg;
};

static void uart_open(const struct fdt_scan_node *node, void *extra)
{
 8003698:	7179                	addi	sp,sp,-48
 800369a:	f406                	sd	ra,40(sp)
 800369c:	f022                	sd	s0,32(sp)
 800369e:	1800                	addi	s0,sp,48
 80036a0:	fca43c23          	sd	a0,-40(s0)
 80036a4:	fcb43823          	sd	a1,-48(s0)
  struct uart_scan *scan = (struct uart_scan *)extra;
 80036a8:	fd043783          	ld	a5,-48(s0)
 80036ac:	fef43423          	sd	a5,-24(s0)
  memset(scan, 0, sizeof(*scan));
 80036b0:	4641                	li	a2,16
 80036b2:	4581                	li	a1,0
 80036b4:	fe843503          	ld	a0,-24(s0)
 80036b8:	59a080ef          	jal	ra,800bc52 <memset>
}
 80036bc:	0001                	nop
 80036be:	70a2                	ld	ra,40(sp)
 80036c0:	7402                	ld	s0,32(sp)
 80036c2:	6145                	addi	sp,sp,48
 80036c4:	8082                	ret

00000000080036c6 <uart_prop>:

static void uart_prop(const struct fdt_scan_prop *prop, void *extra)
{
 80036c6:	7179                	addi	sp,sp,-48
 80036c8:	f406                	sd	ra,40(sp)
 80036ca:	f022                	sd	s0,32(sp)
 80036cc:	1800                	addi	s0,sp,48
 80036ce:	fca43c23          	sd	a0,-40(s0)
 80036d2:	fcb43823          	sd	a1,-48(s0)
  struct uart_scan *scan = (struct uart_scan *)extra;
 80036d6:	fd043783          	ld	a5,-48(s0)
 80036da:	fef43423          	sd	a5,-24(s0)
  if (!strcmp(prop->name, "compatible") && fdt_string_list_index(prop, "sifive,uart0") >= 0) {
 80036de:	fd843783          	ld	a5,-40(s0)
 80036e2:	679c                	ld	a5,8(a5)
 80036e4:	00009597          	auipc	a1,0x9
 80036e8:	e7458593          	addi	a1,a1,-396 # 800c558 <atol+0x742>
 80036ec:	853e                	mv	a0,a5
 80036ee:	66e080ef          	jal	ra,800bd5c <strcmp>
 80036f2:	87aa                	mv	a5,a0
 80036f4:	e38d                	bnez	a5,8003716 <uart_prop+0x50>
 80036f6:	00009597          	auipc	a1,0x9
 80036fa:	e7258593          	addi	a1,a1,-398 # 800c568 <atol+0x752>
 80036fe:	fd843503          	ld	a0,-40(s0)
 8003702:	c1cfd0ef          	jal	ra,8000b1e <fdt_string_list_index>
 8003706:	87aa                	mv	a5,a0
 8003708:	0007c763          	bltz	a5,8003716 <uart_prop+0x50>
    scan->compat = 1;
 800370c:	fe843783          	ld	a5,-24(s0)
 8003710:	4705                	li	a4,1
 8003712:	c398                	sw	a4,0(a5)
  } else if (!strcmp(prop->name, "reg")) {
    fdt_get_address(prop->node->parent, prop->value, &scan->reg);
  }
}
 8003714:	a825                	j	800374c <uart_prop+0x86>
  } else if (!strcmp(prop->name, "reg")) {
 8003716:	fd843783          	ld	a5,-40(s0)
 800371a:	679c                	ld	a5,8(a5)
 800371c:	00009597          	auipc	a1,0x9
 8003720:	e5c58593          	addi	a1,a1,-420 # 800c578 <atol+0x762>
 8003724:	853e                	mv	a0,a5
 8003726:	636080ef          	jal	ra,800bd5c <strcmp>
 800372a:	87aa                	mv	a5,a0
 800372c:	e385                	bnez	a5,800374c <uart_prop+0x86>
    fdt_get_address(prop->node->parent, prop->value, &scan->reg);
 800372e:	fd843783          	ld	a5,-40(s0)
 8003732:	639c                	ld	a5,0(a5)
 8003734:	6398                	ld	a4,0(a5)
 8003736:	fd843783          	ld	a5,-40(s0)
 800373a:	6b94                	ld	a3,16(a5)
 800373c:	fe843783          	ld	a5,-24(s0)
 8003740:	07a1                	addi	a5,a5,8
 8003742:	863e                	mv	a2,a5
 8003744:	85b6                	mv	a1,a3
 8003746:	853a                	mv	a0,a4
 8003748:	aa4fd0ef          	jal	ra,80009ec <fdt_get_address>
}
 800374c:	0001                	nop
 800374e:	70a2                	ld	ra,40(sp)
 8003750:	7402                	ld	s0,32(sp)
 8003752:	6145                	addi	sp,sp,48
 8003754:	8082                	ret

0000000008003756 <uart_done>:

static void uart_done(const struct fdt_scan_node *node, void *extra)
{
 8003756:	7179                	addi	sp,sp,-48
 8003758:	f422                	sd	s0,40(sp)
 800375a:	1800                	addi	s0,sp,48
 800375c:	fca43c23          	sd	a0,-40(s0)
 8003760:	fcb43823          	sd	a1,-48(s0)
  struct uart_scan *scan = (struct uart_scan *)extra;
 8003764:	fd043783          	ld	a5,-48(s0)
 8003768:	fef43423          	sd	a5,-24(s0)
  if (!scan->compat || !scan->reg || uart) return;
 800376c:	fe843783          	ld	a5,-24(s0)
 8003770:	439c                	lw	a5,0(a5)
 8003772:	c7a9                	beqz	a5,80037bc <uart_done+0x66>
 8003774:	fe843783          	ld	a5,-24(s0)
 8003778:	679c                	ld	a5,8(a5)
 800377a:	c3a9                	beqz	a5,80037bc <uart_done+0x66>
 800377c:	00015797          	auipc	a5,0x15
 8003780:	8d478793          	addi	a5,a5,-1836 # 8018050 <uart>
 8003784:	639c                	ld	a5,0(a5)
 8003786:	eb9d                	bnez	a5,80037bc <uart_done+0x66>

  // Enable Rx/Tx channels
  uart = (void*)(uintptr_t)scan->reg;
 8003788:	fe843783          	ld	a5,-24(s0)
 800378c:	679c                	ld	a5,8(a5)
 800378e:	873e                	mv	a4,a5
 8003790:	00015797          	auipc	a5,0x15
 8003794:	8c078793          	addi	a5,a5,-1856 # 8018050 <uart>
 8003798:	e398                	sd	a4,0(a5)
  uart[UART_REG_TXCTRL] = UART_TXEN;
 800379a:	00015797          	auipc	a5,0x15
 800379e:	8b678793          	addi	a5,a5,-1866 # 8018050 <uart>
 80037a2:	639c                	ld	a5,0(a5)
 80037a4:	07a1                	addi	a5,a5,8
 80037a6:	4705                	li	a4,1
 80037a8:	c398                	sw	a4,0(a5)
  uart[UART_REG_RXCTRL] = UART_RXEN;
 80037aa:	00015797          	auipc	a5,0x15
 80037ae:	8a678793          	addi	a5,a5,-1882 # 8018050 <uart>
 80037b2:	639c                	ld	a5,0(a5)
 80037b4:	07b1                	addi	a5,a5,12
 80037b6:	4705                	li	a4,1
 80037b8:	c398                	sw	a4,0(a5)
 80037ba:	a011                	j	80037be <uart_done+0x68>
  if (!scan->compat || !scan->reg || uart) return;
 80037bc:	0001                	nop
}
 80037be:	7422                	ld	s0,40(sp)
 80037c0:	6145                	addi	sp,sp,48
 80037c2:	8082                	ret

00000000080037c4 <query_uart>:

void query_uart(uintptr_t fdt)
{
 80037c4:	711d                	addi	sp,sp,-96
 80037c6:	ec86                	sd	ra,88(sp)
 80037c8:	e8a2                	sd	s0,80(sp)
 80037ca:	1080                	addi	s0,sp,96
 80037cc:	faa43423          	sd	a0,-88(s0)
  struct fdt_cb cb;
  struct uart_scan scan;

  memset(&cb, 0, sizeof(cb));
 80037d0:	fc840793          	addi	a5,s0,-56
 80037d4:	02800613          	li	a2,40
 80037d8:	4581                	li	a1,0
 80037da:	853e                	mv	a0,a5
 80037dc:	476080ef          	jal	ra,800bc52 <memset>
  cb.open = uart_open;
 80037e0:	00000797          	auipc	a5,0x0
 80037e4:	eb878793          	addi	a5,a5,-328 # 8003698 <uart_open>
 80037e8:	fcf43423          	sd	a5,-56(s0)
  cb.prop = uart_prop;
 80037ec:	00000797          	auipc	a5,0x0
 80037f0:	eda78793          	addi	a5,a5,-294 # 80036c6 <uart_prop>
 80037f4:	fcf43823          	sd	a5,-48(s0)
  cb.done = uart_done;
 80037f8:	00000797          	auipc	a5,0x0
 80037fc:	f5e78793          	addi	a5,a5,-162 # 8003756 <uart_done>
 8003800:	fcf43c23          	sd	a5,-40(s0)
  cb.extra = &scan;
 8003804:	fb840793          	addi	a5,s0,-72
 8003808:	fef43423          	sd	a5,-24(s0)

  fdt_scan(fdt, &cb);
 800380c:	fc840793          	addi	a5,s0,-56
 8003810:	85be                	mv	a1,a5
 8003812:	fa843503          	ld	a0,-88(s0)
 8003816:	8c2fd0ef          	jal	ra,80008d8 <fdt_scan>
}
 800381a:	0001                	nop
 800381c:	60e6                	ld	ra,88(sp)
 800381e:	6446                	ld	s0,80(sp)
 8003820:	6125                	addi	sp,sp,96
 8003822:	8082                	ret

0000000008003824 <uart16550_putchar>:
#ifndef UART_DEFAULT_BAUD
#define UART_DEFAULT_BAUD  38400
#endif

void uart16550_putchar(uint8_t ch)
{
 8003824:	1101                	addi	sp,sp,-32
 8003826:	ec22                	sd	s0,24(sp)
 8003828:	1000                	addi	s0,sp,32
 800382a:	87aa                	mv	a5,a0
 800382c:	fef407a3          	sb	a5,-17(s0)
  while ((uart16550[UART_REG_LSR << uart16550_reg_shift] & UART_REG_STATUS_TX) == 0);
 8003830:	0001                	nop
 8003832:	00015797          	auipc	a5,0x15
 8003836:	82678793          	addi	a5,a5,-2010 # 8018058 <uart16550>
 800383a:	639c                	ld	a5,0(a5)
 800383c:	0000b717          	auipc	a4,0xb
 8003840:	7f070713          	addi	a4,a4,2032 # 800f02c <uart16550_reg_shift>
 8003844:	4318                	lw	a4,0(a4)
 8003846:	4695                	li	a3,5
 8003848:	00e6973b          	sllw	a4,a3,a4
 800384c:	2701                	sext.w	a4,a4
 800384e:	97ba                	add	a5,a5,a4
 8003850:	0007c783          	lbu	a5,0(a5)
 8003854:	0ff7f793          	andi	a5,a5,255
 8003858:	2781                	sext.w	a5,a5
 800385a:	0207f793          	andi	a5,a5,32
 800385e:	2781                	sext.w	a5,a5
 8003860:	dbe9                	beqz	a5,8003832 <uart16550_putchar+0xe>
  uart16550[UART_REG_QUEUE << uart16550_reg_shift] = ch;
 8003862:	00014797          	auipc	a5,0x14
 8003866:	7f678793          	addi	a5,a5,2038 # 8018058 <uart16550>
 800386a:	639c                	ld	a5,0(a5)
 800386c:	fef44703          	lbu	a4,-17(s0)
 8003870:	00e78023          	sb	a4,0(a5)
}
 8003874:	0001                	nop
 8003876:	6462                	ld	s0,24(sp)
 8003878:	6105                	addi	sp,sp,32
 800387a:	8082                	ret

000000000800387c <uart16550_getchar>:

int uart16550_getchar()
{
 800387c:	1141                	addi	sp,sp,-16
 800387e:	e422                	sd	s0,8(sp)
 8003880:	0800                	addi	s0,sp,16
  if (uart16550[UART_REG_LSR << uart16550_reg_shift] & UART_REG_STATUS_RX)
 8003882:	00014797          	auipc	a5,0x14
 8003886:	7d678793          	addi	a5,a5,2006 # 8018058 <uart16550>
 800388a:	639c                	ld	a5,0(a5)
 800388c:	0000b717          	auipc	a4,0xb
 8003890:	7a070713          	addi	a4,a4,1952 # 800f02c <uart16550_reg_shift>
 8003894:	4318                	lw	a4,0(a4)
 8003896:	4695                	li	a3,5
 8003898:	00e6973b          	sllw	a4,a3,a4
 800389c:	2701                	sext.w	a4,a4
 800389e:	97ba                	add	a5,a5,a4
 80038a0:	0007c783          	lbu	a5,0(a5)
 80038a4:	0ff7f793          	andi	a5,a5,255
 80038a8:	2781                	sext.w	a5,a5
 80038aa:	8b85                	andi	a5,a5,1
 80038ac:	2781                	sext.w	a5,a5
 80038ae:	cf81                	beqz	a5,80038c6 <uart16550_getchar+0x4a>
    return uart16550[UART_REG_QUEUE << uart16550_reg_shift];
 80038b0:	00014797          	auipc	a5,0x14
 80038b4:	7a878793          	addi	a5,a5,1960 # 8018058 <uart16550>
 80038b8:	639c                	ld	a5,0(a5)
 80038ba:	0007c783          	lbu	a5,0(a5)
 80038be:	0ff7f793          	andi	a5,a5,255
 80038c2:	2781                	sext.w	a5,a5
 80038c4:	a011                	j	80038c8 <uart16550_getchar+0x4c>
  return -1;
 80038c6:	57fd                	li	a5,-1
}
 80038c8:	853e                	mv	a0,a5
 80038ca:	6422                	ld	s0,8(sp)
 80038cc:	0141                	addi	sp,sp,16
 80038ce:	8082                	ret

00000000080038d0 <uart16550_open>:
  uint32_t clock_freq;
  uint32_t baud;
};

static void uart16550_open(const struct fdt_scan_node *node, void *extra)
{
 80038d0:	7179                	addi	sp,sp,-48
 80038d2:	f406                	sd	ra,40(sp)
 80038d4:	f022                	sd	s0,32(sp)
 80038d6:	1800                	addi	s0,sp,48
 80038d8:	fca43c23          	sd	a0,-40(s0)
 80038dc:	fcb43823          	sd	a1,-48(s0)
  struct uart16550_scan *scan = (struct uart16550_scan *)extra;
 80038e0:	fd043783          	ld	a5,-48(s0)
 80038e4:	fef43423          	sd	a5,-24(s0)
  memset(scan, 0, sizeof(*scan));
 80038e8:	02000613          	li	a2,32
 80038ec:	4581                	li	a1,0
 80038ee:	fe843503          	ld	a0,-24(s0)
 80038f2:	360080ef          	jal	ra,800bc52 <memset>
  scan->baud = UART_DEFAULT_BAUD;
 80038f6:	fe843783          	ld	a5,-24(s0)
 80038fa:	6725                	lui	a4,0x9
 80038fc:	6007071b          	addiw	a4,a4,1536
 8003900:	cfd8                	sw	a4,28(a5)
}
 8003902:	0001                	nop
 8003904:	70a2                	ld	ra,40(sp)
 8003906:	7402                	ld	s0,32(sp)
 8003908:	6145                	addi	sp,sp,48
 800390a:	8082                	ret

000000000800390c <uart16550_prop>:

static void uart16550_prop(const struct fdt_scan_prop *prop, void *extra)
{
 800390c:	7179                	addi	sp,sp,-48
 800390e:	f406                	sd	ra,40(sp)
 8003910:	f022                	sd	s0,32(sp)
 8003912:	1800                	addi	s0,sp,48
 8003914:	fca43c23          	sd	a0,-40(s0)
 8003918:	fcb43823          	sd	a1,-48(s0)
  struct uart16550_scan *scan = (struct uart16550_scan *)extra;
 800391c:	fd043783          	ld	a5,-48(s0)
 8003920:	fef43423          	sd	a5,-24(s0)
  // For the purposes of the boot loader, the 16750 is a superset of what 16550a provides
  if (!strcmp(prop->name, "compatible") && ((fdt_string_list_index(prop, "ns16550a") != -1) || (fdt_string_list_index(prop, "ns16750") != -1))) {
 8003924:	fd843783          	ld	a5,-40(s0)
 8003928:	679c                	ld	a5,8(a5)
 800392a:	00009597          	auipc	a1,0x9
 800392e:	c5658593          	addi	a1,a1,-938 # 800c580 <atol+0x76a>
 8003932:	853e                	mv	a0,a5
 8003934:	428080ef          	jal	ra,800bd5c <strcmp>
 8003938:	87aa                	mv	a5,a0
 800393a:	e3a1                	bnez	a5,800397a <uart16550_prop+0x6e>
 800393c:	00009597          	auipc	a1,0x9
 8003940:	c5458593          	addi	a1,a1,-940 # 800c590 <atol+0x77a>
 8003944:	fd843503          	ld	a0,-40(s0)
 8003948:	9d6fd0ef          	jal	ra,8000b1e <fdt_string_list_index>
 800394c:	87aa                	mv	a5,a0
 800394e:	873e                	mv	a4,a5
 8003950:	57fd                	li	a5,-1
 8003952:	00f71f63          	bne	a4,a5,8003970 <uart16550_prop+0x64>
 8003956:	00009597          	auipc	a1,0x9
 800395a:	c4a58593          	addi	a1,a1,-950 # 800c5a0 <atol+0x78a>
 800395e:	fd843503          	ld	a0,-40(s0)
 8003962:	9bcfd0ef          	jal	ra,8000b1e <fdt_string_list_index>
 8003966:	87aa                	mv	a5,a0
 8003968:	873e                	mv	a4,a5
 800396a:	57fd                	li	a5,-1
 800396c:	00f70763          	beq	a4,a5,800397a <uart16550_prop+0x6e>
    scan->compat = 1;
 8003970:	fe843783          	ld	a5,-24(s0)
 8003974:	4705                	li	a4,1
 8003976:	c398                	sw	a4,0(a5)
    // This is the property that Linux uses
    scan->baud = fdt_get_value(prop, 0);
  } else if (!strcmp(prop->name, "clock-frequency")) {
    scan->clock_freq = fdt_get_value(prop, 0);
  }
}
 8003978:	a8e5                	j	8003a70 <uart16550_prop+0x164>
  } else if (!strcmp(prop->name, "reg")) {
 800397a:	fd843783          	ld	a5,-40(s0)
 800397e:	679c                	ld	a5,8(a5)
 8003980:	00009597          	auipc	a1,0x9
 8003984:	c2858593          	addi	a1,a1,-984 # 800c5a8 <atol+0x792>
 8003988:	853e                	mv	a0,a5
 800398a:	3d2080ef          	jal	ra,800bd5c <strcmp>
 800398e:	87aa                	mv	a5,a0
 8003990:	e38d                	bnez	a5,80039b2 <uart16550_prop+0xa6>
    fdt_get_address(prop->node->parent, prop->value, &scan->reg);
 8003992:	fd843783          	ld	a5,-40(s0)
 8003996:	639c                	ld	a5,0(a5)
 8003998:	6398                	ld	a4,0(a5)
 800399a:	fd843783          	ld	a5,-40(s0)
 800399e:	6b94                	ld	a3,16(a5)
 80039a0:	fe843783          	ld	a5,-24(s0)
 80039a4:	07a1                	addi	a5,a5,8
 80039a6:	863e                	mv	a2,a5
 80039a8:	85b6                	mv	a1,a3
 80039aa:	853a                	mv	a0,a4
 80039ac:	840fd0ef          	jal	ra,80009ec <fdt_get_address>
}
 80039b0:	a0c1                	j	8003a70 <uart16550_prop+0x164>
  } else if (!strcmp(prop->name, "reg-shift")) {
 80039b2:	fd843783          	ld	a5,-40(s0)
 80039b6:	679c                	ld	a5,8(a5)
 80039b8:	00009597          	auipc	a1,0x9
 80039bc:	bf858593          	addi	a1,a1,-1032 # 800c5b0 <atol+0x79a>
 80039c0:	853e                	mv	a0,a5
 80039c2:	39a080ef          	jal	ra,800bd5c <strcmp>
 80039c6:	87aa                	mv	a5,a0
 80039c8:	ef89                	bnez	a5,80039e2 <uart16550_prop+0xd6>
    scan->reg_shift = fdt_get_value(prop, 0);
 80039ca:	4581                	li	a1,0
 80039cc:	fd843503          	ld	a0,-40(s0)
 80039d0:	918fd0ef          	jal	ra,8000ae8 <fdt_get_value>
 80039d4:	87aa                	mv	a5,a0
 80039d6:	0007871b          	sext.w	a4,a5
 80039da:	fe843783          	ld	a5,-24(s0)
 80039de:	cbd8                	sw	a4,20(a5)
}
 80039e0:	a841                	j	8003a70 <uart16550_prop+0x164>
  } else if (!strcmp(prop->name, "reg-offset")) {
 80039e2:	fd843783          	ld	a5,-40(s0)
 80039e6:	679c                	ld	a5,8(a5)
 80039e8:	00009597          	auipc	a1,0x9
 80039ec:	bd858593          	addi	a1,a1,-1064 # 800c5c0 <atol+0x7aa>
 80039f0:	853e                	mv	a0,a5
 80039f2:	36a080ef          	jal	ra,800bd5c <strcmp>
 80039f6:	87aa                	mv	a5,a0
 80039f8:	ef89                	bnez	a5,8003a12 <uart16550_prop+0x106>
    scan->reg_offset = fdt_get_value(prop, 0);
 80039fa:	4581                	li	a1,0
 80039fc:	fd843503          	ld	a0,-40(s0)
 8003a00:	8e8fd0ef          	jal	ra,8000ae8 <fdt_get_value>
 8003a04:	87aa                	mv	a5,a0
 8003a06:	0007871b          	sext.w	a4,a5
 8003a0a:	fe843783          	ld	a5,-24(s0)
 8003a0e:	cb98                	sw	a4,16(a5)
}
 8003a10:	a085                	j	8003a70 <uart16550_prop+0x164>
  } else if (!strcmp(prop->name, "current-speed")) {
 8003a12:	fd843783          	ld	a5,-40(s0)
 8003a16:	679c                	ld	a5,8(a5)
 8003a18:	00009597          	auipc	a1,0x9
 8003a1c:	bb858593          	addi	a1,a1,-1096 # 800c5d0 <atol+0x7ba>
 8003a20:	853e                	mv	a0,a5
 8003a22:	33a080ef          	jal	ra,800bd5c <strcmp>
 8003a26:	87aa                	mv	a5,a0
 8003a28:	ef89                	bnez	a5,8003a42 <uart16550_prop+0x136>
    scan->baud = fdt_get_value(prop, 0);
 8003a2a:	4581                	li	a1,0
 8003a2c:	fd843503          	ld	a0,-40(s0)
 8003a30:	8b8fd0ef          	jal	ra,8000ae8 <fdt_get_value>
 8003a34:	87aa                	mv	a5,a0
 8003a36:	0007871b          	sext.w	a4,a5
 8003a3a:	fe843783          	ld	a5,-24(s0)
 8003a3e:	cfd8                	sw	a4,28(a5)
}
 8003a40:	a805                	j	8003a70 <uart16550_prop+0x164>
  } else if (!strcmp(prop->name, "clock-frequency")) {
 8003a42:	fd843783          	ld	a5,-40(s0)
 8003a46:	679c                	ld	a5,8(a5)
 8003a48:	00009597          	auipc	a1,0x9
 8003a4c:	b9858593          	addi	a1,a1,-1128 # 800c5e0 <atol+0x7ca>
 8003a50:	853e                	mv	a0,a5
 8003a52:	30a080ef          	jal	ra,800bd5c <strcmp>
 8003a56:	87aa                	mv	a5,a0
 8003a58:	ef81                	bnez	a5,8003a70 <uart16550_prop+0x164>
    scan->clock_freq = fdt_get_value(prop, 0);
 8003a5a:	4581                	li	a1,0
 8003a5c:	fd843503          	ld	a0,-40(s0)
 8003a60:	888fd0ef          	jal	ra,8000ae8 <fdt_get_value>
 8003a64:	87aa                	mv	a5,a0
 8003a66:	0007871b          	sext.w	a4,a5
 8003a6a:	fe843783          	ld	a5,-24(s0)
 8003a6e:	cf98                	sw	a4,24(a5)
}
 8003a70:	0001                	nop
 8003a72:	70a2                	ld	ra,40(sp)
 8003a74:	7402                	ld	s0,32(sp)
 8003a76:	6145                	addi	sp,sp,48
 8003a78:	8082                	ret

0000000008003a7a <uart16550_done>:

static void uart16550_done(const struct fdt_scan_node *node, void *extra)
{
 8003a7a:	7179                	addi	sp,sp,-48
 8003a7c:	f422                	sd	s0,40(sp)
 8003a7e:	1800                	addi	s0,sp,48
 8003a80:	fca43c23          	sd	a0,-40(s0)
 8003a84:	fcb43823          	sd	a1,-48(s0)
  uint32_t clock_freq;
  struct uart16550_scan *scan = (struct uart16550_scan *)extra;
 8003a88:	fd043783          	ld	a5,-48(s0)
 8003a8c:	fef43023          	sd	a5,-32(s0)
  if (!scan->compat || !scan->reg || uart16550) return;
 8003a90:	fe043783          	ld	a5,-32(s0)
 8003a94:	439c                	lw	a5,0(a5)
 8003a96:	18078963          	beqz	a5,8003c28 <uart16550_done+0x1ae>
 8003a9a:	fe043783          	ld	a5,-32(s0)
 8003a9e:	679c                	ld	a5,8(a5)
 8003aa0:	18078463          	beqz	a5,8003c28 <uart16550_done+0x1ae>
 8003aa4:	00014797          	auipc	a5,0x14
 8003aa8:	5b478793          	addi	a5,a5,1460 # 8018058 <uart16550>
 8003aac:	639c                	ld	a5,0(a5)
 8003aae:	16079d63          	bnez	a5,8003c28 <uart16550_done+0x1ae>

  if (scan->clock_freq != 0)
 8003ab2:	fe043783          	ld	a5,-32(s0)
 8003ab6:	4f9c                	lw	a5,24(a5)
 8003ab8:	cb89                	beqz	a5,8003aca <uart16550_done+0x50>
    uart16550_clock = scan->clock_freq;
 8003aba:	fe043783          	ld	a5,-32(s0)
 8003abe:	4f98                	lw	a4,24(a5)
 8003ac0:	0000a797          	auipc	a5,0xa
 8003ac4:	5d478793          	addi	a5,a5,1492 # 800e094 <uart16550_clock>
 8003ac8:	c398                	sw	a4,0(a5)
  // if device tree doesn't supply a clock, fallback to default clock of 1843200

  // Check for divide by zero
  uint32_t divisor = uart16550_clock / (16 * (scan->baud ? scan->baud : UART_DEFAULT_BAUD));
 8003aca:	0000a797          	auipc	a5,0xa
 8003ace:	5ca78793          	addi	a5,a5,1482 # 800e094 <uart16550_clock>
 8003ad2:	4398                	lw	a4,0(a5)
 8003ad4:	fe043783          	ld	a5,-32(s0)
 8003ad8:	4fdc                	lw	a5,28(a5)
 8003ada:	cb81                	beqz	a5,8003aea <uart16550_done+0x70>
 8003adc:	fe043783          	ld	a5,-32(s0)
 8003ae0:	4fdc                	lw	a5,28(a5)
 8003ae2:	0047979b          	slliw	a5,a5,0x4
 8003ae6:	2781                	sext.w	a5,a5
 8003ae8:	a019                	j	8003aee <uart16550_done+0x74>
 8003aea:	000967b7          	lui	a5,0x96
 8003aee:	02f757bb          	divuw	a5,a4,a5
 8003af2:	fef42623          	sw	a5,-20(s0)
  // If the divisor is out of range, don't assert, set the rate back to the default
  if (divisor >= 0x10000u)
 8003af6:	fec42783          	lw	a5,-20(s0)
 8003afa:	0007871b          	sext.w	a4,a5
 8003afe:	67c1                	lui	a5,0x10
 8003b00:	00f76e63          	bltu	a4,a5,8003b1c <uart16550_done+0xa2>
    divisor = uart16550_clock / (16 * UART_DEFAULT_BAUD);
 8003b04:	0000a797          	auipc	a5,0xa
 8003b08:	59078793          	addi	a5,a5,1424 # 800e094 <uart16550_clock>
 8003b0c:	439c                	lw	a5,0(a5)
 8003b0e:	873e                	mv	a4,a5
 8003b10:	000967b7          	lui	a5,0x96
 8003b14:	02f757bb          	divuw	a5,a4,a5
 8003b18:	fef42623          	sw	a5,-20(s0)

  uart16550 = (void*)((uintptr_t)scan->reg + scan->reg_offset);
 8003b1c:	fe043783          	ld	a5,-32(s0)
 8003b20:	6798                	ld	a4,8(a5)
 8003b22:	fe043783          	ld	a5,-32(s0)
 8003b26:	4b9c                	lw	a5,16(a5)
 8003b28:	1782                	slli	a5,a5,0x20
 8003b2a:	9381                	srli	a5,a5,0x20
 8003b2c:	97ba                	add	a5,a5,a4
 8003b2e:	873e                	mv	a4,a5
 8003b30:	00014797          	auipc	a5,0x14
 8003b34:	52878793          	addi	a5,a5,1320 # 8018058 <uart16550>
 8003b38:	e398                	sd	a4,0(a5)
  uart16550_reg_shift = scan->reg_shift;
 8003b3a:	fe043783          	ld	a5,-32(s0)
 8003b3e:	4bd8                	lw	a4,20(a5)
 8003b40:	0000b797          	auipc	a5,0xb
 8003b44:	4ec78793          	addi	a5,a5,1260 # 800f02c <uart16550_reg_shift>
 8003b48:	c398                	sw	a4,0(a5)
  // http://wiki.osdev.org/Serial_Ports
  uart16550[UART_REG_IER << uart16550_reg_shift] = 0x00;                // Disable all interrupts
 8003b4a:	00014797          	auipc	a5,0x14
 8003b4e:	50e78793          	addi	a5,a5,1294 # 8018058 <uart16550>
 8003b52:	639c                	ld	a5,0(a5)
 8003b54:	0000b717          	auipc	a4,0xb
 8003b58:	4d870713          	addi	a4,a4,1240 # 800f02c <uart16550_reg_shift>
 8003b5c:	4318                	lw	a4,0(a4)
 8003b5e:	4685                	li	a3,1
 8003b60:	00e6973b          	sllw	a4,a3,a4
 8003b64:	2701                	sext.w	a4,a4
 8003b66:	97ba                	add	a5,a5,a4
 8003b68:	00078023          	sb	zero,0(a5)
  uart16550[UART_REG_LCR << uart16550_reg_shift] = 0x80;                // Enable DLAB (set baud rate divisor)
 8003b6c:	00014797          	auipc	a5,0x14
 8003b70:	4ec78793          	addi	a5,a5,1260 # 8018058 <uart16550>
 8003b74:	639c                	ld	a5,0(a5)
 8003b76:	0000b717          	auipc	a4,0xb
 8003b7a:	4b670713          	addi	a4,a4,1206 # 800f02c <uart16550_reg_shift>
 8003b7e:	4318                	lw	a4,0(a4)
 8003b80:	468d                	li	a3,3
 8003b82:	00e6973b          	sllw	a4,a3,a4
 8003b86:	2701                	sext.w	a4,a4
 8003b88:	97ba                	add	a5,a5,a4
 8003b8a:	f8000713          	li	a4,-128
 8003b8e:	00e78023          	sb	a4,0(a5)
  uart16550[UART_REG_DLL << uart16550_reg_shift] = (uint8_t)divisor;    // Set divisor (lo byte)
 8003b92:	00014797          	auipc	a5,0x14
 8003b96:	4c678793          	addi	a5,a5,1222 # 8018058 <uart16550>
 8003b9a:	639c                	ld	a5,0(a5)
 8003b9c:	fec42703          	lw	a4,-20(s0)
 8003ba0:	0ff77713          	andi	a4,a4,255
 8003ba4:	00e78023          	sb	a4,0(a5)
  uart16550[UART_REG_DLM << uart16550_reg_shift] = (uint8_t)(divisor >> 8);     //     (hi byte)
 8003ba8:	fec42783          	lw	a5,-20(s0)
 8003bac:	0087d79b          	srliw	a5,a5,0x8
 8003bb0:	0007861b          	sext.w	a2,a5
 8003bb4:	00014797          	auipc	a5,0x14
 8003bb8:	4a478793          	addi	a5,a5,1188 # 8018058 <uart16550>
 8003bbc:	639c                	ld	a5,0(a5)
 8003bbe:	0000b717          	auipc	a4,0xb
 8003bc2:	46e70713          	addi	a4,a4,1134 # 800f02c <uart16550_reg_shift>
 8003bc6:	4318                	lw	a4,0(a4)
 8003bc8:	4685                	li	a3,1
 8003bca:	00e6973b          	sllw	a4,a3,a4
 8003bce:	2701                	sext.w	a4,a4
 8003bd0:	97ba                	add	a5,a5,a4
 8003bd2:	8732                	mv	a4,a2
 8003bd4:	0ff77713          	andi	a4,a4,255
 8003bd8:	00e78023          	sb	a4,0(a5)
  uart16550[UART_REG_LCR << uart16550_reg_shift] = 0x03;                // 8 bits, no parity, one stop bit
 8003bdc:	00014797          	auipc	a5,0x14
 8003be0:	47c78793          	addi	a5,a5,1148 # 8018058 <uart16550>
 8003be4:	639c                	ld	a5,0(a5)
 8003be6:	0000b717          	auipc	a4,0xb
 8003bea:	44670713          	addi	a4,a4,1094 # 800f02c <uart16550_reg_shift>
 8003bee:	4318                	lw	a4,0(a4)
 8003bf0:	468d                	li	a3,3
 8003bf2:	00e6973b          	sllw	a4,a3,a4
 8003bf6:	2701                	sext.w	a4,a4
 8003bf8:	97ba                	add	a5,a5,a4
 8003bfa:	470d                	li	a4,3
 8003bfc:	00e78023          	sb	a4,0(a5)
  uart16550[UART_REG_FCR << uart16550_reg_shift] = 0xC7;                // Enable FIFO, clear them, with 14-byte threshold
 8003c00:	00014797          	auipc	a5,0x14
 8003c04:	45878793          	addi	a5,a5,1112 # 8018058 <uart16550>
 8003c08:	639c                	ld	a5,0(a5)
 8003c0a:	0000b717          	auipc	a4,0xb
 8003c0e:	42270713          	addi	a4,a4,1058 # 800f02c <uart16550_reg_shift>
 8003c12:	4318                	lw	a4,0(a4)
 8003c14:	4689                	li	a3,2
 8003c16:	00e6973b          	sllw	a4,a3,a4
 8003c1a:	2701                	sext.w	a4,a4
 8003c1c:	97ba                	add	a5,a5,a4
 8003c1e:	fc700713          	li	a4,-57
 8003c22:	00e78023          	sb	a4,0(a5)
 8003c26:	a011                	j	8003c2a <uart16550_done+0x1b0>
  if (!scan->compat || !scan->reg || uart16550) return;
 8003c28:	0001                	nop
}
 8003c2a:	7422                	ld	s0,40(sp)
 8003c2c:	6145                	addi	sp,sp,48
 8003c2e:	8082                	ret

0000000008003c30 <query_uart16550>:

void query_uart16550(uintptr_t fdt)
{
 8003c30:	7159                	addi	sp,sp,-112
 8003c32:	f486                	sd	ra,104(sp)
 8003c34:	f0a2                	sd	s0,96(sp)
 8003c36:	1880                	addi	s0,sp,112
 8003c38:	f8a43c23          	sd	a0,-104(s0)
  struct fdt_cb cb;
  struct uart16550_scan scan;

  memset(&cb, 0, sizeof(cb));
 8003c3c:	fc840793          	addi	a5,s0,-56
 8003c40:	02800613          	li	a2,40
 8003c44:	4581                	li	a1,0
 8003c46:	853e                	mv	a0,a5
 8003c48:	00a080ef          	jal	ra,800bc52 <memset>
  cb.open = uart16550_open;
 8003c4c:	00000797          	auipc	a5,0x0
 8003c50:	c8478793          	addi	a5,a5,-892 # 80038d0 <uart16550_open>
 8003c54:	fcf43423          	sd	a5,-56(s0)
  cb.prop = uart16550_prop;
 8003c58:	00000797          	auipc	a5,0x0
 8003c5c:	cb478793          	addi	a5,a5,-844 # 800390c <uart16550_prop>
 8003c60:	fcf43823          	sd	a5,-48(s0)
  cb.done = uart16550_done;
 8003c64:	00000797          	auipc	a5,0x0
 8003c68:	e1678793          	addi	a5,a5,-490 # 8003a7a <uart16550_done>
 8003c6c:	fcf43c23          	sd	a5,-40(s0)
  cb.extra = &scan;
 8003c70:	fa840793          	addi	a5,s0,-88
 8003c74:	fef43423          	sd	a5,-24(s0)

  fdt_scan(fdt, &cb);
 8003c78:	fc840793          	addi	a5,s0,-56
 8003c7c:	85be                	mv	a1,a5
 8003c7e:	f9843503          	ld	a0,-104(s0)
 8003c82:	c57fc0ef          	jal	ra,80008d8 <fdt_scan>
}
 8003c86:	0001                	nop
 8003c88:	70a6                	ld	ra,104(sp)
 8003c8a:	7406                	ld	s0,96(sp)
 8003c8c:	6165                	addi	sp,sp,112
 8003c8e:	8082                	ret

0000000008003c90 <uart_litex_putchar>:
#define UART_REG_EV_STATUS  3
#define UART_REG_EV_PENDING 4
#define UART_REG_EV_ENABLE  5

void uart_litex_putchar(uint8_t c)
{
 8003c90:	1101                	addi	sp,sp,-32
 8003c92:	ec22                	sd	s0,24(sp)
 8003c94:	1000                	addi	s0,sp,32
 8003c96:	87aa                	mv	a5,a0
 8003c98:	fef407a3          	sb	a5,-17(s0)
    while ((uart_litex[UART_REG_TXFULL] & 0x01)); // wait while tx-buffer full
 8003c9c:	0001                	nop
 8003c9e:	00014797          	auipc	a5,0x14
 8003ca2:	3c278793          	addi	a5,a5,962 # 8018060 <uart_litex>
 8003ca6:	639c                	ld	a5,0(a5)
 8003ca8:	0791                	addi	a5,a5,4
 8003caa:	439c                	lw	a5,0(a5)
 8003cac:	2781                	sext.w	a5,a5
 8003cae:	8b85                	andi	a5,a5,1
 8003cb0:	2781                	sext.w	a5,a5
 8003cb2:	f7f5                	bnez	a5,8003c9e <uart_litex_putchar+0xe>
    uart_litex[UART_REG_RXTX] = c;
 8003cb4:	00014797          	auipc	a5,0x14
 8003cb8:	3ac78793          	addi	a5,a5,940 # 8018060 <uart_litex>
 8003cbc:	639c                	ld	a5,0(a5)
 8003cbe:	fef44703          	lbu	a4,-17(s0)
 8003cc2:	2701                	sext.w	a4,a4
 8003cc4:	c398                	sw	a4,0(a5)
}
 8003cc6:	0001                	nop
 8003cc8:	6462                	ld	s0,24(sp)
 8003cca:	6105                	addi	sp,sp,32
 8003ccc:	8082                	ret

0000000008003cce <uart_litex_getchar>:

int uart_litex_getchar()
{
 8003cce:	1101                	addi	sp,sp,-32
 8003cd0:	ec22                	sd	s0,24(sp)
 8003cd2:	1000                	addi	s0,sp,32
    int c = -1;
 8003cd4:	57fd                	li	a5,-1
 8003cd6:	fef42623          	sw	a5,-20(s0)
    if (!(uart_litex[UART_REG_RXEMPTY] & 0x01)) { // if rx-buffer not empty
 8003cda:	00014797          	auipc	a5,0x14
 8003cde:	38678793          	addi	a5,a5,902 # 8018060 <uart_litex>
 8003ce2:	639c                	ld	a5,0(a5)
 8003ce4:	07a1                	addi	a5,a5,8
 8003ce6:	439c                	lw	a5,0(a5)
 8003ce8:	2781                	sext.w	a5,a5
 8003cea:	8b85                	andi	a5,a5,1
 8003cec:	2781                	sext.w	a5,a5
 8003cee:	e395                	bnez	a5,8003d12 <uart_litex_getchar+0x44>
        c = uart_litex[UART_REG_RXTX];
 8003cf0:	00014797          	auipc	a5,0x14
 8003cf4:	37078793          	addi	a5,a5,880 # 8018060 <uart_litex>
 8003cf8:	639c                	ld	a5,0(a5)
 8003cfa:	439c                	lw	a5,0(a5)
 8003cfc:	2781                	sext.w	a5,a5
 8003cfe:	fef42623          	sw	a5,-20(s0)
        uart_litex[UART_REG_EV_PENDING] = 0x02; // ack (UART_EV_RX)
 8003d02:	00014797          	auipc	a5,0x14
 8003d06:	35e78793          	addi	a5,a5,862 # 8018060 <uart_litex>
 8003d0a:	639c                	ld	a5,0(a5)
 8003d0c:	07c1                	addi	a5,a5,16
 8003d0e:	4709                	li	a4,2
 8003d10:	c398                	sw	a4,0(a5)
    }
    return c;
 8003d12:	fec42783          	lw	a5,-20(s0)
}
 8003d16:	853e                	mv	a0,a5
 8003d18:	6462                	ld	s0,24(sp)
 8003d1a:	6105                	addi	sp,sp,32
 8003d1c:	8082                	ret

0000000008003d1e <uart_litex_open>:
    int compat;
    uint64_t reg;
};

static void uart_litex_open(const struct fdt_scan_node *node, void *extra)
{
 8003d1e:	7179                	addi	sp,sp,-48
 8003d20:	f406                	sd	ra,40(sp)
 8003d22:	f022                	sd	s0,32(sp)
 8003d24:	1800                	addi	s0,sp,48
 8003d26:	fca43c23          	sd	a0,-40(s0)
 8003d2a:	fcb43823          	sd	a1,-48(s0)
    struct uart_litex_scan *scan = (struct uart_litex_scan *)extra;
 8003d2e:	fd043783          	ld	a5,-48(s0)
 8003d32:	fef43423          	sd	a5,-24(s0)
    memset(scan, 0, sizeof(*scan));
 8003d36:	4641                	li	a2,16
 8003d38:	4581                	li	a1,0
 8003d3a:	fe843503          	ld	a0,-24(s0)
 8003d3e:	715070ef          	jal	ra,800bc52 <memset>
}
 8003d42:	0001                	nop
 8003d44:	70a2                	ld	ra,40(sp)
 8003d46:	7402                	ld	s0,32(sp)
 8003d48:	6145                	addi	sp,sp,48
 8003d4a:	8082                	ret

0000000008003d4c <uart_litex_prop>:

static void uart_litex_prop(const struct fdt_scan_prop *prop, void *extra)
{
 8003d4c:	7179                	addi	sp,sp,-48
 8003d4e:	f406                	sd	ra,40(sp)
 8003d50:	f022                	sd	s0,32(sp)
 8003d52:	1800                	addi	s0,sp,48
 8003d54:	fca43c23          	sd	a0,-40(s0)
 8003d58:	fcb43823          	sd	a1,-48(s0)
    struct uart_litex_scan *scan = (struct uart_litex_scan *)extra;
 8003d5c:	fd043783          	ld	a5,-48(s0)
 8003d60:	fef43423          	sd	a5,-24(s0)
    if (!strcmp(prop->name, "compatible") &&
 8003d64:	fd843783          	ld	a5,-40(s0)
 8003d68:	679c                	ld	a5,8(a5)
 8003d6a:	00009597          	auipc	a1,0x9
 8003d6e:	88658593          	addi	a1,a1,-1914 # 800c5f0 <atol+0x7da>
 8003d72:	853e                	mv	a0,a5
 8003d74:	7e9070ef          	jal	ra,800bd5c <strcmp>
 8003d78:	87aa                	mv	a5,a0
 8003d7a:	ef95                	bnez	a5,8003db6 <uart_litex_prop+0x6a>
        (!strcmp((const char *)prop->value, "litex,uart0") ||
 8003d7c:	fd843783          	ld	a5,-40(s0)
 8003d80:	6b9c                	ld	a5,16(a5)
 8003d82:	00009597          	auipc	a1,0x9
 8003d86:	87e58593          	addi	a1,a1,-1922 # 800c600 <atol+0x7ea>
 8003d8a:	853e                	mv	a0,a5
 8003d8c:	7d1070ef          	jal	ra,800bd5c <strcmp>
 8003d90:	87aa                	mv	a5,a0
    if (!strcmp(prop->name, "compatible") &&
 8003d92:	cf89                	beqz	a5,8003dac <uart_litex_prop+0x60>
         !strcmp((const char *)prop->value, "litex,liteuart"))) {
 8003d94:	fd843783          	ld	a5,-40(s0)
 8003d98:	6b9c                	ld	a5,16(a5)
 8003d9a:	00009597          	auipc	a1,0x9
 8003d9e:	87658593          	addi	a1,a1,-1930 # 800c610 <atol+0x7fa>
 8003da2:	853e                	mv	a0,a5
 8003da4:	7b9070ef          	jal	ra,800bd5c <strcmp>
 8003da8:	87aa                	mv	a5,a0
        (!strcmp((const char *)prop->value, "litex,uart0") ||
 8003daa:	e791                	bnez	a5,8003db6 <uart_litex_prop+0x6a>
        scan->compat = 1;
 8003dac:	fe843783          	ld	a5,-24(s0)
 8003db0:	4705                	li	a4,1
 8003db2:	c398                	sw	a4,0(a5)
    } else if (!strcmp(prop->name, "reg")) {
        fdt_get_address(prop->node->parent, prop->value, &scan->reg);
    }
}
 8003db4:	a825                	j	8003dec <uart_litex_prop+0xa0>
    } else if (!strcmp(prop->name, "reg")) {
 8003db6:	fd843783          	ld	a5,-40(s0)
 8003dba:	679c                	ld	a5,8(a5)
 8003dbc:	00009597          	auipc	a1,0x9
 8003dc0:	86458593          	addi	a1,a1,-1948 # 800c620 <atol+0x80a>
 8003dc4:	853e                	mv	a0,a5
 8003dc6:	797070ef          	jal	ra,800bd5c <strcmp>
 8003dca:	87aa                	mv	a5,a0
 8003dcc:	e385                	bnez	a5,8003dec <uart_litex_prop+0xa0>
        fdt_get_address(prop->node->parent, prop->value, &scan->reg);
 8003dce:	fd843783          	ld	a5,-40(s0)
 8003dd2:	639c                	ld	a5,0(a5)
 8003dd4:	6398                	ld	a4,0(a5)
 8003dd6:	fd843783          	ld	a5,-40(s0)
 8003dda:	6b94                	ld	a3,16(a5)
 8003ddc:	fe843783          	ld	a5,-24(s0)
 8003de0:	07a1                	addi	a5,a5,8
 8003de2:	863e                	mv	a2,a5
 8003de4:	85b6                	mv	a1,a3
 8003de6:	853a                	mv	a0,a4
 8003de8:	c05fc0ef          	jal	ra,80009ec <fdt_get_address>
}
 8003dec:	0001                	nop
 8003dee:	70a2                	ld	ra,40(sp)
 8003df0:	7402                	ld	s0,32(sp)
 8003df2:	6145                	addi	sp,sp,48
 8003df4:	8082                	ret

0000000008003df6 <uart_litex_done>:

static void uart_litex_done(const struct fdt_scan_node *node, void *extra)
{
 8003df6:	7179                	addi	sp,sp,-48
 8003df8:	f422                	sd	s0,40(sp)
 8003dfa:	1800                	addi	s0,sp,48
 8003dfc:	fca43c23          	sd	a0,-40(s0)
 8003e00:	fcb43823          	sd	a1,-48(s0)
    struct uart_litex_scan *scan = (struct uart_litex_scan *)extra;
 8003e04:	fd043783          	ld	a5,-48(s0)
 8003e08:	fef43423          	sd	a5,-24(s0)
    if (!scan->compat || !scan->reg || uart_litex)
 8003e0c:	fe843783          	ld	a5,-24(s0)
 8003e10:	439c                	lw	a5,0(a5)
 8003e12:	c78d                	beqz	a5,8003e3c <uart_litex_done+0x46>
 8003e14:	fe843783          	ld	a5,-24(s0)
 8003e18:	679c                	ld	a5,8(a5)
 8003e1a:	c38d                	beqz	a5,8003e3c <uart_litex_done+0x46>
 8003e1c:	00014797          	auipc	a5,0x14
 8003e20:	24478793          	addi	a5,a5,580 # 8018060 <uart_litex>
 8003e24:	639c                	ld	a5,0(a5)
 8003e26:	eb99                	bnez	a5,8003e3c <uart_litex_done+0x46>
        return;

    // Initialize LiteX UART
    uart_litex = (void *)(uintptr_t)scan->reg;
 8003e28:	fe843783          	ld	a5,-24(s0)
 8003e2c:	679c                	ld	a5,8(a5)
 8003e2e:	873e                	mv	a4,a5
 8003e30:	00014797          	auipc	a5,0x14
 8003e34:	23078793          	addi	a5,a5,560 # 8018060 <uart_litex>
 8003e38:	e398                	sd	a4,0(a5)
 8003e3a:	a011                	j	8003e3e <uart_litex_done+0x48>
        return;
 8003e3c:	0001                	nop
}
 8003e3e:	7422                	ld	s0,40(sp)
 8003e40:	6145                	addi	sp,sp,48
 8003e42:	8082                	ret

0000000008003e44 <query_uart_litex>:

void query_uart_litex(uintptr_t fdt)
{
 8003e44:	711d                	addi	sp,sp,-96
 8003e46:	ec86                	sd	ra,88(sp)
 8003e48:	e8a2                	sd	s0,80(sp)
 8003e4a:	1080                	addi	s0,sp,96
 8003e4c:	faa43423          	sd	a0,-88(s0)
    struct fdt_cb cb;
    struct uart_litex_scan scan;

    memset(&cb, 0, sizeof(cb));
 8003e50:	fc840793          	addi	a5,s0,-56
 8003e54:	02800613          	li	a2,40
 8003e58:	4581                	li	a1,0
 8003e5a:	853e                	mv	a0,a5
 8003e5c:	5f7070ef          	jal	ra,800bc52 <memset>
    cb.open = uart_litex_open;
 8003e60:	00000797          	auipc	a5,0x0
 8003e64:	ebe78793          	addi	a5,a5,-322 # 8003d1e <uart_litex_open>
 8003e68:	fcf43423          	sd	a5,-56(s0)
    cb.prop = uart_litex_prop;
 8003e6c:	00000797          	auipc	a5,0x0
 8003e70:	ee078793          	addi	a5,a5,-288 # 8003d4c <uart_litex_prop>
 8003e74:	fcf43823          	sd	a5,-48(s0)
    cb.done = uart_litex_done;
 8003e78:	00000797          	auipc	a5,0x0
 8003e7c:	f7e78793          	addi	a5,a5,-130 # 8003df6 <uart_litex_done>
 8003e80:	fcf43c23          	sd	a5,-40(s0)
    cb.extra = &scan;
 8003e84:	fb840793          	addi	a5,s0,-72
 8003e88:	fef43423          	sd	a5,-24(s0)

    fdt_scan(fdt, &cb);
 8003e8c:	fc840793          	addi	a5,s0,-56
 8003e90:	85be                	mv	a1,a5
 8003e92:	fa843503          	ld	a0,-88(s0)
 8003e96:	a43fc0ef          	jal	ra,80008d8 <fdt_scan>
}
 8003e9a:	0001                	nop
 8003e9c:	60e6                	ld	ra,88(sp)
 8003e9e:	6446                	ld	s0,80(sp)
 8003ea0:	6125                	addi	sp,sp,96
 8003ea2:	8082                	ret

0000000008003ea4 <finisher_exit>:
#include "fdt.h"

volatile uint32_t* finisher;

void finisher_exit(uint16_t code)
{
 8003ea4:	1101                	addi	sp,sp,-32
 8003ea6:	ec22                	sd	s0,24(sp)
 8003ea8:	1000                	addi	s0,sp,32
 8003eaa:	87aa                	mv	a5,a0
 8003eac:	fef41723          	sh	a5,-18(s0)
  if (!finisher) return;
 8003eb0:	00014797          	auipc	a5,0x14
 8003eb4:	1b878793          	addi	a5,a5,440 # 8018068 <finisher>
 8003eb8:	639c                	ld	a5,0(a5)
 8003eba:	c7a1                	beqz	a5,8003f02 <finisher_exit+0x5e>
  if (code == 0) {
 8003ebc:	fee45783          	lhu	a5,-18(s0)
 8003ec0:	2781                	sext.w	a5,a5
 8003ec2:	eb99                	bnez	a5,8003ed8 <finisher_exit+0x34>
    *finisher = FINISHER_PASS;
 8003ec4:	00014797          	auipc	a5,0x14
 8003ec8:	1a478793          	addi	a5,a5,420 # 8018068 <finisher>
 8003ecc:	639c                	ld	a5,0(a5)
 8003ece:	6715                	lui	a4,0x5
 8003ed0:	5557071b          	addiw	a4,a4,1365
 8003ed4:	c398                	sw	a4,0(a5)
 8003ed6:	a03d                	j	8003f04 <finisher_exit+0x60>
  } else {
    *finisher = code << 16 | FINISHER_FAIL;
 8003ed8:	fee45783          	lhu	a5,-18(s0)
 8003edc:	2781                	sext.w	a5,a5
 8003ede:	0107979b          	slliw	a5,a5,0x10
 8003ee2:	0007871b          	sext.w	a4,a5
 8003ee6:	678d                	lui	a5,0x3
 8003ee8:	33378793          	addi	a5,a5,819 # 3333 <MEM_START-0x7ffcccd>
 8003eec:	8fd9                	or	a5,a5,a4
 8003eee:	0007871b          	sext.w	a4,a5
 8003ef2:	00014797          	auipc	a5,0x14
 8003ef6:	17678793          	addi	a5,a5,374 # 8018068 <finisher>
 8003efa:	639c                	ld	a5,0(a5)
 8003efc:	2701                	sext.w	a4,a4
 8003efe:	c398                	sw	a4,0(a5)
 8003f00:	a011                	j	8003f04 <finisher_exit+0x60>
  if (!finisher) return;
 8003f02:	0001                	nop
  }
}
 8003f04:	6462                	ld	s0,24(sp)
 8003f06:	6105                	addi	sp,sp,32
 8003f08:	8082                	ret

0000000008003f0a <finisher_open>:
  int compat;
  uint64_t reg;
};

static void finisher_open(const struct fdt_scan_node *node, void *extra)
{
 8003f0a:	7179                	addi	sp,sp,-48
 8003f0c:	f406                	sd	ra,40(sp)
 8003f0e:	f022                	sd	s0,32(sp)
 8003f10:	1800                	addi	s0,sp,48
 8003f12:	fca43c23          	sd	a0,-40(s0)
 8003f16:	fcb43823          	sd	a1,-48(s0)
  struct finisher_scan *scan = (struct finisher_scan *)extra;
 8003f1a:	fd043783          	ld	a5,-48(s0)
 8003f1e:	fef43423          	sd	a5,-24(s0)
  memset(scan, 0, sizeof(*scan));
 8003f22:	4641                	li	a2,16
 8003f24:	4581                	li	a1,0
 8003f26:	fe843503          	ld	a0,-24(s0)
 8003f2a:	529070ef          	jal	ra,800bc52 <memset>
}
 8003f2e:	0001                	nop
 8003f30:	70a2                	ld	ra,40(sp)
 8003f32:	7402                	ld	s0,32(sp)
 8003f34:	6145                	addi	sp,sp,48
 8003f36:	8082                	ret

0000000008003f38 <finisher_prop>:

static void finisher_prop(const struct fdt_scan_prop *prop, void *extra)
{
 8003f38:	7179                	addi	sp,sp,-48
 8003f3a:	f406                	sd	ra,40(sp)
 8003f3c:	f022                	sd	s0,32(sp)
 8003f3e:	1800                	addi	s0,sp,48
 8003f40:	fca43c23          	sd	a0,-40(s0)
 8003f44:	fcb43823          	sd	a1,-48(s0)
  struct finisher_scan *scan = (struct finisher_scan *)extra;
 8003f48:	fd043783          	ld	a5,-48(s0)
 8003f4c:	fef43423          	sd	a5,-24(s0)
  if (!strcmp(prop->name, "compatible") && fdt_string_list_index(prop, "sifive,test0") >= 0) {
 8003f50:	fd843783          	ld	a5,-40(s0)
 8003f54:	679c                	ld	a5,8(a5)
 8003f56:	00008597          	auipc	a1,0x8
 8003f5a:	6d258593          	addi	a1,a1,1746 # 800c628 <atol+0x812>
 8003f5e:	853e                	mv	a0,a5
 8003f60:	5fd070ef          	jal	ra,800bd5c <strcmp>
 8003f64:	87aa                	mv	a5,a0
 8003f66:	e38d                	bnez	a5,8003f88 <finisher_prop+0x50>
 8003f68:	00008597          	auipc	a1,0x8
 8003f6c:	6d058593          	addi	a1,a1,1744 # 800c638 <atol+0x822>
 8003f70:	fd843503          	ld	a0,-40(s0)
 8003f74:	babfc0ef          	jal	ra,8000b1e <fdt_string_list_index>
 8003f78:	87aa                	mv	a5,a0
 8003f7a:	0007c763          	bltz	a5,8003f88 <finisher_prop+0x50>
    scan->compat = 1;
 8003f7e:	fe843783          	ld	a5,-24(s0)
 8003f82:	4705                	li	a4,1
 8003f84:	c398                	sw	a4,0(a5)
  } else if (!strcmp(prop->name, "reg")) {
    fdt_get_address(prop->node->parent, prop->value, &scan->reg);
  }
}
 8003f86:	a825                	j	8003fbe <finisher_prop+0x86>
  } else if (!strcmp(prop->name, "reg")) {
 8003f88:	fd843783          	ld	a5,-40(s0)
 8003f8c:	679c                	ld	a5,8(a5)
 8003f8e:	00008597          	auipc	a1,0x8
 8003f92:	6ba58593          	addi	a1,a1,1722 # 800c648 <atol+0x832>
 8003f96:	853e                	mv	a0,a5
 8003f98:	5c5070ef          	jal	ra,800bd5c <strcmp>
 8003f9c:	87aa                	mv	a5,a0
 8003f9e:	e385                	bnez	a5,8003fbe <finisher_prop+0x86>
    fdt_get_address(prop->node->parent, prop->value, &scan->reg);
 8003fa0:	fd843783          	ld	a5,-40(s0)
 8003fa4:	639c                	ld	a5,0(a5)
 8003fa6:	6398                	ld	a4,0(a5)
 8003fa8:	fd843783          	ld	a5,-40(s0)
 8003fac:	6b94                	ld	a3,16(a5)
 8003fae:	fe843783          	ld	a5,-24(s0)
 8003fb2:	07a1                	addi	a5,a5,8
 8003fb4:	863e                	mv	a2,a5
 8003fb6:	85b6                	mv	a1,a3
 8003fb8:	853a                	mv	a0,a4
 8003fba:	a33fc0ef          	jal	ra,80009ec <fdt_get_address>
}
 8003fbe:	0001                	nop
 8003fc0:	70a2                	ld	ra,40(sp)
 8003fc2:	7402                	ld	s0,32(sp)
 8003fc4:	6145                	addi	sp,sp,48
 8003fc6:	8082                	ret

0000000008003fc8 <finisher_done>:

static void finisher_done(const struct fdt_scan_node *node, void *extra)
{
 8003fc8:	7179                	addi	sp,sp,-48
 8003fca:	f422                	sd	s0,40(sp)
 8003fcc:	1800                	addi	s0,sp,48
 8003fce:	fca43c23          	sd	a0,-40(s0)
 8003fd2:	fcb43823          	sd	a1,-48(s0)
  struct finisher_scan *scan = (struct finisher_scan *)extra;
 8003fd6:	fd043783          	ld	a5,-48(s0)
 8003fda:	fef43423          	sd	a5,-24(s0)
  if (!scan->compat || !scan->reg || finisher) return;
 8003fde:	fe843783          	ld	a5,-24(s0)
 8003fe2:	439c                	lw	a5,0(a5)
 8003fe4:	c78d                	beqz	a5,800400e <finisher_done+0x46>
 8003fe6:	fe843783          	ld	a5,-24(s0)
 8003fea:	679c                	ld	a5,8(a5)
 8003fec:	c38d                	beqz	a5,800400e <finisher_done+0x46>
 8003fee:	00014797          	auipc	a5,0x14
 8003ff2:	07a78793          	addi	a5,a5,122 # 8018068 <finisher>
 8003ff6:	639c                	ld	a5,0(a5)
 8003ff8:	eb99                	bnez	a5,800400e <finisher_done+0x46>
  finisher = (uint32_t*)(uintptr_t)scan->reg;
 8003ffa:	fe843783          	ld	a5,-24(s0)
 8003ffe:	679c                	ld	a5,8(a5)
 8004000:	873e                	mv	a4,a5
 8004002:	00014797          	auipc	a5,0x14
 8004006:	06678793          	addi	a5,a5,102 # 8018068 <finisher>
 800400a:	e398                	sd	a4,0(a5)
 800400c:	a011                	j	8004010 <finisher_done+0x48>
  if (!scan->compat || !scan->reg || finisher) return;
 800400e:	0001                	nop
}
 8004010:	7422                	ld	s0,40(sp)
 8004012:	6145                	addi	sp,sp,48
 8004014:	8082                	ret

0000000008004016 <query_finisher>:

void query_finisher(uintptr_t fdt)
{
 8004016:	711d                	addi	sp,sp,-96
 8004018:	ec86                	sd	ra,88(sp)
 800401a:	e8a2                	sd	s0,80(sp)
 800401c:	1080                	addi	s0,sp,96
 800401e:	faa43423          	sd	a0,-88(s0)
  struct fdt_cb cb;
  struct finisher_scan scan;

  memset(&cb, 0, sizeof(cb));
 8004022:	fc840793          	addi	a5,s0,-56
 8004026:	02800613          	li	a2,40
 800402a:	4581                	li	a1,0
 800402c:	853e                	mv	a0,a5
 800402e:	425070ef          	jal	ra,800bc52 <memset>
  cb.open = finisher_open;
 8004032:	00000797          	auipc	a5,0x0
 8004036:	ed878793          	addi	a5,a5,-296 # 8003f0a <finisher_open>
 800403a:	fcf43423          	sd	a5,-56(s0)
  cb.prop = finisher_prop;
 800403e:	00000797          	auipc	a5,0x0
 8004042:	efa78793          	addi	a5,a5,-262 # 8003f38 <finisher_prop>
 8004046:	fcf43823          	sd	a5,-48(s0)
  cb.done = finisher_done;
 800404a:	00000797          	auipc	a5,0x0
 800404e:	f7e78793          	addi	a5,a5,-130 # 8003fc8 <finisher_done>
 8004052:	fcf43c23          	sd	a5,-40(s0)
  cb.extra = &scan;
 8004056:	fb840793          	addi	a5,s0,-72
 800405a:	fef43423          	sd	a5,-24(s0)

  fdt_scan(fdt, &cb);
 800405e:	fc840793          	addi	a5,s0,-56
 8004062:	85be                	mv	a1,a5
 8004064:	fa843503          	ld	a0,-88(s0)
 8004068:	871fc0ef          	jal	ra,80008d8 <fdt_scan>
}
 800406c:	0001                	nop
 800406e:	60e6                	ld	ra,88(sp)
 8004070:	6446                	ld	s0,80(sp)
 8004072:	6125                	addi	sp,sp,96
 8004074:	8082                	ret

0000000008004076 <get_f32_reg>:

  .text
  .option norvc
  .globl get_f32_reg
  get_f32_reg:
    get_f32(f0)
 8004076:	e0000553          	fmv.x.w	a0,ft0
 800407a:	00028067          	jr	t0
    get_f32(f1)
 800407e:	e0008553          	fmv.x.w	a0,ft1
 8004082:	00028067          	jr	t0
    get_f32(f2)
 8004086:	e0010553          	fmv.x.w	a0,ft2
 800408a:	00028067          	jr	t0
    get_f32(f3)
 800408e:	e0018553          	fmv.x.w	a0,ft3
 8004092:	00028067          	jr	t0
    get_f32(f4)
 8004096:	e0020553          	fmv.x.w	a0,ft4
 800409a:	00028067          	jr	t0
    get_f32(f5)
 800409e:	e0028553          	fmv.x.w	a0,ft5
 80040a2:	00028067          	jr	t0
    get_f32(f6)
 80040a6:	e0030553          	fmv.x.w	a0,ft6
 80040aa:	00028067          	jr	t0
    get_f32(f7)
 80040ae:	e0038553          	fmv.x.w	a0,ft7
 80040b2:	00028067          	jr	t0
    get_f32(f8)
 80040b6:	e0040553          	fmv.x.w	a0,fs0
 80040ba:	00028067          	jr	t0
    get_f32(f9)
 80040be:	e0048553          	fmv.x.w	a0,fs1
 80040c2:	00028067          	jr	t0
    get_f32(f10)
 80040c6:	e0050553          	fmv.x.w	a0,fa0
 80040ca:	00028067          	jr	t0
    get_f32(f11)
 80040ce:	e0058553          	fmv.x.w	a0,fa1
 80040d2:	00028067          	jr	t0
    get_f32(f12)
 80040d6:	e0060553          	fmv.x.w	a0,fa2
 80040da:	00028067          	jr	t0
    get_f32(f13)
 80040de:	e0068553          	fmv.x.w	a0,fa3
 80040e2:	00028067          	jr	t0
    get_f32(f14)
 80040e6:	e0070553          	fmv.x.w	a0,fa4
 80040ea:	00028067          	jr	t0
    get_f32(f15)
 80040ee:	e0078553          	fmv.x.w	a0,fa5
 80040f2:	00028067          	jr	t0
    get_f32(f16)
 80040f6:	e0080553          	fmv.x.w	a0,fa6
 80040fa:	00028067          	jr	t0
    get_f32(f17)
 80040fe:	e0088553          	fmv.x.w	a0,fa7
 8004102:	00028067          	jr	t0
    get_f32(f18)
 8004106:	e0090553          	fmv.x.w	a0,fs2
 800410a:	00028067          	jr	t0
    get_f32(f19)
 800410e:	e0098553          	fmv.x.w	a0,fs3
 8004112:	00028067          	jr	t0
    get_f32(f20)
 8004116:	e00a0553          	fmv.x.w	a0,fs4
 800411a:	00028067          	jr	t0
    get_f32(f21)
 800411e:	e00a8553          	fmv.x.w	a0,fs5
 8004122:	00028067          	jr	t0
    get_f32(f22)
 8004126:	e00b0553          	fmv.x.w	a0,fs6
 800412a:	00028067          	jr	t0
    get_f32(f23)
 800412e:	e00b8553          	fmv.x.w	a0,fs7
 8004132:	00028067          	jr	t0
    get_f32(f24)
 8004136:	e00c0553          	fmv.x.w	a0,fs8
 800413a:	00028067          	jr	t0
    get_f32(f25)
 800413e:	e00c8553          	fmv.x.w	a0,fs9
 8004142:	00028067          	jr	t0
    get_f32(f26)
 8004146:	e00d0553          	fmv.x.w	a0,fs10
 800414a:	00028067          	jr	t0
    get_f32(f27)
 800414e:	e00d8553          	fmv.x.w	a0,fs11
 8004152:	00028067          	jr	t0
    get_f32(f28)
 8004156:	e00e0553          	fmv.x.w	a0,ft8
 800415a:	00028067          	jr	t0
    get_f32(f29)
 800415e:	e00e8553          	fmv.x.w	a0,ft9
 8004162:	00028067          	jr	t0
    get_f32(f30)
 8004166:	e00f0553          	fmv.x.w	a0,ft10
 800416a:	00028067          	jr	t0
    get_f32(f31)
 800416e:	e00f8553          	fmv.x.w	a0,ft11
 8004172:	00028067          	jr	t0

0000000008004176 <put_f32_reg>:
  
  .text
  .globl put_f32_reg
  put_f32_reg:
    put_f32(f0)
 8004176:	f0050053          	fmv.w.x	ft0,a0
 800417a:	00028067          	jr	t0
    put_f32(f1)
 800417e:	f00500d3          	fmv.w.x	ft1,a0
 8004182:	00028067          	jr	t0
    put_f32(f2)
 8004186:	f0050153          	fmv.w.x	ft2,a0
 800418a:	00028067          	jr	t0
    put_f32(f3)
 800418e:	f00501d3          	fmv.w.x	ft3,a0
 8004192:	00028067          	jr	t0
    put_f32(f4)
 8004196:	f0050253          	fmv.w.x	ft4,a0
 800419a:	00028067          	jr	t0
    put_f32(f5)
 800419e:	f00502d3          	fmv.w.x	ft5,a0
 80041a2:	00028067          	jr	t0
    put_f32(f6)
 80041a6:	f0050353          	fmv.w.x	ft6,a0
 80041aa:	00028067          	jr	t0
    put_f32(f7)
 80041ae:	f00503d3          	fmv.w.x	ft7,a0
 80041b2:	00028067          	jr	t0
    put_f32(f8)
 80041b6:	f0050453          	fmv.w.x	fs0,a0
 80041ba:	00028067          	jr	t0
    put_f32(f9)
 80041be:	f00504d3          	fmv.w.x	fs1,a0
 80041c2:	00028067          	jr	t0
    put_f32(f10)
 80041c6:	f0050553          	fmv.w.x	fa0,a0
 80041ca:	00028067          	jr	t0
    put_f32(f11)
 80041ce:	f00505d3          	fmv.w.x	fa1,a0
 80041d2:	00028067          	jr	t0
    put_f32(f12)
 80041d6:	f0050653          	fmv.w.x	fa2,a0
 80041da:	00028067          	jr	t0
    put_f32(f13)
 80041de:	f00506d3          	fmv.w.x	fa3,a0
 80041e2:	00028067          	jr	t0
    put_f32(f14)
 80041e6:	f0050753          	fmv.w.x	fa4,a0
 80041ea:	00028067          	jr	t0
    put_f32(f15)
 80041ee:	f00507d3          	fmv.w.x	fa5,a0
 80041f2:	00028067          	jr	t0
    put_f32(f16)
 80041f6:	f0050853          	fmv.w.x	fa6,a0
 80041fa:	00028067          	jr	t0
    put_f32(f17)
 80041fe:	f00508d3          	fmv.w.x	fa7,a0
 8004202:	00028067          	jr	t0
    put_f32(f18)
 8004206:	f0050953          	fmv.w.x	fs2,a0
 800420a:	00028067          	jr	t0
    put_f32(f19)
 800420e:	f00509d3          	fmv.w.x	fs3,a0
 8004212:	00028067          	jr	t0
    put_f32(f20)
 8004216:	f0050a53          	fmv.w.x	fs4,a0
 800421a:	00028067          	jr	t0
    put_f32(f21)
 800421e:	f0050ad3          	fmv.w.x	fs5,a0
 8004222:	00028067          	jr	t0
    put_f32(f22)
 8004226:	f0050b53          	fmv.w.x	fs6,a0
 800422a:	00028067          	jr	t0
    put_f32(f23)
 800422e:	f0050bd3          	fmv.w.x	fs7,a0
 8004232:	00028067          	jr	t0
    put_f32(f24)
 8004236:	f0050c53          	fmv.w.x	fs8,a0
 800423a:	00028067          	jr	t0
    put_f32(f25)
 800423e:	f0050cd3          	fmv.w.x	fs9,a0
 8004242:	00028067          	jr	t0
    put_f32(f26)
 8004246:	f0050d53          	fmv.w.x	fs10,a0
 800424a:	00028067          	jr	t0
    put_f32(f27)
 800424e:	f0050dd3          	fmv.w.x	fs11,a0
 8004252:	00028067          	jr	t0
    put_f32(f28)
 8004256:	f0050e53          	fmv.w.x	ft8,a0
 800425a:	00028067          	jr	t0
    put_f32(f29)
 800425e:	f0050ed3          	fmv.w.x	ft9,a0
 8004262:	00028067          	jr	t0
    put_f32(f30)
 8004266:	f0050f53          	fmv.w.x	ft10,a0
 800426a:	00028067          	jr	t0
    put_f32(f31)
 800426e:	f0050fd3          	fmv.w.x	ft11,a0
 8004272:	00028067          	jr	t0

0000000008004276 <get_f64_reg>:
 #if __riscv_flen > 32

  .text
  .globl get_f64_reg
  get_f64_reg:
    get_f64(f0)
 8004276:	e2000553          	fmv.x.d	a0,ft0
 800427a:	00028067          	jr	t0
    get_f64(f1)
 800427e:	e2008553          	fmv.x.d	a0,ft1
 8004282:	00028067          	jr	t0
    get_f64(f2)
 8004286:	e2010553          	fmv.x.d	a0,ft2
 800428a:	00028067          	jr	t0
    get_f64(f3)
 800428e:	e2018553          	fmv.x.d	a0,ft3
 8004292:	00028067          	jr	t0
    get_f64(f4)
 8004296:	e2020553          	fmv.x.d	a0,ft4
 800429a:	00028067          	jr	t0
    get_f64(f5)
 800429e:	e2028553          	fmv.x.d	a0,ft5
 80042a2:	00028067          	jr	t0
    get_f64(f6)
 80042a6:	e2030553          	fmv.x.d	a0,ft6
 80042aa:	00028067          	jr	t0
    get_f64(f7)
 80042ae:	e2038553          	fmv.x.d	a0,ft7
 80042b2:	00028067          	jr	t0
    get_f64(f8)
 80042b6:	e2040553          	fmv.x.d	a0,fs0
 80042ba:	00028067          	jr	t0
    get_f64(f9)
 80042be:	e2048553          	fmv.x.d	a0,fs1
 80042c2:	00028067          	jr	t0
    get_f64(f10)
 80042c6:	e2050553          	fmv.x.d	a0,fa0
 80042ca:	00028067          	jr	t0
    get_f64(f11)
 80042ce:	e2058553          	fmv.x.d	a0,fa1
 80042d2:	00028067          	jr	t0
    get_f64(f12)
 80042d6:	e2060553          	fmv.x.d	a0,fa2
 80042da:	00028067          	jr	t0
    get_f64(f13)
 80042de:	e2068553          	fmv.x.d	a0,fa3
 80042e2:	00028067          	jr	t0
    get_f64(f14)
 80042e6:	e2070553          	fmv.x.d	a0,fa4
 80042ea:	00028067          	jr	t0
    get_f64(f15)
 80042ee:	e2078553          	fmv.x.d	a0,fa5
 80042f2:	00028067          	jr	t0
    get_f64(f16)
 80042f6:	e2080553          	fmv.x.d	a0,fa6
 80042fa:	00028067          	jr	t0
    get_f64(f17)
 80042fe:	e2088553          	fmv.x.d	a0,fa7
 8004302:	00028067          	jr	t0
    get_f64(f18)
 8004306:	e2090553          	fmv.x.d	a0,fs2
 800430a:	00028067          	jr	t0
    get_f64(f19)
 800430e:	e2098553          	fmv.x.d	a0,fs3
 8004312:	00028067          	jr	t0
    get_f64(f20)
 8004316:	e20a0553          	fmv.x.d	a0,fs4
 800431a:	00028067          	jr	t0
    get_f64(f21)
 800431e:	e20a8553          	fmv.x.d	a0,fs5
 8004322:	00028067          	jr	t0
    get_f64(f22)
 8004326:	e20b0553          	fmv.x.d	a0,fs6
 800432a:	00028067          	jr	t0
    get_f64(f23)
 800432e:	e20b8553          	fmv.x.d	a0,fs7
 8004332:	00028067          	jr	t0
    get_f64(f24)
 8004336:	e20c0553          	fmv.x.d	a0,fs8
 800433a:	00028067          	jr	t0
    get_f64(f25)
 800433e:	e20c8553          	fmv.x.d	a0,fs9
 8004342:	00028067          	jr	t0
    get_f64(f26)
 8004346:	e20d0553          	fmv.x.d	a0,fs10
 800434a:	00028067          	jr	t0
    get_f64(f27)
 800434e:	e20d8553          	fmv.x.d	a0,fs11
 8004352:	00028067          	jr	t0
    get_f64(f28)
 8004356:	e20e0553          	fmv.x.d	a0,ft8
 800435a:	00028067          	jr	t0
    get_f64(f29)
 800435e:	e20e8553          	fmv.x.d	a0,ft9
 8004362:	00028067          	jr	t0
    get_f64(f30)
 8004366:	e20f0553          	fmv.x.d	a0,ft10
 800436a:	00028067          	jr	t0
    get_f64(f31)
 800436e:	e20f8553          	fmv.x.d	a0,ft11
 8004372:	00028067          	jr	t0

0000000008004376 <put_f64_reg>:
  
  .text
  .globl put_f64_reg
  put_f64_reg:
    put_f64(f0)
 8004376:	f2050053          	fmv.d.x	ft0,a0
 800437a:	00028067          	jr	t0
    put_f64(f1)
 800437e:	f20500d3          	fmv.d.x	ft1,a0
 8004382:	00028067          	jr	t0
    put_f64(f2)
 8004386:	f2050153          	fmv.d.x	ft2,a0
 800438a:	00028067          	jr	t0
    put_f64(f3)
 800438e:	f20501d3          	fmv.d.x	ft3,a0
 8004392:	00028067          	jr	t0
    put_f64(f4)
 8004396:	f2050253          	fmv.d.x	ft4,a0
 800439a:	00028067          	jr	t0
    put_f64(f5)
 800439e:	f20502d3          	fmv.d.x	ft5,a0
 80043a2:	00028067          	jr	t0
    put_f64(f6)
 80043a6:	f2050353          	fmv.d.x	ft6,a0
 80043aa:	00028067          	jr	t0
    put_f64(f7)
 80043ae:	f20503d3          	fmv.d.x	ft7,a0
 80043b2:	00028067          	jr	t0
    put_f64(f8)
 80043b6:	f2050453          	fmv.d.x	fs0,a0
 80043ba:	00028067          	jr	t0
    put_f64(f9)
 80043be:	f20504d3          	fmv.d.x	fs1,a0
 80043c2:	00028067          	jr	t0
    put_f64(f10)
 80043c6:	f2050553          	fmv.d.x	fa0,a0
 80043ca:	00028067          	jr	t0
    put_f64(f11)
 80043ce:	f20505d3          	fmv.d.x	fa1,a0
 80043d2:	00028067          	jr	t0
    put_f64(f12)
 80043d6:	f2050653          	fmv.d.x	fa2,a0
 80043da:	00028067          	jr	t0
    put_f64(f13)
 80043de:	f20506d3          	fmv.d.x	fa3,a0
 80043e2:	00028067          	jr	t0
    put_f64(f14)
 80043e6:	f2050753          	fmv.d.x	fa4,a0
 80043ea:	00028067          	jr	t0
    put_f64(f15)
 80043ee:	f20507d3          	fmv.d.x	fa5,a0
 80043f2:	00028067          	jr	t0
    put_f64(f16)
 80043f6:	f2050853          	fmv.d.x	fa6,a0
 80043fa:	00028067          	jr	t0
    put_f64(f17)
 80043fe:	f20508d3          	fmv.d.x	fa7,a0
 8004402:	00028067          	jr	t0
    put_f64(f18)
 8004406:	f2050953          	fmv.d.x	fs2,a0
 800440a:	00028067          	jr	t0
    put_f64(f19)
 800440e:	f20509d3          	fmv.d.x	fs3,a0
 8004412:	00028067          	jr	t0
    put_f64(f20)
 8004416:	f2050a53          	fmv.d.x	fs4,a0
 800441a:	00028067          	jr	t0
    put_f64(f21)
 800441e:	f2050ad3          	fmv.d.x	fs5,a0
 8004422:	00028067          	jr	t0
    put_f64(f22)
 8004426:	f2050b53          	fmv.d.x	fs6,a0
 800442a:	00028067          	jr	t0
    put_f64(f23)
 800442e:	f2050bd3          	fmv.d.x	fs7,a0
 8004432:	00028067          	jr	t0
    put_f64(f24)
 8004436:	f2050c53          	fmv.d.x	fs8,a0
 800443a:	00028067          	jr	t0
    put_f64(f25)
 800443e:	f2050cd3          	fmv.d.x	fs9,a0
 8004442:	00028067          	jr	t0
    put_f64(f26)
 8004446:	f2050d53          	fmv.d.x	fs10,a0
 800444a:	00028067          	jr	t0
    put_f64(f27)
 800444e:	f2050dd3          	fmv.d.x	fs11,a0
 8004452:	00028067          	jr	t0
    put_f64(f28)
 8004456:	f2050e53          	fmv.d.x	ft8,a0
 800445a:	00028067          	jr	t0
    put_f64(f29)
 800445e:	f2050ed3          	fmv.d.x	ft9,a0
 8004462:	00028067          	jr	t0
    put_f64(f30)
 8004466:	f2050f53          	fmv.d.x	ft10,a0
 800446a:	00028067          	jr	t0
    put_f64(f31)
 800446e:	f2050fd3          	fmv.d.x	ft11,a0
 8004472:	00028067          	jr	t0

0000000008004476 <emulate_rvc>:
#include "unprivileged_memory.h"
#include "mtrap.h"
#include <limits.h>

static DECLARE_EMULATION_FUNC(emulate_rvc)
{
 8004476:	7139                	addi	sp,sp,-64
 8004478:	fc06                	sd	ra,56(sp)
 800447a:	f822                	sd	s0,48(sp)
 800447c:	0080                	addi	s0,sp,64
 800447e:	fea43423          	sd	a0,-24(s0)
 8004482:	feb43023          	sd	a1,-32(s0)
 8004486:	fcc43c23          	sd	a2,-40(s0)
 800448a:	fcd43823          	sd	a3,-48(s0)
 800448e:	fce43423          	sd	a4,-56(s0)
  } else
#  endif
# endif
#endif

  return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
 8004492:	fc843703          	ld	a4,-56(s0)
 8004496:	fd043683          	ld	a3,-48(s0)
 800449a:	fd843603          	ld	a2,-40(s0)
 800449e:	fe043583          	ld	a1,-32(s0)
 80044a2:	fe843503          	ld	a0,-24(s0)
 80044a6:	14a000ef          	jal	ra,80045f0 <truly_illegal_insn>
}
 80044aa:	70e2                	ld	ra,56(sp)
 80044ac:	7442                	ld	s0,48(sp)
 80044ae:	6121                	addi	sp,sp,64
 80044b0:	8082                	ret

00000000080044b2 <illegal_insn_trap>:

void illegal_insn_trap(uintptr_t* regs, uintptr_t mcause, uintptr_t mepc)
{
 80044b2:	7175                	addi	sp,sp,-144
 80044b4:	e506                	sd	ra,136(sp)
 80044b6:	e122                	sd	s0,128(sp)
 80044b8:	0900                	addi	s0,sp,144
 80044ba:	f8a43423          	sd	a0,-120(s0)
 80044be:	f8b43023          	sd	a1,-128(s0)
 80044c2:	f6c43c23          	sd	a2,-136(s0)
       "  .word truly_illegal_insn - illegal_insn_trap_table\n"
       "  .word truly_illegal_insn - illegal_insn_trap_table\n"
       "  .word truly_illegal_insn - illegal_insn_trap_table\n"
       "  .popsection");

  uintptr_t mstatus = read_csr(mstatus);
 80044c6:	300027f3          	csrr	a5,mstatus
 80044ca:	fef43023          	sd	a5,-32(s0)
 80044ce:	fe043783          	ld	a5,-32(s0)
 80044d2:	f8f43c23          	sd	a5,-104(s0)
  insn_t insn = read_csr(mtval);
 80044d6:	343027f3          	csrr	a5,mtval
 80044da:	fcf43c23          	sd	a5,-40(s0)
 80044de:	fd843783          	ld	a5,-40(s0)
 80044e2:	fef43423          	sd	a5,-24(s0)

  if (unlikely((insn & 3) != 3)) {
 80044e6:	fe843783          	ld	a5,-24(s0)
 80044ea:	8b8d                	andi	a5,a5,3
 80044ec:	17f5                	addi	a5,a5,-3
 80044ee:	00f037b3          	snez	a5,a5
 80044f2:	0ff7f793          	andi	a5,a5,255
 80044f6:	c3cd                	beqz	a5,8004598 <illegal_insn_trap+0xe6>
    if (insn == 0)
 80044f8:	fe843783          	ld	a5,-24(s0)
 80044fc:	ebad                	bnez	a5,800456e <illegal_insn_trap+0xbc>
 80044fe:	f7843783          	ld	a5,-136(s0)
 8004502:	fcf43023          	sd	a5,-64(s0)
 8004506:	f9840793          	addi	a5,s0,-104
 800450a:	faf43c23          	sd	a5,-72(s0)
}
#endif

static uintptr_t __attribute__((always_inline)) get_insn(uintptr_t mepc, uintptr_t* mstatus)
{
  register uintptr_t __mstatus_adjust asm ("a1") = MSTATUS_MPRV | MSTATUS_MXR;
 800450e:	000a05b7          	lui	a1,0xa0
  register uintptr_t __mepc asm ("a2") = mepc;
 8004512:	fc043603          	ld	a2,-64(s0)
       : [mprv] "r" (__mstatus_adjust), [addr] "r" (__mepc));
#else
#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
  uintptr_t rvc_mask = 3 << 24;
#else
  uintptr_t rvc_mask = 3;
 8004516:	478d                	li	a5,3
 8004518:	faf43823          	sd	a5,-80(s0)
#endif
  uintptr_t tmp;
  asm ("csrrs %[mstatus], mstatus, %[mprv]\n"
 800451c:	fb043783          	ld	a5,-80(s0)
 8004520:	3005a6f3          	csrrs	a3,mstatus,a1
 8004524:	00267713          	andi	a4,a2,2
 8004528:	eb11                	bnez	a4,800453c <illegal_insn_trap+0x8a>
 800452a:	00066503          	lwu	a0,0(a2)
 800452e:	00f57733          	and	a4,a0,a5
 8004532:	00f70f63          	beq	a4,a5,8004550 <illegal_insn_trap+0x9e>
 8004536:	1542                	slli	a0,a0,0x30
 8004538:	9141                	srli	a0,a0,0x30
 800453a:	a819                	j	8004550 <illegal_insn_trap+0x9e>
 800453c:	00065503          	lhu	a0,0(a2)
 8004540:	00f57733          	and	a4,a0,a5
 8004544:	00f71663          	bne	a4,a5,8004550 <illegal_insn_trap+0x9e>
 8004548:	00265703          	lhu	a4,2(a2)
 800454c:	0742                	slli	a4,a4,0x10
 800454e:	953a                	add	a0,a0,a4
 8004550:	30069073          	csrw	mstatus,a3
 8004554:	862a                	mv	a2,a0
 8004556:	fac43423          	sd	a2,-88(s0)
 800455a:	fae43023          	sd	a4,-96(s0)
       "2: csrw mstatus, %[mstatus]"
       : [mstatus] "+&r" (__mstatus), [insn] "=&r" (val), [tmp] "=&r" (tmp)
       : [mprv] "r" (__mstatus_adjust), [addr] "r" (__mepc),
         [rvc_mask] "r" (rvc_mask), [xlen_minus_16] "i" (__riscv_xlen - 16));
#endif
  *mstatus = __mstatus;
 800455e:	8736                	mv	a4,a3
 8004560:	fb843783          	ld	a5,-72(s0)
 8004564:	e398                	sd	a4,0(a5)
#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
  return __builtin_bswap32(val);
#else
  return val;
 8004566:	fa843783          	ld	a5,-88(s0)
      insn = get_insn(mepc, &mstatus);
 800456a:	fef43423          	sd	a5,-24(s0)
    if ((insn & 3) != 3)
 800456e:	fe843783          	ld	a5,-24(s0)
 8004572:	0037f713          	andi	a4,a5,3
 8004576:	478d                	li	a5,3
 8004578:	02f70063          	beq	a4,a5,8004598 <illegal_insn_trap+0xe6>
      return emulate_rvc(regs, mcause, mepc, mstatus, insn);
 800457c:	f9843783          	ld	a5,-104(s0)
 8004580:	fe843703          	ld	a4,-24(s0)
 8004584:	86be                	mv	a3,a5
 8004586:	f7843603          	ld	a2,-136(s0)
 800458a:	f8043583          	ld	a1,-128(s0)
 800458e:	f8843503          	ld	a0,-120(s0)
 8004592:	ee5ff0ef          	jal	ra,8004476 <emulate_rvc>
 8004596:	a889                	j	80045e8 <illegal_insn_trap+0x136>
  }

  write_csr(mepc, mepc + 4);
 8004598:	f7843783          	ld	a5,-136(s0)
 800459c:	0791                	addi	a5,a5,4
 800459e:	34179073          	csrw	mepc,a5

  extern uint32_t illegal_insn_trap_table[];
  int32_t* pf = (void*)illegal_insn_trap_table + (insn & 0x7c);
 80045a2:	fe843783          	ld	a5,-24(s0)
 80045a6:	07c7f713          	andi	a4,a5,124
 80045aa:	00008797          	auipc	a5,0x8
 80045ae:	0a278793          	addi	a5,a5,162 # 800c64c <illegal_insn_trap_table>
 80045b2:	97ba                	add	a5,a5,a4
 80045b4:	fcf43823          	sd	a5,-48(s0)
  emulation_func f = (emulation_func)((void*)illegal_insn_trap_table + *pf);
 80045b8:	00008797          	auipc	a5,0x8
 80045bc:	09478793          	addi	a5,a5,148 # 800c64c <illegal_insn_trap_table>
 80045c0:	fd043703          	ld	a4,-48(s0)
 80045c4:	4318                	lw	a4,0(a4)
 80045c6:	97ba                	add	a5,a5,a4
 80045c8:	fcf43423          	sd	a5,-56(s0)
  f(regs, mcause, mepc, mstatus, insn);
 80045cc:	f9843783          	ld	a5,-104(s0)
 80045d0:	fc843803          	ld	a6,-56(s0)
 80045d4:	fe843703          	ld	a4,-24(s0)
 80045d8:	86be                	mv	a3,a5
 80045da:	f7843603          	ld	a2,-136(s0)
 80045de:	f8043583          	ld	a1,-128(s0)
 80045e2:	f8843503          	ld	a0,-120(s0)
 80045e6:	9802                	jalr	a6
}
 80045e8:	60aa                	ld	ra,136(sp)
 80045ea:	640a                	ld	s0,128(sp)
 80045ec:	6149                	addi	sp,sp,144
 80045ee:	8082                	ret

00000000080045f0 <truly_illegal_insn>:

__attribute__((noinline))
DECLARE_EMULATION_FUNC(truly_illegal_insn)
{
 80045f0:	7139                	addi	sp,sp,-64
 80045f2:	fc06                	sd	ra,56(sp)
 80045f4:	f822                	sd	s0,48(sp)
 80045f6:	0080                	addi	s0,sp,64
 80045f8:	fea43423          	sd	a0,-24(s0)
 80045fc:	feb43023          	sd	a1,-32(s0)
 8004600:	fcc43c23          	sd	a2,-40(s0)
 8004604:	fcd43823          	sd	a3,-48(s0)
 8004608:	fce43423          	sd	a4,-56(s0)
  return redirect_trap(mepc, mstatus, insn);
 800460c:	fc843603          	ld	a2,-56(s0)
 8004610:	fd043583          	ld	a1,-48(s0)
 8004614:	fd843503          	ld	a0,-40(s0)
 8004618:	990fe0ef          	jal	ra,80027a8 <redirect_trap>
}
 800461c:	70e2                	ld	ra,56(sp)
 800461e:	7442                	ld	s0,48(sp)
 8004620:	6121                	addi	sp,sp,64
 8004622:	8082                	ret

0000000008004624 <emulate_read_csr>:

static inline int emulate_read_csr(int num, uintptr_t mstatus, uintptr_t* result)
{
 8004624:	7139                	addi	sp,sp,-64
 8004626:	fc22                	sd	s0,56(sp)
 8004628:	0080                	addi	s0,sp,64
 800462a:	87aa                	mv	a5,a0
 800462c:	fcb43823          	sd	a1,-48(s0)
 8004630:	fcc43423          	sd	a2,-56(s0)
 8004634:	fcf42e23          	sw	a5,-36(s0)
  uintptr_t counteren = -1;
 8004638:	57fd                	li	a5,-1
 800463a:	fef43423          	sd	a5,-24(s0)
  if (EXTRACT_FIELD(mstatus, MSTATUS_MPP) == PRV_U)
 800463e:	fd043703          	ld	a4,-48(s0)
 8004642:	6789                	lui	a5,0x2
 8004644:	80078793          	addi	a5,a5,-2048 # 1800 <MEM_START-0x7ffe800>
 8004648:	8f7d                	and	a4,a4,a5
 800464a:	7ff00793          	li	a5,2047
 800464e:	00e7ea63          	bltu	a5,a4,8004662 <emulate_read_csr+0x3e>
    counteren = read_csr(scounteren);
 8004652:	106027f3          	csrr	a5,scounteren
 8004656:	fef43023          	sd	a5,-32(s0)
 800465a:	fe043783          	ld	a5,-32(s0)
 800465e:	fef43423          	sd	a5,-24(s0)

  switch (num)
 8004662:	fdc42783          	lw	a5,-36(s0)
 8004666:	0007871b          	sext.w	a4,a5
 800466a:	6785                	lui	a5,0x1
 800466c:	c0178793          	addi	a5,a5,-1023 # c01 <MEM_START-0x7fff3ff>
 8004670:	02f71363          	bne	a4,a5,8004696 <emulate_read_csr+0x72>
  {
    case CSR_TIME:
      if (!((counteren >> (CSR_TIME - CSR_CYCLE)) & 1))
 8004674:	fe843783          	ld	a5,-24(s0)
 8004678:	8b89                	andi	a5,a5,2
 800467a:	e399                	bnez	a5,8004680 <emulate_read_csr+0x5c>
        return -1;
 800467c:	57fd                	li	a5,-1
 800467e:	a829                	j	8004698 <emulate_read_csr+0x74>
      *result = *mtime;
 8004680:	00014797          	auipc	a5,0x14
 8004684:	9b078793          	addi	a5,a5,-1616 # 8018030 <mtime>
 8004688:	639c                	ld	a5,0(a5)
 800468a:	6398                	ld	a4,0(a5)
 800468c:	fc843783          	ld	a5,-56(s0)
 8004690:	e398                	sd	a4,0(a5)
      return 0;
 8004692:	4781                	li	a5,0
 8004694:	a011                	j	8004698 <emulate_read_csr+0x74>
      if ((mstatus & MSTATUS_FS) == 0) break;
      *result = GET_FCSR();
      return 0;
#endif
  }
  return -1;
 8004696:	57fd                	li	a5,-1
}
 8004698:	853e                	mv	a0,a5
 800469a:	7462                	ld	s0,56(sp)
 800469c:	6121                	addi	sp,sp,64
 800469e:	8082                	ret

00000000080046a0 <emulate_write_csr>:

static inline int emulate_write_csr(int num, uintptr_t value, uintptr_t mstatus)
{
 80046a0:	7179                	addi	sp,sp,-48
 80046a2:	f422                	sd	s0,40(sp)
 80046a4:	1800                	addi	s0,sp,48
 80046a6:	87aa                	mv	a5,a0
 80046a8:	feb43023          	sd	a1,-32(s0)
 80046ac:	fcc43c23          	sd	a2,-40(s0)
 80046b0:	fef42623          	sw	a5,-20(s0)
    case CSR_FRM: SET_FRM(value); return 0;
    case CSR_FFLAGS: SET_FFLAGS(value); return 0;
    case CSR_FCSR: SET_FCSR(value); return 0;
#endif
  }
  return -1;
 80046b4:	57fd                	li	a5,-1
}
 80046b6:	853e                	mv	a0,a5
 80046b8:	7422                	ld	s0,40(sp)
 80046ba:	6145                	addi	sp,sp,48
 80046bc:	8082                	ret

00000000080046be <emulate_system_opcode>:

DECLARE_EMULATION_FUNC(emulate_system_opcode)
{
 80046be:	7159                	addi	sp,sp,-112
 80046c0:	f486                	sd	ra,104(sp)
 80046c2:	f0a2                	sd	s0,96(sp)
 80046c4:	1880                	addi	s0,sp,112
 80046c6:	faa43c23          	sd	a0,-72(s0)
 80046ca:	fab43823          	sd	a1,-80(s0)
 80046ce:	fac43423          	sd	a2,-88(s0)
 80046d2:	fad43023          	sd	a3,-96(s0)
 80046d6:	f8e43c23          	sd	a4,-104(s0)
  int rs1_num = (insn >> 15) & 0x1f;
 80046da:	f9843783          	ld	a5,-104(s0)
 80046de:	83bd                	srli	a5,a5,0xf
 80046e0:	2781                	sext.w	a5,a5
 80046e2:	8bfd                	andi	a5,a5,31
 80046e4:	fef42023          	sw	a5,-32(s0)
  uintptr_t rs1_val = GET_RS1(insn, regs);
 80046e8:	0f800793          	li	a5,248
 80046ec:	fcf42e23          	sw	a5,-36(s0)
 80046f0:	f9843783          	ld	a5,-104(s0)
 80046f4:	00c7d713          	srli	a4,a5,0xc
 80046f8:	fdc42783          	lw	a5,-36(s0)
 80046fc:	8f7d                	and	a4,a4,a5
 80046fe:	fb843783          	ld	a5,-72(s0)
 8004702:	97ba                	add	a5,a5,a4
 8004704:	639c                	ld	a5,0(a5)
 8004706:	fcf43823          	sd	a5,-48(s0)
  int csr_num = (uint32_t)insn >> 20;
 800470a:	f9843783          	ld	a5,-104(s0)
 800470e:	2781                	sext.w	a5,a5
 8004710:	0147d79b          	srliw	a5,a5,0x14
 8004714:	2781                	sext.w	a5,a5
 8004716:	fcf42623          	sw	a5,-52(s0)
  uintptr_t csr_val, new_csr_val;

  if (emulate_read_csr(csr_num, mstatus, &csr_val))
 800471a:	fc040713          	addi	a4,s0,-64
 800471e:	fcc42783          	lw	a5,-52(s0)
 8004722:	863a                	mv	a2,a4
 8004724:	fa043583          	ld	a1,-96(s0)
 8004728:	853e                	mv	a0,a5
 800472a:	efbff0ef          	jal	ra,8004624 <emulate_read_csr>
 800472e:	87aa                	mv	a5,a0
 8004730:	cf91                	beqz	a5,800474c <emulate_system_opcode+0x8e>
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
 8004732:	f9843703          	ld	a4,-104(s0)
 8004736:	fa043683          	ld	a3,-96(s0)
 800473a:	fa843603          	ld	a2,-88(s0)
 800473e:	fb043583          	ld	a1,-80(s0)
 8004742:	fb843503          	ld	a0,-72(s0)
 8004746:	eabff0ef          	jal	ra,80045f0 <truly_illegal_insn>
 800474a:	aa15                	j	800487e <emulate_system_opcode+0x1c0>

  int do_write = rs1_num;
 800474c:	fe042783          	lw	a5,-32(s0)
 8004750:	fef42223          	sw	a5,-28(s0)
  switch (GET_RM(insn))
 8004754:	f9843783          	ld	a5,-104(s0)
 8004758:	83b1                	srli	a5,a5,0xc
 800475a:	8b9d                	andi	a5,a5,7
 800475c:	471d                	li	a4,7
 800475e:	0cf76263          	bltu	a4,a5,8004822 <emulate_system_opcode+0x164>
 8004762:	00279713          	slli	a4,a5,0x2
 8004766:	00008797          	auipc	a5,0x8
 800476a:	f6678793          	addi	a5,a5,-154 # 800c6cc <illegal_insn_trap_table+0x80>
 800476e:	97ba                	add	a5,a5,a4
 8004770:	439c                	lw	a5,0(a5)
 8004772:	0007871b          	sext.w	a4,a5
 8004776:	00008797          	auipc	a5,0x8
 800477a:	f5678793          	addi	a5,a5,-170 # 800c6cc <illegal_insn_trap_table+0x80>
 800477e:	97ba                	add	a5,a5,a4
 8004780:	8782                	jr	a5
  {
    case 0: return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
 8004782:	f9843703          	ld	a4,-104(s0)
 8004786:	fa043683          	ld	a3,-96(s0)
 800478a:	fa843603          	ld	a2,-88(s0)
 800478e:	fb043583          	ld	a1,-80(s0)
 8004792:	fb843503          	ld	a0,-72(s0)
 8004796:	e5bff0ef          	jal	ra,80045f0 <truly_illegal_insn>
 800479a:	a0d5                	j	800487e <emulate_system_opcode+0x1c0>
    case 1: new_csr_val = rs1_val; do_write = 1; break;
 800479c:	fd043783          	ld	a5,-48(s0)
 80047a0:	fef43423          	sd	a5,-24(s0)
 80047a4:	4785                	li	a5,1
 80047a6:	fef42223          	sw	a5,-28(s0)
 80047aa:	a8a5                	j	8004822 <emulate_system_opcode+0x164>
    case 2: new_csr_val = csr_val | rs1_val; break;
 80047ac:	fc043783          	ld	a5,-64(s0)
 80047b0:	fd043703          	ld	a4,-48(s0)
 80047b4:	8fd9                	or	a5,a5,a4
 80047b6:	fef43423          	sd	a5,-24(s0)
 80047ba:	a0a5                	j	8004822 <emulate_system_opcode+0x164>
    case 3: new_csr_val = csr_val & ~rs1_val; break;
 80047bc:	fd043783          	ld	a5,-48(s0)
 80047c0:	fff7c713          	not	a4,a5
 80047c4:	fc043783          	ld	a5,-64(s0)
 80047c8:	8ff9                	and	a5,a5,a4
 80047ca:	fef43423          	sd	a5,-24(s0)
 80047ce:	a891                	j	8004822 <emulate_system_opcode+0x164>
    case 4: return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
 80047d0:	f9843703          	ld	a4,-104(s0)
 80047d4:	fa043683          	ld	a3,-96(s0)
 80047d8:	fa843603          	ld	a2,-88(s0)
 80047dc:	fb043583          	ld	a1,-80(s0)
 80047e0:	fb843503          	ld	a0,-72(s0)
 80047e4:	e0dff0ef          	jal	ra,80045f0 <truly_illegal_insn>
 80047e8:	a859                	j	800487e <emulate_system_opcode+0x1c0>
    case 5: new_csr_val = rs1_num; do_write = 1; break;
 80047ea:	fe042783          	lw	a5,-32(s0)
 80047ee:	fef43423          	sd	a5,-24(s0)
 80047f2:	4785                	li	a5,1
 80047f4:	fef42223          	sw	a5,-28(s0)
 80047f8:	a02d                	j	8004822 <emulate_system_opcode+0x164>
    case 6: new_csr_val = csr_val | rs1_num; break;
 80047fa:	fe042703          	lw	a4,-32(s0)
 80047fe:	fc043783          	ld	a5,-64(s0)
 8004802:	8fd9                	or	a5,a5,a4
 8004804:	fef43423          	sd	a5,-24(s0)
 8004808:	a829                	j	8004822 <emulate_system_opcode+0x164>
    case 7: new_csr_val = csr_val & ~rs1_num; break;
 800480a:	fe042783          	lw	a5,-32(s0)
 800480e:	fff7c793          	not	a5,a5
 8004812:	2781                	sext.w	a5,a5
 8004814:	873e                	mv	a4,a5
 8004816:	fc043783          	ld	a5,-64(s0)
 800481a:	8ff9                	and	a5,a5,a4
 800481c:	fef43423          	sd	a5,-24(s0)
 8004820:	0001                	nop
  }

  if (do_write && emulate_write_csr(csr_num, new_csr_val, mstatus))
 8004822:	fe442783          	lw	a5,-28(s0)
 8004826:	2781                	sext.w	a5,a5
 8004828:	cb8d                	beqz	a5,800485a <emulate_system_opcode+0x19c>
 800482a:	fcc42783          	lw	a5,-52(s0)
 800482e:	fa043603          	ld	a2,-96(s0)
 8004832:	fe843583          	ld	a1,-24(s0)
 8004836:	853e                	mv	a0,a5
 8004838:	e69ff0ef          	jal	ra,80046a0 <emulate_write_csr>
 800483c:	87aa                	mv	a5,a0
 800483e:	cf91                	beqz	a5,800485a <emulate_system_opcode+0x19c>
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
 8004840:	f9843703          	ld	a4,-104(s0)
 8004844:	fa043683          	ld	a3,-96(s0)
 8004848:	fa843603          	ld	a2,-88(s0)
 800484c:	fb043583          	ld	a1,-80(s0)
 8004850:	fb843503          	ld	a0,-72(s0)
 8004854:	d9dff0ef          	jal	ra,80045f0 <truly_illegal_insn>
 8004858:	a01d                	j	800487e <emulate_system_opcode+0x1c0>

  SET_RD(insn, regs, csr_val);
 800485a:	0f800793          	li	a5,248
 800485e:	fcf42423          	sw	a5,-56(s0)
 8004862:	f9843783          	ld	a5,-104(s0)
 8004866:	0047d713          	srli	a4,a5,0x4
 800486a:	fc842783          	lw	a5,-56(s0)
 800486e:	8f7d                	and	a4,a4,a5
 8004870:	fb843783          	ld	a5,-72(s0)
 8004874:	97ba                	add	a5,a5,a4
 8004876:	873e                	mv	a4,a5
 8004878:	fc043783          	ld	a5,-64(s0)
 800487c:	e31c                	sd	a5,0(a4)
}
 800487e:	70a6                	ld	ra,104(sp)
 8004880:	7406                	ld	s0,96(sp)
 8004882:	6165                	addi	sp,sp,112
 8004884:	8082                	ret

0000000008004886 <emulate_fp>:
#if defined(__riscv_flen) && __riscv_flen != 64
# error single-float only is not supported
#endif

DECLARE_EMULATION_FUNC(emulate_fp)
{
 8004886:	711d                	addi	sp,sp,-96
 8004888:	ec86                	sd	ra,88(sp)
 800488a:	e8a2                	sd	s0,80(sp)
 800488c:	1080                	addi	s0,sp,96
 800488e:	fca43423          	sd	a0,-56(s0)
 8004892:	fcb43023          	sd	a1,-64(s0)
 8004896:	fac43c23          	sd	a2,-72(s0)
 800489a:	fad43823          	sd	a3,-80(s0)
 800489e:	fae43423          	sd	a4,-88(s0)
       "  .word emulate_fmv_fi - fp_emulation_table\n"
       "  .word truly_illegal_insn - fp_emulation_table\n"
       "  .popsection");

  // if FPU is disabled, punt back to the OS
  if (unlikely((mstatus & MSTATUS_FS) == 0))
 80048a2:	fb043703          	ld	a4,-80(s0)
 80048a6:	6799                	lui	a5,0x6
 80048a8:	8ff9                	and	a5,a5,a4
 80048aa:	0017b793          	seqz	a5,a5
 80048ae:	0ff7f793          	andi	a5,a5,255
 80048b2:	cf91                	beqz	a5,80048ce <emulate_fp+0x48>
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
 80048b4:	fa843703          	ld	a4,-88(s0)
 80048b8:	fb043683          	ld	a3,-80(s0)
 80048bc:	fb843603          	ld	a2,-72(s0)
 80048c0:	fc043583          	ld	a1,-64(s0)
 80048c4:	fc843503          	ld	a0,-56(s0)
 80048c8:	d29ff0ef          	jal	ra,80045f0 <truly_illegal_insn>
 80048cc:	a045                	j	800496c <emulate_fp+0xe6>

  extern uint32_t fp_emulation_table[];
  int32_t* pf = (void*)fp_emulation_table + ((insn >> 25) & 0x7c);
 80048ce:	fa843783          	ld	a5,-88(s0)
 80048d2:	83e5                	srli	a5,a5,0x19
 80048d4:	07c7f713          	andi	a4,a5,124
 80048d8:	00008797          	auipc	a5,0x8
 80048dc:	e1878793          	addi	a5,a5,-488 # 800c6f0 <fp_emulation_table>
 80048e0:	97ba                	add	a5,a5,a4
 80048e2:	fef43423          	sd	a5,-24(s0)
  emulation_func f = (emulation_func)((void*)fp_emulation_table + *pf);
 80048e6:	00008797          	auipc	a5,0x8
 80048ea:	e0a78793          	addi	a5,a5,-502 # 800c6f0 <fp_emulation_table>
 80048ee:	fe843703          	ld	a4,-24(s0)
 80048f2:	4318                	lw	a4,0(a4)
 80048f4:	97ba                	add	a5,a5,a4
 80048f6:	fef43023          	sd	a5,-32(s0)

  SETUP_STATIC_ROUNDING(insn);
 80048fa:	002027f3          	frrm	a5
 80048fe:	fcf43c23          	sd	a5,-40(s0)
 8004902:	fd843783          	ld	a5,-40(s0)
 8004906:	823e                	mv	tp,a5
 8004908:	fa843703          	ld	a4,-88(s0)
 800490c:	679d                	lui	a5,0x7
 800490e:	8f7d                	and	a4,a4,a5
 8004910:	77e5                	lui	a5,0xffff9
 8004912:	97ba                	add	a5,a5,a4
 8004914:	0017b793          	seqz	a5,a5
 8004918:	0ff7f793          	andi	a5,a5,255
 800491c:	eb9d                	bnez	a5,8004952 <emulate_fp+0xcc>
 800491e:	fa843783          	ld	a5,-88(s0)
 8004922:	83b1                	srli	a5,a5,0xc
 8004924:	0077f713          	andi	a4,a5,7
 8004928:	4791                	li	a5,4
 800492a:	00e7ff63          	bleu	a4,a5,8004948 <emulate_fp+0xc2>
 800492e:	fa843703          	ld	a4,-88(s0)
 8004932:	fb043683          	ld	a3,-80(s0)
 8004936:	fb843603          	ld	a2,-72(s0)
 800493a:	fc043583          	ld	a1,-64(s0)
 800493e:	fc843503          	ld	a0,-56(s0)
 8004942:	cafff0ef          	jal	ra,80045f0 <truly_illegal_insn>
 8004946:	a01d                	j	800496c <emulate_fp+0xe6>
 8004948:	fa843783          	ld	a5,-88(s0)
 800494c:	83b1                	srli	a5,a5,0xc
 800494e:	8b9d                	andi	a5,a5,7
 8004950:	823e                	mv	tp,a5
  return f(regs, mcause, mepc, mstatus, insn);
 8004952:	fe043783          	ld	a5,-32(s0)
 8004956:	fa843703          	ld	a4,-88(s0)
 800495a:	fb043683          	ld	a3,-80(s0)
 800495e:	fb843603          	ld	a2,-72(s0)
 8004962:	fc043583          	ld	a1,-64(s0)
 8004966:	fc843503          	ld	a0,-56(s0)
 800496a:	9782                	jalr	a5
}
 800496c:	60e6                	ld	ra,88(sp)
 800496e:	6446                	ld	s0,80(sp)
 8004970:	6125                	addi	sp,sp,96
 8004972:	8082                	ret

0000000008004974 <emulate_any_fadd>:

#define f32(x) ((float32_t){ .v = x })
#define f64(x) ((float64_t){ .v = x })

void emulate_any_fadd(uintptr_t* regs, uintptr_t mcause, uintptr_t mepc, uintptr_t mstatus, insn_t insn, int32_t neg_b)
{
 8004974:	7171                	addi	sp,sp,-176
 8004976:	f506                	sd	ra,168(sp)
 8004978:	f122                	sd	s0,160(sp)
 800497a:	1900                	addi	s0,sp,176
 800497c:	f6a43c23          	sd	a0,-136(s0)
 8004980:	f6b43823          	sd	a1,-144(s0)
 8004984:	f6c43423          	sd	a2,-152(s0)
 8004988:	f6d43023          	sd	a3,-160(s0)
 800498c:	f4e43c23          	sd	a4,-168(s0)
 8004990:	f4f42a23          	sw	a5,-172(s0)
  if (GET_PRECISION(insn) == PRECISION_S) {
 8004994:	f5843783          	ld	a5,-168(s0)
 8004998:	83e5                	srli	a5,a5,0x19
 800499a:	8b8d                	andi	a5,a5,3
 800499c:	e7d9                	bnez	a5,8004a2a <emulate_any_fadd+0xb6>
    uint32_t rs1 = GET_F32_RS1(insn, regs);
 800499e:	f5843783          	ld	a5,-168(s0)
 80049a2:	83b1                	srli	a5,a5,0xc
 80049a4:	2781                	sext.w	a5,a5
 80049a6:	0f87f793          	andi	a5,a5,248
 80049aa:	2781                	sext.w	a5,a5
 80049ac:	853e                	mv	a0,a5
 80049ae:	fffff797          	auipc	a5,0xfffff
 80049b2:	97aa                	add	a5,a5,a0
 80049b4:	6c8782e7          	jalr	t0,1736(a5) # 8004076 <get_f32_reg>
 80049b8:	fef43423          	sd	a5,-24(s0)
 80049bc:	0005079b          	sext.w	a5,a0
 80049c0:	fef42223          	sw	a5,-28(s0)
    uint32_t rs2 = GET_F32_RS2(insn, regs) ^ neg_b;
 80049c4:	f5843783          	ld	a5,-168(s0)
 80049c8:	83c5                	srli	a5,a5,0x11
 80049ca:	2781                	sext.w	a5,a5
 80049cc:	0f87f793          	andi	a5,a5,248
 80049d0:	2781                	sext.w	a5,a5
 80049d2:	853e                	mv	a0,a5
 80049d4:	fffff797          	auipc	a5,0xfffff
 80049d8:	97aa                	add	a5,a5,a0
 80049da:	6a2782e7          	jalr	t0,1698(a5) # 8004076 <get_f32_reg>
 80049de:	fcf43c23          	sd	a5,-40(s0)
 80049e2:	0005071b          	sext.w	a4,a0
 80049e6:	f5442783          	lw	a5,-172(s0)
 80049ea:	8fb9                	xor	a5,a5,a4
 80049ec:	2781                	sext.w	a5,a5
 80049ee:	fcf42a23          	sw	a5,-44(s0)
    SET_F32_RD(insn, regs, f32_add(f32(rs1), f32(rs2)).v);
 80049f2:	fe442783          	lw	a5,-28(s0)
 80049f6:	fd442703          	lw	a4,-44(s0)
 80049fa:	85ba                	mv	a1,a4
 80049fc:	853e                	mv	a0,a5
 80049fe:	70f010ef          	jal	ra,800690c <f32_add>
 8004a02:	87aa                	mv	a5,a0
 8004a04:	2781                	sext.w	a5,a5
 8004a06:	853e                	mv	a0,a5
 8004a08:	f5843783          	ld	a5,-168(s0)
 8004a0c:	8391                	srli	a5,a5,0x4
 8004a0e:	0f87f793          	andi	a5,a5,248
 8004a12:	fcf43423          	sd	a5,-56(s0)
 8004a16:	fc843703          	ld	a4,-56(s0)
 8004a1a:	fffff797          	auipc	a5,0xfffff
 8004a1e:	97ba                	add	a5,a5,a4
 8004a20:	75c782e7          	jalr	t0,1884(a5) # 8004176 <put_f32_reg>
 8004a24:	fcf43023          	sd	a5,-64(s0)
 8004a28:	a84d                	j	8004ada <emulate_any_fadd+0x166>
  } else if (GET_PRECISION(insn) == PRECISION_D) {
 8004a2a:	f5843783          	ld	a5,-168(s0)
 8004a2e:	83e5                	srli	a5,a5,0x19
 8004a30:	0037f713          	andi	a4,a5,3
 8004a34:	4785                	li	a5,1
 8004a36:	08f71663          	bne	a4,a5,8004ac2 <emulate_any_fadd+0x14e>
    uint64_t rs1 = GET_F64_RS1(insn, regs);
 8004a3a:	f5843783          	ld	a5,-168(s0)
 8004a3e:	83b1                	srli	a5,a5,0xc
 8004a40:	0f87f793          	andi	a5,a5,248
 8004a44:	853e                	mv	a0,a5
 8004a46:	00000797          	auipc	a5,0x0
 8004a4a:	97aa                	add	a5,a5,a0
 8004a4c:	830782e7          	jalr	t0,-2000(a5) # 8004276 <get_f64_reg>
 8004a50:	faf43c23          	sd	a5,-72(s0)
 8004a54:	87aa                	mv	a5,a0
 8004a56:	faf43823          	sd	a5,-80(s0)
    uint64_t rs2 = GET_F64_RS2(insn, regs) ^ ((uint64_t)neg_b << 32);
 8004a5a:	f5843783          	ld	a5,-168(s0)
 8004a5e:	83c5                	srli	a5,a5,0x11
 8004a60:	0f87f793          	andi	a5,a5,248
 8004a64:	853e                	mv	a0,a5
 8004a66:	00000797          	auipc	a5,0x0
 8004a6a:	97aa                	add	a5,a5,a0
 8004a6c:	810782e7          	jalr	t0,-2032(a5) # 8004276 <get_f64_reg>
 8004a70:	faf43423          	sd	a5,-88(s0)
 8004a74:	87aa                	mv	a5,a0
 8004a76:	873e                	mv	a4,a5
 8004a78:	f5442783          	lw	a5,-172(s0)
 8004a7c:	1782                	slli	a5,a5,0x20
 8004a7e:	8fb9                	xor	a5,a5,a4
 8004a80:	faf43023          	sd	a5,-96(s0)
    SET_F64_RD(insn, regs, f64_add(f64(rs1), f64(rs2)).v);
 8004a84:	fb043783          	ld	a5,-80(s0)
 8004a88:	fa043703          	ld	a4,-96(s0)
 8004a8c:	85ba                	mv	a1,a4
 8004a8e:	853e                	mv	a0,a5
 8004a90:	531020ef          	jal	ra,80077c0 <f64_add>
 8004a94:	87aa                	mv	a5,a0
 8004a96:	f8f43423          	sd	a5,-120(s0)
 8004a9a:	f8843783          	ld	a5,-120(s0)
 8004a9e:	853e                	mv	a0,a5
 8004aa0:	f5843783          	ld	a5,-168(s0)
 8004aa4:	8391                	srli	a5,a5,0x4
 8004aa6:	0f87f793          	andi	a5,a5,248
 8004aaa:	f8f43c23          	sd	a5,-104(s0)
 8004aae:	f9843703          	ld	a4,-104(s0)
 8004ab2:	00000797          	auipc	a5,0x0
 8004ab6:	97ba                	add	a5,a5,a4
 8004ab8:	8c4782e7          	jalr	t0,-1852(a5) # 8004376 <put_f64_reg>
 8004abc:	f8f43823          	sd	a5,-112(s0)
 8004ac0:	a829                	j	8004ada <emulate_any_fadd+0x166>
  } else {
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
 8004ac2:	f5843703          	ld	a4,-168(s0)
 8004ac6:	f6043683          	ld	a3,-160(s0)
 8004aca:	f6843603          	ld	a2,-152(s0)
 8004ace:	f7043583          	ld	a1,-144(s0)
 8004ad2:	f7843503          	ld	a0,-136(s0)
 8004ad6:	b1bff0ef          	jal	ra,80045f0 <truly_illegal_insn>
  }
}
 8004ada:	70aa                	ld	ra,168(sp)
 8004adc:	740a                	ld	s0,160(sp)
 8004ade:	614d                	addi	sp,sp,176
 8004ae0:	8082                	ret

0000000008004ae2 <emulate_fadd>:

DECLARE_EMULATION_FUNC(emulate_fadd)
{
 8004ae2:	7139                	addi	sp,sp,-64
 8004ae4:	fc06                	sd	ra,56(sp)
 8004ae6:	f822                	sd	s0,48(sp)
 8004ae8:	0080                	addi	s0,sp,64
 8004aea:	fea43423          	sd	a0,-24(s0)
 8004aee:	feb43023          	sd	a1,-32(s0)
 8004af2:	fcc43c23          	sd	a2,-40(s0)
 8004af6:	fcd43823          	sd	a3,-48(s0)
 8004afa:	fce43423          	sd	a4,-56(s0)
  return emulate_any_fadd(regs, mcause, mepc, mstatus, insn, 0);
 8004afe:	4781                	li	a5,0
 8004b00:	fc843703          	ld	a4,-56(s0)
 8004b04:	fd043683          	ld	a3,-48(s0)
 8004b08:	fd843603          	ld	a2,-40(s0)
 8004b0c:	fe043583          	ld	a1,-32(s0)
 8004b10:	fe843503          	ld	a0,-24(s0)
 8004b14:	e61ff0ef          	jal	ra,8004974 <emulate_any_fadd>
}
 8004b18:	70e2                	ld	ra,56(sp)
 8004b1a:	7442                	ld	s0,48(sp)
 8004b1c:	6121                	addi	sp,sp,64
 8004b1e:	8082                	ret

0000000008004b20 <emulate_fsub>:

DECLARE_EMULATION_FUNC(emulate_fsub)
{
 8004b20:	7139                	addi	sp,sp,-64
 8004b22:	fc06                	sd	ra,56(sp)
 8004b24:	f822                	sd	s0,48(sp)
 8004b26:	0080                	addi	s0,sp,64
 8004b28:	fea43423          	sd	a0,-24(s0)
 8004b2c:	feb43023          	sd	a1,-32(s0)
 8004b30:	fcc43c23          	sd	a2,-40(s0)
 8004b34:	fcd43823          	sd	a3,-48(s0)
 8004b38:	fce43423          	sd	a4,-56(s0)
  return emulate_any_fadd(regs, mcause, mepc, mstatus, insn, INT32_MIN);
 8004b3c:	800007b7          	lui	a5,0x80000
 8004b40:	fc843703          	ld	a4,-56(s0)
 8004b44:	fd043683          	ld	a3,-48(s0)
 8004b48:	fd843603          	ld	a2,-40(s0)
 8004b4c:	fe043583          	ld	a1,-32(s0)
 8004b50:	fe843503          	ld	a0,-24(s0)
 8004b54:	e21ff0ef          	jal	ra,8004974 <emulate_any_fadd>
}
 8004b58:	70e2                	ld	ra,56(sp)
 8004b5a:	7442                	ld	s0,48(sp)
 8004b5c:	6121                	addi	sp,sp,64
 8004b5e:	8082                	ret

0000000008004b60 <emulate_fmul>:

DECLARE_EMULATION_FUNC(emulate_fmul)
{
 8004b60:	7171                	addi	sp,sp,-176
 8004b62:	f506                	sd	ra,168(sp)
 8004b64:	f122                	sd	s0,160(sp)
 8004b66:	1900                	addi	s0,sp,176
 8004b68:	f6a43c23          	sd	a0,-136(s0)
 8004b6c:	f6b43823          	sd	a1,-144(s0)
 8004b70:	f6c43423          	sd	a2,-152(s0)
 8004b74:	f6d43023          	sd	a3,-160(s0)
 8004b78:	f4e43c23          	sd	a4,-168(s0)
  if (GET_PRECISION(insn) == PRECISION_S) {
 8004b7c:	f5843783          	ld	a5,-168(s0)
 8004b80:	83e5                	srli	a5,a5,0x19
 8004b82:	8b8d                	andi	a5,a5,3
 8004b84:	e3d9                	bnez	a5,8004c0a <emulate_fmul+0xaa>
    uint32_t rs1 = GET_F32_RS1(insn, regs);
 8004b86:	f5843783          	ld	a5,-168(s0)
 8004b8a:	83b1                	srli	a5,a5,0xc
 8004b8c:	2781                	sext.w	a5,a5
 8004b8e:	0f87f793          	andi	a5,a5,248
 8004b92:	2781                	sext.w	a5,a5
 8004b94:	853e                	mv	a0,a5
 8004b96:	fffff797          	auipc	a5,0xfffff
 8004b9a:	97aa                	add	a5,a5,a0
 8004b9c:	4e0782e7          	jalr	t0,1248(a5) # 8004076 <get_f32_reg>
 8004ba0:	fef43423          	sd	a5,-24(s0)
 8004ba4:	0005079b          	sext.w	a5,a0
 8004ba8:	fef42223          	sw	a5,-28(s0)
    uint32_t rs2 = GET_F32_RS2(insn, regs);
 8004bac:	f5843783          	ld	a5,-168(s0)
 8004bb0:	83c5                	srli	a5,a5,0x11
 8004bb2:	2781                	sext.w	a5,a5
 8004bb4:	0f87f793          	andi	a5,a5,248
 8004bb8:	2781                	sext.w	a5,a5
 8004bba:	853e                	mv	a0,a5
 8004bbc:	fffff797          	auipc	a5,0xfffff
 8004bc0:	97aa                	add	a5,a5,a0
 8004bc2:	4ba782e7          	jalr	t0,1210(a5) # 8004076 <get_f32_reg>
 8004bc6:	fcf43c23          	sd	a5,-40(s0)
 8004bca:	0005079b          	sext.w	a5,a0
 8004bce:	fcf42a23          	sw	a5,-44(s0)
    SET_F32_RD(insn, regs, f32_mul(f32(rs1), f32(rs2)).v);
 8004bd2:	fe442783          	lw	a5,-28(s0)
 8004bd6:	fd442703          	lw	a4,-44(s0)
 8004bda:	85ba                	mv	a1,a4
 8004bdc:	853e                	mv	a0,a5
 8004bde:	40c020ef          	jal	ra,8006fea <f32_mul>
 8004be2:	87aa                	mv	a5,a0
 8004be4:	2781                	sext.w	a5,a5
 8004be6:	853e                	mv	a0,a5
 8004be8:	f5843783          	ld	a5,-168(s0)
 8004bec:	8391                	srli	a5,a5,0x4
 8004bee:	0f87f793          	andi	a5,a5,248
 8004bf2:	fcf43423          	sd	a5,-56(s0)
 8004bf6:	fc843703          	ld	a4,-56(s0)
 8004bfa:	fffff797          	auipc	a5,0xfffff
 8004bfe:	97ba                	add	a5,a5,a4
 8004c00:	57c782e7          	jalr	t0,1404(a5) # 8004176 <put_f32_reg>
 8004c04:	fcf43023          	sd	a5,-64(s0)
 8004c08:	a065                	j	8004cb0 <emulate_fmul+0x150>
  } else if (GET_PRECISION(insn) == PRECISION_D) {
 8004c0a:	f5843783          	ld	a5,-168(s0)
 8004c0e:	83e5                	srli	a5,a5,0x19
 8004c10:	0037f713          	andi	a4,a5,3
 8004c14:	4785                	li	a5,1
 8004c16:	08f71163          	bne	a4,a5,8004c98 <emulate_fmul+0x138>
    uint64_t rs1 = GET_F64_RS1(insn, regs);
 8004c1a:	f5843783          	ld	a5,-168(s0)
 8004c1e:	83b1                	srli	a5,a5,0xc
 8004c20:	0f87f793          	andi	a5,a5,248
 8004c24:	853e                	mv	a0,a5
 8004c26:	fffff797          	auipc	a5,0xfffff
 8004c2a:	97aa                	add	a5,a5,a0
 8004c2c:	650782e7          	jalr	t0,1616(a5) # 8004276 <get_f64_reg>
 8004c30:	faf43c23          	sd	a5,-72(s0)
 8004c34:	87aa                	mv	a5,a0
 8004c36:	faf43823          	sd	a5,-80(s0)
    uint64_t rs2 = GET_F64_RS2(insn, regs);
 8004c3a:	f5843783          	ld	a5,-168(s0)
 8004c3e:	83c5                	srli	a5,a5,0x11
 8004c40:	0f87f793          	andi	a5,a5,248
 8004c44:	853e                	mv	a0,a5
 8004c46:	fffff797          	auipc	a5,0xfffff
 8004c4a:	97aa                	add	a5,a5,a0
 8004c4c:	630782e7          	jalr	t0,1584(a5) # 8004276 <get_f64_reg>
 8004c50:	faf43423          	sd	a5,-88(s0)
 8004c54:	87aa                	mv	a5,a0
 8004c56:	faf43023          	sd	a5,-96(s0)
    SET_F64_RD(insn, regs, f64_mul(f64(rs1), f64(rs2)).v);
 8004c5a:	fb043783          	ld	a5,-80(s0)
 8004c5e:	fa043703          	ld	a4,-96(s0)
 8004c62:	85ba                	mv	a1,a4
 8004c64:	853e                	mv	a0,a5
 8004c66:	2a6030ef          	jal	ra,8007f0c <f64_mul>
 8004c6a:	87aa                	mv	a5,a0
 8004c6c:	f8f43423          	sd	a5,-120(s0)
 8004c70:	f8843783          	ld	a5,-120(s0)
 8004c74:	853e                	mv	a0,a5
 8004c76:	f5843783          	ld	a5,-168(s0)
 8004c7a:	8391                	srli	a5,a5,0x4
 8004c7c:	0f87f793          	andi	a5,a5,248
 8004c80:	f8f43c23          	sd	a5,-104(s0)
 8004c84:	f9843703          	ld	a4,-104(s0)
 8004c88:	fffff797          	auipc	a5,0xfffff
 8004c8c:	97ba                	add	a5,a5,a4
 8004c8e:	6ee782e7          	jalr	t0,1774(a5) # 8004376 <put_f64_reg>
 8004c92:	f8f43823          	sd	a5,-112(s0)
 8004c96:	a829                	j	8004cb0 <emulate_fmul+0x150>
  } else {
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
 8004c98:	f5843703          	ld	a4,-168(s0)
 8004c9c:	f6043683          	ld	a3,-160(s0)
 8004ca0:	f6843603          	ld	a2,-152(s0)
 8004ca4:	f7043583          	ld	a1,-144(s0)
 8004ca8:	f7843503          	ld	a0,-136(s0)
 8004cac:	945ff0ef          	jal	ra,80045f0 <truly_illegal_insn>
  }
}
 8004cb0:	70aa                	ld	ra,168(sp)
 8004cb2:	740a                	ld	s0,160(sp)
 8004cb4:	614d                	addi	sp,sp,176
 8004cb6:	8082                	ret

0000000008004cb8 <emulate_fdiv>:

DECLARE_EMULATION_FUNC(emulate_fdiv)
{
 8004cb8:	7171                	addi	sp,sp,-176
 8004cba:	f506                	sd	ra,168(sp)
 8004cbc:	f122                	sd	s0,160(sp)
 8004cbe:	1900                	addi	s0,sp,176
 8004cc0:	f6a43c23          	sd	a0,-136(s0)
 8004cc4:	f6b43823          	sd	a1,-144(s0)
 8004cc8:	f6c43423          	sd	a2,-152(s0)
 8004ccc:	f6d43023          	sd	a3,-160(s0)
 8004cd0:	f4e43c23          	sd	a4,-168(s0)
  if (GET_PRECISION(insn) == PRECISION_S) {
 8004cd4:	f5843783          	ld	a5,-168(s0)
 8004cd8:	83e5                	srli	a5,a5,0x19
 8004cda:	8b8d                	andi	a5,a5,3
 8004cdc:	e3d9                	bnez	a5,8004d62 <emulate_fdiv+0xaa>
    uint32_t rs1 = GET_F32_RS1(insn, regs);
 8004cde:	f5843783          	ld	a5,-168(s0)
 8004ce2:	83b1                	srli	a5,a5,0xc
 8004ce4:	2781                	sext.w	a5,a5
 8004ce6:	0f87f793          	andi	a5,a5,248
 8004cea:	2781                	sext.w	a5,a5
 8004cec:	853e                	mv	a0,a5
 8004cee:	fffff797          	auipc	a5,0xfffff
 8004cf2:	97aa                	add	a5,a5,a0
 8004cf4:	388782e7          	jalr	t0,904(a5) # 8004076 <get_f32_reg>
 8004cf8:	fef43423          	sd	a5,-24(s0)
 8004cfc:	0005079b          	sext.w	a5,a0
 8004d00:	fef42223          	sw	a5,-28(s0)
    uint32_t rs2 = GET_F32_RS2(insn, regs);
 8004d04:	f5843783          	ld	a5,-168(s0)
 8004d08:	83c5                	srli	a5,a5,0x11
 8004d0a:	2781                	sext.w	a5,a5
 8004d0c:	0f87f793          	andi	a5,a5,248
 8004d10:	2781                	sext.w	a5,a5
 8004d12:	853e                	mv	a0,a5
 8004d14:	fffff797          	auipc	a5,0xfffff
 8004d18:	97aa                	add	a5,a5,a0
 8004d1a:	362782e7          	jalr	t0,866(a5) # 8004076 <get_f32_reg>
 8004d1e:	fcf43c23          	sd	a5,-40(s0)
 8004d22:	0005079b          	sext.w	a5,a0
 8004d26:	fcf42a23          	sw	a5,-44(s0)
    SET_F32_RD(insn, regs, f32_div(f32(rs1), f32(rs2)).v);
 8004d2a:	fe442783          	lw	a5,-28(s0)
 8004d2e:	fd442703          	lw	a4,-44(s0)
 8004d32:	85ba                	mv	a1,a4
 8004d34:	853e                	mv	a0,a5
 8004d36:	457010ef          	jal	ra,800698c <f32_div>
 8004d3a:	87aa                	mv	a5,a0
 8004d3c:	2781                	sext.w	a5,a5
 8004d3e:	853e                	mv	a0,a5
 8004d40:	f5843783          	ld	a5,-168(s0)
 8004d44:	8391                	srli	a5,a5,0x4
 8004d46:	0f87f793          	andi	a5,a5,248
 8004d4a:	fcf43423          	sd	a5,-56(s0)
 8004d4e:	fc843703          	ld	a4,-56(s0)
 8004d52:	fffff797          	auipc	a5,0xfffff
 8004d56:	97ba                	add	a5,a5,a4
 8004d58:	424782e7          	jalr	t0,1060(a5) # 8004176 <put_f32_reg>
 8004d5c:	fcf43023          	sd	a5,-64(s0)
 8004d60:	a065                	j	8004e08 <emulate_fdiv+0x150>
  } else if (GET_PRECISION(insn) == PRECISION_D) {
 8004d62:	f5843783          	ld	a5,-168(s0)
 8004d66:	83e5                	srli	a5,a5,0x19
 8004d68:	0037f713          	andi	a4,a5,3
 8004d6c:	4785                	li	a5,1
 8004d6e:	08f71163          	bne	a4,a5,8004df0 <emulate_fdiv+0x138>
    uint64_t rs1 = GET_F64_RS1(insn, regs);
 8004d72:	f5843783          	ld	a5,-168(s0)
 8004d76:	83b1                	srli	a5,a5,0xc
 8004d78:	0f87f793          	andi	a5,a5,248
 8004d7c:	853e                	mv	a0,a5
 8004d7e:	fffff797          	auipc	a5,0xfffff
 8004d82:	97aa                	add	a5,a5,a0
 8004d84:	4f8782e7          	jalr	t0,1272(a5) # 8004276 <get_f64_reg>
 8004d88:	faf43c23          	sd	a5,-72(s0)
 8004d8c:	87aa                	mv	a5,a0
 8004d8e:	faf43823          	sd	a5,-80(s0)
    uint64_t rs2 = GET_F64_RS2(insn, regs);
 8004d92:	f5843783          	ld	a5,-168(s0)
 8004d96:	83c5                	srli	a5,a5,0x11
 8004d98:	0f87f793          	andi	a5,a5,248
 8004d9c:	853e                	mv	a0,a5
 8004d9e:	fffff797          	auipc	a5,0xfffff
 8004da2:	97aa                	add	a5,a5,a0
 8004da4:	4d8782e7          	jalr	t0,1240(a5) # 8004276 <get_f64_reg>
 8004da8:	faf43423          	sd	a5,-88(s0)
 8004dac:	87aa                	mv	a5,a0
 8004dae:	faf43023          	sd	a5,-96(s0)
    SET_F64_RD(insn, regs, f64_div(f64(rs1), f64(rs2)).v);
 8004db2:	fb043783          	ld	a5,-80(s0)
 8004db6:	fa043703          	ld	a4,-96(s0)
 8004dba:	85ba                	mv	a1,a4
 8004dbc:	853e                	mv	a0,a5
 8004dbe:	291020ef          	jal	ra,800784e <f64_div>
 8004dc2:	87aa                	mv	a5,a0
 8004dc4:	f8f43423          	sd	a5,-120(s0)
 8004dc8:	f8843783          	ld	a5,-120(s0)
 8004dcc:	853e                	mv	a0,a5
 8004dce:	f5843783          	ld	a5,-168(s0)
 8004dd2:	8391                	srli	a5,a5,0x4
 8004dd4:	0f87f793          	andi	a5,a5,248
 8004dd8:	f8f43c23          	sd	a5,-104(s0)
 8004ddc:	f9843703          	ld	a4,-104(s0)
 8004de0:	fffff797          	auipc	a5,0xfffff
 8004de4:	97ba                	add	a5,a5,a4
 8004de6:	596782e7          	jalr	t0,1430(a5) # 8004376 <put_f64_reg>
 8004dea:	f8f43823          	sd	a5,-112(s0)
 8004dee:	a829                	j	8004e08 <emulate_fdiv+0x150>
  } else {
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
 8004df0:	f5843703          	ld	a4,-168(s0)
 8004df4:	f6043683          	ld	a3,-160(s0)
 8004df8:	f6843603          	ld	a2,-152(s0)
 8004dfc:	f7043583          	ld	a1,-144(s0)
 8004e00:	f7843503          	ld	a0,-136(s0)
 8004e04:	fecff0ef          	jal	ra,80045f0 <truly_illegal_insn>
  }
}
 8004e08:	70aa                	ld	ra,168(sp)
 8004e0a:	740a                	ld	s0,160(sp)
 8004e0c:	614d                	addi	sp,sp,176
 8004e0e:	8082                	ret

0000000008004e10 <emulate_fsqrt>:

DECLARE_EMULATION_FUNC(emulate_fsqrt)
{
 8004e10:	7119                	addi	sp,sp,-128
 8004e12:	fc86                	sd	ra,120(sp)
 8004e14:	f8a2                	sd	s0,112(sp)
 8004e16:	0100                	addi	s0,sp,128
 8004e18:	faa43423          	sd	a0,-88(s0)
 8004e1c:	fab43023          	sd	a1,-96(s0)
 8004e20:	f8c43c23          	sd	a2,-104(s0)
 8004e24:	f8d43823          	sd	a3,-112(s0)
 8004e28:	f8e43423          	sd	a4,-120(s0)
  if ((insn >> 20) & 0x1f)
 8004e2c:	f8843783          	ld	a5,-120(s0)
 8004e30:	83d1                	srli	a5,a5,0x14
 8004e32:	8bfd                	andi	a5,a5,31
 8004e34:	cf91                	beqz	a5,8004e50 <emulate_fsqrt+0x40>
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
 8004e36:	f8843703          	ld	a4,-120(s0)
 8004e3a:	f9043683          	ld	a3,-112(s0)
 8004e3e:	f9843603          	ld	a2,-104(s0)
 8004e42:	fa043583          	ld	a1,-96(s0)
 8004e46:	fa843503          	ld	a0,-88(s0)
 8004e4a:	fa6ff0ef          	jal	ra,80045f0 <truly_illegal_insn>
 8004e4e:	a8d9                	j	8004f24 <emulate_fsqrt+0x114>

  if (GET_PRECISION(insn) == PRECISION_S) {
 8004e50:	f8843783          	ld	a5,-120(s0)
 8004e54:	83e5                	srli	a5,a5,0x19
 8004e56:	8b8d                	andi	a5,a5,3
 8004e58:	ebb1                	bnez	a5,8004eac <emulate_fsqrt+0x9c>
    SET_F32_RD(insn, regs, f32_sqrt(f32(GET_F32_RS1(insn, regs))).v);
 8004e5a:	f8843783          	ld	a5,-120(s0)
 8004e5e:	83b1                	srli	a5,a5,0xc
 8004e60:	2781                	sext.w	a5,a5
 8004e62:	0f87f793          	andi	a5,a5,248
 8004e66:	2781                	sext.w	a5,a5
 8004e68:	853e                	mv	a0,a5
 8004e6a:	fffff797          	auipc	a5,0xfffff
 8004e6e:	97aa                	add	a5,a5,a0
 8004e70:	20c782e7          	jalr	t0,524(a5) # 8004076 <get_f32_reg>
 8004e74:	fef43423          	sd	a5,-24(s0)
 8004e78:	0005079b          	sext.w	a5,a0
 8004e7c:	2781                	sext.w	a5,a5
 8004e7e:	853e                	mv	a0,a5
 8004e80:	3da020ef          	jal	ra,800725a <f32_sqrt>
 8004e84:	87aa                	mv	a5,a0
 8004e86:	2781                	sext.w	a5,a5
 8004e88:	853e                	mv	a0,a5
 8004e8a:	f8843783          	ld	a5,-120(s0)
 8004e8e:	8391                	srli	a5,a5,0x4
 8004e90:	0f87f793          	andi	a5,a5,248
 8004e94:	fef43023          	sd	a5,-32(s0)
 8004e98:	fe043703          	ld	a4,-32(s0)
 8004e9c:	fffff797          	auipc	a5,0xfffff
 8004ea0:	97ba                	add	a5,a5,a4
 8004ea2:	2da782e7          	jalr	t0,730(a5) # 8004176 <put_f32_reg>
 8004ea6:	fcf43c23          	sd	a5,-40(s0)
 8004eaa:	a8ad                	j	8004f24 <emulate_fsqrt+0x114>
  } else if (GET_PRECISION(insn) == PRECISION_D) {
 8004eac:	f8843783          	ld	a5,-120(s0)
 8004eb0:	83e5                	srli	a5,a5,0x19
 8004eb2:	0037f713          	andi	a4,a5,3
 8004eb6:	4785                	li	a5,1
 8004eb8:	04f71a63          	bne	a4,a5,8004f0c <emulate_fsqrt+0xfc>
    SET_F64_RD(insn, regs, f64_sqrt(f64(GET_F64_RS1(insn, regs))).v);
 8004ebc:	f8843783          	ld	a5,-120(s0)
 8004ec0:	83b1                	srli	a5,a5,0xc
 8004ec2:	0f87f793          	andi	a5,a5,248
 8004ec6:	853e                	mv	a0,a5
 8004ec8:	fffff797          	auipc	a5,0xfffff
 8004ecc:	97aa                	add	a5,a5,a0
 8004ece:	3ae782e7          	jalr	t0,942(a5) # 8004276 <get_f64_reg>
 8004ed2:	fcf43823          	sd	a5,-48(s0)
 8004ed6:	87aa                	mv	a5,a0
 8004ed8:	853e                	mv	a0,a5
 8004eda:	2a4030ef          	jal	ra,800817e <f64_sqrt>
 8004ede:	87aa                	mv	a5,a0
 8004ee0:	faf43c23          	sd	a5,-72(s0)
 8004ee4:	fb843783          	ld	a5,-72(s0)
 8004ee8:	853e                	mv	a0,a5
 8004eea:	f8843783          	ld	a5,-120(s0)
 8004eee:	8391                	srli	a5,a5,0x4
 8004ef0:	0f87f793          	andi	a5,a5,248
 8004ef4:	fcf43423          	sd	a5,-56(s0)
 8004ef8:	fc843703          	ld	a4,-56(s0)
 8004efc:	fffff797          	auipc	a5,0xfffff
 8004f00:	97ba                	add	a5,a5,a4
 8004f02:	47a782e7          	jalr	t0,1146(a5) # 8004376 <put_f64_reg>
 8004f06:	fcf43023          	sd	a5,-64(s0)
 8004f0a:	a829                	j	8004f24 <emulate_fsqrt+0x114>
  } else {
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
 8004f0c:	f8843703          	ld	a4,-120(s0)
 8004f10:	f9043683          	ld	a3,-112(s0)
 8004f14:	f9843603          	ld	a2,-104(s0)
 8004f18:	fa043583          	ld	a1,-96(s0)
 8004f1c:	fa843503          	ld	a0,-88(s0)
 8004f20:	ed0ff0ef          	jal	ra,80045f0 <truly_illegal_insn>
  }
}
 8004f24:	70e6                	ld	ra,120(sp)
 8004f26:	7446                	ld	s0,112(sp)
 8004f28:	6109                	addi	sp,sp,128
 8004f2a:	8082                	ret

0000000008004f2c <emulate_fsgnj>:

DECLARE_EMULATION_FUNC(emulate_fsgnj)
{
 8004f2c:	7155                	addi	sp,sp,-208
 8004f2e:	e586                	sd	ra,200(sp)
 8004f30:	e1a2                	sd	s0,192(sp)
 8004f32:	0980                	addi	s0,sp,208
 8004f34:	f4a43c23          	sd	a0,-168(s0)
 8004f38:	f4b43823          	sd	a1,-176(s0)
 8004f3c:	f4c43423          	sd	a2,-184(s0)
 8004f40:	f4d43023          	sd	a3,-192(s0)
 8004f44:	f2e43c23          	sd	a4,-200(s0)
  int rm = GET_RM(insn);
 8004f48:	f3843783          	ld	a5,-200(s0)
 8004f4c:	83b1                	srli	a5,a5,0xc
 8004f4e:	2781                	sext.w	a5,a5
 8004f50:	8b9d                	andi	a5,a5,7
 8004f52:	fef42623          	sw	a5,-20(s0)
  if (rm >= 3)
 8004f56:	fec42783          	lw	a5,-20(s0)
 8004f5a:	0007871b          	sext.w	a4,a5
 8004f5e:	4789                	li	a5,2
 8004f60:	00e7df63          	ble	a4,a5,8004f7e <emulate_fsgnj+0x52>
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
 8004f64:	f3843703          	ld	a4,-200(s0)
 8004f68:	f4043683          	ld	a3,-192(s0)
 8004f6c:	f4843603          	ld	a2,-184(s0)
 8004f70:	f5043583          	ld	a1,-176(s0)
 8004f74:	f5843503          	ld	a0,-168(s0)
 8004f78:	e78ff0ef          	jal	ra,80045f0 <truly_illegal_insn>
 8004f7c:	a2e1                	j	8005144 <emulate_fsgnj+0x218>
    typeof(rs1) rs2_sign = (rs2) >> (8*sizeof(rs1)-1); \
    rs1_sign &= (rm) >> 1; \
    rs1_sign ^= (rm) ^ rs2_sign; \
    ((rs1) << 1 >> 1) | (rs1_sign << (8*sizeof(rs1)-1)); })

  if (GET_PRECISION(insn) == PRECISION_S) {
 8004f7e:	f3843783          	ld	a5,-200(s0)
 8004f82:	83e5                	srli	a5,a5,0x19
 8004f84:	8b8d                	andi	a5,a5,3
 8004f86:	efe9                	bnez	a5,8005060 <emulate_fsgnj+0x134>
    uint32_t rs1 = GET_F32_RS1(insn, regs);
 8004f88:	f3843783          	ld	a5,-200(s0)
 8004f8c:	83b1                	srli	a5,a5,0xc
 8004f8e:	2781                	sext.w	a5,a5
 8004f90:	0f87f793          	andi	a5,a5,248
 8004f94:	2781                	sext.w	a5,a5
 8004f96:	853e                	mv	a0,a5
 8004f98:	fffff797          	auipc	a5,0xfffff
 8004f9c:	97aa                	add	a5,a5,a0
 8004f9e:	0de782e7          	jalr	t0,222(a5) # 8004076 <get_f32_reg>
 8004fa2:	fef43023          	sd	a5,-32(s0)
 8004fa6:	0005079b          	sext.w	a5,a0
 8004faa:	fcf42e23          	sw	a5,-36(s0)
    uint32_t rs2 = GET_F32_RS2(insn, regs);
 8004fae:	f3843783          	ld	a5,-200(s0)
 8004fb2:	83c5                	srli	a5,a5,0x11
 8004fb4:	2781                	sext.w	a5,a5
 8004fb6:	0f87f793          	andi	a5,a5,248
 8004fba:	2781                	sext.w	a5,a5
 8004fbc:	853e                	mv	a0,a5
 8004fbe:	fffff797          	auipc	a5,0xfffff
 8004fc2:	97aa                	add	a5,a5,a0
 8004fc4:	0b8782e7          	jalr	t0,184(a5) # 8004076 <get_f32_reg>
 8004fc8:	fcf43823          	sd	a5,-48(s0)
 8004fcc:	0005079b          	sext.w	a5,a0
 8004fd0:	fcf42623          	sw	a5,-52(s0)
    SET_F32_RD(insn, regs, DO_FSGNJ(rs1, rs2, rm));
 8004fd4:	fdc42783          	lw	a5,-36(s0)
 8004fd8:	01f7d79b          	srliw	a5,a5,0x1f
 8004fdc:	fcf42423          	sw	a5,-56(s0)
 8004fe0:	fcc42783          	lw	a5,-52(s0)
 8004fe4:	01f7d79b          	srliw	a5,a5,0x1f
 8004fe8:	fcf42223          	sw	a5,-60(s0)
 8004fec:	fec42783          	lw	a5,-20(s0)
 8004ff0:	4017d79b          	sraiw	a5,a5,0x1
 8004ff4:	2781                	sext.w	a5,a5
 8004ff6:	0007871b          	sext.w	a4,a5
 8004ffa:	fc842783          	lw	a5,-56(s0)
 8004ffe:	8ff9                	and	a5,a5,a4
 8005000:	fcf42423          	sw	a5,-56(s0)
 8005004:	fec42703          	lw	a4,-20(s0)
 8005008:	fc442783          	lw	a5,-60(s0)
 800500c:	8fb9                	xor	a5,a5,a4
 800500e:	0007871b          	sext.w	a4,a5
 8005012:	fc842783          	lw	a5,-56(s0)
 8005016:	8fb9                	xor	a5,a5,a4
 8005018:	fcf42423          	sw	a5,-56(s0)
 800501c:	fdc42703          	lw	a4,-36(s0)
 8005020:	800007b7          	lui	a5,0x80000
 8005024:	fff7c793          	not	a5,a5
 8005028:	8ff9                	and	a5,a5,a4
 800502a:	0007871b          	sext.w	a4,a5
 800502e:	fc842783          	lw	a5,-56(s0)
 8005032:	01f7979b          	slliw	a5,a5,0x1f
 8005036:	2781                	sext.w	a5,a5
 8005038:	8fd9                	or	a5,a5,a4
 800503a:	2781                	sext.w	a5,a5
 800503c:	853e                	mv	a0,a5
 800503e:	f3843783          	ld	a5,-200(s0)
 8005042:	8391                	srli	a5,a5,0x4
 8005044:	0f87f793          	andi	a5,a5,248
 8005048:	faf43c23          	sd	a5,-72(s0)
 800504c:	fb843703          	ld	a4,-72(s0)
 8005050:	fffff797          	auipc	a5,0xfffff
 8005054:	97ba                	add	a5,a5,a4
 8005056:	126782e7          	jalr	t0,294(a5) # 8004176 <put_f32_reg>
 800505a:	faf43823          	sd	a5,-80(s0)
 800505e:	a0dd                	j	8005144 <emulate_fsgnj+0x218>
  } else if (GET_PRECISION(insn) == PRECISION_D) {
 8005060:	f3843783          	ld	a5,-200(s0)
 8005064:	83e5                	srli	a5,a5,0x19
 8005066:	0037f713          	andi	a4,a5,3
 800506a:	4785                	li	a5,1
 800506c:	0cf71063          	bne	a4,a5,800512c <emulate_fsgnj+0x200>
    uint64_t rs1 = GET_F64_RS1(insn, regs);
 8005070:	f3843783          	ld	a5,-200(s0)
 8005074:	83b1                	srli	a5,a5,0xc
 8005076:	0f87f793          	andi	a5,a5,248
 800507a:	853e                	mv	a0,a5
 800507c:	fffff797          	auipc	a5,0xfffff
 8005080:	97aa                	add	a5,a5,a0
 8005082:	1fa782e7          	jalr	t0,506(a5) # 8004276 <get_f64_reg>
 8005086:	faf43423          	sd	a5,-88(s0)
 800508a:	87aa                	mv	a5,a0
 800508c:	faf43023          	sd	a5,-96(s0)
    uint64_t rs2 = GET_F64_RS2(insn, regs);
 8005090:	f3843783          	ld	a5,-200(s0)
 8005094:	83c5                	srli	a5,a5,0x11
 8005096:	0f87f793          	andi	a5,a5,248
 800509a:	853e                	mv	a0,a5
 800509c:	fffff797          	auipc	a5,0xfffff
 80050a0:	97aa                	add	a5,a5,a0
 80050a2:	1da782e7          	jalr	t0,474(a5) # 8004276 <get_f64_reg>
 80050a6:	f8f43c23          	sd	a5,-104(s0)
 80050aa:	87aa                	mv	a5,a0
 80050ac:	f8f43823          	sd	a5,-112(s0)
    SET_F64_RD(insn, regs, DO_FSGNJ(rs1, rs2, rm));
 80050b0:	fa043783          	ld	a5,-96(s0)
 80050b4:	93fd                	srli	a5,a5,0x3f
 80050b6:	f8f43423          	sd	a5,-120(s0)
 80050ba:	f9043783          	ld	a5,-112(s0)
 80050be:	93fd                	srli	a5,a5,0x3f
 80050c0:	f8f43023          	sd	a5,-128(s0)
 80050c4:	fec42783          	lw	a5,-20(s0)
 80050c8:	4017d79b          	sraiw	a5,a5,0x1
 80050cc:	2781                	sext.w	a5,a5
 80050ce:	873e                	mv	a4,a5
 80050d0:	f8843783          	ld	a5,-120(s0)
 80050d4:	8ff9                	and	a5,a5,a4
 80050d6:	f8f43423          	sd	a5,-120(s0)
 80050da:	fec42703          	lw	a4,-20(s0)
 80050de:	f8043783          	ld	a5,-128(s0)
 80050e2:	8fb9                	xor	a5,a5,a4
 80050e4:	f8843703          	ld	a4,-120(s0)
 80050e8:	8fb9                	xor	a5,a5,a4
 80050ea:	f8f43423          	sd	a5,-120(s0)
 80050ee:	fa043703          	ld	a4,-96(s0)
 80050f2:	57fd                	li	a5,-1
 80050f4:	8385                	srli	a5,a5,0x1
 80050f6:	8f7d                	and	a4,a4,a5
 80050f8:	f8843783          	ld	a5,-120(s0)
 80050fc:	17fe                	slli	a5,a5,0x3f
 80050fe:	8fd9                	or	a5,a5,a4
 8005100:	f6f43423          	sd	a5,-152(s0)
 8005104:	f6843783          	ld	a5,-152(s0)
 8005108:	853e                	mv	a0,a5
 800510a:	f3843783          	ld	a5,-200(s0)
 800510e:	8391                	srli	a5,a5,0x4
 8005110:	0f87f793          	andi	a5,a5,248
 8005114:	f6f43c23          	sd	a5,-136(s0)
 8005118:	f7843703          	ld	a4,-136(s0)
 800511c:	fffff797          	auipc	a5,0xfffff
 8005120:	97ba                	add	a5,a5,a4
 8005122:	25a782e7          	jalr	t0,602(a5) # 8004376 <put_f64_reg>
 8005126:	f6f43823          	sd	a5,-144(s0)
 800512a:	a829                	j	8005144 <emulate_fsgnj+0x218>
  } else {
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
 800512c:	f3843703          	ld	a4,-200(s0)
 8005130:	f4043683          	ld	a3,-192(s0)
 8005134:	f4843603          	ld	a2,-184(s0)
 8005138:	f5043583          	ld	a1,-176(s0)
 800513c:	f5843503          	ld	a0,-168(s0)
 8005140:	cb0ff0ef          	jal	ra,80045f0 <truly_illegal_insn>
  }
}
 8005144:	60ae                	ld	ra,200(sp)
 8005146:	640e                	ld	s0,192(sp)
 8005148:	6169                	addi	sp,sp,208
 800514a:	8082                	ret

000000000800514c <emulate_fmin>:

DECLARE_EMULATION_FUNC(emulate_fmin)
{
 800514c:	7155                	addi	sp,sp,-208
 800514e:	e586                	sd	ra,200(sp)
 8005150:	e1a2                	sd	s0,192(sp)
 8005152:	0980                	addi	s0,sp,208
 8005154:	f4a43c23          	sd	a0,-168(s0)
 8005158:	f4b43823          	sd	a1,-176(s0)
 800515c:	f4c43423          	sd	a2,-184(s0)
 8005160:	f4d43023          	sd	a3,-192(s0)
 8005164:	f2e43c23          	sd	a4,-200(s0)
  int rm = GET_RM(insn);
 8005168:	f3843783          	ld	a5,-200(s0)
 800516c:	83b1                	srli	a5,a5,0xc
 800516e:	2781                	sext.w	a5,a5
 8005170:	8b9d                	andi	a5,a5,7
 8005172:	fef42623          	sw	a5,-20(s0)
  if (rm >= 2)
 8005176:	fec42783          	lw	a5,-20(s0)
 800517a:	0007871b          	sext.w	a4,a5
 800517e:	4785                	li	a5,1
 8005180:	00e7df63          	ble	a4,a5,800519e <emulate_fmin+0x52>
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
 8005184:	f3843703          	ld	a4,-200(s0)
 8005188:	f4043683          	ld	a3,-192(s0)
 800518c:	f4843603          	ld	a2,-184(s0)
 8005190:	f5043583          	ld	a1,-176(s0)
 8005194:	f5843503          	ld	a0,-168(s0)
 8005198:	c58ff0ef          	jal	ra,80045f0 <truly_illegal_insn>
 800519c:	a431                	j	80053a8 <emulate_fmin+0x25c>

  if (GET_PRECISION(insn) == PRECISION_S) {
 800519e:	f3843783          	ld	a5,-200(s0)
 80051a2:	83e5                	srli	a5,a5,0x19
 80051a4:	8b8d                	andi	a5,a5,3
 80051a6:	ebf5                	bnez	a5,800529a <emulate_fmin+0x14e>
    uint32_t rs1 = GET_F32_RS1(insn, regs);
 80051a8:	f3843783          	ld	a5,-200(s0)
 80051ac:	83b1                	srli	a5,a5,0xc
 80051ae:	2781                	sext.w	a5,a5
 80051b0:	0f87f793          	andi	a5,a5,248
 80051b4:	2781                	sext.w	a5,a5
 80051b6:	853e                	mv	a0,a5
 80051b8:	fffff797          	auipc	a5,0xfffff
 80051bc:	97aa                	add	a5,a5,a0
 80051be:	ebe782e7          	jalr	t0,-322(a5) # 8004076 <get_f32_reg>
 80051c2:	fef43023          	sd	a5,-32(s0)
 80051c6:	0005079b          	sext.w	a5,a0
 80051ca:	fcf42e23          	sw	a5,-36(s0)
    uint32_t rs2 = GET_F32_RS2(insn, regs);
 80051ce:	f3843783          	ld	a5,-200(s0)
 80051d2:	83c5                	srli	a5,a5,0x11
 80051d4:	2781                	sext.w	a5,a5
 80051d6:	0f87f793          	andi	a5,a5,248
 80051da:	2781                	sext.w	a5,a5
 80051dc:	853e                	mv	a0,a5
 80051de:	fffff797          	auipc	a5,0xfffff
 80051e2:	97aa                	add	a5,a5,a0
 80051e4:	e98782e7          	jalr	t0,-360(a5) # 8004076 <get_f32_reg>
 80051e8:	fcf43823          	sd	a5,-48(s0)
 80051ec:	0005079b          	sext.w	a5,a0
 80051f0:	fcf42623          	sw	a5,-52(s0)
    uint32_t arg1 = rm ? rs2 : rs1;
 80051f4:	fec42783          	lw	a5,-20(s0)
 80051f8:	2781                	sext.w	a5,a5
 80051fa:	c781                	beqz	a5,8005202 <emulate_fmin+0xb6>
 80051fc:	fcc42783          	lw	a5,-52(s0)
 8005200:	a019                	j	8005206 <emulate_fmin+0xba>
 8005202:	fdc42783          	lw	a5,-36(s0)
 8005206:	fcf42423          	sw	a5,-56(s0)
    uint32_t arg2 = rm ? rs1 : rs2;
 800520a:	fec42783          	lw	a5,-20(s0)
 800520e:	2781                	sext.w	a5,a5
 8005210:	c781                	beqz	a5,8005218 <emulate_fmin+0xcc>
 8005212:	fdc42783          	lw	a5,-36(s0)
 8005216:	a019                	j	800521c <emulate_fmin+0xd0>
 8005218:	fcc42783          	lw	a5,-52(s0)
 800521c:	fcf42223          	sw	a5,-60(s0)
    int use_rs1 = f32_lt_quiet(f32(arg1), f32(arg2)) || isNaNF32UI(rs2);
 8005220:	fc842783          	lw	a5,-56(s0)
 8005224:	fc442703          	lw	a4,-60(s0)
 8005228:	85ba                	mv	a1,a4
 800522a:	853e                	mv	a0,a5
 800522c:	45f010ef          	jal	ra,8006e8a <f32_lt_quiet>
 8005230:	87aa                	mv	a5,a0
 8005232:	e785                	bnez	a5,800525a <emulate_fmin+0x10e>
 8005234:	fcc42783          	lw	a5,-52(s0)
 8005238:	fff7c793          	not	a5,a5
 800523c:	2781                	sext.w	a5,a5
 800523e:	873e                	mv	a4,a5
 8005240:	7f8007b7          	lui	a5,0x7f800
 8005244:	8ff9                	and	a5,a5,a4
 8005246:	2781                	sext.w	a5,a5
 8005248:	eb99                	bnez	a5,800525e <emulate_fmin+0x112>
 800524a:	fcc42703          	lw	a4,-52(s0)
 800524e:	008007b7          	lui	a5,0x800
 8005252:	17fd                	addi	a5,a5,-1
 8005254:	8ff9                	and	a5,a5,a4
 8005256:	2781                	sext.w	a5,a5
 8005258:	c399                	beqz	a5,800525e <emulate_fmin+0x112>
 800525a:	4785                	li	a5,1
 800525c:	a011                	j	8005260 <emulate_fmin+0x114>
 800525e:	4781                	li	a5,0
 8005260:	fcf42023          	sw	a5,-64(s0)
    SET_F32_RD(insn, regs, use_rs1 ? rs1 : rs2);
 8005264:	fc042783          	lw	a5,-64(s0)
 8005268:	2781                	sext.w	a5,a5
 800526a:	c781                	beqz	a5,8005272 <emulate_fmin+0x126>
 800526c:	fdc42783          	lw	a5,-36(s0)
 8005270:	a019                	j	8005276 <emulate_fmin+0x12a>
 8005272:	fcc42783          	lw	a5,-52(s0)
 8005276:	853e                	mv	a0,a5
 8005278:	f3843783          	ld	a5,-200(s0)
 800527c:	8391                	srli	a5,a5,0x4
 800527e:	0f87f793          	andi	a5,a5,248
 8005282:	faf43c23          	sd	a5,-72(s0)
 8005286:	fb843703          	ld	a4,-72(s0)
 800528a:	fffff797          	auipc	a5,0xfffff
 800528e:	97ba                	add	a5,a5,a4
 8005290:	eec782e7          	jalr	t0,-276(a5) # 8004176 <put_f32_reg>
 8005294:	faf43823          	sd	a5,-80(s0)
 8005298:	aa01                	j	80053a8 <emulate_fmin+0x25c>
  } else if (GET_PRECISION(insn) == PRECISION_D) {
 800529a:	f3843783          	ld	a5,-200(s0)
 800529e:	83e5                	srli	a5,a5,0x19
 80052a0:	0037f713          	andi	a4,a5,3
 80052a4:	4785                	li	a5,1
 80052a6:	0ef71563          	bne	a4,a5,8005390 <emulate_fmin+0x244>
    uint64_t rs1 = GET_F64_RS1(insn, regs);
 80052aa:	f3843783          	ld	a5,-200(s0)
 80052ae:	83b1                	srli	a5,a5,0xc
 80052b0:	0f87f793          	andi	a5,a5,248
 80052b4:	853e                	mv	a0,a5
 80052b6:	fffff797          	auipc	a5,0xfffff
 80052ba:	97aa                	add	a5,a5,a0
 80052bc:	fc0782e7          	jalr	t0,-64(a5) # 8004276 <get_f64_reg>
 80052c0:	faf43423          	sd	a5,-88(s0)
 80052c4:	87aa                	mv	a5,a0
 80052c6:	faf43023          	sd	a5,-96(s0)
    uint64_t rs2 = GET_F64_RS2(insn, regs);
 80052ca:	f3843783          	ld	a5,-200(s0)
 80052ce:	83c5                	srli	a5,a5,0x11
 80052d0:	0f87f793          	andi	a5,a5,248
 80052d4:	853e                	mv	a0,a5
 80052d6:	fffff797          	auipc	a5,0xfffff
 80052da:	97aa                	add	a5,a5,a0
 80052dc:	fa0782e7          	jalr	t0,-96(a5) # 8004276 <get_f64_reg>
 80052e0:	f8f43c23          	sd	a5,-104(s0)
 80052e4:	87aa                	mv	a5,a0
 80052e6:	f8f43823          	sd	a5,-112(s0)
    uint64_t arg1 = rm ? rs2 : rs1;
 80052ea:	fec42783          	lw	a5,-20(s0)
 80052ee:	2781                	sext.w	a5,a5
 80052f0:	c781                	beqz	a5,80052f8 <emulate_fmin+0x1ac>
 80052f2:	f9043783          	ld	a5,-112(s0)
 80052f6:	a019                	j	80052fc <emulate_fmin+0x1b0>
 80052f8:	fa043783          	ld	a5,-96(s0)
 80052fc:	f8f43423          	sd	a5,-120(s0)
    uint64_t arg2 = rm ? rs1 : rs2;
 8005300:	fec42783          	lw	a5,-20(s0)
 8005304:	2781                	sext.w	a5,a5
 8005306:	c781                	beqz	a5,800530e <emulate_fmin+0x1c2>
 8005308:	fa043783          	ld	a5,-96(s0)
 800530c:	a019                	j	8005312 <emulate_fmin+0x1c6>
 800530e:	f9043783          	ld	a5,-112(s0)
 8005312:	f8f43023          	sd	a5,-128(s0)
    int use_rs1 = f64_lt_quiet(f64(arg1), f64(arg2)) || isNaNF64UI(rs2);
 8005316:	f8843783          	ld	a5,-120(s0)
 800531a:	f8043703          	ld	a4,-128(s0)
 800531e:	85ba                	mv	a1,a4
 8005320:	853e                	mv	a0,a5
 8005322:	29f020ef          	jal	ra,8007dc0 <f64_lt_quiet>
 8005326:	87aa                	mv	a5,a0
 8005328:	e385                	bnez	a5,8005348 <emulate_fmin+0x1fc>
 800532a:	f9043783          	ld	a5,-112(s0)
 800532e:	fff7c713          	not	a4,a5
 8005332:	7ff00793          	li	a5,2047
 8005336:	17d2                	slli	a5,a5,0x34
 8005338:	8ff9                	and	a5,a5,a4
 800533a:	eb89                	bnez	a5,800534c <emulate_fmin+0x200>
 800533c:	f9043703          	ld	a4,-112(s0)
 8005340:	57fd                	li	a5,-1
 8005342:	83b1                	srli	a5,a5,0xc
 8005344:	8ff9                	and	a5,a5,a4
 8005346:	c399                	beqz	a5,800534c <emulate_fmin+0x200>
 8005348:	4785                	li	a5,1
 800534a:	a011                	j	800534e <emulate_fmin+0x202>
 800534c:	4781                	li	a5,0
 800534e:	f6f42e23          	sw	a5,-132(s0)
    SET_F64_RD(insn, regs, use_rs1 ? rs1 : rs2);
 8005352:	f7c42783          	lw	a5,-132(s0)
 8005356:	2781                	sext.w	a5,a5
 8005358:	c781                	beqz	a5,8005360 <emulate_fmin+0x214>
 800535a:	fa043783          	ld	a5,-96(s0)
 800535e:	a019                	j	8005364 <emulate_fmin+0x218>
 8005360:	f9043783          	ld	a5,-112(s0)
 8005364:	f6f43023          	sd	a5,-160(s0)
 8005368:	f6043783          	ld	a5,-160(s0)
 800536c:	853e                	mv	a0,a5
 800536e:	f3843783          	ld	a5,-200(s0)
 8005372:	8391                	srli	a5,a5,0x4
 8005374:	0f87f793          	andi	a5,a5,248
 8005378:	f6f43823          	sd	a5,-144(s0)
 800537c:	f7043703          	ld	a4,-144(s0)
 8005380:	fffff797          	auipc	a5,0xfffff
 8005384:	97ba                	add	a5,a5,a4
 8005386:	ff6782e7          	jalr	t0,-10(a5) # 8004376 <put_f64_reg>
 800538a:	f6f43423          	sd	a5,-152(s0)
 800538e:	a829                	j	80053a8 <emulate_fmin+0x25c>
  } else {
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
 8005390:	f3843703          	ld	a4,-200(s0)
 8005394:	f4043683          	ld	a3,-192(s0)
 8005398:	f4843603          	ld	a2,-184(s0)
 800539c:	f5043583          	ld	a1,-176(s0)
 80053a0:	f5843503          	ld	a0,-168(s0)
 80053a4:	a4cff0ef          	jal	ra,80045f0 <truly_illegal_insn>
  }
}
 80053a8:	60ae                	ld	ra,200(sp)
 80053aa:	640e                	ld	s0,192(sp)
 80053ac:	6169                	addi	sp,sp,208
 80053ae:	8082                	ret

00000000080053b0 <emulate_fcvt_ff>:

DECLARE_EMULATION_FUNC(emulate_fcvt_ff)
{
 80053b0:	7119                	addi	sp,sp,-128
 80053b2:	fc86                	sd	ra,120(sp)
 80053b4:	f8a2                	sd	s0,112(sp)
 80053b6:	0100                	addi	s0,sp,128
 80053b8:	faa43423          	sd	a0,-88(s0)
 80053bc:	fab43023          	sd	a1,-96(s0)
 80053c0:	f8c43c23          	sd	a2,-104(s0)
 80053c4:	f8d43823          	sd	a3,-112(s0)
 80053c8:	f8e43423          	sd	a4,-120(s0)
  int rs2_num = (insn >> 20) & 0x1f;
 80053cc:	f8843783          	ld	a5,-120(s0)
 80053d0:	83d1                	srli	a5,a5,0x14
 80053d2:	2781                	sext.w	a5,a5
 80053d4:	8bfd                	andi	a5,a5,31
 80053d6:	fef42623          	sw	a5,-20(s0)
  if (GET_PRECISION(insn) == PRECISION_S) {
 80053da:	f8843783          	ld	a5,-120(s0)
 80053de:	83e5                	srli	a5,a5,0x19
 80053e0:	8b8d                	andi	a5,a5,3
 80053e2:	ebb5                	bnez	a5,8005456 <emulate_fcvt_ff+0xa6>
    if (rs2_num != 1)
 80053e4:	fec42783          	lw	a5,-20(s0)
 80053e8:	0007871b          	sext.w	a4,a5
 80053ec:	4785                	li	a5,1
 80053ee:	00f70f63          	beq	a4,a5,800540c <emulate_fcvt_ff+0x5c>
      return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
 80053f2:	f8843703          	ld	a4,-120(s0)
 80053f6:	f9043683          	ld	a3,-112(s0)
 80053fa:	f9843603          	ld	a2,-104(s0)
 80053fe:	fa043583          	ld	a1,-96(s0)
 8005402:	fa843503          	ld	a0,-88(s0)
 8005406:	9eaff0ef          	jal	ra,80045f0 <truly_illegal_insn>
 800540a:	a0fd                	j	80054f8 <emulate_fcvt_ff+0x148>
    SET_F32_RD(insn, regs, f64_to_f32(f64(GET_F64_RS1(insn, regs))).v);
 800540c:	f8843783          	ld	a5,-120(s0)
 8005410:	83b1                	srli	a5,a5,0xc
 8005412:	0f87f793          	andi	a5,a5,248
 8005416:	853e                	mv	a0,a5
 8005418:	fffff797          	auipc	a5,0xfffff
 800541c:	97aa                	add	a5,a5,a0
 800541e:	e5e782e7          	jalr	t0,-418(a5) # 8004276 <get_f64_reg>
 8005422:	fef43023          	sd	a5,-32(s0)
 8005426:	87aa                	mv	a5,a0
 8005428:	853e                	mv	a0,a5
 800542a:	79b020ef          	jal	ra,80083c4 <f64_to_f32>
 800542e:	87aa                	mv	a5,a0
 8005430:	2781                	sext.w	a5,a5
 8005432:	853e                	mv	a0,a5
 8005434:	f8843783          	ld	a5,-120(s0)
 8005438:	8391                	srli	a5,a5,0x4
 800543a:	0f87f793          	andi	a5,a5,248
 800543e:	fcf43c23          	sd	a5,-40(s0)
 8005442:	fd843703          	ld	a4,-40(s0)
 8005446:	fffff797          	auipc	a5,0xfffff
 800544a:	97ba                	add	a5,a5,a4
 800544c:	d30782e7          	jalr	t0,-720(a5) # 8004176 <put_f32_reg>
 8005450:	fcf43823          	sd	a5,-48(s0)
 8005454:	a055                	j	80054f8 <emulate_fcvt_ff+0x148>
  } else if (GET_PRECISION(insn) == PRECISION_D) {
 8005456:	f8843783          	ld	a5,-120(s0)
 800545a:	83e5                	srli	a5,a5,0x19
 800545c:	0037f713          	andi	a4,a5,3
 8005460:	4785                	li	a5,1
 8005462:	06f71f63          	bne	a4,a5,80054e0 <emulate_fcvt_ff+0x130>
    if (rs2_num != 0)
 8005466:	fec42783          	lw	a5,-20(s0)
 800546a:	2781                	sext.w	a5,a5
 800546c:	cf91                	beqz	a5,8005488 <emulate_fcvt_ff+0xd8>
      return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
 800546e:	f8843703          	ld	a4,-120(s0)
 8005472:	f9043683          	ld	a3,-112(s0)
 8005476:	f9843603          	ld	a2,-104(s0)
 800547a:	fa043583          	ld	a1,-96(s0)
 800547e:	fa843503          	ld	a0,-88(s0)
 8005482:	96eff0ef          	jal	ra,80045f0 <truly_illegal_insn>
 8005486:	a88d                	j	80054f8 <emulate_fcvt_ff+0x148>
    SET_F64_RD(insn, regs, f32_to_f64(f32(GET_F32_RS1(insn, regs))).v);
 8005488:	f8843783          	ld	a5,-120(s0)
 800548c:	83b1                	srli	a5,a5,0xc
 800548e:	2781                	sext.w	a5,a5
 8005490:	0f87f793          	andi	a5,a5,248
 8005494:	2781                	sext.w	a5,a5
 8005496:	853e                	mv	a0,a5
 8005498:	fffff797          	auipc	a5,0xfffff
 800549c:	97aa                	add	a5,a5,a0
 800549e:	bde782e7          	jalr	t0,-1058(a5) # 8004076 <get_f32_reg>
 80054a2:	fcf43423          	sd	a5,-56(s0)
 80054a6:	0005079b          	sext.w	a5,a0
 80054aa:	2781                	sext.w	a5,a5
 80054ac:	853e                	mv	a0,a5
 80054ae:	795010ef          	jal	ra,8007442 <f32_to_f64>
 80054b2:	87aa                	mv	a5,a0
 80054b4:	faf43823          	sd	a5,-80(s0)
 80054b8:	fb043783          	ld	a5,-80(s0)
 80054bc:	853e                	mv	a0,a5
 80054be:	f8843783          	ld	a5,-120(s0)
 80054c2:	8391                	srli	a5,a5,0x4
 80054c4:	0f87f793          	andi	a5,a5,248
 80054c8:	fcf43023          	sd	a5,-64(s0)
 80054cc:	fc043703          	ld	a4,-64(s0)
 80054d0:	fffff797          	auipc	a5,0xfffff
 80054d4:	97ba                	add	a5,a5,a4
 80054d6:	ea6782e7          	jalr	t0,-346(a5) # 8004376 <put_f64_reg>
 80054da:	faf43c23          	sd	a5,-72(s0)
 80054de:	a829                	j	80054f8 <emulate_fcvt_ff+0x148>
  } else {
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
 80054e0:	f8843703          	ld	a4,-120(s0)
 80054e4:	f9043683          	ld	a3,-112(s0)
 80054e8:	f9843603          	ld	a2,-104(s0)
 80054ec:	fa043583          	ld	a1,-96(s0)
 80054f0:	fa843503          	ld	a0,-88(s0)
 80054f4:	8fcff0ef          	jal	ra,80045f0 <truly_illegal_insn>
  }
}
 80054f8:	70e6                	ld	ra,120(sp)
 80054fa:	7446                	ld	s0,112(sp)
 80054fc:	6109                	addi	sp,sp,128
 80054fe:	8082                	ret

0000000008005500 <emulate_fcvt_fi>:

DECLARE_EMULATION_FUNC(emulate_fcvt_fi)
{
 8005500:	7175                	addi	sp,sp,-144
 8005502:	e506                	sd	ra,136(sp)
 8005504:	e122                	sd	s0,128(sp)
 8005506:	0900                	addi	s0,sp,144
 8005508:	f8a43c23          	sd	a0,-104(s0)
 800550c:	f8b43823          	sd	a1,-112(s0)
 8005510:	f8c43423          	sd	a2,-120(s0)
 8005514:	f8d43023          	sd	a3,-128(s0)
 8005518:	f6e43c23          	sd	a4,-136(s0)
  if (GET_PRECISION(insn) != PRECISION_S && GET_PRECISION(insn) != PRECISION_D)
 800551c:	f7843783          	ld	a5,-136(s0)
 8005520:	83e5                	srli	a5,a5,0x19
 8005522:	8b8d                	andi	a5,a5,3
 8005524:	c795                	beqz	a5,8005550 <emulate_fcvt_fi+0x50>
 8005526:	f7843783          	ld	a5,-136(s0)
 800552a:	83e5                	srli	a5,a5,0x19
 800552c:	0037f713          	andi	a4,a5,3
 8005530:	4785                	li	a5,1
 8005532:	00f70f63          	beq	a4,a5,8005550 <emulate_fcvt_fi+0x50>
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
 8005536:	f7843703          	ld	a4,-136(s0)
 800553a:	f8043683          	ld	a3,-128(s0)
 800553e:	f8843603          	ld	a2,-120(s0)
 8005542:	f9043583          	ld	a1,-112(s0)
 8005546:	f9843503          	ld	a0,-104(s0)
 800554a:	8a6ff0ef          	jal	ra,80045f0 <truly_illegal_insn>
 800554e:	a29d                	j	80056b4 <emulate_fcvt_fi+0x1b4>

  int negative = 0;
 8005550:	fe042623          	sw	zero,-20(s0)
  uint64_t uint_val = GET_RS1(insn, regs);
 8005554:	0f800793          	li	a5,248
 8005558:	fcf42a23          	sw	a5,-44(s0)
 800555c:	f7843783          	ld	a5,-136(s0)
 8005560:	00c7d713          	srli	a4,a5,0xc
 8005564:	fd442783          	lw	a5,-44(s0)
 8005568:	8f7d                	and	a4,a4,a5
 800556a:	f9843783          	ld	a5,-104(s0)
 800556e:	97ba                	add	a5,a5,a4
 8005570:	639c                	ld	a5,0(a5)
 8005572:	fef43023          	sd	a5,-32(s0)

  switch ((insn >> 20) & 0x1f)
 8005576:	f7843783          	ld	a5,-136(s0)
 800557a:	83d1                	srli	a5,a5,0x14
 800557c:	8bfd                	andi	a5,a5,31
 800557e:	4705                	li	a4,1
 8005580:	04e78863          	beq	a5,a4,80055d0 <emulate_fcvt_fi+0xd0>
 8005584:	cb81                	beqz	a5,8005594 <emulate_fcvt_fi+0x94>
 8005586:	4709                	li	a4,2
 8005588:	04e78c63          	beq	a5,a4,80055e0 <emulate_fcvt_fi+0xe0>
 800558c:	470d                	li	a4,3
 800558e:	08e78b63          	beq	a5,a4,8005624 <emulate_fcvt_fi+0x124>
 8005592:	a8a5                	j	800560a <emulate_fcvt_fi+0x10a>
  {
    case 0: // int32
      negative = (int32_t)uint_val < 0;
 8005594:	fe043783          	ld	a5,-32(s0)
 8005598:	2781                	sext.w	a5,a5
 800559a:	01f7d79b          	srliw	a5,a5,0x1f
 800559e:	0ff7f793          	andi	a5,a5,255
 80055a2:	fef42623          	sw	a5,-20(s0)
      uint_val = (uint32_t)(negative ? -uint_val : uint_val);
 80055a6:	fec42783          	lw	a5,-20(s0)
 80055aa:	2781                	sext.w	a5,a5
 80055ac:	cb91                	beqz	a5,80055c0 <emulate_fcvt_fi+0xc0>
 80055ae:	fe043783          	ld	a5,-32(s0)
 80055b2:	2781                	sext.w	a5,a5
 80055b4:	40f007bb          	negw	a5,a5
 80055b8:	2781                	sext.w	a5,a5
 80055ba:	1782                	slli	a5,a5,0x20
 80055bc:	9381                	srli	a5,a5,0x20
 80055be:	a031                	j	80055ca <emulate_fcvt_fi+0xca>
 80055c0:	fe043783          	ld	a5,-32(s0)
 80055c4:	2781                	sext.w	a5,a5
 80055c6:	1782                	slli	a5,a5,0x20
 80055c8:	9381                	srli	a5,a5,0x20
 80055ca:	fef43023          	sd	a5,-32(s0)
      break;
 80055ce:	a8a1                	j	8005626 <emulate_fcvt_fi+0x126>
    case 1: // uint32
      uint_val = (uint32_t)uint_val;
 80055d0:	fe043783          	ld	a5,-32(s0)
 80055d4:	2781                	sext.w	a5,a5
 80055d6:	1782                	slli	a5,a5,0x20
 80055d8:	9381                	srli	a5,a5,0x20
 80055da:	fef43023          	sd	a5,-32(s0)
      break;
 80055de:	a0a1                	j	8005626 <emulate_fcvt_fi+0x126>
#if __riscv_xlen == 64
    case 2: // int64
      negative = (int64_t)uint_val < 0;
 80055e0:	fe043783          	ld	a5,-32(s0)
 80055e4:	93fd                	srli	a5,a5,0x3f
 80055e6:	0ff7f793          	andi	a5,a5,255
 80055ea:	fef42623          	sw	a5,-20(s0)
      uint_val = negative ? -uint_val : uint_val;
 80055ee:	fec42783          	lw	a5,-20(s0)
 80055f2:	2781                	sext.w	a5,a5
 80055f4:	c791                	beqz	a5,8005600 <emulate_fcvt_fi+0x100>
 80055f6:	fe043783          	ld	a5,-32(s0)
 80055fa:	40f007b3          	neg	a5,a5
 80055fe:	a019                	j	8005604 <emulate_fcvt_fi+0x104>
 8005600:	fe043783          	ld	a5,-32(s0)
 8005604:	fef43023          	sd	a5,-32(s0)
    case 3: // uint64
      break;
 8005608:	a831                	j	8005624 <emulate_fcvt_fi+0x124>
#endif
    default:
      return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
 800560a:	f7843703          	ld	a4,-136(s0)
 800560e:	f8043683          	ld	a3,-128(s0)
 8005612:	f8843603          	ld	a2,-120(s0)
 8005616:	f9043583          	ld	a1,-112(s0)
 800561a:	f9843503          	ld	a0,-104(s0)
 800561e:	fd3fe0ef          	jal	ra,80045f0 <truly_illegal_insn>
 8005622:	a849                	j	80056b4 <emulate_fcvt_fi+0x1b4>
      break;
 8005624:	0001                	nop
  }

  uint64_t float64 = ui64_to_f64(uint_val).v;
 8005626:	fe043503          	ld	a0,-32(s0)
 800562a:	41f050ef          	jal	ra,800b248 <ui64_to_f64>
 800562e:	87aa                	mv	a5,a0
 8005630:	fcf43c23          	sd	a5,-40(s0)
  if (negative)
 8005634:	fec42783          	lw	a5,-20(s0)
 8005638:	2781                	sext.w	a5,a5
 800563a:	cb81                	beqz	a5,800564a <emulate_fcvt_fi+0x14a>
    float64 ^= INT64_MIN;
 800563c:	fd843703          	ld	a4,-40(s0)
 8005640:	57fd                	li	a5,-1
 8005642:	17fe                	slli	a5,a5,0x3f
 8005644:	8fb9                	xor	a5,a5,a4
 8005646:	fcf43c23          	sd	a5,-40(s0)

  if (GET_PRECISION(insn) == PRECISION_S)
 800564a:	f7843783          	ld	a5,-136(s0)
 800564e:	83e5                	srli	a5,a5,0x19
 8005650:	8b8d                	andi	a5,a5,3
 8005652:	eb95                	bnez	a5,8005686 <emulate_fcvt_fi+0x186>
    SET_F32_RD(insn, regs, f64_to_f32(f64(float64)).v);
 8005654:	fd843783          	ld	a5,-40(s0)
 8005658:	853e                	mv	a0,a5
 800565a:	56b020ef          	jal	ra,80083c4 <f64_to_f32>
 800565e:	87aa                	mv	a5,a0
 8005660:	2781                	sext.w	a5,a5
 8005662:	853e                	mv	a0,a5
 8005664:	f7843783          	ld	a5,-136(s0)
 8005668:	8391                	srli	a5,a5,0x4
 800566a:	0f87f793          	andi	a5,a5,248
 800566e:	fcf43423          	sd	a5,-56(s0)
 8005672:	fc843703          	ld	a4,-56(s0)
 8005676:	fffff797          	auipc	a5,0xfffff
 800567a:	97ba                	add	a5,a5,a4
 800567c:	b00782e7          	jalr	t0,-1280(a5) # 8004176 <put_f32_reg>
 8005680:	fcf43023          	sd	a5,-64(s0)
 8005684:	a805                	j	80056b4 <emulate_fcvt_fi+0x1b4>
  else
    SET_F64_RD(insn, regs, float64);
 8005686:	fd843783          	ld	a5,-40(s0)
 800568a:	faf43423          	sd	a5,-88(s0)
 800568e:	fa843783          	ld	a5,-88(s0)
 8005692:	853e                	mv	a0,a5
 8005694:	f7843783          	ld	a5,-136(s0)
 8005698:	8391                	srli	a5,a5,0x4
 800569a:	0f87f793          	andi	a5,a5,248
 800569e:	faf43c23          	sd	a5,-72(s0)
 80056a2:	fb843703          	ld	a4,-72(s0)
 80056a6:	fffff797          	auipc	a5,0xfffff
 80056aa:	97ba                	add	a5,a5,a4
 80056ac:	cd0782e7          	jalr	t0,-816(a5) # 8004376 <put_f64_reg>
 80056b0:	faf43823          	sd	a5,-80(s0)
}
 80056b4:	60aa                	ld	ra,136(sp)
 80056b6:	640a                	ld	s0,128(sp)
 80056b8:	6149                	addi	sp,sp,144
 80056ba:	8082                	ret

00000000080056bc <emulate_fcvt_if>:

DECLARE_EMULATION_FUNC(emulate_fcvt_if)
{
 80056bc:	7135                	addi	sp,sp,-160
 80056be:	ed06                	sd	ra,152(sp)
 80056c0:	e922                	sd	s0,144(sp)
 80056c2:	1100                	addi	s0,sp,160
 80056c4:	f8a43423          	sd	a0,-120(s0)
 80056c8:	f8b43023          	sd	a1,-128(s0)
 80056cc:	f6c43c23          	sd	a2,-136(s0)
 80056d0:	f6d43823          	sd	a3,-144(s0)
 80056d4:	f6e43423          	sd	a4,-152(s0)
  int rs2_num = (insn >> 20) & 0x1f;
 80056d8:	f6843783          	ld	a5,-152(s0)
 80056dc:	83d1                	srli	a5,a5,0x14
 80056de:	2781                	sext.w	a5,a5
 80056e0:	8bfd                	andi	a5,a5,31
 80056e2:	fcf42223          	sw	a5,-60(s0)
#if __riscv_xlen == 64
  if (rs2_num >= 4)
 80056e6:	fc442783          	lw	a5,-60(s0)
 80056ea:	0007871b          	sext.w	a4,a5
 80056ee:	478d                	li	a5,3
 80056f0:	00e7df63          	ble	a4,a5,800570e <emulate_fcvt_if+0x52>
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
 80056f4:	f6843703          	ld	a4,-152(s0)
 80056f8:	f7043683          	ld	a3,-144(s0)
 80056fc:	f7843603          	ld	a2,-136(s0)
 8005700:	f8043583          	ld	a1,-128(s0)
 8005704:	f8843503          	ld	a0,-120(s0)
 8005708:	ee9fe0ef          	jal	ra,80045f0 <truly_illegal_insn>
 800570c:	ac25                	j	8005944 <emulate_fcvt_if+0x288>
  if (rs2_num >= 2)
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
#endif

  int64_t float64;
  if (GET_PRECISION(insn) == PRECISION_S)
 800570e:	f6843783          	ld	a5,-152(s0)
 8005712:	83e5                	srli	a5,a5,0x19
 8005714:	8b8d                	andi	a5,a5,3
 8005716:	eb95                	bnez	a5,800574a <emulate_fcvt_if+0x8e>
    float64 = f32_to_f64(f32(GET_F32_RS1(insn, regs))).v;
 8005718:	f6843783          	ld	a5,-152(s0)
 800571c:	83b1                	srli	a5,a5,0xc
 800571e:	2781                	sext.w	a5,a5
 8005720:	0f87f793          	andi	a5,a5,248
 8005724:	2781                	sext.w	a5,a5
 8005726:	853e                	mv	a0,a5
 8005728:	fffff797          	auipc	a5,0xfffff
 800572c:	97aa                	add	a5,a5,a0
 800572e:	94e782e7          	jalr	t0,-1714(a5) # 8004076 <get_f32_reg>
 8005732:	faf43c23          	sd	a5,-72(s0)
 8005736:	0005079b          	sext.w	a5,a0
 800573a:	2781                	sext.w	a5,a5
 800573c:	853e                	mv	a0,a5
 800573e:	505010ef          	jal	ra,8007442 <f32_to_f64>
 8005742:	87aa                	mv	a5,a0
 8005744:	fef43423          	sd	a5,-24(s0)
 8005748:	a0b9                	j	8005796 <emulate_fcvt_if+0xda>
  else if (GET_PRECISION(insn) == PRECISION_D)
 800574a:	f6843783          	ld	a5,-152(s0)
 800574e:	83e5                	srli	a5,a5,0x19
 8005750:	0037f713          	andi	a4,a5,3
 8005754:	4785                	li	a5,1
 8005756:	02f71363          	bne	a4,a5,800577c <emulate_fcvt_if+0xc0>
    float64 = GET_F64_RS1(insn, regs);
 800575a:	f6843783          	ld	a5,-152(s0)
 800575e:	83b1                	srli	a5,a5,0xc
 8005760:	0f87f793          	andi	a5,a5,248
 8005764:	853e                	mv	a0,a5
 8005766:	fffff797          	auipc	a5,0xfffff
 800576a:	97aa                	add	a5,a5,a0
 800576c:	b10782e7          	jalr	t0,-1264(a5) # 8004276 <get_f64_reg>
 8005770:	faf43823          	sd	a5,-80(s0)
 8005774:	87aa                	mv	a5,a0
 8005776:	fef43423          	sd	a5,-24(s0)
 800577a:	a831                	j	8005796 <emulate_fcvt_if+0xda>
  else
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
 800577c:	f6843703          	ld	a4,-152(s0)
 8005780:	f7043683          	ld	a3,-144(s0)
 8005784:	f7843603          	ld	a2,-136(s0)
 8005788:	f8043583          	ld	a1,-128(s0)
 800578c:	f8843503          	ld	a0,-120(s0)
 8005790:	e61fe0ef          	jal	ra,80045f0 <truly_illegal_insn>
 8005794:	aa45                	j	8005944 <emulate_fcvt_if+0x288>

  int negative = 0;
 8005796:	fe042223          	sw	zero,-28(s0)
  if (float64 < 0) {
 800579a:	fe843783          	ld	a5,-24(s0)
 800579e:	0007dc63          	bgez	a5,80057b6 <emulate_fcvt_if+0xfa>
    negative = 1;
 80057a2:	4785                	li	a5,1
 80057a4:	fef42223          	sw	a5,-28(s0)
    float64 ^= INT64_MIN;
 80057a8:	fe843703          	ld	a4,-24(s0)
 80057ac:	57fd                	li	a5,-1
 80057ae:	17fe                	slli	a5,a5,0x3f
 80057b0:	8fb9                	xor	a5,a5,a4
 80057b2:	fef43423          	sd	a5,-24(s0)
  }
  uint64_t uint_val = f64_to_ui64(f64(float64), softfloat_roundingMode, true);
 80057b6:	fe843783          	ld	a5,-24(s0)
 80057ba:	873e                	mv	a4,a5
 80057bc:	8792                	mv	a5,tp
 80057be:	0ff7f793          	andi	a5,a5,255
 80057c2:	4605                	li	a2,1
 80057c4:	85be                	mv	a1,a5
 80057c6:	853a                	mv	a0,a4
 80057c8:	4fb020ef          	jal	ra,80084c2 <f64_to_ui64>
 80057cc:	faa43423          	sd	a0,-88(s0)
 80057d0:	fc442783          	lw	a5,-60(s0)
 80057d4:	0007871b          	sext.w	a4,a5
 80057d8:	4785                	li	a5,1
 80057da:	08f70363          	beq	a4,a5,8005860 <emulate_fcvt_if+0x1a4>
 80057de:	fc442783          	lw	a5,-60(s0)
 80057e2:	0007871b          	sext.w	a4,a5
 80057e6:	4785                	li	a5,1
 80057e8:	00e7c763          	blt	a5,a4,80057f6 <emulate_fcvt_if+0x13a>
 80057ec:	fc442783          	lw	a5,-60(s0)
 80057f0:	2781                	sext.w	a5,a5
 80057f2:	c38d                	beqz	a5,8005814 <emulate_fcvt_if+0x158>
 80057f4:	aa01                	j	8005904 <emulate_fcvt_if+0x248>
 80057f6:	fc442783          	lw	a5,-60(s0)
 80057fa:	0007871b          	sext.w	a4,a5
 80057fe:	4789                	li	a5,2
 8005800:	08f70b63          	beq	a4,a5,8005896 <emulate_fcvt_if+0x1da>
 8005804:	fc442783          	lw	a5,-60(s0)
 8005808:	0007871b          	sext.w	a4,a5
 800580c:	478d                	li	a5,3
 800580e:	0cf70463          	beq	a4,a5,80058d6 <emulate_fcvt_if+0x21a>
 8005812:	a8cd                	j	8005904 <emulate_fcvt_if+0x248>
  uint64_t result, limit, limit_result;

  switch (rs2_num)
  {
    case 0: // int32
      if (negative) {
 8005814:	fe442783          	lw	a5,-28(s0)
 8005818:	2781                	sext.w	a5,a5
 800581a:	c39d                	beqz	a5,8005840 <emulate_fcvt_if+0x184>
        result = (int32_t)-uint_val;
 800581c:	fa843783          	ld	a5,-88(s0)
 8005820:	2781                	sext.w	a5,a5
 8005822:	40f007bb          	negw	a5,a5
 8005826:	2781                	sext.w	a5,a5
 8005828:	2781                	sext.w	a5,a5
 800582a:	fcf43c23          	sd	a5,-40(s0)
        limit_result = limit = (uint32_t)INT32_MIN;
 800582e:	4785                	li	a5,1
 8005830:	07fe                	slli	a5,a5,0x1f
 8005832:	fcf43823          	sd	a5,-48(s0)
 8005836:	fd043783          	ld	a5,-48(s0)
 800583a:	fcf43423          	sd	a5,-56(s0)
      } else {
        result = (int32_t)uint_val;
        limit_result = limit = INT32_MAX;
      }
      break;
 800583e:	a0d9                	j	8005904 <emulate_fcvt_if+0x248>
        result = (int32_t)uint_val;
 8005840:	fa843783          	ld	a5,-88(s0)
 8005844:	2781                	sext.w	a5,a5
 8005846:	fcf43c23          	sd	a5,-40(s0)
        limit_result = limit = INT32_MAX;
 800584a:	800007b7          	lui	a5,0x80000
 800584e:	fff7c793          	not	a5,a5
 8005852:	fcf43823          	sd	a5,-48(s0)
 8005856:	fd043783          	ld	a5,-48(s0)
 800585a:	fcf43423          	sd	a5,-56(s0)
      break;
 800585e:	a05d                	j	8005904 <emulate_fcvt_if+0x248>

    case 1: // uint32
      limit = limit_result = UINT32_MAX;
 8005860:	57fd                	li	a5,-1
 8005862:	9381                	srli	a5,a5,0x20
 8005864:	fcf43423          	sd	a5,-56(s0)
 8005868:	fc843783          	ld	a5,-56(s0)
 800586c:	fcf43823          	sd	a5,-48(s0)
      if (negative)
 8005870:	fe442783          	lw	a5,-28(s0)
 8005874:	2781                	sext.w	a5,a5
 8005876:	cb81                	beqz	a5,8005886 <emulate_fcvt_if+0x1ca>
        result = limit = 0;
 8005878:	fc043823          	sd	zero,-48(s0)
 800587c:	fd043783          	ld	a5,-48(s0)
 8005880:	fcf43c23          	sd	a5,-40(s0)
      else
        result = (uint32_t)uint_val;
      break;
 8005884:	a041                	j	8005904 <emulate_fcvt_if+0x248>
        result = (uint32_t)uint_val;
 8005886:	fa843783          	ld	a5,-88(s0)
 800588a:	2781                	sext.w	a5,a5
 800588c:	1782                	slli	a5,a5,0x20
 800588e:	9381                	srli	a5,a5,0x20
 8005890:	fcf43c23          	sd	a5,-40(s0)
      break;
 8005894:	a885                	j	8005904 <emulate_fcvt_if+0x248>

    case 2: // int32
      if (negative) {
 8005896:	fe442783          	lw	a5,-28(s0)
 800589a:	2781                	sext.w	a5,a5
 800589c:	c385                	beqz	a5,80058bc <emulate_fcvt_if+0x200>
        result = (int64_t)-uint_val;
 800589e:	fa843783          	ld	a5,-88(s0)
 80058a2:	40f007b3          	neg	a5,a5
 80058a6:	fcf43c23          	sd	a5,-40(s0)
        limit_result = limit = (uint64_t)INT64_MIN;
 80058aa:	57fd                	li	a5,-1
 80058ac:	17fe                	slli	a5,a5,0x3f
 80058ae:	fcf43823          	sd	a5,-48(s0)
 80058b2:	fd043783          	ld	a5,-48(s0)
 80058b6:	fcf43423          	sd	a5,-56(s0)
      } else {
        result = (int64_t)uint_val;
        limit_result = limit = INT64_MAX;
      }
      break;
 80058ba:	a0a9                	j	8005904 <emulate_fcvt_if+0x248>
        result = (int64_t)uint_val;
 80058bc:	fa843783          	ld	a5,-88(s0)
 80058c0:	fcf43c23          	sd	a5,-40(s0)
        limit_result = limit = INT64_MAX;
 80058c4:	57fd                	li	a5,-1
 80058c6:	8385                	srli	a5,a5,0x1
 80058c8:	fcf43823          	sd	a5,-48(s0)
 80058cc:	fd043783          	ld	a5,-48(s0)
 80058d0:	fcf43423          	sd	a5,-56(s0)
      break;
 80058d4:	a805                	j	8005904 <emulate_fcvt_if+0x248>

    case 3: // uint64
      limit = limit_result = UINT64_MAX;
 80058d6:	57fd                	li	a5,-1
 80058d8:	fcf43423          	sd	a5,-56(s0)
 80058dc:	fc843783          	ld	a5,-56(s0)
 80058e0:	fcf43823          	sd	a5,-48(s0)
      if (negative)
 80058e4:	fe442783          	lw	a5,-28(s0)
 80058e8:	2781                	sext.w	a5,a5
 80058ea:	cb81                	beqz	a5,80058fa <emulate_fcvt_if+0x23e>
        result = limit = 0;
 80058ec:	fc043823          	sd	zero,-48(s0)
 80058f0:	fd043783          	ld	a5,-48(s0)
 80058f4:	fcf43c23          	sd	a5,-40(s0)
      else
        result = (uint64_t)uint_val;
      break;
 80058f8:	a031                	j	8005904 <emulate_fcvt_if+0x248>
        result = (uint64_t)uint_val;
 80058fa:	fa843783          	ld	a5,-88(s0)
 80058fe:	fcf43c23          	sd	a5,-40(s0)
      break;
 8005902:	a009                	j	8005904 <emulate_fcvt_if+0x248>

    default:
      __builtin_unreachable();
  }

  if (uint_val > limit) {
 8005904:	fa843703          	ld	a4,-88(s0)
 8005908:	fd043783          	ld	a5,-48(s0)
 800590c:	00e7fa63          	bleu	a4,a5,8005920 <emulate_fcvt_if+0x264>
    result = limit_result;
 8005910:	fc843783          	ld	a5,-56(s0)
 8005914:	fcf43c23          	sd	a5,-40(s0)
    softfloat_raiseFlags(softfloat_flag_invalid);
 8005918:	001867f3          	csrrsi	a5,fflags,16
 800591c:	faf43023          	sd	a5,-96(s0)
  }

  SET_FS_DIRTY();
  SET_RD(insn, regs, result);
 8005920:	0f800793          	li	a5,248
 8005924:	f8f42e23          	sw	a5,-100(s0)
 8005928:	f6843783          	ld	a5,-152(s0)
 800592c:	0047d713          	srli	a4,a5,0x4
 8005930:	f9c42783          	lw	a5,-100(s0)
 8005934:	8f7d                	and	a4,a4,a5
 8005936:	f8843783          	ld	a5,-120(s0)
 800593a:	97ba                	add	a5,a5,a4
 800593c:	873e                	mv	a4,a5
 800593e:	fd843783          	ld	a5,-40(s0)
 8005942:	e31c                	sd	a5,0(a4)
}
 8005944:	60ea                	ld	ra,152(sp)
 8005946:	644a                	ld	s0,144(sp)
 8005948:	610d                	addi	sp,sp,160
 800594a:	8082                	ret

000000000800594c <emulate_fcmp>:

DECLARE_EMULATION_FUNC(emulate_fcmp)
{
 800594c:	7135                	addi	sp,sp,-160
 800594e:	ed06                	sd	ra,152(sp)
 8005950:	e922                	sd	s0,144(sp)
 8005952:	1100                	addi	s0,sp,160
 8005954:	f8a43423          	sd	a0,-120(s0)
 8005958:	f8b43023          	sd	a1,-128(s0)
 800595c:	f6c43c23          	sd	a2,-136(s0)
 8005960:	f6d43823          	sd	a3,-144(s0)
 8005964:	f6e43423          	sd	a4,-152(s0)
  int rm = GET_RM(insn);
 8005968:	f6843783          	ld	a5,-152(s0)
 800596c:	83b1                	srli	a5,a5,0xc
 800596e:	2781                	sext.w	a5,a5
 8005970:	8b9d                	andi	a5,a5,7
 8005972:	fef42223          	sw	a5,-28(s0)
  if (rm >= 3)
 8005976:	fe442783          	lw	a5,-28(s0)
 800597a:	0007871b          	sext.w	a4,a5
 800597e:	4789                	li	a5,2
 8005980:	00e7df63          	ble	a4,a5,800599e <emulate_fcmp+0x52>
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
 8005984:	f6843703          	ld	a4,-152(s0)
 8005988:	f7043683          	ld	a3,-144(s0)
 800598c:	f7843603          	ld	a2,-136(s0)
 8005990:	f8043583          	ld	a1,-128(s0)
 8005994:	f8843503          	ld	a0,-120(s0)
 8005998:	c59fe0ef          	jal	ra,80045f0 <truly_illegal_insn>
 800599c:	aa71                	j	8005b38 <emulate_fcmp+0x1ec>

  uintptr_t result;
  if (GET_PRECISION(insn) == PRECISION_S) {
 800599e:	f6843783          	ld	a5,-152(s0)
 80059a2:	83e5                	srli	a5,a5,0x19
 80059a4:	8b8d                	andi	a5,a5,3
 80059a6:	e3dd                	bnez	a5,8005a4c <emulate_fcmp+0x100>
    uint32_t rs1 = GET_F32_RS1(insn, regs);
 80059a8:	f6843783          	ld	a5,-152(s0)
 80059ac:	83b1                	srli	a5,a5,0xc
 80059ae:	2781                	sext.w	a5,a5
 80059b0:	0f87f793          	andi	a5,a5,248
 80059b4:	2781                	sext.w	a5,a5
 80059b6:	853e                	mv	a0,a5
 80059b8:	ffffe797          	auipc	a5,0xffffe
 80059bc:	97aa                	add	a5,a5,a0
 80059be:	6be782e7          	jalr	t0,1726(a5) # 8004076 <get_f32_reg>
 80059c2:	fcf43c23          	sd	a5,-40(s0)
 80059c6:	0005079b          	sext.w	a5,a0
 80059ca:	fcf42a23          	sw	a5,-44(s0)
    uint32_t rs2 = GET_F32_RS2(insn, regs);
 80059ce:	f6843783          	ld	a5,-152(s0)
 80059d2:	83c5                	srli	a5,a5,0x11
 80059d4:	2781                	sext.w	a5,a5
 80059d6:	0f87f793          	andi	a5,a5,248
 80059da:	2781                	sext.w	a5,a5
 80059dc:	853e                	mv	a0,a5
 80059de:	ffffe797          	auipc	a5,0xffffe
 80059e2:	97aa                	add	a5,a5,a0
 80059e4:	698782e7          	jalr	t0,1688(a5) # 8004076 <get_f32_reg>
 80059e8:	fcf43423          	sd	a5,-56(s0)
 80059ec:	0005079b          	sext.w	a5,a0
 80059f0:	fcf42223          	sw	a5,-60(s0)
    if (rm != 1)
 80059f4:	fe442783          	lw	a5,-28(s0)
 80059f8:	0007871b          	sext.w	a4,a5
 80059fc:	4785                	li	a5,1
 80059fe:	00f70d63          	beq	a4,a5,8005a18 <emulate_fcmp+0xcc>
      result = f32_eq(f32(rs1), f32(rs2));
 8005a02:	fd442783          	lw	a5,-44(s0)
 8005a06:	fc442703          	lw	a4,-60(s0)
 8005a0a:	85ba                	mv	a1,a4
 8005a0c:	853e                	mv	a0,a5
 8005a0e:	264010ef          	jal	ra,8006c72 <f32_eq>
 8005a12:	87aa                	mv	a5,a0
 8005a14:	fef43423          	sd	a5,-24(s0)
    if (rm == 1 || (rm == 0 && !result))
 8005a18:	fe442783          	lw	a5,-28(s0)
 8005a1c:	0007871b          	sext.w	a4,a5
 8005a20:	4785                	li	a5,1
 8005a22:	00f70963          	beq	a4,a5,8005a34 <emulate_fcmp+0xe8>
 8005a26:	fe442783          	lw	a5,-28(s0)
 8005a2a:	2781                	sext.w	a5,a5
 8005a2c:	e3ed                	bnez	a5,8005b0e <emulate_fcmp+0x1c2>
 8005a2e:	fe843783          	ld	a5,-24(s0)
 8005a32:	eff1                	bnez	a5,8005b0e <emulate_fcmp+0x1c2>
      result = f32_lt(f32(rs1), f32(rs2));
 8005a34:	fd442783          	lw	a5,-44(s0)
 8005a38:	fc442703          	lw	a4,-60(s0)
 8005a3c:	85ba                	mv	a1,a4
 8005a3e:	853e                	mv	a0,a5
 8005a40:	32a010ef          	jal	ra,8006d6a <f32_lt>
 8005a44:	87aa                	mv	a5,a0
 8005a46:	fef43423          	sd	a5,-24(s0)
    goto success;
 8005a4a:	a0d1                	j	8005b0e <emulate_fcmp+0x1c2>
  } else if (GET_PRECISION(insn) == PRECISION_D) {
 8005a4c:	f6843783          	ld	a5,-152(s0)
 8005a50:	83e5                	srli	a5,a5,0x19
 8005a52:	0037f713          	andi	a4,a5,3
 8005a56:	4785                	li	a5,1
 8005a58:	08f71e63          	bne	a4,a5,8005af4 <emulate_fcmp+0x1a8>
    uint64_t rs1 = GET_F64_RS1(insn, regs);
 8005a5c:	f6843783          	ld	a5,-152(s0)
 8005a60:	83b1                	srli	a5,a5,0xc
 8005a62:	0f87f793          	andi	a5,a5,248
 8005a66:	853e                	mv	a0,a5
 8005a68:	fffff797          	auipc	a5,0xfffff
 8005a6c:	97aa                	add	a5,a5,a0
 8005a6e:	80e782e7          	jalr	t0,-2034(a5) # 8004276 <get_f64_reg>
 8005a72:	faf43c23          	sd	a5,-72(s0)
 8005a76:	87aa                	mv	a5,a0
 8005a78:	faf43823          	sd	a5,-80(s0)
    uint64_t rs2 = GET_F64_RS2(insn, regs);
 8005a7c:	f6843783          	ld	a5,-152(s0)
 8005a80:	83c5                	srli	a5,a5,0x11
 8005a82:	0f87f793          	andi	a5,a5,248
 8005a86:	853e                	mv	a0,a5
 8005a88:	ffffe797          	auipc	a5,0xffffe
 8005a8c:	97aa                	add	a5,a5,a0
 8005a8e:	7ee782e7          	jalr	t0,2030(a5) # 8004276 <get_f64_reg>
 8005a92:	faf43423          	sd	a5,-88(s0)
 8005a96:	87aa                	mv	a5,a0
 8005a98:	faf43023          	sd	a5,-96(s0)
    if (rm != 1)
 8005a9c:	fe442783          	lw	a5,-28(s0)
 8005aa0:	0007871b          	sext.w	a4,a5
 8005aa4:	4785                	li	a5,1
 8005aa6:	00f70d63          	beq	a4,a5,8005ac0 <emulate_fcmp+0x174>
      result = f64_eq(f64(rs1), f64(rs2));
 8005aaa:	fb043783          	ld	a5,-80(s0)
 8005aae:	fa043703          	ld	a4,-96(s0)
 8005ab2:	85ba                	mv	a1,a4
 8005ab4:	853e                	mv	a0,a5
 8005ab6:	116020ef          	jal	ra,8007bcc <f64_eq>
 8005aba:	87aa                	mv	a5,a0
 8005abc:	fef43423          	sd	a5,-24(s0)
    if (rm == 1 || (rm == 0 && !result))
 8005ac0:	fe442783          	lw	a5,-28(s0)
 8005ac4:	0007871b          	sext.w	a4,a5
 8005ac8:	4785                	li	a5,1
 8005aca:	00f70963          	beq	a4,a5,8005adc <emulate_fcmp+0x190>
 8005ace:	fe442783          	lw	a5,-28(s0)
 8005ad2:	2781                	sext.w	a5,a5
 8005ad4:	ef9d                	bnez	a5,8005b12 <emulate_fcmp+0x1c6>
 8005ad6:	fe843783          	ld	a5,-24(s0)
 8005ada:	ef85                	bnez	a5,8005b12 <emulate_fcmp+0x1c6>
      result = f64_lt(f64(rs1), f64(rs2));
 8005adc:	fb043783          	ld	a5,-80(s0)
 8005ae0:	fa043703          	ld	a4,-96(s0)
 8005ae4:	85ba                	mv	a1,a4
 8005ae6:	853e                	mv	a0,a5
 8005ae8:	1d0020ef          	jal	ra,8007cb8 <f64_lt>
 8005aec:	87aa                	mv	a5,a0
 8005aee:	fef43423          	sd	a5,-24(s0)
    goto success;
 8005af2:	a005                	j	8005b12 <emulate_fcmp+0x1c6>
  }
  return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
 8005af4:	f6843703          	ld	a4,-152(s0)
 8005af8:	f7043683          	ld	a3,-144(s0)
 8005afc:	f7843603          	ld	a2,-136(s0)
 8005b00:	f8043583          	ld	a1,-128(s0)
 8005b04:	f8843503          	ld	a0,-120(s0)
 8005b08:	ae9fe0ef          	jal	ra,80045f0 <truly_illegal_insn>
 8005b0c:	a035                	j	8005b38 <emulate_fcmp+0x1ec>
    goto success;
 8005b0e:	0001                	nop
 8005b10:	a011                	j	8005b14 <emulate_fcmp+0x1c8>
    goto success;
 8005b12:	0001                	nop
success:
  SET_FS_DIRTY();
  SET_RD(insn, regs, result);
 8005b14:	0f800793          	li	a5,248
 8005b18:	f8f42e23          	sw	a5,-100(s0)
 8005b1c:	f6843783          	ld	a5,-152(s0)
 8005b20:	0047d713          	srli	a4,a5,0x4
 8005b24:	f9c42783          	lw	a5,-100(s0)
 8005b28:	8f7d                	and	a4,a4,a5
 8005b2a:	f8843783          	ld	a5,-120(s0)
 8005b2e:	97ba                	add	a5,a5,a4
 8005b30:	873e                	mv	a4,a5
 8005b32:	fe843783          	ld	a5,-24(s0)
 8005b36:	e31c                	sd	a5,0(a4)
}
 8005b38:	60ea                	ld	ra,152(sp)
 8005b3a:	644a                	ld	s0,144(sp)
 8005b3c:	610d                	addi	sp,sp,160
 8005b3e:	8082                	ret

0000000008005b40 <emulate_fmv_if>:

DECLARE_EMULATION_FUNC(emulate_fmv_if)
{
 8005b40:	711d                	addi	sp,sp,-96
 8005b42:	ec86                	sd	ra,88(sp)
 8005b44:	e8a2                	sd	s0,80(sp)
 8005b46:	1080                	addi	s0,sp,96
 8005b48:	fca43423          	sd	a0,-56(s0)
 8005b4c:	fcb43023          	sd	a1,-64(s0)
 8005b50:	fac43c23          	sd	a2,-72(s0)
 8005b54:	fad43823          	sd	a3,-80(s0)
 8005b58:	fae43423          	sd	a4,-88(s0)
  uintptr_t result;
  if ((insn >> 20) & 0x1f)
 8005b5c:	fa843783          	ld	a5,-88(s0)
 8005b60:	83d1                	srli	a5,a5,0x14
 8005b62:	8bfd                	andi	a5,a5,31
 8005b64:	cf91                	beqz	a5,8005b80 <emulate_fmv_if+0x40>
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
 8005b66:	fa843703          	ld	a4,-88(s0)
 8005b6a:	fb043683          	ld	a3,-80(s0)
 8005b6e:	fb843603          	ld	a2,-72(s0)
 8005b72:	fc043583          	ld	a1,-64(s0)
 8005b76:	fc843503          	ld	a0,-56(s0)
 8005b7a:	a77fe0ef          	jal	ra,80045f0 <truly_illegal_insn>
 8005b7e:	aa31                	j	8005c9a <emulate_fmv_if+0x15a>

  if (GET_PRECISION(insn) == PRECISION_S) {
 8005b80:	fa843783          	ld	a5,-88(s0)
 8005b84:	83e5                	srli	a5,a5,0x19
 8005b86:	8b8d                	andi	a5,a5,3
 8005b88:	e3b5                	bnez	a5,8005bec <emulate_fmv_if+0xac>
    result = GET_F32_RS1(insn, regs);
 8005b8a:	fa843783          	ld	a5,-88(s0)
 8005b8e:	83b1                	srli	a5,a5,0xc
 8005b90:	2781                	sext.w	a5,a5
 8005b92:	0f87f793          	andi	a5,a5,248
 8005b96:	2781                	sext.w	a5,a5
 8005b98:	853e                	mv	a0,a5
 8005b9a:	ffffe797          	auipc	a5,0xffffe
 8005b9e:	97aa                	add	a5,a5,a0
 8005ba0:	4dc782e7          	jalr	t0,1244(a5) # 8004076 <get_f32_reg>
 8005ba4:	fef43023          	sd	a5,-32(s0)
 8005ba8:	0005079b          	sext.w	a5,a0
 8005bac:	fef43423          	sd	a5,-24(s0)
    switch (GET_RM(insn)) {
 8005bb0:	fa843783          	ld	a5,-88(s0)
 8005bb4:	83b1                	srli	a5,a5,0xc
 8005bb6:	8b9d                	andi	a5,a5,7
 8005bb8:	cfc5                	beqz	a5,8005c70 <emulate_fmv_if+0x130>
 8005bba:	4705                	li	a4,1
 8005bbc:	00e79b63          	bne	a5,a4,8005bd2 <emulate_fmv_if+0x92>
      case GET_RM(MATCH_FMV_X_W): break;
      case GET_RM(MATCH_FCLASS_S): result = f32_classify(f32(result)); break;
 8005bc0:	fe843783          	ld	a5,-24(s0)
 8005bc4:	2781                	sext.w	a5,a5
 8005bc6:	853e                	mv	a0,a5
 8005bc8:	183010ef          	jal	ra,800754a <f32_classify>
 8005bcc:	fea43423          	sd	a0,-24(s0)
 8005bd0:	a05d                	j	8005c76 <emulate_fmv_if+0x136>
      default: return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
 8005bd2:	fa843703          	ld	a4,-88(s0)
 8005bd6:	fb043683          	ld	a3,-80(s0)
 8005bda:	fb843603          	ld	a2,-72(s0)
 8005bde:	fc043583          	ld	a1,-64(s0)
 8005be2:	fc843503          	ld	a0,-56(s0)
 8005be6:	a0bfe0ef          	jal	ra,80045f0 <truly_illegal_insn>
 8005bea:	a845                	j	8005c9a <emulate_fmv_if+0x15a>
    }
  } else if (GET_PRECISION(insn) == PRECISION_D) {
 8005bec:	fa843783          	ld	a5,-88(s0)
 8005bf0:	83e5                	srli	a5,a5,0x19
 8005bf2:	0037f713          	andi	a4,a5,3
 8005bf6:	4785                	li	a5,1
 8005bf8:	04f71f63          	bne	a4,a5,8005c56 <emulate_fmv_if+0x116>
    result = GET_F64_RS1(insn, regs);
 8005bfc:	fa843783          	ld	a5,-88(s0)
 8005c00:	83b1                	srli	a5,a5,0xc
 8005c02:	0f87f793          	andi	a5,a5,248
 8005c06:	853e                	mv	a0,a5
 8005c08:	ffffe797          	auipc	a5,0xffffe
 8005c0c:	97aa                	add	a5,a5,a0
 8005c0e:	66e782e7          	jalr	t0,1646(a5) # 8004276 <get_f64_reg>
 8005c12:	fcf43c23          	sd	a5,-40(s0)
 8005c16:	87aa                	mv	a5,a0
 8005c18:	fef43423          	sd	a5,-24(s0)
    switch (GET_RM(insn)) {
 8005c1c:	fa843783          	ld	a5,-88(s0)
 8005c20:	83b1                	srli	a5,a5,0xc
 8005c22:	8b9d                	andi	a5,a5,7
 8005c24:	cba1                	beqz	a5,8005c74 <emulate_fmv_if+0x134>
 8005c26:	4705                	li	a4,1
 8005c28:	00e79a63          	bne	a5,a4,8005c3c <emulate_fmv_if+0xfc>
      case GET_RM(MATCH_FMV_X_D): break;
      case GET_RM(MATCH_FCLASS_D): result = f64_classify(f64(result)); break;
 8005c2c:	fe843783          	ld	a5,-24(s0)
 8005c30:	853e                	mv	a0,a5
 8005c32:	1d9020ef          	jal	ra,800860a <f64_classify>
 8005c36:	fea43423          	sd	a0,-24(s0)
 8005c3a:	a835                	j	8005c76 <emulate_fmv_if+0x136>
      default: return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
 8005c3c:	fa843703          	ld	a4,-88(s0)
 8005c40:	fb043683          	ld	a3,-80(s0)
 8005c44:	fb843603          	ld	a2,-72(s0)
 8005c48:	fc043583          	ld	a1,-64(s0)
 8005c4c:	fc843503          	ld	a0,-56(s0)
 8005c50:	9a1fe0ef          	jal	ra,80045f0 <truly_illegal_insn>
 8005c54:	a099                	j	8005c9a <emulate_fmv_if+0x15a>
    }
  } else {
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
 8005c56:	fa843703          	ld	a4,-88(s0)
 8005c5a:	fb043683          	ld	a3,-80(s0)
 8005c5e:	fb843603          	ld	a2,-72(s0)
 8005c62:	fc043583          	ld	a1,-64(s0)
 8005c66:	fc843503          	ld	a0,-56(s0)
 8005c6a:	987fe0ef          	jal	ra,80045f0 <truly_illegal_insn>
 8005c6e:	a035                	j	8005c9a <emulate_fmv_if+0x15a>
      case GET_RM(MATCH_FMV_X_W): break;
 8005c70:	0001                	nop
 8005c72:	a011                	j	8005c76 <emulate_fmv_if+0x136>
      case GET_RM(MATCH_FMV_X_D): break;
 8005c74:	0001                	nop
  }

  SET_FS_DIRTY();
  SET_RD(insn, regs, result);
 8005c76:	0f800793          	li	a5,248
 8005c7a:	fcf42a23          	sw	a5,-44(s0)
 8005c7e:	fa843783          	ld	a5,-88(s0)
 8005c82:	0047d713          	srli	a4,a5,0x4
 8005c86:	fd442783          	lw	a5,-44(s0)
 8005c8a:	8f7d                	and	a4,a4,a5
 8005c8c:	fc843783          	ld	a5,-56(s0)
 8005c90:	97ba                	add	a5,a5,a4
 8005c92:	873e                	mv	a4,a5
 8005c94:	fe843783          	ld	a5,-24(s0)
 8005c98:	e31c                	sd	a5,0(a4)
}
 8005c9a:	60e6                	ld	ra,88(sp)
 8005c9c:	6446                	ld	s0,80(sp)
 8005c9e:	6125                	addi	sp,sp,96
 8005ca0:	8082                	ret

0000000008005ca2 <emulate_fmv_fi>:

DECLARE_EMULATION_FUNC(emulate_fmv_fi)
{
 8005ca2:	7119                	addi	sp,sp,-128
 8005ca4:	fc86                	sd	ra,120(sp)
 8005ca6:	f8a2                	sd	s0,112(sp)
 8005ca8:	0100                	addi	s0,sp,128
 8005caa:	faa43423          	sd	a0,-88(s0)
 8005cae:	fab43023          	sd	a1,-96(s0)
 8005cb2:	f8c43c23          	sd	a2,-104(s0)
 8005cb6:	f8d43823          	sd	a3,-112(s0)
 8005cba:	f8e43423          	sd	a4,-120(s0)
  uintptr_t rs1 = GET_RS1(insn, regs);
 8005cbe:	0f800793          	li	a5,248
 8005cc2:	fef42623          	sw	a5,-20(s0)
 8005cc6:	f8843783          	ld	a5,-120(s0)
 8005cca:	00c7d713          	srli	a4,a5,0xc
 8005cce:	fec42783          	lw	a5,-20(s0)
 8005cd2:	8f7d                	and	a4,a4,a5
 8005cd4:	fa843783          	ld	a5,-88(s0)
 8005cd8:	97ba                	add	a5,a5,a4
 8005cda:	639c                	ld	a5,0(a5)
 8005cdc:	fef43023          	sd	a5,-32(s0)

  if ((insn & MASK_FMV_W_X) == MATCH_FMV_W_X)
 8005ce0:	f8843703          	ld	a4,-120(s0)
 8005ce4:	00007797          	auipc	a5,0x7
 8005ce8:	a8c78793          	addi	a5,a5,-1396 # 800c770 <fp_emulation_table+0x80>
 8005cec:	639c                	ld	a5,0(a5)
 8005cee:	8f7d                	and	a4,a4,a5
 8005cf0:	47bd                	li	a5,15
 8005cf2:	07f2                	slli	a5,a5,0x1c
 8005cf4:	05378793          	addi	a5,a5,83
 8005cf8:	02f71763          	bne	a4,a5,8005d26 <emulate_fmv_fi+0x84>
    SET_F32_RD(insn, regs, rs1);
 8005cfc:	fe043783          	ld	a5,-32(s0)
 8005d00:	2781                	sext.w	a5,a5
 8005d02:	853e                	mv	a0,a5
 8005d04:	f8843783          	ld	a5,-120(s0)
 8005d08:	8391                	srli	a5,a5,0x4
 8005d0a:	0f87f793          	andi	a5,a5,248
 8005d0e:	fcf43c23          	sd	a5,-40(s0)
 8005d12:	fd843703          	ld	a4,-40(s0)
 8005d16:	ffffe797          	auipc	a5,0xffffe
 8005d1a:	97ba                	add	a5,a5,a4
 8005d1c:	460782e7          	jalr	t0,1120(a5) # 8004176 <put_f32_reg>
 8005d20:	fcf43823          	sd	a5,-48(s0)
 8005d24:	a0a5                	j	8005d8c <emulate_fmv_fi+0xea>
#if __riscv_xlen == 64
  else if ((insn & MASK_FMV_D_X) == MATCH_FMV_D_X)
 8005d26:	f8843703          	ld	a4,-120(s0)
 8005d2a:	00007797          	auipc	a5,0x7
 8005d2e:	a4678793          	addi	a5,a5,-1466 # 800c770 <fp_emulation_table+0x80>
 8005d32:	639c                	ld	a5,0(a5)
 8005d34:	8f7d                	and	a4,a4,a5
 8005d36:	07900793          	li	a5,121
 8005d3a:	07e6                	slli	a5,a5,0x19
 8005d3c:	05378793          	addi	a5,a5,83
 8005d40:	02f71a63          	bne	a4,a5,8005d74 <emulate_fmv_fi+0xd2>
    SET_F64_RD(insn, regs, rs1);
 8005d44:	fe043783          	ld	a5,-32(s0)
 8005d48:	faf43c23          	sd	a5,-72(s0)
 8005d4c:	fb843783          	ld	a5,-72(s0)
 8005d50:	853e                	mv	a0,a5
 8005d52:	f8843783          	ld	a5,-120(s0)
 8005d56:	8391                	srli	a5,a5,0x4
 8005d58:	0f87f793          	andi	a5,a5,248
 8005d5c:	fcf43423          	sd	a5,-56(s0)
 8005d60:	fc843703          	ld	a4,-56(s0)
 8005d64:	ffffe797          	auipc	a5,0xffffe
 8005d68:	97ba                	add	a5,a5,a4
 8005d6a:	612782e7          	jalr	t0,1554(a5) # 8004376 <put_f64_reg>
 8005d6e:	fcf43023          	sd	a5,-64(s0)
 8005d72:	a829                	j	8005d8c <emulate_fmv_fi+0xea>
#endif
  else
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
 8005d74:	f8843703          	ld	a4,-120(s0)
 8005d78:	f9043683          	ld	a3,-112(s0)
 8005d7c:	f9843603          	ld	a2,-104(s0)
 8005d80:	fa043583          	ld	a1,-96(s0)
 8005d84:	fa843503          	ld	a0,-88(s0)
 8005d88:	869fe0ef          	jal	ra,80045f0 <truly_illegal_insn>
}
 8005d8c:	70e6                	ld	ra,120(sp)
 8005d8e:	7446                	ld	s0,112(sp)
 8005d90:	6109                	addi	sp,sp,128
 8005d92:	8082                	ret

0000000008005d94 <emulate_fmadd>:

DECLARE_EMULATION_FUNC(emulate_fmadd)
{
 8005d94:	7115                	addi	sp,sp,-224
 8005d96:	ed86                	sd	ra,216(sp)
 8005d98:	e9a2                	sd	s0,208(sp)
 8005d9a:	1180                	addi	s0,sp,224
 8005d9c:	f4a43423          	sd	a0,-184(s0)
 8005da0:	f4b43023          	sd	a1,-192(s0)
 8005da4:	f2c43c23          	sd	a2,-200(s0)
 8005da8:	f2d43823          	sd	a3,-208(s0)
 8005dac:	f2e43423          	sd	a4,-216(s0)
  // if FPU is disabled, punt back to the OS
  if (unlikely((mstatus & MSTATUS_FS) == 0))
 8005db0:	f3043703          	ld	a4,-208(s0)
 8005db4:	6799                	lui	a5,0x6
 8005db6:	8ff9                	and	a5,a5,a4
 8005db8:	0017b793          	seqz	a5,a5
 8005dbc:	0ff7f793          	andi	a5,a5,255
 8005dc0:	cf91                	beqz	a5,8005ddc <emulate_fmadd+0x48>
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
 8005dc2:	f2843703          	ld	a4,-216(s0)
 8005dc6:	f3043683          	ld	a3,-208(s0)
 8005dca:	f3843603          	ld	a2,-200(s0)
 8005dce:	f4043583          	ld	a1,-192(s0)
 8005dd2:	f4843503          	ld	a0,-184(s0)
 8005dd6:	81bfe0ef          	jal	ra,80045f0 <truly_illegal_insn>
 8005dda:	ac91                	j	800602e <emulate_fmadd+0x29a>

  bool negA = (insn >> 3) & 1;
 8005ddc:	f2843783          	ld	a5,-216(s0)
 8005de0:	838d                	srli	a5,a5,0x3
 8005de2:	8b85                	andi	a5,a5,1
 8005de4:	00f037b3          	snez	a5,a5
 8005de8:	fef407a3          	sb	a5,-17(s0)
  bool negC = (insn >> 2) & 1;
 8005dec:	f2843783          	ld	a5,-216(s0)
 8005df0:	8389                	srli	a5,a5,0x2
 8005df2:	8b85                	andi	a5,a5,1
 8005df4:	00f037b3          	snez	a5,a5
 8005df8:	fef40723          	sb	a5,-18(s0)
  SETUP_STATIC_ROUNDING(insn);
 8005dfc:	002027f3          	frrm	a5
 8005e00:	fef43023          	sd	a5,-32(s0)
 8005e04:	fe043783          	ld	a5,-32(s0)
 8005e08:	823e                	mv	tp,a5
 8005e0a:	f2843703          	ld	a4,-216(s0)
 8005e0e:	679d                	lui	a5,0x7
 8005e10:	8f7d                	and	a4,a4,a5
 8005e12:	77e5                	lui	a5,0xffff9
 8005e14:	97ba                	add	a5,a5,a4
 8005e16:	0017b793          	seqz	a5,a5
 8005e1a:	0ff7f793          	andi	a5,a5,255
 8005e1e:	eb9d                	bnez	a5,8005e54 <emulate_fmadd+0xc0>
 8005e20:	f2843783          	ld	a5,-216(s0)
 8005e24:	83b1                	srli	a5,a5,0xc
 8005e26:	0077f713          	andi	a4,a5,7
 8005e2a:	4791                	li	a5,4
 8005e2c:	00e7ff63          	bleu	a4,a5,8005e4a <emulate_fmadd+0xb6>
 8005e30:	f2843703          	ld	a4,-216(s0)
 8005e34:	f3043683          	ld	a3,-208(s0)
 8005e38:	f3843603          	ld	a2,-200(s0)
 8005e3c:	f4043583          	ld	a1,-192(s0)
 8005e40:	f4843503          	ld	a0,-184(s0)
 8005e44:	facfe0ef          	jal	ra,80045f0 <truly_illegal_insn>
 8005e48:	a2dd                	j	800602e <emulate_fmadd+0x29a>
 8005e4a:	f2843783          	ld	a5,-216(s0)
 8005e4e:	83b1                	srli	a5,a5,0xc
 8005e50:	8b9d                	andi	a5,a5,7
 8005e52:	823e                	mv	tp,a5
  if (GET_PRECISION(insn) == PRECISION_S) {
 8005e54:	f2843783          	ld	a5,-216(s0)
 8005e58:	83e5                	srli	a5,a5,0x19
 8005e5a:	8b8d                	andi	a5,a5,3
 8005e5c:	eff9                	bnez	a5,8005f3a <emulate_fmadd+0x1a6>
    uint32_t rs1 = GET_F32_RS1(insn, regs) ^ (negA ? INT32_MIN : 0);
 8005e5e:	f2843783          	ld	a5,-216(s0)
 8005e62:	83b1                	srli	a5,a5,0xc
 8005e64:	2781                	sext.w	a5,a5
 8005e66:	0f87f793          	andi	a5,a5,248
 8005e6a:	2781                	sext.w	a5,a5
 8005e6c:	853e                	mv	a0,a5
 8005e6e:	ffffe797          	auipc	a5,0xffffe
 8005e72:	97aa                	add	a5,a5,a0
 8005e74:	208782e7          	jalr	t0,520(a5) # 8004076 <get_f32_reg>
 8005e78:	fcf43c23          	sd	a5,-40(s0)
 8005e7c:	0005071b          	sext.w	a4,a0
 8005e80:	fef44783          	lbu	a5,-17(s0)
 8005e84:	0ff7f793          	andi	a5,a5,255
 8005e88:	c781                	beqz	a5,8005e90 <emulate_fmadd+0xfc>
 8005e8a:	800007b7          	lui	a5,0x80000
 8005e8e:	a011                	j	8005e92 <emulate_fmadd+0xfe>
 8005e90:	4781                	li	a5,0
 8005e92:	8fb9                	xor	a5,a5,a4
 8005e94:	2781                	sext.w	a5,a5
 8005e96:	fcf42a23          	sw	a5,-44(s0)
    uint32_t rs2 = GET_F32_RS2(insn, regs);
 8005e9a:	f2843783          	ld	a5,-216(s0)
 8005e9e:	83c5                	srli	a5,a5,0x11
 8005ea0:	2781                	sext.w	a5,a5
 8005ea2:	0f87f793          	andi	a5,a5,248
 8005ea6:	2781                	sext.w	a5,a5
 8005ea8:	853e                	mv	a0,a5
 8005eaa:	ffffe797          	auipc	a5,0xffffe
 8005eae:	97aa                	add	a5,a5,a0
 8005eb0:	1cc782e7          	jalr	t0,460(a5) # 8004076 <get_f32_reg>
 8005eb4:	fcf43423          	sd	a5,-56(s0)
 8005eb8:	0005079b          	sext.w	a5,a0
 8005ebc:	fcf42223          	sw	a5,-60(s0)
    uint32_t rs3 = GET_F32_RS3(insn, regs) ^ (negC ? INT32_MIN : 0);
 8005ec0:	f2843783          	ld	a5,-216(s0)
 8005ec4:	83e1                	srli	a5,a5,0x18
 8005ec6:	2781                	sext.w	a5,a5
 8005ec8:	0f87f793          	andi	a5,a5,248
 8005ecc:	2781                	sext.w	a5,a5
 8005ece:	853e                	mv	a0,a5
 8005ed0:	ffffe797          	auipc	a5,0xffffe
 8005ed4:	97aa                	add	a5,a5,a0
 8005ed6:	1a6782e7          	jalr	t0,422(a5) # 8004076 <get_f32_reg>
 8005eda:	faf43c23          	sd	a5,-72(s0)
 8005ede:	0005071b          	sext.w	a4,a0
 8005ee2:	fee44783          	lbu	a5,-18(s0)
 8005ee6:	0ff7f793          	andi	a5,a5,255
 8005eea:	c781                	beqz	a5,8005ef2 <emulate_fmadd+0x15e>
 8005eec:	800007b7          	lui	a5,0x80000
 8005ef0:	a011                	j	8005ef4 <emulate_fmadd+0x160>
 8005ef2:	4781                	li	a5,0
 8005ef4:	8fb9                	xor	a5,a5,a4
 8005ef6:	2781                	sext.w	a5,a5
 8005ef8:	faf42a23          	sw	a5,-76(s0)
    SET_F32_RD(insn, regs, softfloat_mulAddF32(rs1, rs2, rs3, 0).v);
 8005efc:	fd446783          	lwu	a5,-44(s0)
 8005f00:	fc446703          	lwu	a4,-60(s0)
 8005f04:	fb446603          	lwu	a2,-76(s0)
 8005f08:	4681                	li	a3,0
 8005f0a:	85ba                	mv	a1,a4
 8005f0c:	853e                	mv	a0,a5
 8005f0e:	164030ef          	jal	ra,8009072 <softfloat_mulAddF32>
 8005f12:	87aa                	mv	a5,a0
 8005f14:	2781                	sext.w	a5,a5
 8005f16:	853e                	mv	a0,a5
 8005f18:	f2843783          	ld	a5,-216(s0)
 8005f1c:	8391                	srli	a5,a5,0x4
 8005f1e:	0f87f793          	andi	a5,a5,248
 8005f22:	faf43423          	sd	a5,-88(s0)
 8005f26:	fa843703          	ld	a4,-88(s0)
 8005f2a:	ffffe797          	auipc	a5,0xffffe
 8005f2e:	97ba                	add	a5,a5,a4
 8005f30:	24c782e7          	jalr	t0,588(a5) # 8004176 <put_f32_reg>
 8005f34:	faf43023          	sd	a5,-96(s0)
 8005f38:	a8dd                	j	800602e <emulate_fmadd+0x29a>
  } else if (GET_PRECISION(insn) == PRECISION_D) {
 8005f3a:	f2843783          	ld	a5,-216(s0)
 8005f3e:	83e5                	srli	a5,a5,0x19
 8005f40:	0037f713          	andi	a4,a5,3
 8005f44:	4785                	li	a5,1
 8005f46:	0cf71863          	bne	a4,a5,8006016 <emulate_fmadd+0x282>
    uint64_t rs1 = GET_F64_RS1(insn, regs) ^ (negA ? INT64_MIN : 0);
 8005f4a:	f2843783          	ld	a5,-216(s0)
 8005f4e:	83b1                	srli	a5,a5,0xc
 8005f50:	0f87f793          	andi	a5,a5,248
 8005f54:	853e                	mv	a0,a5
 8005f56:	ffffe797          	auipc	a5,0xffffe
 8005f5a:	97aa                	add	a5,a5,a0
 8005f5c:	320782e7          	jalr	t0,800(a5) # 8004276 <get_f64_reg>
 8005f60:	f8f43c23          	sd	a5,-104(s0)
 8005f64:	87aa                	mv	a5,a0
 8005f66:	873e                	mv	a4,a5
 8005f68:	fef44783          	lbu	a5,-17(s0)
 8005f6c:	0ff7f793          	andi	a5,a5,255
 8005f70:	c781                	beqz	a5,8005f78 <emulate_fmadd+0x1e4>
 8005f72:	57fd                	li	a5,-1
 8005f74:	17fe                	slli	a5,a5,0x3f
 8005f76:	a011                	j	8005f7a <emulate_fmadd+0x1e6>
 8005f78:	4781                	li	a5,0
 8005f7a:	8fb9                	xor	a5,a5,a4
 8005f7c:	f8f43823          	sd	a5,-112(s0)
    uint64_t rs2 = GET_F64_RS2(insn, regs);
 8005f80:	f2843783          	ld	a5,-216(s0)
 8005f84:	83c5                	srli	a5,a5,0x11
 8005f86:	0f87f793          	andi	a5,a5,248
 8005f8a:	853e                	mv	a0,a5
 8005f8c:	ffffe797          	auipc	a5,0xffffe
 8005f90:	97aa                	add	a5,a5,a0
 8005f92:	2ea782e7          	jalr	t0,746(a5) # 8004276 <get_f64_reg>
 8005f96:	f8f43423          	sd	a5,-120(s0)
 8005f9a:	87aa                	mv	a5,a0
 8005f9c:	f8f43023          	sd	a5,-128(s0)
    uint64_t rs3 = GET_F64_RS3(insn, regs) ^ (negC ? INT64_MIN : 0);
 8005fa0:	f2843783          	ld	a5,-216(s0)
 8005fa4:	83e1                	srli	a5,a5,0x18
 8005fa6:	0f87f793          	andi	a5,a5,248
 8005faa:	853e                	mv	a0,a5
 8005fac:	ffffe797          	auipc	a5,0xffffe
 8005fb0:	97aa                	add	a5,a5,a0
 8005fb2:	2ca782e7          	jalr	t0,714(a5) # 8004276 <get_f64_reg>
 8005fb6:	f6f43c23          	sd	a5,-136(s0)
 8005fba:	87aa                	mv	a5,a0
 8005fbc:	873e                	mv	a4,a5
 8005fbe:	fee44783          	lbu	a5,-18(s0)
 8005fc2:	0ff7f793          	andi	a5,a5,255
 8005fc6:	c781                	beqz	a5,8005fce <emulate_fmadd+0x23a>
 8005fc8:	57fd                	li	a5,-1
 8005fca:	17fe                	slli	a5,a5,0x3f
 8005fcc:	a011                	j	8005fd0 <emulate_fmadd+0x23c>
 8005fce:	4781                	li	a5,0
 8005fd0:	8fb9                	xor	a5,a5,a4
 8005fd2:	f6f43823          	sd	a5,-144(s0)
    SET_F64_RD(insn, regs, softfloat_mulAddF64(rs1, rs2, rs3, 0).v);
 8005fd6:	4681                	li	a3,0
 8005fd8:	f7043603          	ld	a2,-144(s0)
 8005fdc:	f8043583          	ld	a1,-128(s0)
 8005fe0:	f9043503          	ld	a0,-112(s0)
 8005fe4:	62a030ef          	jal	ra,800960e <softfloat_mulAddF64>
 8005fe8:	87aa                	mv	a5,a0
 8005fea:	f4f43c23          	sd	a5,-168(s0)
 8005fee:	f5843783          	ld	a5,-168(s0)
 8005ff2:	853e                	mv	a0,a5
 8005ff4:	f2843783          	ld	a5,-216(s0)
 8005ff8:	8391                	srli	a5,a5,0x4
 8005ffa:	0f87f793          	andi	a5,a5,248
 8005ffe:	f6f43423          	sd	a5,-152(s0)
 8006002:	f6843703          	ld	a4,-152(s0)
 8006006:	ffffe797          	auipc	a5,0xffffe
 800600a:	97ba                	add	a5,a5,a4
 800600c:	370782e7          	jalr	t0,880(a5) # 8004376 <put_f64_reg>
 8006010:	f6f43023          	sd	a5,-160(s0)
 8006014:	a829                	j	800602e <emulate_fmadd+0x29a>
  } else {
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
 8006016:	f2843703          	ld	a4,-216(s0)
 800601a:	f3043683          	ld	a3,-208(s0)
 800601e:	f3843603          	ld	a2,-200(s0)
 8006022:	f4043583          	ld	a1,-192(s0)
 8006026:	f4843503          	ld	a0,-184(s0)
 800602a:	dc6fe0ef          	jal	ra,80045f0 <truly_illegal_insn>
  }
}
 800602e:	60ee                	ld	ra,216(sp)
 8006030:	644e                	ld	s0,208(sp)
 8006032:	612d                	addi	sp,sp,224
 8006034:	8082                	ret

0000000008006036 <load_uint8_t>:
DECLARE_UNPRIVILEGED_LOAD_FUNCTION(uint8_t, lbu)
 8006036:	7179                	addi	sp,sp,-48
 8006038:	f422                	sd	s0,40(sp)
 800603a:	1800                	addi	s0,sp,48
 800603c:	fca43c23          	sd	a0,-40(s0)
 8006040:	fcb43823          	sd	a1,-48(s0)
 8006044:	000205b7          	lui	a1,0x20
 8006048:	fd043603          	ld	a2,-48(s0)
 800604c:	fd843783          	ld	a5,-40(s0)
 8006050:	3005a6f3          	csrrs	a3,mstatus,a1
 8006054:	0007c703          	lbu	a4,0(a5)
 8006058:	30069073          	csrw	mstatus,a3
 800605c:	87ba                	mv	a5,a4
 800605e:	fef407a3          	sb	a5,-17(s0)
 8006062:	fef44783          	lbu	a5,-17(s0)
 8006066:	853e                	mv	a0,a5
 8006068:	7422                	ld	s0,40(sp)
 800606a:	6145                	addi	sp,sp,48
 800606c:	8082                	ret

000000000800606e <store_uint8_t>:
DECLARE_UNPRIVILEGED_STORE_FUNCTION(uint8_t, sb)
 800606e:	7179                	addi	sp,sp,-48
 8006070:	f422                	sd	s0,40(sp)
 8006072:	1800                	addi	s0,sp,48
 8006074:	fea43423          	sd	a0,-24(s0)
 8006078:	87ae                	mv	a5,a1
 800607a:	fcc43c23          	sd	a2,-40(s0)
 800607e:	fef403a3          	sb	a5,-25(s0)
 8006082:	000205b7          	lui	a1,0x20
 8006086:	fd843603          	ld	a2,-40(s0)
 800608a:	fe744783          	lbu	a5,-25(s0)
 800608e:	fe843703          	ld	a4,-24(s0)
 8006092:	3005a6f3          	csrrs	a3,mstatus,a1
 8006096:	00f70023          	sb	a5,0(a4) # 5000 <MEM_START-0x7ffb000>
 800609a:	30069073          	csrw	mstatus,a3
 800609e:	0001                	nop
 80060a0:	7422                	ld	s0,40(sp)
 80060a2:	6145                	addi	sp,sp,48
 80060a4:	8082                	ret

00000000080060a6 <lfsr63>:
int snprintf(char* out, size_t n, const char* s, ...);
void start_user(trapframe_t* tf) __attribute__((noreturn));
void dump_tf(trapframe_t*);

static uint64_t lfsr63(uint64_t x)
{
 80060a6:	7179                	addi	sp,sp,-48
 80060a8:	f422                	sd	s0,40(sp)
 80060aa:	1800                	addi	s0,sp,48
 80060ac:	fca43c23          	sd	a0,-40(s0)
  uint64_t bit = (x ^ (x >> 1)) & 1;
 80060b0:	fd843783          	ld	a5,-40(s0)
 80060b4:	0017d713          	srli	a4,a5,0x1
 80060b8:	fd843783          	ld	a5,-40(s0)
 80060bc:	8fb9                	xor	a5,a5,a4
 80060be:	8b85                	andi	a5,a5,1
 80060c0:	fef43423          	sd	a5,-24(s0)
  return (x >> 1) | (bit << 62);
 80060c4:	fd843783          	ld	a5,-40(s0)
 80060c8:	0017d713          	srli	a4,a5,0x1
 80060cc:	fe843783          	ld	a5,-24(s0)
 80060d0:	17fa                	slli	a5,a5,0x3e
 80060d2:	8fd9                	or	a5,a5,a4
}
 80060d4:	853e                	mv	a0,a5
 80060d6:	7422                	ld	s0,40(sp)
 80060d8:	6145                	addi	sp,sp,48
 80060da:	8082                	ret

00000000080060dc <insn_len>:

static inline int insn_len(long insn)
{
 80060dc:	1101                	addi	sp,sp,-32
 80060de:	ec22                	sd	s0,24(sp)
 80060e0:	1000                	addi	s0,sp,32
 80060e2:	fea43423          	sd	a0,-24(s0)
  return (insn & 0x3) < 0x3 ? 2 : 4;
 80060e6:	fe843783          	ld	a5,-24(s0)
 80060ea:	0037f713          	andi	a4,a5,3
 80060ee:	4789                	li	a5,2
 80060f0:	00e7c463          	blt	a5,a4,80060f8 <insn_len+0x1c>
 80060f4:	4789                	li	a5,2
 80060f6:	a011                	j	80060fa <insn_len+0x1e>
 80060f8:	4791                	li	a5,4
}
 80060fa:	853e                	mv	a0,a5
 80060fc:	6462                	ld	s0,24(sp)
 80060fe:	6105                	addi	sp,sp,32
 8006100:	8082                	ret

0000000008006102 <misaligned_load_trap>:
  uint32_t int32;
  uint64_t int64;
};

void misaligned_load_trap(uintptr_t* regs, uintptr_t mcause, uintptr_t mepc)
{
 8006102:	7155                	addi	sp,sp,-208
 8006104:	e586                	sd	ra,200(sp)
 8006106:	e1a2                	sd	s0,192(sp)
 8006108:	0980                	addi	s0,sp,208
 800610a:	f4a43423          	sd	a0,-184(s0)
 800610e:	f4b43023          	sd	a1,-192(s0)
 8006112:	f2c43c23          	sd	a2,-200(s0)
 8006116:	f3843783          	ld	a5,-200(s0)
 800611a:	f8f43423          	sd	a5,-120(s0)
 800611e:	f5840793          	addi	a5,s0,-168
 8006122:	f8f43023          	sd	a5,-128(s0)
  register uintptr_t __mstatus_adjust asm ("a1") = MSTATUS_MPRV | MSTATUS_MXR;
 8006126:	000a05b7          	lui	a1,0xa0
  register uintptr_t __mepc asm ("a2") = mepc;
 800612a:	f8843603          	ld	a2,-120(s0)
  uintptr_t rvc_mask = 3;
 800612e:	478d                	li	a5,3
 8006130:	f6f43c23          	sd	a5,-136(s0)
  asm ("csrrs %[mstatus], mstatus, %[mprv]\n"
 8006134:	f7843783          	ld	a5,-136(s0)
 8006138:	3005a6f3          	csrrs	a3,mstatus,a1
 800613c:	00267713          	andi	a4,a2,2
 8006140:	eb11                	bnez	a4,8006154 <misaligned_load_trap+0x52>
 8006142:	00066503          	lwu	a0,0(a2)
 8006146:	00f57733          	and	a4,a0,a5
 800614a:	00f70f63          	beq	a4,a5,8006168 <misaligned_load_trap+0x66>
 800614e:	1542                	slli	a0,a0,0x30
 8006150:	9141                	srli	a0,a0,0x30
 8006152:	a819                	j	8006168 <misaligned_load_trap+0x66>
 8006154:	00065503          	lhu	a0,0(a2)
 8006158:	00f57733          	and	a4,a0,a5
 800615c:	00f71663          	bne	a4,a5,8006168 <misaligned_load_trap+0x66>
 8006160:	00265703          	lhu	a4,2(a2)
 8006164:	0742                	slli	a4,a4,0x10
 8006166:	953a                	add	a0,a0,a4
 8006168:	30069073          	csrw	mstatus,a3
 800616c:	862a                	mv	a2,a0
 800616e:	f6c43823          	sd	a2,-144(s0)
 8006172:	f6e43423          	sd	a4,-152(s0)
  *mstatus = __mstatus;
 8006176:	8736                	mv	a4,a3
 8006178:	f8043783          	ld	a5,-128(s0)
 800617c:	e398                	sd	a4,0(a5)
  return val;
 800617e:	f7043783          	ld	a5,-144(s0)
  union byte_array val;
  uintptr_t mstatus;
  insn_t insn = get_insn(mepc, &mstatus);
 8006182:	fef43423          	sd	a5,-24(s0)
  uintptr_t npc = mepc + insn_len(insn);
 8006186:	fe843783          	ld	a5,-24(s0)
 800618a:	853e                	mv	a0,a5
 800618c:	f51ff0ef          	jal	ra,80060dc <insn_len>
 8006190:	87aa                	mv	a5,a0
 8006192:	873e                	mv	a4,a5
 8006194:	f3843783          	ld	a5,-200(s0)
 8006198:	97ba                	add	a5,a5,a4
 800619a:	fcf43423          	sd	a5,-56(s0)
  uintptr_t addr = read_csr(mtval);
 800619e:	343027f3          	csrr	a5,mtval
 80061a2:	fcf43023          	sd	a5,-64(s0)
 80061a6:	fc043783          	ld	a5,-64(s0)
 80061aa:	faf43c23          	sd	a5,-72(s0)

  int shift = 0, fp = 0, len;
 80061ae:	fe042223          	sw	zero,-28(s0)
 80061b2:	fe042023          	sw	zero,-32(s0)
  if ((insn & MASK_LW) == MATCH_LW)
 80061b6:	fe843703          	ld	a4,-24(s0)
 80061ba:	679d                	lui	a5,0x7
 80061bc:	07f78793          	addi	a5,a5,127 # 707f <MEM_START-0x7ff8f81>
 80061c0:	8f7d                	and	a4,a4,a5
 80061c2:	6789                	lui	a5,0x2
 80061c4:	078d                	addi	a5,a5,3
 80061c6:	02f71463          	bne	a4,a5,80061ee <misaligned_load_trap+0xec>
    len = 4, shift = 8*(sizeof(uintptr_t) - len);
 80061ca:	4791                	li	a5,4
 80061cc:	fcf42e23          	sw	a5,-36(s0)
 80061d0:	fdc42783          	lw	a5,-36(s0)
 80061d4:	2781                	sext.w	a5,a5
 80061d6:	873e                	mv	a4,a5
 80061d8:	4781                	li	a5,0
 80061da:	9f99                	subw	a5,a5,a4
 80061dc:	0037979b          	slliw	a5,a5,0x3
 80061e0:	2781                	sext.w	a5,a5
 80061e2:	0407879b          	addiw	a5,a5,64
 80061e6:	2781                	sext.w	a5,a5
 80061e8:	fef42223          	sw	a5,-28(s0)
 80061ec:	a4bd                	j	800645a <misaligned_load_trap+0x358>
#if __riscv_xlen == 64
  else if ((insn & MASK_LD) == MATCH_LD)
 80061ee:	fe843703          	ld	a4,-24(s0)
 80061f2:	679d                	lui	a5,0x7
 80061f4:	07f78793          	addi	a5,a5,127 # 707f <MEM_START-0x7ff8f81>
 80061f8:	8f7d                	and	a4,a4,a5
 80061fa:	678d                	lui	a5,0x3
 80061fc:	078d                	addi	a5,a5,3
 80061fe:	02f71463          	bne	a4,a5,8006226 <misaligned_load_trap+0x124>
    len = 8, shift = 8*(sizeof(uintptr_t) - len);
 8006202:	47a1                	li	a5,8
 8006204:	fcf42e23          	sw	a5,-36(s0)
 8006208:	fdc42783          	lw	a5,-36(s0)
 800620c:	2781                	sext.w	a5,a5
 800620e:	873e                	mv	a4,a5
 8006210:	4781                	li	a5,0
 8006212:	9f99                	subw	a5,a5,a4
 8006214:	0037979b          	slliw	a5,a5,0x3
 8006218:	2781                	sext.w	a5,a5
 800621a:	0407879b          	addiw	a5,a5,64
 800621e:	2781                	sext.w	a5,a5
 8006220:	fef42223          	sw	a5,-28(s0)
 8006224:	ac1d                	j	800645a <misaligned_load_trap+0x358>
  else if ((insn & MASK_LWU) == MATCH_LWU)
 8006226:	fe843703          	ld	a4,-24(s0)
 800622a:	679d                	lui	a5,0x7
 800622c:	07f78793          	addi	a5,a5,127 # 707f <MEM_START-0x7ff8f81>
 8006230:	8f7d                	and	a4,a4,a5
 8006232:	6799                	lui	a5,0x6
 8006234:	078d                	addi	a5,a5,3
 8006236:	00f71663          	bne	a4,a5,8006242 <misaligned_load_trap+0x140>
    len = 4;
 800623a:	4791                	li	a5,4
 800623c:	fcf42e23          	sw	a5,-36(s0)
 8006240:	ac29                	j	800645a <misaligned_load_trap+0x358>
#endif
#ifdef PK_ENABLE_FP_EMULATION
  else if ((insn & MASK_FLD) == MATCH_FLD)
 8006242:	fe843703          	ld	a4,-24(s0)
 8006246:	679d                	lui	a5,0x7
 8006248:	07f78793          	addi	a5,a5,127 # 707f <MEM_START-0x7ff8f81>
 800624c:	8f7d                	and	a4,a4,a5
 800624e:	678d                	lui	a5,0x3
 8006250:	079d                	addi	a5,a5,7
 8006252:	00f71963          	bne	a4,a5,8006264 <misaligned_load_trap+0x162>
    fp = 1, len = 8;
 8006256:	4785                	li	a5,1
 8006258:	fef42023          	sw	a5,-32(s0)
 800625c:	47a1                	li	a5,8
 800625e:	fcf42e23          	sw	a5,-36(s0)
 8006262:	aae5                	j	800645a <misaligned_load_trap+0x358>
  else if ((insn & MASK_FLW) == MATCH_FLW)
 8006264:	fe843703          	ld	a4,-24(s0)
 8006268:	679d                	lui	a5,0x7
 800626a:	07f78793          	addi	a5,a5,127 # 707f <MEM_START-0x7ff8f81>
 800626e:	8f7d                	and	a4,a4,a5
 8006270:	6789                	lui	a5,0x2
 8006272:	079d                	addi	a5,a5,7
 8006274:	00f71963          	bne	a4,a5,8006286 <misaligned_load_trap+0x184>
    fp = 1, len = 4;
 8006278:	4785                	li	a5,1
 800627a:	fef42023          	sw	a5,-32(s0)
 800627e:	4791                	li	a5,4
 8006280:	fcf42e23          	sw	a5,-36(s0)
 8006284:	aad9                	j	800645a <misaligned_load_trap+0x358>
#endif
  else if ((insn & MASK_LH) == MATCH_LH)
 8006286:	fe843703          	ld	a4,-24(s0)
 800628a:	679d                	lui	a5,0x7
 800628c:	07f78793          	addi	a5,a5,127 # 707f <MEM_START-0x7ff8f81>
 8006290:	8f7d                	and	a4,a4,a5
 8006292:	6785                	lui	a5,0x1
 8006294:	078d                	addi	a5,a5,3
 8006296:	02f71463          	bne	a4,a5,80062be <misaligned_load_trap+0x1bc>
    len = 2, shift = 8*(sizeof(uintptr_t) - len);
 800629a:	4789                	li	a5,2
 800629c:	fcf42e23          	sw	a5,-36(s0)
 80062a0:	fdc42783          	lw	a5,-36(s0)
 80062a4:	2781                	sext.w	a5,a5
 80062a6:	873e                	mv	a4,a5
 80062a8:	4781                	li	a5,0
 80062aa:	9f99                	subw	a5,a5,a4
 80062ac:	0037979b          	slliw	a5,a5,0x3
 80062b0:	2781                	sext.w	a5,a5
 80062b2:	0407879b          	addiw	a5,a5,64
 80062b6:	2781                	sext.w	a5,a5
 80062b8:	fef42223          	sw	a5,-28(s0)
 80062bc:	aa79                	j	800645a <misaligned_load_trap+0x358>
  else if ((insn & MASK_LHU) == MATCH_LHU)
 80062be:	fe843703          	ld	a4,-24(s0)
 80062c2:	679d                	lui	a5,0x7
 80062c4:	07f78793          	addi	a5,a5,127 # 707f <MEM_START-0x7ff8f81>
 80062c8:	8f7d                	and	a4,a4,a5
 80062ca:	6795                	lui	a5,0x5
 80062cc:	078d                	addi	a5,a5,3
 80062ce:	00f71663          	bne	a4,a5,80062da <misaligned_load_trap+0x1d8>
    len = 2;
 80062d2:	4789                	li	a5,2
 80062d4:	fcf42e23          	sw	a5,-36(s0)
 80062d8:	a249                	j	800645a <misaligned_load_trap+0x358>
#ifdef __riscv_compressed
# if __riscv_xlen >= 64
  else if ((insn & MASK_C_LD) == MATCH_C_LD)
 80062da:	fe843703          	ld	a4,-24(s0)
 80062de:	67b9                	lui	a5,0xe
 80062e0:	078d                	addi	a5,a5,3
 80062e2:	8f7d                	and	a4,a4,a5
 80062e4:	6799                	lui	a5,0x6
 80062e6:	02f71c63          	bne	a4,a5,800631e <misaligned_load_trap+0x21c>
    len = 8, shift = 8*(sizeof(uintptr_t) - len), insn = RVC_RS2S(insn) << SH_RD;
 80062ea:	47a1                	li	a5,8
 80062ec:	fcf42e23          	sw	a5,-36(s0)
 80062f0:	fdc42783          	lw	a5,-36(s0)
 80062f4:	2781                	sext.w	a5,a5
 80062f6:	873e                	mv	a4,a5
 80062f8:	4781                	li	a5,0
 80062fa:	9f99                	subw	a5,a5,a4
 80062fc:	0037979b          	slliw	a5,a5,0x3
 8006300:	2781                	sext.w	a5,a5
 8006302:	0407879b          	addiw	a5,a5,64
 8006306:	2781                	sext.w	a5,a5
 8006308:	fef42223          	sw	a5,-28(s0)
 800630c:	fe843783          	ld	a5,-24(s0)
 8006310:	8389                	srli	a5,a5,0x2
 8006312:	8b9d                	andi	a5,a5,7
 8006314:	07a1                	addi	a5,a5,8
 8006316:	079e                	slli	a5,a5,0x7
 8006318:	fef43423          	sd	a5,-24(s0)
 800631c:	aa3d                	j	800645a <misaligned_load_trap+0x358>
  else if ((insn & MASK_C_LDSP) == MATCH_C_LDSP && ((insn >> SH_RD) & 0x1f))
 800631e:	fe843703          	ld	a4,-24(s0)
 8006322:	67b9                	lui	a5,0xe
 8006324:	078d                	addi	a5,a5,3
 8006326:	8f7d                	and	a4,a4,a5
 8006328:	6799                	lui	a5,0x6
 800632a:	0789                	addi	a5,a5,2
 800632c:	02f71963          	bne	a4,a5,800635e <misaligned_load_trap+0x25c>
 8006330:	fe843783          	ld	a5,-24(s0)
 8006334:	839d                	srli	a5,a5,0x7
 8006336:	8bfd                	andi	a5,a5,31
 8006338:	c39d                	beqz	a5,800635e <misaligned_load_trap+0x25c>
    len = 8, shift = 8*(sizeof(uintptr_t) - len);
 800633a:	47a1                	li	a5,8
 800633c:	fcf42e23          	sw	a5,-36(s0)
 8006340:	fdc42783          	lw	a5,-36(s0)
 8006344:	2781                	sext.w	a5,a5
 8006346:	873e                	mv	a4,a5
 8006348:	4781                	li	a5,0
 800634a:	9f99                	subw	a5,a5,a4
 800634c:	0037979b          	slliw	a5,a5,0x3
 8006350:	2781                	sext.w	a5,a5
 8006352:	0407879b          	addiw	a5,a5,64
 8006356:	2781                	sext.w	a5,a5
 8006358:	fef42223          	sw	a5,-28(s0)
 800635c:	a8fd                	j	800645a <misaligned_load_trap+0x358>
# endif
  else if ((insn & MASK_C_LW) == MATCH_C_LW)
 800635e:	fe843703          	ld	a4,-24(s0)
 8006362:	67b9                	lui	a5,0xe
 8006364:	078d                	addi	a5,a5,3
 8006366:	8f7d                	and	a4,a4,a5
 8006368:	6791                	lui	a5,0x4
 800636a:	02f71c63          	bne	a4,a5,80063a2 <misaligned_load_trap+0x2a0>
    len = 4, shift = 8*(sizeof(uintptr_t) - len), insn = RVC_RS2S(insn) << SH_RD;
 800636e:	4791                	li	a5,4
 8006370:	fcf42e23          	sw	a5,-36(s0)
 8006374:	fdc42783          	lw	a5,-36(s0)
 8006378:	2781                	sext.w	a5,a5
 800637a:	873e                	mv	a4,a5
 800637c:	4781                	li	a5,0
 800637e:	9f99                	subw	a5,a5,a4
 8006380:	0037979b          	slliw	a5,a5,0x3
 8006384:	2781                	sext.w	a5,a5
 8006386:	0407879b          	addiw	a5,a5,64
 800638a:	2781                	sext.w	a5,a5
 800638c:	fef42223          	sw	a5,-28(s0)
 8006390:	fe843783          	ld	a5,-24(s0)
 8006394:	8389                	srli	a5,a5,0x2
 8006396:	8b9d                	andi	a5,a5,7
 8006398:	07a1                	addi	a5,a5,8
 800639a:	079e                	slli	a5,a5,0x7
 800639c:	fef43423          	sd	a5,-24(s0)
 80063a0:	a86d                	j	800645a <misaligned_load_trap+0x358>
  else if ((insn & MASK_C_LWSP) == MATCH_C_LWSP && ((insn >> SH_RD) & 0x1f))
 80063a2:	fe843703          	ld	a4,-24(s0)
 80063a6:	67b9                	lui	a5,0xe
 80063a8:	078d                	addi	a5,a5,3
 80063aa:	8f7d                	and	a4,a4,a5
 80063ac:	6791                	lui	a5,0x4
 80063ae:	0789                	addi	a5,a5,2
 80063b0:	02f71963          	bne	a4,a5,80063e2 <misaligned_load_trap+0x2e0>
 80063b4:	fe843783          	ld	a5,-24(s0)
 80063b8:	839d                	srli	a5,a5,0x7
 80063ba:	8bfd                	andi	a5,a5,31
 80063bc:	c39d                	beqz	a5,80063e2 <misaligned_load_trap+0x2e0>
    len = 4, shift = 8*(sizeof(uintptr_t) - len);
 80063be:	4791                	li	a5,4
 80063c0:	fcf42e23          	sw	a5,-36(s0)
 80063c4:	fdc42783          	lw	a5,-36(s0)
 80063c8:	2781                	sext.w	a5,a5
 80063ca:	873e                	mv	a4,a5
 80063cc:	4781                	li	a5,0
 80063ce:	9f99                	subw	a5,a5,a4
 80063d0:	0037979b          	slliw	a5,a5,0x3
 80063d4:	2781                	sext.w	a5,a5
 80063d6:	0407879b          	addiw	a5,a5,64
 80063da:	2781                	sext.w	a5,a5
 80063dc:	fef42223          	sw	a5,-28(s0)
 80063e0:	a8ad                	j	800645a <misaligned_load_trap+0x358>
# ifdef PK_ENABLE_FP_EMULATION
  else if ((insn & MASK_C_FLD) == MATCH_C_FLD)
 80063e2:	fe843703          	ld	a4,-24(s0)
 80063e6:	67b9                	lui	a5,0xe
 80063e8:	078d                	addi	a5,a5,3
 80063ea:	8f7d                	and	a4,a4,a5
 80063ec:	6789                	lui	a5,0x2
 80063ee:	02f71163          	bne	a4,a5,8006410 <misaligned_load_trap+0x30e>
    fp = 1, len = 8, insn = RVC_RS2S(insn) << SH_RD;
 80063f2:	4785                	li	a5,1
 80063f4:	fef42023          	sw	a5,-32(s0)
 80063f8:	47a1                	li	a5,8
 80063fa:	fcf42e23          	sw	a5,-36(s0)
 80063fe:	fe843783          	ld	a5,-24(s0)
 8006402:	8389                	srli	a5,a5,0x2
 8006404:	8b9d                	andi	a5,a5,7
 8006406:	07a1                	addi	a5,a5,8
 8006408:	079e                	slli	a5,a5,0x7
 800640a:	fef43423          	sd	a5,-24(s0)
 800640e:	a0b1                	j	800645a <misaligned_load_trap+0x358>
  else if ((insn & MASK_C_FLDSP) == MATCH_C_FLDSP)
 8006410:	fe843703          	ld	a4,-24(s0)
 8006414:	67b9                	lui	a5,0xe
 8006416:	078d                	addi	a5,a5,3
 8006418:	8f7d                	and	a4,a4,a5
 800641a:	6789                	lui	a5,0x2
 800641c:	0789                	addi	a5,a5,2
 800641e:	00f71963          	bne	a4,a5,8006430 <misaligned_load_trap+0x32e>
    fp = 1, len = 8;
 8006422:	4785                	li	a5,1
 8006424:	fef42023          	sw	a5,-32(s0)
 8006428:	47a1                	li	a5,8
 800642a:	fcf42e23          	sw	a5,-36(s0)
 800642e:	a035                	j	800645a <misaligned_load_trap+0x358>
    fp = 1, len = 4;
#  endif
# endif
#endif
  else {
    mcause = CAUSE_LOAD_ACCESS;
 8006430:	4795                	li	a5,5
 8006432:	f4f43023          	sd	a5,-192(s0)
    write_csr(mcause, mcause);
 8006436:	f4043783          	ld	a5,-192(s0)
 800643a:	34279073          	csrw	mcause,a5
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
 800643e:	f5843783          	ld	a5,-168(s0)
 8006442:	fe843703          	ld	a4,-24(s0)
 8006446:	86be                	mv	a3,a5
 8006448:	f3843603          	ld	a2,-200(s0)
 800644c:	f4043583          	ld	a1,-192(s0)
 8006450:	f4843503          	ld	a0,-184(s0)
 8006454:	99cfe0ef          	jal	ra,80045f0 <truly_illegal_insn>
 8006458:	a8d5                	j	800654c <misaligned_load_trap+0x44a>
  }

  val.int64 = 0;
 800645a:	f6043023          	sd	zero,-160(s0)
  for (intptr_t i = 0; i < len; i++)
 800645e:	fc043823          	sd	zero,-48(s0)
 8006462:	a80d                	j	8006494 <misaligned_load_trap+0x392>
    val.bytes[i] = load_uint8_t((void *)(addr + i), mepc);
 8006464:	fd043703          	ld	a4,-48(s0)
 8006468:	fb843783          	ld	a5,-72(s0)
 800646c:	97ba                	add	a5,a5,a4
 800646e:	f3843583          	ld	a1,-200(s0)
 8006472:	853e                	mv	a0,a5
 8006474:	bc3ff0ef          	jal	ra,8006036 <load_uint8_t>
 8006478:	87aa                	mv	a5,a0
 800647a:	873e                	mv	a4,a5
 800647c:	fd043783          	ld	a5,-48(s0)
 8006480:	ff040693          	addi	a3,s0,-16
 8006484:	97b6                	add	a5,a5,a3
 8006486:	f6e78823          	sb	a4,-144(a5) # 1f70 <MEM_START-0x7ffe090>
  for (intptr_t i = 0; i < len; i++)
 800648a:	fd043783          	ld	a5,-48(s0)
 800648e:	0785                	addi	a5,a5,1
 8006490:	fcf43823          	sd	a5,-48(s0)
 8006494:	fdc42783          	lw	a5,-36(s0)
 8006498:	fd043703          	ld	a4,-48(s0)
 800649c:	fcf744e3          	blt	a4,a5,8006464 <misaligned_load_trap+0x362>

  if (!fp)
 80064a0:	fe042783          	lw	a5,-32(s0)
 80064a4:	2781                	sext.w	a5,a5
 80064a6:	ef8d                	bnez	a5,80064e0 <misaligned_load_trap+0x3de>
#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
    SET_RD(insn, regs, (intptr_t)val.intx << shift >> shift);
 80064a8:	f6043783          	ld	a5,-160(s0)
 80064ac:	873e                	mv	a4,a5
 80064ae:	fe442783          	lw	a5,-28(s0)
 80064b2:	00f71733          	sll	a4,a4,a5
 80064b6:	fe442783          	lw	a5,-28(s0)
 80064ba:	40f756b3          	sra	a3,a4,a5
 80064be:	0f800793          	li	a5,248
 80064c2:	faf42a23          	sw	a5,-76(s0)
 80064c6:	fe843783          	ld	a5,-24(s0)
 80064ca:	0047d713          	srli	a4,a5,0x4
 80064ce:	fb442783          	lw	a5,-76(s0)
 80064d2:	8f7d                	and	a4,a4,a5
 80064d4:	f4843783          	ld	a5,-184(s0)
 80064d8:	97ba                	add	a5,a5,a4
 80064da:	8736                	mv	a4,a3
 80064dc:	e398                	sd	a4,0(a5)
 80064de:	a09d                	j	8006544 <misaligned_load_trap+0x442>
#else
    SET_RD(insn, regs, (intptr_t)val.intx >> shift);
#endif
  else if (len == 8)
 80064e0:	fdc42783          	lw	a5,-36(s0)
 80064e4:	0007871b          	sext.w	a4,a5
 80064e8:	47a1                	li	a5,8
 80064ea:	02f71a63          	bne	a4,a5,800651e <misaligned_load_trap+0x41c>
    SET_F64_RD(insn, regs, val.int64);
 80064ee:	f6043783          	ld	a5,-160(s0)
 80064f2:	f4f43823          	sd	a5,-176(s0)
 80064f6:	f5043783          	ld	a5,-176(s0)
 80064fa:	853e                	mv	a0,a5
 80064fc:	fe843783          	ld	a5,-24(s0)
 8006500:	8391                	srli	a5,a5,0x4
 8006502:	0f87f793          	andi	a5,a5,248
 8006506:	faf43423          	sd	a5,-88(s0)
 800650a:	fa843703          	ld	a4,-88(s0)
 800650e:	ffffe797          	auipc	a5,0xffffe
 8006512:	97ba                	add	a5,a5,a4
 8006514:	e68782e7          	jalr	t0,-408(a5) # 8004376 <put_f64_reg>
 8006518:	faf43023          	sd	a5,-96(s0)
 800651c:	a025                	j	8006544 <misaligned_load_trap+0x442>
  else
    SET_F32_RD(insn, regs, val.int32);
 800651e:	f6042783          	lw	a5,-160(s0)
 8006522:	853e                	mv	a0,a5
 8006524:	fe843783          	ld	a5,-24(s0)
 8006528:	8391                	srli	a5,a5,0x4
 800652a:	0f87f793          	andi	a5,a5,248
 800652e:	f8f43c23          	sd	a5,-104(s0)
 8006532:	f9843703          	ld	a4,-104(s0)
 8006536:	ffffe797          	auipc	a5,0xffffe
 800653a:	97ba                	add	a5,a5,a4
 800653c:	c40782e7          	jalr	t0,-960(a5) # 8004176 <put_f32_reg>
 8006540:	f8f43823          	sd	a5,-112(s0)

  write_csr(mepc, npc);
 8006544:	fc843783          	ld	a5,-56(s0)
 8006548:	34179073          	csrw	mepc,a5
}
 800654c:	60ae                	ld	ra,200(sp)
 800654e:	640e                	ld	s0,192(sp)
 8006550:	6169                	addi	sp,sp,208
 8006552:	8082                	ret

0000000008006554 <misaligned_store_trap>:

void misaligned_store_trap(uintptr_t* regs, uintptr_t mcause, uintptr_t mepc)
{
 8006554:	7155                	addi	sp,sp,-208
 8006556:	e586                	sd	ra,200(sp)
 8006558:	e1a2                	sd	s0,192(sp)
 800655a:	0980                	addi	s0,sp,208
 800655c:	f4a43423          	sd	a0,-184(s0)
 8006560:	f4b43023          	sd	a1,-192(s0)
 8006564:	f2c43c23          	sd	a2,-200(s0)
 8006568:	f3843783          	ld	a5,-200(s0)
 800656c:	f8f43023          	sd	a5,-128(s0)
 8006570:	f5040793          	addi	a5,s0,-176
 8006574:	f6f43c23          	sd	a5,-136(s0)
  register uintptr_t __mstatus_adjust asm ("a1") = MSTATUS_MPRV | MSTATUS_MXR;
 8006578:	000a05b7          	lui	a1,0xa0
  register uintptr_t __mepc asm ("a2") = mepc;
 800657c:	f8043603          	ld	a2,-128(s0)
  uintptr_t rvc_mask = 3;
 8006580:	478d                	li	a5,3
 8006582:	f6f43823          	sd	a5,-144(s0)
  asm ("csrrs %[mstatus], mstatus, %[mprv]\n"
 8006586:	f7043783          	ld	a5,-144(s0)
 800658a:	3005a6f3          	csrrs	a3,mstatus,a1
 800658e:	00267713          	andi	a4,a2,2
 8006592:	eb11                	bnez	a4,80065a6 <misaligned_store_trap+0x52>
 8006594:	00066503          	lwu	a0,0(a2)
 8006598:	00f57733          	and	a4,a0,a5
 800659c:	00f70f63          	beq	a4,a5,80065ba <misaligned_store_trap+0x66>
 80065a0:	1542                	slli	a0,a0,0x30
 80065a2:	9141                	srli	a0,a0,0x30
 80065a4:	a819                	j	80065ba <misaligned_store_trap+0x66>
 80065a6:	00065503          	lhu	a0,0(a2)
 80065aa:	00f57733          	and	a4,a0,a5
 80065ae:	00f71663          	bne	a4,a5,80065ba <misaligned_store_trap+0x66>
 80065b2:	00265703          	lhu	a4,2(a2)
 80065b6:	0742                	slli	a4,a4,0x10
 80065b8:	953a                	add	a0,a0,a4
 80065ba:	30069073          	csrw	mstatus,a3
 80065be:	862a                	mv	a2,a0
 80065c0:	f6c43423          	sd	a2,-152(s0)
 80065c4:	f6e43023          	sd	a4,-160(s0)
  *mstatus = __mstatus;
 80065c8:	8736                	mv	a4,a3
 80065ca:	f7843783          	ld	a5,-136(s0)
 80065ce:	e398                	sd	a4,0(a5)
  return val;
 80065d0:	f6843783          	ld	a5,-152(s0)
  union byte_array val;
  uintptr_t mstatus;
  insn_t insn = get_insn(mepc, &mstatus);
 80065d4:	fef43023          	sd	a5,-32(s0)
  uintptr_t npc = mepc + insn_len(insn);
 80065d8:	fe043783          	ld	a5,-32(s0)
 80065dc:	853e                	mv	a0,a5
 80065de:	affff0ef          	jal	ra,80060dc <insn_len>
 80065e2:	87aa                	mv	a5,a0
 80065e4:	873e                	mv	a4,a5
 80065e6:	f3843783          	ld	a5,-200(s0)
 80065ea:	97ba                	add	a5,a5,a4
 80065ec:	fcf43c23          	sd	a5,-40(s0)
  int len;

  val.intx = GET_RS2(insn, regs);
 80065f0:	0f800793          	li	a5,248
 80065f4:	fcf42a23          	sw	a5,-44(s0)
 80065f8:	fe043783          	ld	a5,-32(s0)
 80065fc:	0117d713          	srli	a4,a5,0x11
 8006600:	fd442783          	lw	a5,-44(s0)
 8006604:	8f7d                	and	a4,a4,a5
 8006606:	f4843783          	ld	a5,-184(s0)
 800660a:	97ba                	add	a5,a5,a4
 800660c:	639c                	ld	a5,0(a5)
 800660e:	f4f43c23          	sd	a5,-168(s0)
  if ((insn & MASK_SW) == MATCH_SW)
 8006612:	fe043703          	ld	a4,-32(s0)
 8006616:	679d                	lui	a5,0x7
 8006618:	07f78793          	addi	a5,a5,127 # 707f <MEM_START-0x7ff8f81>
 800661c:	8f7d                	and	a4,a4,a5
 800661e:	6789                	lui	a5,0x2
 8006620:	02378793          	addi	a5,a5,35 # 2023 <MEM_START-0x7ffdfdd>
 8006624:	00f71663          	bne	a4,a5,8006630 <misaligned_store_trap+0xdc>
    len = 4;
 8006628:	4791                	li	a5,4
 800662a:	fef42623          	sw	a5,-20(s0)
 800662e:	a4bd                	j	800689c <misaligned_store_trap+0x348>
#if __riscv_xlen == 64
  else if ((insn & MASK_SD) == MATCH_SD)
 8006630:	fe043703          	ld	a4,-32(s0)
 8006634:	679d                	lui	a5,0x7
 8006636:	07f78793          	addi	a5,a5,127 # 707f <MEM_START-0x7ff8f81>
 800663a:	8f7d                	and	a4,a4,a5
 800663c:	678d                	lui	a5,0x3
 800663e:	02378793          	addi	a5,a5,35 # 3023 <MEM_START-0x7ffcfdd>
 8006642:	00f71663          	bne	a4,a5,800664e <misaligned_store_trap+0xfa>
    len = 8;
 8006646:	47a1                	li	a5,8
 8006648:	fef42623          	sw	a5,-20(s0)
 800664c:	ac81                	j	800689c <misaligned_store_trap+0x348>
#endif
#ifdef PK_ENABLE_FP_EMULATION
  else if ((insn & MASK_FSD) == MATCH_FSD)
 800664e:	fe043703          	ld	a4,-32(s0)
 8006652:	679d                	lui	a5,0x7
 8006654:	07f78793          	addi	a5,a5,127 # 707f <MEM_START-0x7ff8f81>
 8006658:	8f7d                	and	a4,a4,a5
 800665a:	678d                	lui	a5,0x3
 800665c:	02778793          	addi	a5,a5,39 # 3027 <MEM_START-0x7ffcfd9>
 8006660:	02f71663          	bne	a4,a5,800668c <misaligned_store_trap+0x138>
    len = 8, val.int64 = GET_F64_RS2(insn, regs);
 8006664:	47a1                	li	a5,8
 8006666:	fef42623          	sw	a5,-20(s0)
 800666a:	fe043783          	ld	a5,-32(s0)
 800666e:	83c5                	srli	a5,a5,0x11
 8006670:	0f87f793          	andi	a5,a5,248
 8006674:	853e                	mv	a0,a5
 8006676:	ffffe797          	auipc	a5,0xffffe
 800667a:	97aa                	add	a5,a5,a0
 800667c:	c00782e7          	jalr	t0,-1024(a5) # 8004276 <get_f64_reg>
 8006680:	fcf43423          	sd	a5,-56(s0)
 8006684:	87aa                	mv	a5,a0
 8006686:	f4f43c23          	sd	a5,-168(s0)
 800668a:	ac09                	j	800689c <misaligned_store_trap+0x348>
  else if ((insn & MASK_FSW) == MATCH_FSW)
 800668c:	fe043703          	ld	a4,-32(s0)
 8006690:	679d                	lui	a5,0x7
 8006692:	07f78793          	addi	a5,a5,127 # 707f <MEM_START-0x7ff8f81>
 8006696:	8f7d                	and	a4,a4,a5
 8006698:	6789                	lui	a5,0x2
 800669a:	02778793          	addi	a5,a5,39 # 2027 <MEM_START-0x7ffdfd9>
 800669e:	02f71963          	bne	a4,a5,80066d0 <misaligned_store_trap+0x17c>
    len = 4, val.intx = GET_F32_RS2(insn, regs);
 80066a2:	4791                	li	a5,4
 80066a4:	fef42623          	sw	a5,-20(s0)
 80066a8:	fe043783          	ld	a5,-32(s0)
 80066ac:	83c5                	srli	a5,a5,0x11
 80066ae:	2781                	sext.w	a5,a5
 80066b0:	0f87f793          	andi	a5,a5,248
 80066b4:	2781                	sext.w	a5,a5
 80066b6:	853e                	mv	a0,a5
 80066b8:	ffffe797          	auipc	a5,0xffffe
 80066bc:	97aa                	add	a5,a5,a0
 80066be:	9be782e7          	jalr	t0,-1602(a5) # 8004076 <get_f32_reg>
 80066c2:	fcf43023          	sd	a5,-64(s0)
 80066c6:	0005079b          	sext.w	a5,a0
 80066ca:	f4f43c23          	sd	a5,-168(s0)
 80066ce:	a2f9                	j	800689c <misaligned_store_trap+0x348>
#endif
  else if ((insn & MASK_SH) == MATCH_SH)
 80066d0:	fe043703          	ld	a4,-32(s0)
 80066d4:	679d                	lui	a5,0x7
 80066d6:	07f78793          	addi	a5,a5,127 # 707f <MEM_START-0x7ff8f81>
 80066da:	8f7d                	and	a4,a4,a5
 80066dc:	6785                	lui	a5,0x1
 80066de:	02378793          	addi	a5,a5,35 # 1023 <MEM_START-0x7ffefdd>
 80066e2:	00f71663          	bne	a4,a5,80066ee <misaligned_store_trap+0x19a>
    len = 2;
 80066e6:	4789                	li	a5,2
 80066e8:	fef42623          	sw	a5,-20(s0)
 80066ec:	aa45                	j	800689c <misaligned_store_trap+0x348>
#ifdef __riscv_compressed
# if __riscv_xlen >= 64
  else if ((insn & MASK_C_SD) == MATCH_C_SD)
 80066ee:	fe043703          	ld	a4,-32(s0)
 80066f2:	67b9                	lui	a5,0xe
 80066f4:	078d                	addi	a5,a5,3
 80066f6:	8f7d                	and	a4,a4,a5
 80066f8:	67b9                	lui	a5,0xe
 80066fa:	02f71a63          	bne	a4,a5,800672e <misaligned_store_trap+0x1da>
    len = 8, val.intx = GET_RS2S(insn, regs);
 80066fe:	47a1                	li	a5,8
 8006700:	fef42623          	sw	a5,-20(s0)
 8006704:	0f800793          	li	a5,248
 8006708:	faf42e23          	sw	a5,-68(s0)
 800670c:	fe043783          	ld	a5,-32(s0)
 8006710:	8389                	srli	a5,a5,0x2
 8006712:	8b9d                	andi	a5,a5,7
 8006714:	07a1                	addi	a5,a5,8
 8006716:	00379713          	slli	a4,a5,0x3
 800671a:	fbc42783          	lw	a5,-68(s0)
 800671e:	8f7d                	and	a4,a4,a5
 8006720:	f4843783          	ld	a5,-184(s0)
 8006724:	97ba                	add	a5,a5,a4
 8006726:	639c                	ld	a5,0(a5)
 8006728:	f4f43c23          	sd	a5,-168(s0)
 800672c:	aa85                	j	800689c <misaligned_store_trap+0x348>
  else if ((insn & MASK_C_SDSP) == MATCH_C_SDSP && ((insn >> SH_RD) & 0x1f))
 800672e:	fe043703          	ld	a4,-32(s0)
 8006732:	67b9                	lui	a5,0xe
 8006734:	078d                	addi	a5,a5,3
 8006736:	8f7d                	and	a4,a4,a5
 8006738:	67b9                	lui	a5,0xe
 800673a:	0789                	addi	a5,a5,2
 800673c:	02f71c63          	bne	a4,a5,8006774 <misaligned_store_trap+0x220>
 8006740:	fe043783          	ld	a5,-32(s0)
 8006744:	839d                	srli	a5,a5,0x7
 8006746:	8bfd                	andi	a5,a5,31
 8006748:	c795                	beqz	a5,8006774 <misaligned_store_trap+0x220>
    len = 8, val.intx = GET_RS2C(insn, regs);
 800674a:	47a1                	li	a5,8
 800674c:	fef42623          	sw	a5,-20(s0)
 8006750:	0f800793          	li	a5,248
 8006754:	faf42c23          	sw	a5,-72(s0)
 8006758:	fe043783          	ld	a5,-32(s0)
 800675c:	00179713          	slli	a4,a5,0x1
 8006760:	fb842783          	lw	a5,-72(s0)
 8006764:	8f7d                	and	a4,a4,a5
 8006766:	f4843783          	ld	a5,-184(s0)
 800676a:	97ba                	add	a5,a5,a4
 800676c:	639c                	ld	a5,0(a5)
 800676e:	f4f43c23          	sd	a5,-168(s0)
 8006772:	a22d                	j	800689c <misaligned_store_trap+0x348>
# endif
  else if ((insn & MASK_C_SW) == MATCH_C_SW)
 8006774:	fe043703          	ld	a4,-32(s0)
 8006778:	67b9                	lui	a5,0xe
 800677a:	078d                	addi	a5,a5,3
 800677c:	8f7d                	and	a4,a4,a5
 800677e:	67b1                	lui	a5,0xc
 8006780:	02f71a63          	bne	a4,a5,80067b4 <misaligned_store_trap+0x260>
    len = 4, val.intx = GET_RS2S(insn, regs);
 8006784:	4791                	li	a5,4
 8006786:	fef42623          	sw	a5,-20(s0)
 800678a:	0f800793          	li	a5,248
 800678e:	faf42a23          	sw	a5,-76(s0)
 8006792:	fe043783          	ld	a5,-32(s0)
 8006796:	8389                	srli	a5,a5,0x2
 8006798:	8b9d                	andi	a5,a5,7
 800679a:	07a1                	addi	a5,a5,8
 800679c:	00379713          	slli	a4,a5,0x3
 80067a0:	fb442783          	lw	a5,-76(s0)
 80067a4:	8f7d                	and	a4,a4,a5
 80067a6:	f4843783          	ld	a5,-184(s0)
 80067aa:	97ba                	add	a5,a5,a4
 80067ac:	639c                	ld	a5,0(a5)
 80067ae:	f4f43c23          	sd	a5,-168(s0)
 80067b2:	a0ed                	j	800689c <misaligned_store_trap+0x348>
  else if ((insn & MASK_C_SWSP) == MATCH_C_SWSP && ((insn >> SH_RD) & 0x1f))
 80067b4:	fe043703          	ld	a4,-32(s0)
 80067b8:	67b9                	lui	a5,0xe
 80067ba:	078d                	addi	a5,a5,3
 80067bc:	8f7d                	and	a4,a4,a5
 80067be:	67b1                	lui	a5,0xc
 80067c0:	0789                	addi	a5,a5,2
 80067c2:	02f71c63          	bne	a4,a5,80067fa <misaligned_store_trap+0x2a6>
 80067c6:	fe043783          	ld	a5,-32(s0)
 80067ca:	839d                	srli	a5,a5,0x7
 80067cc:	8bfd                	andi	a5,a5,31
 80067ce:	c795                	beqz	a5,80067fa <misaligned_store_trap+0x2a6>
    len = 4, val.intx = GET_RS2C(insn, regs);
 80067d0:	4791                	li	a5,4
 80067d2:	fef42623          	sw	a5,-20(s0)
 80067d6:	0f800793          	li	a5,248
 80067da:	faf42823          	sw	a5,-80(s0)
 80067de:	fe043783          	ld	a5,-32(s0)
 80067e2:	00179713          	slli	a4,a5,0x1
 80067e6:	fb042783          	lw	a5,-80(s0)
 80067ea:	8f7d                	and	a4,a4,a5
 80067ec:	f4843783          	ld	a5,-184(s0)
 80067f0:	97ba                	add	a5,a5,a4
 80067f2:	639c                	ld	a5,0(a5)
 80067f4:	f4f43c23          	sd	a5,-168(s0)
 80067f8:	a055                	j	800689c <misaligned_store_trap+0x348>
# ifdef PK_ENABLE_FP_EMULATION
  else if ((insn & MASK_C_FSD) == MATCH_C_FSD)
 80067fa:	fe043703          	ld	a4,-32(s0)
 80067fe:	67b9                	lui	a5,0xe
 8006800:	078d                	addi	a5,a5,3
 8006802:	8f7d                	and	a4,a4,a5
 8006804:	67a9                	lui	a5,0xa
 8006806:	02f71963          	bne	a4,a5,8006838 <misaligned_store_trap+0x2e4>
    len = 8, val.int64 = GET_F64_RS2S(insn, regs);
 800680a:	47a1                	li	a5,8
 800680c:	fef42623          	sw	a5,-20(s0)
 8006810:	fe043783          	ld	a5,-32(s0)
 8006814:	8389                	srli	a5,a5,0x2
 8006816:	8b9d                	andi	a5,a5,7
 8006818:	07a1                	addi	a5,a5,8
 800681a:	078e                	slli	a5,a5,0x3
 800681c:	0ff7f793          	andi	a5,a5,255
 8006820:	853e                	mv	a0,a5
 8006822:	ffffe797          	auipc	a5,0xffffe
 8006826:	97aa                	add	a5,a5,a0
 8006828:	a54782e7          	jalr	t0,-1452(a5) # 8004276 <get_f64_reg>
 800682c:	faf43423          	sd	a5,-88(s0)
 8006830:	87aa                	mv	a5,a0
 8006832:	f4f43c23          	sd	a5,-168(s0)
 8006836:	a09d                	j	800689c <misaligned_store_trap+0x348>
  else if ((insn & MASK_C_FSDSP) == MATCH_C_FSDSP)
 8006838:	fe043703          	ld	a4,-32(s0)
 800683c:	67b9                	lui	a5,0xe
 800683e:	078d                	addi	a5,a5,3
 8006840:	8f7d                	and	a4,a4,a5
 8006842:	67a9                	lui	a5,0xa
 8006844:	0789                	addi	a5,a5,2
 8006846:	02f71663          	bne	a4,a5,8006872 <misaligned_store_trap+0x31e>
    len = 8, val.int64 = GET_F64_RS2C(insn, regs);
 800684a:	47a1                	li	a5,8
 800684c:	fef42623          	sw	a5,-20(s0)
 8006850:	fe043783          	ld	a5,-32(s0)
 8006854:	0786                	slli	a5,a5,0x1
 8006856:	0f87f793          	andi	a5,a5,248
 800685a:	853e                	mv	a0,a5
 800685c:	ffffe797          	auipc	a5,0xffffe
 8006860:	97aa                	add	a5,a5,a0
 8006862:	a1a782e7          	jalr	t0,-1510(a5) # 8004276 <get_f64_reg>
 8006866:	faf43023          	sd	a5,-96(s0)
 800686a:	87aa                	mv	a5,a0
 800686c:	f4f43c23          	sd	a5,-168(s0)
 8006870:	a035                	j	800689c <misaligned_store_trap+0x348>
    len = 4, val.intx = GET_F32_RS2C(insn, regs);
#  endif
# endif
#endif
  else {
    mcause = CAUSE_STORE_ACCESS;
 8006872:	479d                	li	a5,7
 8006874:	f4f43023          	sd	a5,-192(s0)
    write_csr(mcause, mcause);
 8006878:	f4043783          	ld	a5,-192(s0)
 800687c:	34279073          	csrw	mcause,a5
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
 8006880:	f5043783          	ld	a5,-176(s0)
 8006884:	fe043703          	ld	a4,-32(s0)
 8006888:	86be                	mv	a3,a5
 800688a:	f3843603          	ld	a2,-200(s0)
 800688e:	f4043583          	ld	a1,-192(s0)
 8006892:	f4843503          	ld	a0,-184(s0)
 8006896:	d5bfd0ef          	jal	ra,80045f0 <truly_illegal_insn>
 800689a:	a0ad                	j	8006904 <misaligned_store_trap+0x3b0>
  }

  uintptr_t addr = read_csr(mtval);
 800689c:	343027f3          	csrr	a5,mtval
 80068a0:	f8f43c23          	sd	a5,-104(s0)
 80068a4:	f9843783          	ld	a5,-104(s0)
 80068a8:	f8f43823          	sd	a5,-112(s0)
#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
  intptr_t offs = (len == 8? 0 : sizeof(val.intx) - len);
#else
  intptr_t offs = 0;
 80068ac:	f8043423          	sd	zero,-120(s0)
#endif
  for (int i = 0; i < len; i++)
 80068b0:	fe042423          	sw	zero,-24(s0)
 80068b4:	a825                	j	80068ec <misaligned_store_trap+0x398>
    store_uint8_t((void *)(addr + i), val.bytes[offs + i], mepc);
 80068b6:	fe842703          	lw	a4,-24(s0)
 80068ba:	f9043783          	ld	a5,-112(s0)
 80068be:	97ba                	add	a5,a5,a4
 80068c0:	86be                	mv	a3,a5
 80068c2:	fe842703          	lw	a4,-24(s0)
 80068c6:	f8843783          	ld	a5,-120(s0)
 80068ca:	97ba                	add	a5,a5,a4
 80068cc:	ff040713          	addi	a4,s0,-16
 80068d0:	97ba                	add	a5,a5,a4
 80068d2:	f687c783          	lbu	a5,-152(a5)
 80068d6:	f3843603          	ld	a2,-200(s0)
 80068da:	85be                	mv	a1,a5
 80068dc:	8536                	mv	a0,a3
 80068de:	f90ff0ef          	jal	ra,800606e <store_uint8_t>
  for (int i = 0; i < len; i++)
 80068e2:	fe842783          	lw	a5,-24(s0)
 80068e6:	2785                	addiw	a5,a5,1
 80068e8:	fef42423          	sw	a5,-24(s0)
 80068ec:	fe842703          	lw	a4,-24(s0)
 80068f0:	fec42783          	lw	a5,-20(s0)
 80068f4:	2701                	sext.w	a4,a4
 80068f6:	2781                	sext.w	a5,a5
 80068f8:	faf74fe3          	blt	a4,a5,80068b6 <misaligned_store_trap+0x362>

  write_csr(mepc, npc);
 80068fc:	fd843783          	ld	a5,-40(s0)
 8006900:	34179073          	csrw	mepc,a5
}
 8006904:	60ae                	ld	ra,200(sp)
 8006906:	640e                	ld	s0,192(sp)
 8006908:	6169                	addi	sp,sp,208
 800690a:	8082                	ret

000000000800690c <f32_add>:
#include "platform.h"
#include "internals.h"
#include "softfloat.h"

float32_t f32_add( float32_t a, float32_t b )
{
 800690c:	715d                	addi	sp,sp,-80
 800690e:	e486                	sd	ra,72(sp)
 8006910:	e0a2                	sd	s0,64(sp)
 8006912:	0880                	addi	s0,sp,80
 8006914:	faa42c23          	sw	a0,-72(s0)
 8006918:	fab42823          	sw	a1,-80(s0)
    uint_fast32_t uiB;
#if ! defined INLINE_LEVEL || (INLINE_LEVEL < 1)
    float32_t (*magsFuncPtr)( uint_fast32_t, uint_fast32_t );
#endif

    uA.f = a;
 800691c:	fb842783          	lw	a5,-72(s0)
 8006920:	fcf42823          	sw	a5,-48(s0)
    uiA = uA.ui;
 8006924:	fd042783          	lw	a5,-48(s0)
 8006928:	1782                	slli	a5,a5,0x20
 800692a:	9381                	srli	a5,a5,0x20
 800692c:	fef43423          	sd	a5,-24(s0)
    uB.f = b;
 8006930:	fb042783          	lw	a5,-80(s0)
 8006934:	fcf42423          	sw	a5,-56(s0)
    uiB = uB.ui;
 8006938:	fc842783          	lw	a5,-56(s0)
 800693c:	1782                	slli	a5,a5,0x20
 800693e:	9381                	srli	a5,a5,0x20
 8006940:	fef43023          	sd	a5,-32(s0)
    } else {
        return softfloat_addMagsF32( uiA, uiB );
    }
#else
    magsFuncPtr =
        signF32UI( uiA ^ uiB ) ? softfloat_subMagsF32 : softfloat_addMagsF32;
 8006944:	fe843783          	ld	a5,-24(s0)
 8006948:	0007871b          	sext.w	a4,a5
 800694c:	fe043783          	ld	a5,-32(s0)
 8006950:	2781                	sext.w	a5,a5
 8006952:	8fb9                	xor	a5,a5,a4
 8006954:	2781                	sext.w	a5,a5
 8006956:	2781                	sext.w	a5,a5
 8006958:	0007d763          	bgez	a5,8006966 <f32_add+0x5a>
 800695c:	00004797          	auipc	a5,0x4
 8006960:	2fc78793          	addi	a5,a5,764 # 800ac58 <softfloat_subMagsF32>
 8006964:	a029                	j	800696e <f32_add+0x62>
 8006966:	00002797          	auipc	a5,0x2
 800696a:	f0a78793          	addi	a5,a5,-246 # 8008870 <softfloat_addMagsF32>
    magsFuncPtr =
 800696e:	fcf43c23          	sd	a5,-40(s0)
    return (*magsFuncPtr)( uiA, uiB );
 8006972:	fd843783          	ld	a5,-40(s0)
 8006976:	fe043583          	ld	a1,-32(s0)
 800697a:	fe843503          	ld	a0,-24(s0)
 800697e:	9782                	jalr	a5
 8006980:	87aa                	mv	a5,a0
#endif

}
 8006982:	853e                	mv	a0,a5
 8006984:	60a6                	ld	ra,72(sp)
 8006986:	6406                	ld	s0,64(sp)
 8006988:	6161                	addi	sp,sp,80
 800698a:	8082                	ret

000000000800698c <f32_div>:
#include "internals.h"
#include "specialize.h"
#include "softfloat.h"

float32_t f32_div( float32_t a, float32_t b )
{
 800698c:	7131                	addi	sp,sp,-192
 800698e:	fd06                	sd	ra,184(sp)
 8006990:	f922                	sd	s0,176(sp)
 8006992:	0180                	addi	s0,sp,192
 8006994:	f4a42423          	sw	a0,-184(s0)
 8006998:	f4b42023          	sw	a1,-192(s0)
    uint_fast32_t uiZ;
    union ui32_f32 uZ;

    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    uA.f = a;
 800699c:	f4842783          	lw	a5,-184(s0)
 80069a0:	f6f42c23          	sw	a5,-136(s0)
    uiA = uA.ui;
 80069a4:	f7842783          	lw	a5,-136(s0)
 80069a8:	1782                	slli	a5,a5,0x20
 80069aa:	9381                	srli	a5,a5,0x20
 80069ac:	faf43823          	sd	a5,-80(s0)
    signA = signF32UI( uiA );
 80069b0:	fb043783          	ld	a5,-80(s0)
 80069b4:	2781                	sext.w	a5,a5
 80069b6:	01f7d79b          	srliw	a5,a5,0x1f
 80069ba:	faf407a3          	sb	a5,-81(s0)
    expA  = expF32UI( uiA );
 80069be:	fb043783          	ld	a5,-80(s0)
 80069c2:	83dd                	srli	a5,a5,0x17
 80069c4:	0ff7f793          	andi	a5,a5,255
 80069c8:	fef43423          	sd	a5,-24(s0)
    sigA  = fracF32UI( uiA );
 80069cc:	fb043703          	ld	a4,-80(s0)
 80069d0:	008007b7          	lui	a5,0x800
 80069d4:	17fd                	addi	a5,a5,-1
 80069d6:	8ff9                	and	a5,a5,a4
 80069d8:	fef43023          	sd	a5,-32(s0)
    uB.f = b;
 80069dc:	f4042783          	lw	a5,-192(s0)
 80069e0:	f6f42823          	sw	a5,-144(s0)
    uiB = uB.ui;
 80069e4:	f7042783          	lw	a5,-144(s0)
 80069e8:	1782                	slli	a5,a5,0x20
 80069ea:	9381                	srli	a5,a5,0x20
 80069ec:	faf43023          	sd	a5,-96(s0)
    signB = signF32UI( uiB );
 80069f0:	fa043783          	ld	a5,-96(s0)
 80069f4:	2781                	sext.w	a5,a5
 80069f6:	01f7d79b          	srliw	a5,a5,0x1f
 80069fa:	f8f40fa3          	sb	a5,-97(s0)
    expB  = expF32UI( uiB );
 80069fe:	fa043783          	ld	a5,-96(s0)
 8006a02:	83dd                	srli	a5,a5,0x17
 8006a04:	0ff7f793          	andi	a5,a5,255
 8006a08:	fcf43c23          	sd	a5,-40(s0)
    sigB  = fracF32UI( uiB );
 8006a0c:	fa043703          	ld	a4,-96(s0)
 8006a10:	008007b7          	lui	a5,0x800
 8006a14:	17fd                	addi	a5,a5,-1
 8006a16:	8ff9                	and	a5,a5,a4
 8006a18:	fcf43823          	sd	a5,-48(s0)
    signZ = signA ^ signB;
 8006a1c:	faf44703          	lbu	a4,-81(s0)
 8006a20:	f9f44783          	lbu	a5,-97(s0)
 8006a24:	8fb9                	xor	a5,a5,a4
 8006a26:	0ff7f793          	andi	a5,a5,255
 8006a2a:	2781                	sext.w	a5,a5
 8006a2c:	00f037b3          	snez	a5,a5
 8006a30:	f8f40f23          	sb	a5,-98(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( expA == 0xFF ) {
 8006a34:	fe843703          	ld	a4,-24(s0)
 8006a38:	0ff00793          	li	a5,255
 8006a3c:	02f71163          	bne	a4,a5,8006a5e <f32_div+0xd2>
        if ( sigA ) goto propagateNaN;
 8006a40:	fe043783          	ld	a5,-32(s0)
 8006a44:	1a079763          	bnez	a5,8006bf2 <f32_div+0x266>
        if ( expB == 0xFF ) {
 8006a48:	fd843703          	ld	a4,-40(s0)
 8006a4c:	0ff00793          	li	a5,255
 8006a50:	1cf71763          	bne	a4,a5,8006c1e <f32_div+0x292>
            if ( sigB ) goto propagateNaN;
 8006a54:	fd043783          	ld	a5,-48(s0)
 8006a58:	1a078763          	beqz	a5,8006c06 <f32_div+0x27a>
 8006a5c:	aa61                	j	8006bf4 <f32_div+0x268>
            goto invalid;
        }
        goto infinity;
    }
    if ( expB == 0xFF ) {
 8006a5e:	fd843703          	ld	a4,-40(s0)
 8006a62:	0ff00793          	li	a5,255
 8006a66:	00f71763          	bne	a4,a5,8006a74 <f32_div+0xe8>
        if ( sigB ) goto propagateNaN;
 8006a6a:	fd043783          	ld	a5,-48(s0)
 8006a6e:	1c078963          	beqz	a5,8006c40 <f32_div+0x2b4>
 8006a72:	a249                	j	8006bf4 <f32_div+0x268>
        goto zero;
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( ! expB ) {
 8006a74:	fd843783          	ld	a5,-40(s0)
 8006a78:	e3b1                	bnez	a5,8006abc <f32_div+0x130>
        if ( ! sigB ) {
 8006a7a:	fd043783          	ld	a5,-48(s0)
 8006a7e:	ef89                	bnez	a5,8006a98 <f32_div+0x10c>
            if ( ! (expA | sigA) ) goto invalid;
 8006a80:	fe843703          	ld	a4,-24(s0)
 8006a84:	fe043783          	ld	a5,-32(s0)
 8006a88:	8fd9                	or	a5,a5,a4
 8006a8a:	18078063          	beqz	a5,8006c0a <f32_div+0x27e>
            softfloat_raiseFlags( softfloat_flag_infinite );
 8006a8e:	001467f3          	csrrsi	a5,fflags,8
 8006a92:	f8f43823          	sd	a5,-112(s0)
            goto infinity;
 8006a96:	a269                	j	8006c20 <f32_div+0x294>
        }
        normExpSig = softfloat_normSubnormalF32Sig( sigB );
 8006a98:	fd043503          	ld	a0,-48(s0)
 8006a9c:	372030ef          	jal	ra,8009e0e <softfloat_normSubnormalF32Sig>
 8006aa0:	87aa                	mv	a5,a0
 8006aa2:	882e                	mv	a6,a1
 8006aa4:	f6f43023          	sd	a5,-160(s0)
 8006aa8:	f7043423          	sd	a6,-152(s0)
        expB = normExpSig.exp;
 8006aac:	f6043783          	ld	a5,-160(s0)
 8006ab0:	fcf43c23          	sd	a5,-40(s0)
        sigB = normExpSig.sig;
 8006ab4:	f6843783          	ld	a5,-152(s0)
 8006ab8:	fcf43823          	sd	a5,-48(s0)
    }
    if ( ! expA ) {
 8006abc:	fe843783          	ld	a5,-24(s0)
 8006ac0:	e79d                	bnez	a5,8006aee <f32_div+0x162>
        if ( ! sigA ) goto zero;
 8006ac2:	fe043783          	ld	a5,-32(s0)
 8006ac6:	16078f63          	beqz	a5,8006c44 <f32_div+0x2b8>
        normExpSig = softfloat_normSubnormalF32Sig( sigA );
 8006aca:	fe043503          	ld	a0,-32(s0)
 8006ace:	340030ef          	jal	ra,8009e0e <softfloat_normSubnormalF32Sig>
 8006ad2:	87aa                	mv	a5,a0
 8006ad4:	882e                	mv	a6,a1
 8006ad6:	f6f43023          	sd	a5,-160(s0)
 8006ada:	f7043423          	sd	a6,-152(s0)
        expA = normExpSig.exp;
 8006ade:	f6043783          	ld	a5,-160(s0)
 8006ae2:	fef43423          	sd	a5,-24(s0)
        sigA = normExpSig.sig;
 8006ae6:	f6843783          	ld	a5,-152(s0)
 8006aea:	fef43023          	sd	a5,-32(s0)
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    expZ = expA - expB + 0x7E;
 8006aee:	fe843703          	ld	a4,-24(s0)
 8006af2:	fd843783          	ld	a5,-40(s0)
 8006af6:	40f707b3          	sub	a5,a4,a5
 8006afa:	07e78793          	addi	a5,a5,126 # 80007e <MEM_START-0x77fff82>
 8006afe:	fcf43423          	sd	a5,-56(s0)
    sigA |= 0x00800000;
 8006b02:	fe043703          	ld	a4,-32(s0)
 8006b06:	008007b7          	lui	a5,0x800
 8006b0a:	8fd9                	or	a5,a5,a4
 8006b0c:	fef43023          	sd	a5,-32(s0)
    sigB |= 0x00800000;
 8006b10:	fd043703          	ld	a4,-48(s0)
 8006b14:	008007b7          	lui	a5,0x800
 8006b18:	8fd9                	or	a5,a5,a4
 8006b1a:	fcf43823          	sd	a5,-48(s0)
        sig64A = (uint_fast64_t) sigA<<30;
    }
    sigZ = sig64A / sigB;
    if ( ! (sigZ & 0x3F) ) sigZ |= ((uint_fast64_t) sigB * sigZ != sig64A);
#else
    if ( sigA < sigB ) {
 8006b1e:	fe043703          	ld	a4,-32(s0)
 8006b22:	fd043783          	ld	a5,-48(s0)
 8006b26:	00f77d63          	bleu	a5,a4,8006b40 <f32_div+0x1b4>
        --expZ;
 8006b2a:	fc843783          	ld	a5,-56(s0)
 8006b2e:	17fd                	addi	a5,a5,-1
 8006b30:	fcf43423          	sd	a5,-56(s0)
        sigA <<= 8;
 8006b34:	fe043783          	ld	a5,-32(s0)
 8006b38:	07a2                	slli	a5,a5,0x8
 8006b3a:	fef43023          	sd	a5,-32(s0)
 8006b3e:	a031                	j	8006b4a <f32_div+0x1be>
    } else {
        sigA <<= 7;
 8006b40:	fe043783          	ld	a5,-32(s0)
 8006b44:	079e                	slli	a5,a5,0x7
 8006b46:	fef43023          	sd	a5,-32(s0)
    }
    sigB <<= 8;
 8006b4a:	fd043783          	ld	a5,-48(s0)
 8006b4e:	07a2                	slli	a5,a5,0x8
 8006b50:	fcf43823          	sd	a5,-48(s0)
    sigZ = ((uint_fast64_t) sigA * softfloat_approxRecip32_1( sigB ))>>32;
 8006b54:	fd043783          	ld	a5,-48(s0)
 8006b58:	2781                	sext.w	a5,a5
 8006b5a:	853e                	mv	a0,a5
 8006b5c:	1c6020ef          	jal	ra,8008d22 <softfloat_approxRecip32_1>
 8006b60:	87aa                	mv	a5,a0
 8006b62:	2781                	sext.w	a5,a5
 8006b64:	02079713          	slli	a4,a5,0x20
 8006b68:	9301                	srli	a4,a4,0x20
 8006b6a:	fe043783          	ld	a5,-32(s0)
 8006b6e:	02f707b3          	mul	a5,a4,a5
 8006b72:	9381                	srli	a5,a5,0x20
 8006b74:	fcf43023          	sd	a5,-64(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    sigZ += 2;
 8006b78:	fc043783          	ld	a5,-64(s0)
 8006b7c:	0789                	addi	a5,a5,2
 8006b7e:	fcf43023          	sd	a5,-64(s0)
    if ( (sigZ & 0x3F) < 2 ) {
 8006b82:	fc043783          	ld	a5,-64(s0)
 8006b86:	03e7f793          	andi	a5,a5,62
 8006b8a:	eba9                	bnez	a5,8006bdc <f32_div+0x250>
        sigZ &= ~3;
 8006b8c:	fc043783          	ld	a5,-64(s0)
 8006b90:	9bf1                	andi	a5,a5,-4
 8006b92:	fcf43023          	sd	a5,-64(s0)
#ifdef SOFTFLOAT_FAST_INT64
        rem = ((uint_fast64_t) sigA<<31) - (uint_fast64_t) sigZ * sigB;
#else
        rem = ((uint_fast64_t) sigA<<32) - (uint_fast64_t) (sigZ<<1) * sigB;
 8006b96:	fe043783          	ld	a5,-32(s0)
 8006b9a:	02079713          	slli	a4,a5,0x20
 8006b9e:	fc043783          	ld	a5,-64(s0)
 8006ba2:	00179693          	slli	a3,a5,0x1
 8006ba6:	fd043783          	ld	a5,-48(s0)
 8006baa:	02f687b3          	mul	a5,a3,a5
 8006bae:	40f707b3          	sub	a5,a4,a5
 8006bb2:	f8f43423          	sd	a5,-120(s0)
#endif
        if ( rem & UINT64_C( 0x8000000000000000 ) ) {
 8006bb6:	f8843783          	ld	a5,-120(s0)
 8006bba:	0007d863          	bgez	a5,8006bca <f32_div+0x23e>
            sigZ -= 4;
 8006bbe:	fc043783          	ld	a5,-64(s0)
 8006bc2:	17f1                	addi	a5,a5,-4
 8006bc4:	fcf43023          	sd	a5,-64(s0)
 8006bc8:	a811                	j	8006bdc <f32_div+0x250>
        } else {
            if ( rem ) sigZ |= 1;
 8006bca:	f8843783          	ld	a5,-120(s0)
 8006bce:	c799                	beqz	a5,8006bdc <f32_div+0x250>
 8006bd0:	fc043783          	ld	a5,-64(s0)
 8006bd4:	0017e793          	ori	a5,a5,1
 8006bd8:	fcf43023          	sd	a5,-64(s0)
        }
    }
#endif
    return softfloat_roundPackToF32( signZ, expZ, sigZ );
 8006bdc:	f9e44783          	lbu	a5,-98(s0)
 8006be0:	fc043603          	ld	a2,-64(s0)
 8006be4:	fc843583          	ld	a1,-56(s0)
 8006be8:	853e                	mv	a0,a5
 8006bea:	45c030ef          	jal	ra,800a046 <softfloat_roundPackToF32>
 8006bee:	87aa                	mv	a5,a0
 8006bf0:	a8a5                	j	8006c68 <f32_div+0x2dc>
        if ( sigA ) goto propagateNaN;
 8006bf2:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 propagateNaN:
    uiZ = softfloat_propagateNaNF32UI( uiA, uiB );
 8006bf4:	fa043583          	ld	a1,-96(s0)
 8006bf8:	fb043503          	ld	a0,-80(s0)
 8006bfc:	6a6040ef          	jal	ra,800b2a2 <softfloat_propagateNaNF32UI>
 8006c00:	faa43c23          	sd	a0,-72(s0)
    goto uiZ;
 8006c04:	a899                	j	8006c5a <f32_div+0x2ce>
            goto invalid;
 8006c06:	0001                	nop
 8006c08:	a011                	j	8006c0c <f32_div+0x280>
            if ( ! (expA | sigA) ) goto invalid;
 8006c0a:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 invalid:
    softfloat_raiseFlags( softfloat_flag_invalid );
 8006c0c:	001867f3          	csrrsi	a5,fflags,16
 8006c10:	f8f43023          	sd	a5,-128(s0)
    uiZ = defaultNaNF32UI;
 8006c14:	7fc007b7          	lui	a5,0x7fc00
 8006c18:	faf43c23          	sd	a5,-72(s0)
    goto uiZ;
 8006c1c:	a83d                	j	8006c5a <f32_div+0x2ce>
        goto infinity;
 8006c1e:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 infinity:
    uiZ = packToF32UI( signZ, 0xFF, 0 );
 8006c20:	f9e44783          	lbu	a5,-98(s0)
 8006c24:	2781                	sext.w	a5,a5
 8006c26:	01f7979b          	slliw	a5,a5,0x1f
 8006c2a:	0007871b          	sext.w	a4,a5
 8006c2e:	7f8007b7          	lui	a5,0x7f800
 8006c32:	9fb9                	addw	a5,a5,a4
 8006c34:	2781                	sext.w	a5,a5
 8006c36:	1782                	slli	a5,a5,0x20
 8006c38:	9381                	srli	a5,a5,0x20
 8006c3a:	faf43c23          	sd	a5,-72(s0)
    goto uiZ;
 8006c3e:	a831                	j	8006c5a <f32_div+0x2ce>
        goto zero;
 8006c40:	0001                	nop
 8006c42:	a011                	j	8006c46 <f32_div+0x2ba>
        if ( ! sigA ) goto zero;
 8006c44:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 zero:
    uiZ = packToF32UI( signZ, 0, 0 );
 8006c46:	f9e44783          	lbu	a5,-98(s0)
 8006c4a:	2781                	sext.w	a5,a5
 8006c4c:	01f7979b          	slliw	a5,a5,0x1f
 8006c50:	2781                	sext.w	a5,a5
 8006c52:	1782                	slli	a5,a5,0x20
 8006c54:	9381                	srli	a5,a5,0x20
 8006c56:	faf43c23          	sd	a5,-72(s0)
 uiZ:
    uZ.ui = uiZ;
 8006c5a:	fb843783          	ld	a5,-72(s0)
 8006c5e:	2781                	sext.w	a5,a5
 8006c60:	f4f42c23          	sw	a5,-168(s0)
    return uZ.f;
 8006c64:	f5842783          	lw	a5,-168(s0)

}
 8006c68:	853e                	mv	a0,a5
 8006c6a:	70ea                	ld	ra,184(sp)
 8006c6c:	744a                	ld	s0,176(sp)
 8006c6e:	6129                	addi	sp,sp,192
 8006c70:	8082                	ret

0000000008006c72 <f32_eq>:
#include "internals.h"
#include "specialize.h"
#include "softfloat.h"

bool f32_eq( float32_t a, float32_t b )
{
 8006c72:	715d                	addi	sp,sp,-80
 8006c74:	e4a2                	sd	s0,72(sp)
 8006c76:	0880                	addi	s0,sp,80
 8006c78:	faa42c23          	sw	a0,-72(s0)
 8006c7c:	fab42823          	sw	a1,-80(s0)
    union ui32_f32 uA;
    uint_fast32_t uiA;
    union ui32_f32 uB;
    uint_fast32_t uiB;

    uA.f = a;
 8006c80:	fb842783          	lw	a5,-72(s0)
 8006c84:	fcf42823          	sw	a5,-48(s0)
    uiA = uA.ui;
 8006c88:	fd042783          	lw	a5,-48(s0)
 8006c8c:	1782                	slli	a5,a5,0x20
 8006c8e:	9381                	srli	a5,a5,0x20
 8006c90:	fef43423          	sd	a5,-24(s0)
    uB.f = b;
 8006c94:	fb042783          	lw	a5,-80(s0)
 8006c98:	fcf42423          	sw	a5,-56(s0)
    uiB = uB.ui;
 8006c9c:	fc842783          	lw	a5,-56(s0)
 8006ca0:	1782                	slli	a5,a5,0x20
 8006ca2:	9381                	srli	a5,a5,0x20
 8006ca4:	fef43023          	sd	a5,-32(s0)
    if ( isNaNF32UI( uiA ) || isNaNF32UI( uiB ) ) {
 8006ca8:	fe843783          	ld	a5,-24(s0)
 8006cac:	fff7c713          	not	a4,a5
 8006cb0:	7f8007b7          	lui	a5,0x7f800
 8006cb4:	8ff9                	and	a5,a5,a4
 8006cb6:	eb81                	bnez	a5,8006cc6 <f32_eq+0x54>
 8006cb8:	fe843703          	ld	a4,-24(s0)
 8006cbc:	008007b7          	lui	a5,0x800
 8006cc0:	17fd                	addi	a5,a5,-1
 8006cc2:	8ff9                	and	a5,a5,a4
 8006cc4:	e385                	bnez	a5,8006ce4 <f32_eq+0x72>
 8006cc6:	fe043783          	ld	a5,-32(s0)
 8006cca:	fff7c713          	not	a4,a5
 8006cce:	7f8007b7          	lui	a5,0x7f800
 8006cd2:	8ff9                	and	a5,a5,a4
 8006cd4:	efb1                	bnez	a5,8006d30 <f32_eq+0xbe>
 8006cd6:	fe043703          	ld	a4,-32(s0)
 8006cda:	008007b7          	lui	a5,0x800
 8006cde:	17fd                	addi	a5,a5,-1
 8006ce0:	8ff9                	and	a5,a5,a4
 8006ce2:	c7b9                	beqz	a5,8006d30 <f32_eq+0xbe>
        if (
            softfloat_isSigNaNF32UI( uiA ) || softfloat_isSigNaNF32UI( uiB )
 8006ce4:	fe843703          	ld	a4,-24(s0)
 8006ce8:	7fc007b7          	lui	a5,0x7fc00
 8006cec:	8f7d                	and	a4,a4,a5
        if (
 8006cee:	7f8007b7          	lui	a5,0x7f800
 8006cf2:	00f71963          	bne	a4,a5,8006d04 <f32_eq+0x92>
            softfloat_isSigNaNF32UI( uiA ) || softfloat_isSigNaNF32UI( uiB )
 8006cf6:	fe843703          	ld	a4,-24(s0)
 8006cfa:	004007b7          	lui	a5,0x400
 8006cfe:	17fd                	addi	a5,a5,-1
 8006d00:	8ff9                	and	a5,a5,a4
 8006d02:	e38d                	bnez	a5,8006d24 <f32_eq+0xb2>
 8006d04:	fe043703          	ld	a4,-32(s0)
 8006d08:	7fc007b7          	lui	a5,0x7fc00
 8006d0c:	8f7d                	and	a4,a4,a5
 8006d0e:	7f8007b7          	lui	a5,0x7f800
 8006d12:	00f71d63          	bne	a4,a5,8006d2c <f32_eq+0xba>
 8006d16:	fe043703          	ld	a4,-32(s0)
 8006d1a:	004007b7          	lui	a5,0x400
 8006d1e:	17fd                	addi	a5,a5,-1
 8006d20:	8ff9                	and	a5,a5,a4
 8006d22:	c789                	beqz	a5,8006d2c <f32_eq+0xba>
        ) {
            softfloat_raiseFlags( softfloat_flag_invalid );
 8006d24:	001867f3          	csrrsi	a5,fflags,16
 8006d28:	fcf43c23          	sd	a5,-40(s0)
        }
        return false;
 8006d2c:	4781                	li	a5,0
 8006d2e:	a815                	j	8006d62 <f32_eq+0xf0>
    }
    return (uiA == uiB) || ! (uint32_t) ((uiA | uiB)<<1);
 8006d30:	fe843703          	ld	a4,-24(s0)
 8006d34:	fe043783          	ld	a5,-32(s0)
 8006d38:	00f70f63          	beq	a4,a5,8006d56 <f32_eq+0xe4>
 8006d3c:	fe843783          	ld	a5,-24(s0)
 8006d40:	0007871b          	sext.w	a4,a5
 8006d44:	fe043783          	ld	a5,-32(s0)
 8006d48:	2781                	sext.w	a5,a5
 8006d4a:	8fd9                	or	a5,a5,a4
 8006d4c:	2781                	sext.w	a5,a5
 8006d4e:	0017979b          	slliw	a5,a5,0x1
 8006d52:	2781                	sext.w	a5,a5
 8006d54:	e399                	bnez	a5,8006d5a <f32_eq+0xe8>
 8006d56:	4785                	li	a5,1
 8006d58:	a011                	j	8006d5c <f32_eq+0xea>
 8006d5a:	4781                	li	a5,0
 8006d5c:	8b85                	andi	a5,a5,1
 8006d5e:	0ff7f793          	andi	a5,a5,255

}
 8006d62:	853e                	mv	a0,a5
 8006d64:	6426                	ld	s0,72(sp)
 8006d66:	6161                	addi	sp,sp,80
 8006d68:	8082                	ret

0000000008006d6a <f32_lt>:
#include "platform.h"
#include "internals.h"
#include "softfloat.h"

bool f32_lt( float32_t a, float32_t b )
{
 8006d6a:	715d                	addi	sp,sp,-80
 8006d6c:	e4a2                	sd	s0,72(sp)
 8006d6e:	0880                	addi	s0,sp,80
 8006d70:	faa42c23          	sw	a0,-72(s0)
 8006d74:	fab42823          	sw	a1,-80(s0)
    uint_fast32_t uiA;
    union ui32_f32 uB;
    uint_fast32_t uiB;
    bool signA, signB;

    uA.f = a;
 8006d78:	fb842783          	lw	a5,-72(s0)
 8006d7c:	fcf42423          	sw	a5,-56(s0)
    uiA = uA.ui;
 8006d80:	fc842783          	lw	a5,-56(s0)
 8006d84:	1782                	slli	a5,a5,0x20
 8006d86:	9381                	srli	a5,a5,0x20
 8006d88:	fef43423          	sd	a5,-24(s0)
    uB.f = b;
 8006d8c:	fb042783          	lw	a5,-80(s0)
 8006d90:	fcf42023          	sw	a5,-64(s0)
    uiB = uB.ui;
 8006d94:	fc042783          	lw	a5,-64(s0)
 8006d98:	1782                	slli	a5,a5,0x20
 8006d9a:	9381                	srli	a5,a5,0x20
 8006d9c:	fef43023          	sd	a5,-32(s0)
    if ( isNaNF32UI( uiA ) || isNaNF32UI( uiB ) ) {
 8006da0:	fe843783          	ld	a5,-24(s0)
 8006da4:	fff7c713          	not	a4,a5
 8006da8:	7f8007b7          	lui	a5,0x7f800
 8006dac:	8ff9                	and	a5,a5,a4
 8006dae:	eb81                	bnez	a5,8006dbe <f32_lt+0x54>
 8006db0:	fe843703          	ld	a4,-24(s0)
 8006db4:	008007b7          	lui	a5,0x800
 8006db8:	17fd                	addi	a5,a5,-1
 8006dba:	8ff9                	and	a5,a5,a4
 8006dbc:	e385                	bnez	a5,8006ddc <f32_lt+0x72>
 8006dbe:	fe043783          	ld	a5,-32(s0)
 8006dc2:	fff7c713          	not	a4,a5
 8006dc6:	7f8007b7          	lui	a5,0x7f800
 8006dca:	8ff9                	and	a5,a5,a4
 8006dcc:	ef91                	bnez	a5,8006de8 <f32_lt+0x7e>
 8006dce:	fe043703          	ld	a4,-32(s0)
 8006dd2:	008007b7          	lui	a5,0x800
 8006dd6:	17fd                	addi	a5,a5,-1
 8006dd8:	8ff9                	and	a5,a5,a4
 8006dda:	c799                	beqz	a5,8006de8 <f32_lt+0x7e>
        softfloat_raiseFlags( softfloat_flag_invalid );
 8006ddc:	001867f3          	csrrsi	a5,fflags,16
 8006de0:	fcf43823          	sd	a5,-48(s0)
        return false;
 8006de4:	4781                	li	a5,0
 8006de6:	a871                	j	8006e82 <f32_lt+0x118>
    }
    signA = signF32UI( uiA );
 8006de8:	fe843783          	ld	a5,-24(s0)
 8006dec:	2781                	sext.w	a5,a5
 8006dee:	01f7d79b          	srliw	a5,a5,0x1f
 8006df2:	fcf40fa3          	sb	a5,-33(s0)
    signB = signF32UI( uiB );
 8006df6:	fe043783          	ld	a5,-32(s0)
 8006dfa:	2781                	sext.w	a5,a5
 8006dfc:	01f7d79b          	srliw	a5,a5,0x1f
 8006e00:	fcf40f23          	sb	a5,-34(s0)
    return
        (signA != signB) ? signA && ((uint32_t) ((uiA | uiB)<<1) != 0)
            : (uiA != uiB) && (signA ^ (uiA < uiB));
 8006e04:	fdf44703          	lbu	a4,-33(s0)
 8006e08:	fde44783          	lbu	a5,-34(s0)
 8006e0c:	0ff77713          	andi	a4,a4,255
 8006e10:	0ff7f793          	andi	a5,a5,255
 8006e14:	02f70b63          	beq	a4,a5,8006e4a <f32_lt+0xe0>
        (signA != signB) ? signA && ((uint32_t) ((uiA | uiB)<<1) != 0)
 8006e18:	fdf44783          	lbu	a5,-33(s0)
 8006e1c:	0ff7f793          	andi	a5,a5,255
 8006e20:	c385                	beqz	a5,8006e40 <f32_lt+0xd6>
 8006e22:	fe843783          	ld	a5,-24(s0)
 8006e26:	0007871b          	sext.w	a4,a5
 8006e2a:	fe043783          	ld	a5,-32(s0)
 8006e2e:	2781                	sext.w	a5,a5
 8006e30:	8fd9                	or	a5,a5,a4
 8006e32:	2781                	sext.w	a5,a5
 8006e34:	0017979b          	slliw	a5,a5,0x1
 8006e38:	2781                	sext.w	a5,a5
 8006e3a:	c399                	beqz	a5,8006e40 <f32_lt+0xd6>
 8006e3c:	4785                	li	a5,1
 8006e3e:	a011                	j	8006e42 <f32_lt+0xd8>
 8006e40:	4781                	li	a5,0
            : (uiA != uiB) && (signA ^ (uiA < uiB));
 8006e42:	8b85                	andi	a5,a5,1
 8006e44:	0ff7f793          	andi	a5,a5,255
 8006e48:	a82d                	j	8006e82 <f32_lt+0x118>
 8006e4a:	fe843703          	ld	a4,-24(s0)
 8006e4e:	fe043783          	ld	a5,-32(s0)
 8006e52:	02f70463          	beq	a4,a5,8006e7a <f32_lt+0x110>
 8006e56:	fdf44783          	lbu	a5,-33(s0)
 8006e5a:	0007869b          	sext.w	a3,a5
 8006e5e:	fe843703          	ld	a4,-24(s0)
 8006e62:	fe043783          	ld	a5,-32(s0)
 8006e66:	00f737b3          	sltu	a5,a4,a5
 8006e6a:	0ff7f793          	andi	a5,a5,255
 8006e6e:	2781                	sext.w	a5,a5
 8006e70:	8736                	mv	a4,a3
 8006e72:	00f70463          	beq	a4,a5,8006e7a <f32_lt+0x110>
 8006e76:	4785                	li	a5,1
 8006e78:	a011                	j	8006e7c <f32_lt+0x112>
 8006e7a:	4781                	li	a5,0
 8006e7c:	8b85                	andi	a5,a5,1
 8006e7e:	0ff7f793          	andi	a5,a5,255

}
 8006e82:	853e                	mv	a0,a5
 8006e84:	6426                	ld	s0,72(sp)
 8006e86:	6161                	addi	sp,sp,80
 8006e88:	8082                	ret

0000000008006e8a <f32_lt_quiet>:
#include "internals.h"
#include "specialize.h"
#include "softfloat.h"

bool f32_lt_quiet( float32_t a, float32_t b )
{
 8006e8a:	715d                	addi	sp,sp,-80
 8006e8c:	e4a2                	sd	s0,72(sp)
 8006e8e:	0880                	addi	s0,sp,80
 8006e90:	faa42c23          	sw	a0,-72(s0)
 8006e94:	fab42823          	sw	a1,-80(s0)
    uint_fast32_t uiA;
    union ui32_f32 uB;
    uint_fast32_t uiB;
    bool signA, signB;

    uA.f = a;
 8006e98:	fb842783          	lw	a5,-72(s0)
 8006e9c:	fcf42423          	sw	a5,-56(s0)
    uiA = uA.ui;
 8006ea0:	fc842783          	lw	a5,-56(s0)
 8006ea4:	1782                	slli	a5,a5,0x20
 8006ea6:	9381                	srli	a5,a5,0x20
 8006ea8:	fef43423          	sd	a5,-24(s0)
    uB.f = b;
 8006eac:	fb042783          	lw	a5,-80(s0)
 8006eb0:	fcf42023          	sw	a5,-64(s0)
    uiB = uB.ui;
 8006eb4:	fc042783          	lw	a5,-64(s0)
 8006eb8:	1782                	slli	a5,a5,0x20
 8006eba:	9381                	srli	a5,a5,0x20
 8006ebc:	fef43023          	sd	a5,-32(s0)
    if ( isNaNF32UI( uiA ) || isNaNF32UI( uiB ) ) {
 8006ec0:	fe843783          	ld	a5,-24(s0)
 8006ec4:	fff7c713          	not	a4,a5
 8006ec8:	7f8007b7          	lui	a5,0x7f800
 8006ecc:	8ff9                	and	a5,a5,a4
 8006ece:	eb81                	bnez	a5,8006ede <f32_lt_quiet+0x54>
 8006ed0:	fe843703          	ld	a4,-24(s0)
 8006ed4:	008007b7          	lui	a5,0x800
 8006ed8:	17fd                	addi	a5,a5,-1
 8006eda:	8ff9                	and	a5,a5,a4
 8006edc:	e385                	bnez	a5,8006efc <f32_lt_quiet+0x72>
 8006ede:	fe043783          	ld	a5,-32(s0)
 8006ee2:	fff7c713          	not	a4,a5
 8006ee6:	7f8007b7          	lui	a5,0x7f800
 8006eea:	8ff9                	and	a5,a5,a4
 8006eec:	efb1                	bnez	a5,8006f48 <f32_lt_quiet+0xbe>
 8006eee:	fe043703          	ld	a4,-32(s0)
 8006ef2:	008007b7          	lui	a5,0x800
 8006ef6:	17fd                	addi	a5,a5,-1
 8006ef8:	8ff9                	and	a5,a5,a4
 8006efa:	c7b9                	beqz	a5,8006f48 <f32_lt_quiet+0xbe>
        if (
            softfloat_isSigNaNF32UI( uiA ) || softfloat_isSigNaNF32UI( uiB )
 8006efc:	fe843703          	ld	a4,-24(s0)
 8006f00:	7fc007b7          	lui	a5,0x7fc00
 8006f04:	8f7d                	and	a4,a4,a5
        if (
 8006f06:	7f8007b7          	lui	a5,0x7f800
 8006f0a:	00f71963          	bne	a4,a5,8006f1c <f32_lt_quiet+0x92>
            softfloat_isSigNaNF32UI( uiA ) || softfloat_isSigNaNF32UI( uiB )
 8006f0e:	fe843703          	ld	a4,-24(s0)
 8006f12:	004007b7          	lui	a5,0x400
 8006f16:	17fd                	addi	a5,a5,-1
 8006f18:	8ff9                	and	a5,a5,a4
 8006f1a:	e38d                	bnez	a5,8006f3c <f32_lt_quiet+0xb2>
 8006f1c:	fe043703          	ld	a4,-32(s0)
 8006f20:	7fc007b7          	lui	a5,0x7fc00
 8006f24:	8f7d                	and	a4,a4,a5
 8006f26:	7f8007b7          	lui	a5,0x7f800
 8006f2a:	00f71d63          	bne	a4,a5,8006f44 <f32_lt_quiet+0xba>
 8006f2e:	fe043703          	ld	a4,-32(s0)
 8006f32:	004007b7          	lui	a5,0x400
 8006f36:	17fd                	addi	a5,a5,-1
 8006f38:	8ff9                	and	a5,a5,a4
 8006f3a:	c789                	beqz	a5,8006f44 <f32_lt_quiet+0xba>
        ) {
            softfloat_raiseFlags( softfloat_flag_invalid );
 8006f3c:	001867f3          	csrrsi	a5,fflags,16
 8006f40:	fcf43823          	sd	a5,-48(s0)
        }
        return false;
 8006f44:	4781                	li	a5,0
 8006f46:	a871                	j	8006fe2 <f32_lt_quiet+0x158>
    }
    signA = signF32UI( uiA );
 8006f48:	fe843783          	ld	a5,-24(s0)
 8006f4c:	2781                	sext.w	a5,a5
 8006f4e:	01f7d79b          	srliw	a5,a5,0x1f
 8006f52:	fcf40fa3          	sb	a5,-33(s0)
    signB = signF32UI( uiB );
 8006f56:	fe043783          	ld	a5,-32(s0)
 8006f5a:	2781                	sext.w	a5,a5
 8006f5c:	01f7d79b          	srliw	a5,a5,0x1f
 8006f60:	fcf40f23          	sb	a5,-34(s0)
    return
        (signA != signB) ? signA && ((uint32_t) ((uiA | uiB)<<1) != 0)
            : (uiA != uiB) && (signA ^ (uiA < uiB));
 8006f64:	fdf44703          	lbu	a4,-33(s0)
 8006f68:	fde44783          	lbu	a5,-34(s0)
 8006f6c:	0ff77713          	andi	a4,a4,255
 8006f70:	0ff7f793          	andi	a5,a5,255
 8006f74:	02f70b63          	beq	a4,a5,8006faa <f32_lt_quiet+0x120>
        (signA != signB) ? signA && ((uint32_t) ((uiA | uiB)<<1) != 0)
 8006f78:	fdf44783          	lbu	a5,-33(s0)
 8006f7c:	0ff7f793          	andi	a5,a5,255
 8006f80:	c385                	beqz	a5,8006fa0 <f32_lt_quiet+0x116>
 8006f82:	fe843783          	ld	a5,-24(s0)
 8006f86:	0007871b          	sext.w	a4,a5
 8006f8a:	fe043783          	ld	a5,-32(s0)
 8006f8e:	2781                	sext.w	a5,a5
 8006f90:	8fd9                	or	a5,a5,a4
 8006f92:	2781                	sext.w	a5,a5
 8006f94:	0017979b          	slliw	a5,a5,0x1
 8006f98:	2781                	sext.w	a5,a5
 8006f9a:	c399                	beqz	a5,8006fa0 <f32_lt_quiet+0x116>
 8006f9c:	4785                	li	a5,1
 8006f9e:	a011                	j	8006fa2 <f32_lt_quiet+0x118>
 8006fa0:	4781                	li	a5,0
            : (uiA != uiB) && (signA ^ (uiA < uiB));
 8006fa2:	8b85                	andi	a5,a5,1
 8006fa4:	0ff7f793          	andi	a5,a5,255
 8006fa8:	a82d                	j	8006fe2 <f32_lt_quiet+0x158>
 8006faa:	fe843703          	ld	a4,-24(s0)
 8006fae:	fe043783          	ld	a5,-32(s0)
 8006fb2:	02f70463          	beq	a4,a5,8006fda <f32_lt_quiet+0x150>
 8006fb6:	fdf44783          	lbu	a5,-33(s0)
 8006fba:	0007869b          	sext.w	a3,a5
 8006fbe:	fe843703          	ld	a4,-24(s0)
 8006fc2:	fe043783          	ld	a5,-32(s0)
 8006fc6:	00f737b3          	sltu	a5,a4,a5
 8006fca:	0ff7f793          	andi	a5,a5,255
 8006fce:	2781                	sext.w	a5,a5
 8006fd0:	8736                	mv	a4,a3
 8006fd2:	00f70463          	beq	a4,a5,8006fda <f32_lt_quiet+0x150>
 8006fd6:	4785                	li	a5,1
 8006fd8:	a011                	j	8006fdc <f32_lt_quiet+0x152>
 8006fda:	4781                	li	a5,0
 8006fdc:	8b85                	andi	a5,a5,1
 8006fde:	0ff7f793          	andi	a5,a5,255

}
 8006fe2:	853e                	mv	a0,a5
 8006fe4:	6426                	ld	s0,72(sp)
 8006fe6:	6161                	addi	sp,sp,80
 8006fe8:	8082                	ret

0000000008006fea <f32_mul>:
#include "internals.h"
#include "specialize.h"
#include "softfloat.h"

float32_t f32_mul( float32_t a, float32_t b )
{
 8006fea:	7171                	addi	sp,sp,-176
 8006fec:	f506                	sd	ra,168(sp)
 8006fee:	f122                	sd	s0,160(sp)
 8006ff0:	1900                	addi	s0,sp,176
 8006ff2:	f4a42c23          	sw	a0,-168(s0)
 8006ff6:	f4b42823          	sw	a1,-176(s0)
    uint_fast32_t sigZ, uiZ;
    union ui32_f32 uZ;

    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    uA.f = a;
 8006ffa:	f5842783          	lw	a5,-168(s0)
 8006ffe:	f8f42023          	sw	a5,-128(s0)
    uiA = uA.ui;
 8007002:	f8042783          	lw	a5,-128(s0)
 8007006:	1782                	slli	a5,a5,0x20
 8007008:	9381                	srli	a5,a5,0x20
 800700a:	faf43423          	sd	a5,-88(s0)
    signA = signF32UI( uiA );
 800700e:	fa843783          	ld	a5,-88(s0)
 8007012:	2781                	sext.w	a5,a5
 8007014:	01f7d79b          	srliw	a5,a5,0x1f
 8007018:	faf403a3          	sb	a5,-89(s0)
    expA  = expF32UI( uiA );
 800701c:	fa843783          	ld	a5,-88(s0)
 8007020:	83dd                	srli	a5,a5,0x17
 8007022:	0ff7f793          	andi	a5,a5,255
 8007026:	fef43423          	sd	a5,-24(s0)
    sigA  = fracF32UI( uiA );
 800702a:	fa843703          	ld	a4,-88(s0)
 800702e:	008007b7          	lui	a5,0x800
 8007032:	17fd                	addi	a5,a5,-1
 8007034:	8ff9                	and	a5,a5,a4
 8007036:	fef43023          	sd	a5,-32(s0)
    uB.f = b;
 800703a:	f5042783          	lw	a5,-176(s0)
 800703e:	f6f42c23          	sw	a5,-136(s0)
    uiB = uB.ui;
 8007042:	f7842783          	lw	a5,-136(s0)
 8007046:	1782                	slli	a5,a5,0x20
 8007048:	9381                	srli	a5,a5,0x20
 800704a:	f8f43c23          	sd	a5,-104(s0)
    signB = signF32UI( uiB );
 800704e:	f9843783          	ld	a5,-104(s0)
 8007052:	2781                	sext.w	a5,a5
 8007054:	01f7d79b          	srliw	a5,a5,0x1f
 8007058:	f8f40ba3          	sb	a5,-105(s0)
    expB  = expF32UI( uiB );
 800705c:	f9843783          	ld	a5,-104(s0)
 8007060:	83dd                	srli	a5,a5,0x17
 8007062:	0ff7f793          	andi	a5,a5,255
 8007066:	fcf43c23          	sd	a5,-40(s0)
    sigB  = fracF32UI( uiB );
 800706a:	f9843703          	ld	a4,-104(s0)
 800706e:	008007b7          	lui	a5,0x800
 8007072:	17fd                	addi	a5,a5,-1
 8007074:	8ff9                	and	a5,a5,a4
 8007076:	fcf43823          	sd	a5,-48(s0)
    signZ = signA ^ signB;
 800707a:	fa744703          	lbu	a4,-89(s0)
 800707e:	f9744783          	lbu	a5,-105(s0)
 8007082:	8fb9                	xor	a5,a5,a4
 8007084:	0ff7f793          	andi	a5,a5,255
 8007088:	2781                	sext.w	a5,a5
 800708a:	00f037b3          	snez	a5,a5
 800708e:	f8f40b23          	sb	a5,-106(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( expA == 0xFF ) {
 8007092:	fe843703          	ld	a4,-24(s0)
 8007096:	0ff00793          	li	a5,255
 800709a:	02f71863          	bne	a4,a5,80070ca <f32_mul+0xe0>
        if ( sigA || ((expB == 0xFF) && sigB) ) goto propagateNaN;
 800709e:	fe043783          	ld	a5,-32(s0)
 80070a2:	12079b63          	bnez	a5,80071d8 <f32_mul+0x1ee>
 80070a6:	fd843703          	ld	a4,-40(s0)
 80070aa:	0ff00793          	li	a5,255
 80070ae:	00f71663          	bne	a4,a5,80070ba <f32_mul+0xd0>
 80070b2:	fd043783          	ld	a5,-48(s0)
 80070b6:	12079163          	bnez	a5,80071d8 <f32_mul+0x1ee>
        magBits = expB | sigB;
 80070ba:	fd843783          	ld	a5,-40(s0)
 80070be:	fd043703          	ld	a4,-48(s0)
 80070c2:	8fd9                	or	a5,a5,a4
 80070c4:	fcf43423          	sd	a5,-56(s0)
        goto infArg;
 80070c8:	a225                	j	80071f0 <f32_mul+0x206>
    }
    if ( expB == 0xFF ) {
 80070ca:	fd843703          	ld	a4,-40(s0)
 80070ce:	0ff00793          	li	a5,255
 80070d2:	00f71e63          	bne	a4,a5,80070ee <f32_mul+0x104>
        if ( sigB ) goto propagateNaN;
 80070d6:	fd043783          	ld	a5,-48(s0)
 80070da:	10079163          	bnez	a5,80071dc <f32_mul+0x1f2>
        magBits = expA | sigA;
 80070de:	fe843783          	ld	a5,-24(s0)
 80070e2:	fe043703          	ld	a4,-32(s0)
 80070e6:	8fd9                	or	a5,a5,a4
 80070e8:	fcf43423          	sd	a5,-56(s0)
        goto infArg;
 80070ec:	a211                	j	80071f0 <f32_mul+0x206>
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( ! expA ) {
 80070ee:	fe843783          	ld	a5,-24(s0)
 80070f2:	e79d                	bnez	a5,8007120 <f32_mul+0x136>
        if ( ! sigA ) goto zero;
 80070f4:	fe043783          	ld	a5,-32(s0)
 80070f8:	12078863          	beqz	a5,8007228 <f32_mul+0x23e>
        normExpSig = softfloat_normSubnormalF32Sig( sigA );
 80070fc:	fe043503          	ld	a0,-32(s0)
 8007100:	50f020ef          	jal	ra,8009e0e <softfloat_normSubnormalF32Sig>
 8007104:	87aa                	mv	a5,a0
 8007106:	882e                	mv	a6,a1
 8007108:	f6f43423          	sd	a5,-152(s0)
 800710c:	f7043823          	sd	a6,-144(s0)
        expA = normExpSig.exp;
 8007110:	f6843783          	ld	a5,-152(s0)
 8007114:	fef43423          	sd	a5,-24(s0)
        sigA = normExpSig.sig;
 8007118:	f7043783          	ld	a5,-144(s0)
 800711c:	fef43023          	sd	a5,-32(s0)
    }
    if ( ! expB ) {
 8007120:	fd843783          	ld	a5,-40(s0)
 8007124:	e79d                	bnez	a5,8007152 <f32_mul+0x168>
        if ( ! sigB ) goto zero;
 8007126:	fd043783          	ld	a5,-48(s0)
 800712a:	10078163          	beqz	a5,800722c <f32_mul+0x242>
        normExpSig = softfloat_normSubnormalF32Sig( sigB );
 800712e:	fd043503          	ld	a0,-48(s0)
 8007132:	4dd020ef          	jal	ra,8009e0e <softfloat_normSubnormalF32Sig>
 8007136:	87aa                	mv	a5,a0
 8007138:	882e                	mv	a6,a1
 800713a:	f6f43423          	sd	a5,-152(s0)
 800713e:	f7043823          	sd	a6,-144(s0)
        expB = normExpSig.exp;
 8007142:	f6843783          	ld	a5,-152(s0)
 8007146:	fcf43c23          	sd	a5,-40(s0)
        sigB = normExpSig.sig;
 800714a:	f7043783          	ld	a5,-144(s0)
 800714e:	fcf43823          	sd	a5,-48(s0)
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    expZ = expA + expB - 0x7F;
 8007152:	fe843703          	ld	a4,-24(s0)
 8007156:	fd843783          	ld	a5,-40(s0)
 800715a:	97ba                	add	a5,a5,a4
 800715c:	f8178793          	addi	a5,a5,-127 # 7fff81 <MEM_START-0x780007f>
 8007160:	fcf43023          	sd	a5,-64(s0)
    sigA = (sigA | 0x00800000)<<7;
 8007164:	fe043783          	ld	a5,-32(s0)
 8007168:	00779713          	slli	a4,a5,0x7
 800716c:	400007b7          	lui	a5,0x40000
 8007170:	8fd9                	or	a5,a5,a4
 8007172:	fef43023          	sd	a5,-32(s0)
    sigB = (sigB | 0x00800000)<<8;
 8007176:	fd043783          	ld	a5,-48(s0)
 800717a:	00879713          	slli	a4,a5,0x8
 800717e:	4785                	li	a5,1
 8007180:	07fe                	slli	a5,a5,0x1f
 8007182:	8fd9                	or	a5,a5,a4
 8007184:	fcf43823          	sd	a5,-48(s0)
    sigZ = softfloat_shortShiftRightJam64( (uint_fast64_t) sigA * sigB, 32 );
 8007188:	fe043703          	ld	a4,-32(s0)
 800718c:	fd043783          	ld	a5,-48(s0)
 8007190:	02f707b3          	mul	a5,a4,a5
 8007194:	02000593          	li	a1,32
 8007198:	853e                	mv	a0,a5
 800719a:	079030ef          	jal	ra,800aa12 <softfloat_shortShiftRightJam64>
 800719e:	faa43c23          	sd	a0,-72(s0)
    if ( sigZ < 0x40000000 ) {
 80071a2:	fb843703          	ld	a4,-72(s0)
 80071a6:	400007b7          	lui	a5,0x40000
 80071aa:	00f77c63          	bleu	a5,a4,80071c2 <f32_mul+0x1d8>
        --expZ;
 80071ae:	fc043783          	ld	a5,-64(s0)
 80071b2:	17fd                	addi	a5,a5,-1
 80071b4:	fcf43023          	sd	a5,-64(s0)
        sigZ <<= 1;
 80071b8:	fb843783          	ld	a5,-72(s0)
 80071bc:	0786                	slli	a5,a5,0x1
 80071be:	faf43c23          	sd	a5,-72(s0)
    }
    return softfloat_roundPackToF32( signZ, expZ, sigZ );
 80071c2:	f9644783          	lbu	a5,-106(s0)
 80071c6:	fb843603          	ld	a2,-72(s0)
 80071ca:	fc043583          	ld	a1,-64(s0)
 80071ce:	853e                	mv	a0,a5
 80071d0:	677020ef          	jal	ra,800a046 <softfloat_roundPackToF32>
 80071d4:	87aa                	mv	a5,a0
 80071d6:	a8ad                	j	8007250 <f32_mul+0x266>
        if ( sigA || ((expB == 0xFF) && sigB) ) goto propagateNaN;
 80071d8:	0001                	nop
 80071da:	a011                	j	80071de <f32_mul+0x1f4>
        if ( sigB ) goto propagateNaN;
 80071dc:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 propagateNaN:
    uiZ = softfloat_propagateNaNF32UI( uiA, uiB );
 80071de:	f9843583          	ld	a1,-104(s0)
 80071e2:	fa843503          	ld	a0,-88(s0)
 80071e6:	0bc040ef          	jal	ra,800b2a2 <softfloat_propagateNaNF32UI>
 80071ea:	faa43823          	sd	a0,-80(s0)
    goto uiZ;
 80071ee:	a891                	j	8007242 <f32_mul+0x258>
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 infArg:
    if ( ! magBits ) {
 80071f0:	fc843783          	ld	a5,-56(s0)
 80071f4:	eb91                	bnez	a5,8007208 <f32_mul+0x21e>
        softfloat_raiseFlags( softfloat_flag_invalid );
 80071f6:	001867f3          	csrrsi	a5,fflags,16
 80071fa:	f8f43423          	sd	a5,-120(s0)
        uiZ = defaultNaNF32UI;
 80071fe:	7fc007b7          	lui	a5,0x7fc00
 8007202:	faf43823          	sd	a5,-80(s0)
    } else {
        uiZ = packToF32UI( signZ, 0xFF, 0 );
    }
    goto uiZ;
 8007206:	a835                	j	8007242 <f32_mul+0x258>
        uiZ = packToF32UI( signZ, 0xFF, 0 );
 8007208:	f9644783          	lbu	a5,-106(s0)
 800720c:	2781                	sext.w	a5,a5
 800720e:	01f7979b          	slliw	a5,a5,0x1f
 8007212:	0007871b          	sext.w	a4,a5
 8007216:	7f8007b7          	lui	a5,0x7f800
 800721a:	9fb9                	addw	a5,a5,a4
 800721c:	2781                	sext.w	a5,a5
 800721e:	1782                	slli	a5,a5,0x20
 8007220:	9381                	srli	a5,a5,0x20
 8007222:	faf43823          	sd	a5,-80(s0)
    goto uiZ;
 8007226:	a831                	j	8007242 <f32_mul+0x258>
        if ( ! sigA ) goto zero;
 8007228:	0001                	nop
 800722a:	a011                	j	800722e <f32_mul+0x244>
        if ( ! sigB ) goto zero;
 800722c:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 zero:
    uiZ = packToF32UI( signZ, 0, 0 );
 800722e:	f9644783          	lbu	a5,-106(s0)
 8007232:	2781                	sext.w	a5,a5
 8007234:	01f7979b          	slliw	a5,a5,0x1f
 8007238:	2781                	sext.w	a5,a5
 800723a:	1782                	slli	a5,a5,0x20
 800723c:	9381                	srli	a5,a5,0x20
 800723e:	faf43823          	sd	a5,-80(s0)
 uiZ:
    uZ.ui = uiZ;
 8007242:	fb043783          	ld	a5,-80(s0)
 8007246:	2781                	sext.w	a5,a5
 8007248:	f6f42023          	sw	a5,-160(s0)
    return uZ.f;
 800724c:	f6042783          	lw	a5,-160(s0)

}
 8007250:	853e                	mv	a0,a5
 8007252:	70aa                	ld	ra,168(sp)
 8007254:	740a                	ld	s0,160(sp)
 8007256:	614d                	addi	sp,sp,176
 8007258:	8082                	ret

000000000800725a <f32_sqrt>:
#include "internals.h"
#include "specialize.h"
#include "softfloat.h"

float32_t f32_sqrt( float32_t a )
{
 800725a:	7175                	addi	sp,sp,-144
 800725c:	e506                	sd	ra,136(sp)
 800725e:	e122                	sd	s0,128(sp)
 8007260:	0900                	addi	s0,sp,144
 8007262:	f6a42c23          	sw	a0,-136(s0)
    uint32_t negRem;
    union ui32_f32 uZ;

    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    uA.f = a;
 8007266:	f7842783          	lw	a5,-136(s0)
 800726a:	f8f42c23          	sw	a5,-104(s0)
    uiA = uA.ui;
 800726e:	f9842783          	lw	a5,-104(s0)
 8007272:	1782                	slli	a5,a5,0x20
 8007274:	9381                	srli	a5,a5,0x20
 8007276:	fcf43423          	sd	a5,-56(s0)
    signA = signF32UI( uiA );
 800727a:	fc843783          	ld	a5,-56(s0)
 800727e:	2781                	sext.w	a5,a5
 8007280:	01f7d79b          	srliw	a5,a5,0x1f
 8007284:	fcf403a3          	sb	a5,-57(s0)
    expA  = expF32UI( uiA );
 8007288:	fc843783          	ld	a5,-56(s0)
 800728c:	83dd                	srli	a5,a5,0x17
 800728e:	0ff7f793          	andi	a5,a5,255
 8007292:	fef43423          	sd	a5,-24(s0)
    sigA  = fracF32UI( uiA );
 8007296:	fc843703          	ld	a4,-56(s0)
 800729a:	008007b7          	lui	a5,0x800
 800729e:	17fd                	addi	a5,a5,-1
 80072a0:	8ff9                	and	a5,a5,a4
 80072a2:	fef43023          	sd	a5,-32(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( expA == 0xFF ) {
 80072a6:	fe843703          	ld	a4,-24(s0)
 80072aa:	0ff00793          	li	a5,255
 80072ae:	02f71863          	bne	a4,a5,80072de <f32_sqrt+0x84>
        if ( sigA ) {
 80072b2:	fe043783          	ld	a5,-32(s0)
 80072b6:	cb89                	beqz	a5,80072c8 <f32_sqrt+0x6e>
            uiZ = softfloat_propagateNaNF32UI( uiA, 0 );
 80072b8:	4581                	li	a1,0
 80072ba:	fc843503          	ld	a0,-56(s0)
 80072be:	7e5030ef          	jal	ra,800b2a2 <softfloat_propagateNaNF32UI>
 80072c2:	fca43c23          	sd	a0,-40(s0)
            goto uiZ;
 80072c6:	a295                	j	800742a <f32_sqrt+0x1d0>
        }
        if ( ! signA ) return a;
 80072c8:	fc744783          	lbu	a5,-57(s0)
 80072cc:	0017c793          	xori	a5,a5,1
 80072d0:	0ff7f793          	andi	a5,a5,255
 80072d4:	14078063          	beqz	a5,8007414 <f32_sqrt+0x1ba>
 80072d8:	f7842783          	lw	a5,-136(s0)
 80072dc:	aab1                	j	8007438 <f32_sqrt+0x1de>
        goto invalid;
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( signA ) {
 80072de:	fc744783          	lbu	a5,-57(s0)
 80072e2:	0ff7f793          	andi	a5,a5,255
 80072e6:	cb99                	beqz	a5,80072fc <f32_sqrt+0xa2>
        if ( ! (expA | sigA) ) return a;
 80072e8:	fe843703          	ld	a4,-24(s0)
 80072ec:	fe043783          	ld	a5,-32(s0)
 80072f0:	8fd9                	or	a5,a5,a4
 80072f2:	12079363          	bnez	a5,8007418 <f32_sqrt+0x1be>
 80072f6:	f7842783          	lw	a5,-136(s0)
 80072fa:	aa3d                	j	8007438 <f32_sqrt+0x1de>
        goto invalid;
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( ! expA ) {
 80072fc:	fe843783          	ld	a5,-24(s0)
 8007300:	eb8d                	bnez	a5,8007332 <f32_sqrt+0xd8>
        if ( ! sigA ) return a;
 8007302:	fe043783          	ld	a5,-32(s0)
 8007306:	e781                	bnez	a5,800730e <f32_sqrt+0xb4>
 8007308:	f7842783          	lw	a5,-136(s0)
 800730c:	a235                	j	8007438 <f32_sqrt+0x1de>
        normExpSig = softfloat_normSubnormalF32Sig( sigA );
 800730e:	fe043503          	ld	a0,-32(s0)
 8007312:	2fd020ef          	jal	ra,8009e0e <softfloat_normSubnormalF32Sig>
 8007316:	87aa                	mv	a5,a0
 8007318:	882e                	mv	a6,a1
 800731a:	f8f43423          	sd	a5,-120(s0)
 800731e:	f9043823          	sd	a6,-112(s0)
        expA = normExpSig.exp;
 8007322:	f8843783          	ld	a5,-120(s0)
 8007326:	fef43423          	sd	a5,-24(s0)
        sigA = normExpSig.sig;
 800732a:	f9043783          	ld	a5,-112(s0)
 800732e:	fef43023          	sd	a5,-32(s0)
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    expZ = ((expA - 0x7F)>>1) + 0x7E;
 8007332:	fe843783          	ld	a5,-24(s0)
 8007336:	f8178793          	addi	a5,a5,-127 # 7fff81 <MEM_START-0x780007f>
 800733a:	8785                	srai	a5,a5,0x1
 800733c:	07e78793          	addi	a5,a5,126
 8007340:	faf43c23          	sd	a5,-72(s0)
    expA &= 1;
 8007344:	fe843783          	ld	a5,-24(s0)
 8007348:	8b85                	andi	a5,a5,1
 800734a:	fef43423          	sd	a5,-24(s0)
    sigA = (sigA | 0x00800000)<<8;
 800734e:	fe043783          	ld	a5,-32(s0)
 8007352:	00879713          	slli	a4,a5,0x8
 8007356:	4785                	li	a5,1
 8007358:	07fe                	slli	a5,a5,0x1f
 800735a:	8fd9                	or	a5,a5,a4
 800735c:	fef43023          	sd	a5,-32(s0)
    sigZ =
        ((uint_fast64_t) sigA * softfloat_approxRecipSqrt32_1( expA, sigA ))
 8007360:	fe843783          	ld	a5,-24(s0)
 8007364:	2781                	sext.w	a5,a5
 8007366:	fe043703          	ld	a4,-32(s0)
 800736a:	2701                	sext.w	a4,a4
 800736c:	85ba                	mv	a1,a4
 800736e:	853e                	mv	a0,a5
 8007370:	293010ef          	jal	ra,8008e02 <softfloat_approxRecipSqrt32_1>
 8007374:	87aa                	mv	a5,a0
 8007376:	2781                	sext.w	a5,a5
 8007378:	02079713          	slli	a4,a5,0x20
 800737c:	9301                	srli	a4,a4,0x20
 800737e:	fe043783          	ld	a5,-32(s0)
 8007382:	02f707b3          	mul	a5,a4,a5
    sigZ =
 8007386:	9381                	srli	a5,a5,0x20
 8007388:	fcf43823          	sd	a5,-48(s0)
            >>32;
    if ( expA ) sigZ >>= 1;
 800738c:	fe843783          	ld	a5,-24(s0)
 8007390:	c791                	beqz	a5,800739c <f32_sqrt+0x142>
 8007392:	fd043783          	ld	a5,-48(s0)
 8007396:	8385                	srli	a5,a5,0x1
 8007398:	fcf43823          	sd	a5,-48(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    sigZ += 2;
 800739c:	fd043783          	ld	a5,-48(s0)
 80073a0:	0789                	addi	a5,a5,2
 80073a2:	fcf43823          	sd	a5,-48(s0)
    if ( (sigZ & 0x3F) < 2 ) {
 80073a6:	fd043783          	ld	a5,-48(s0)
 80073aa:	03e7f793          	andi	a5,a5,62
 80073ae:	ebb1                	bnez	a5,8007402 <f32_sqrt+0x1a8>
        shiftedSigZ = sigZ>>2;
 80073b0:	fd043783          	ld	a5,-48(s0)
 80073b4:	8389                	srli	a5,a5,0x2
 80073b6:	faf43823          	sd	a5,-80(s0)
        negRem = shiftedSigZ * shiftedSigZ;
 80073ba:	fb043783          	ld	a5,-80(s0)
 80073be:	0007871b          	sext.w	a4,a5
 80073c2:	fb043783          	ld	a5,-80(s0)
 80073c6:	2781                	sext.w	a5,a5
 80073c8:	02f707bb          	mulw	a5,a4,a5
 80073cc:	faf42623          	sw	a5,-84(s0)
        sigZ &= ~3;
 80073d0:	fd043783          	ld	a5,-48(s0)
 80073d4:	9bf1                	andi	a5,a5,-4
 80073d6:	fcf43823          	sd	a5,-48(s0)
        if ( negRem & 0x80000000 ) {
 80073da:	fac42783          	lw	a5,-84(s0)
 80073de:	0007d963          	bgez	a5,80073f0 <f32_sqrt+0x196>
            sigZ |= 1;
 80073e2:	fd043783          	ld	a5,-48(s0)
 80073e6:	0017e793          	ori	a5,a5,1
 80073ea:	fcf43823          	sd	a5,-48(s0)
 80073ee:	a811                	j	8007402 <f32_sqrt+0x1a8>
        } else {
            if ( negRem ) --sigZ;
 80073f0:	fac42783          	lw	a5,-84(s0)
 80073f4:	2781                	sext.w	a5,a5
 80073f6:	c791                	beqz	a5,8007402 <f32_sqrt+0x1a8>
 80073f8:	fd043783          	ld	a5,-48(s0)
 80073fc:	17fd                	addi	a5,a5,-1
 80073fe:	fcf43823          	sd	a5,-48(s0)
        }
    }
    return softfloat_roundPackToF32( 0, expZ, sigZ );
 8007402:	fd043603          	ld	a2,-48(s0)
 8007406:	fb843583          	ld	a1,-72(s0)
 800740a:	4501                	li	a0,0
 800740c:	43b020ef          	jal	ra,800a046 <softfloat_roundPackToF32>
 8007410:	87aa                	mv	a5,a0
 8007412:	a01d                	j	8007438 <f32_sqrt+0x1de>
        goto invalid;
 8007414:	0001                	nop
 8007416:	a011                	j	800741a <f32_sqrt+0x1c0>
        goto invalid;
 8007418:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 invalid:
    softfloat_raiseFlags( softfloat_flag_invalid );
 800741a:	001867f3          	csrrsi	a5,fflags,16
 800741e:	faf43023          	sd	a5,-96(s0)
    uiZ = defaultNaNF32UI;
 8007422:	7fc007b7          	lui	a5,0x7fc00
 8007426:	fcf43c23          	sd	a5,-40(s0)
 uiZ:
    uZ.ui = uiZ;
 800742a:	fd843783          	ld	a5,-40(s0)
 800742e:	2781                	sext.w	a5,a5
 8007430:	f8f42023          	sw	a5,-128(s0)
    return uZ.f;
 8007434:	f8042783          	lw	a5,-128(s0)

}
 8007438:	853e                	mv	a0,a5
 800743a:	60aa                	ld	ra,136(sp)
 800743c:	640a                	ld	s0,128(sp)
 800743e:	6149                	addi	sp,sp,144
 8007440:	8082                	ret

0000000008007442 <f32_to_f64>:
#include "internals.h"
#include "specialize.h"
#include "softfloat.h"

float64_t f32_to_f64( float32_t a )
{
 8007442:	7119                	addi	sp,sp,-128
 8007444:	fc86                	sd	ra,120(sp)
 8007446:	f8a2                	sd	s0,112(sp)
 8007448:	0100                	addi	s0,sp,128
 800744a:	f8a42423          	sw	a0,-120(s0)
    struct exp16_sig32 normExpSig;
    union ui64_f64 uZ;

    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    uA.f = a;
 800744e:	f8842783          	lw	a5,-120(s0)
 8007452:	faf42c23          	sw	a5,-72(s0)
    uiA = uA.ui;
 8007456:	fb842783          	lw	a5,-72(s0)
 800745a:	1782                	slli	a5,a5,0x20
 800745c:	9381                	srli	a5,a5,0x20
 800745e:	fcf43823          	sd	a5,-48(s0)
    sign = signF32UI( uiA );
 8007462:	fd043783          	ld	a5,-48(s0)
 8007466:	2781                	sext.w	a5,a5
 8007468:	01f7d79b          	srliw	a5,a5,0x1f
 800746c:	fcf407a3          	sb	a5,-49(s0)
    exp  = expF32UI( uiA );
 8007470:	fd043783          	ld	a5,-48(s0)
 8007474:	83dd                	srli	a5,a5,0x17
 8007476:	0ff7f793          	andi	a5,a5,255
 800747a:	fef43423          	sd	a5,-24(s0)
    frac = fracF32UI( uiA );
 800747e:	fd043703          	ld	a4,-48(s0)
 8007482:	008007b7          	lui	a5,0x800
 8007486:	17fd                	addi	a5,a5,-1
 8007488:	8ff9                	and	a5,a5,a4
 800748a:	fef43023          	sd	a5,-32(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( exp == 0xFF ) {
 800748e:	fe843703          	ld	a4,-24(s0)
 8007492:	0ff00793          	li	a5,255
 8007496:	04f71063          	bne	a4,a5,80074d6 <f32_to_f64+0x94>
        if ( frac ) {
 800749a:	fe043783          	ld	a5,-32(s0)
 800749e:	c38d                	beqz	a5,80074c0 <f32_to_f64+0x7e>
            softfloat_f32UIToCommonNaN( uiA, &commonNaN );
 80074a0:	fd043703          	ld	a4,-48(s0)
 80074a4:	004007b7          	lui	a5,0x400
 80074a8:	8ff9                	and	a5,a5,a4
 80074aa:	e789                	bnez	a5,80074b4 <f32_to_f64+0x72>
 80074ac:	001867f3          	csrrsi	a5,fflags,16
 80074b0:	fcf43023          	sd	a5,-64(s0)
            uiZ = softfloat_commonNaNToF64UI( &commonNaN );
 80074b4:	00fff7b7          	lui	a5,0xfff
 80074b8:	179e                	slli	a5,a5,0x27
 80074ba:	fcf43c23          	sd	a5,-40(s0)
        } else {
            uiZ = packToF64UI( sign, 0x7FF, 0 );
        }
        goto uiZ;
 80074be:	a89d                	j	8007534 <f32_to_f64+0xf2>
            uiZ = packToF64UI( sign, 0x7FF, 0 );
 80074c0:	fcf44783          	lbu	a5,-49(s0)
 80074c4:	03f79713          	slli	a4,a5,0x3f
 80074c8:	7ff00793          	li	a5,2047
 80074cc:	17d2                	slli	a5,a5,0x34
 80074ce:	97ba                	add	a5,a5,a4
 80074d0:	fcf43c23          	sd	a5,-40(s0)
        goto uiZ;
 80074d4:	a085                	j	8007534 <f32_to_f64+0xf2>
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( ! exp ) {
 80074d6:	fe843783          	ld	a5,-24(s0)
 80074da:	ef8d                	bnez	a5,8007514 <f32_to_f64+0xd2>
        if ( ! frac ) {
 80074dc:	fe043783          	ld	a5,-32(s0)
 80074e0:	e799                	bnez	a5,80074ee <f32_to_f64+0xac>
            uiZ = packToF64UI( sign, 0, 0 );
 80074e2:	fcf44783          	lbu	a5,-49(s0)
 80074e6:	17fe                	slli	a5,a5,0x3f
 80074e8:	fcf43c23          	sd	a5,-40(s0)
            goto uiZ;
 80074ec:	a0a1                	j	8007534 <f32_to_f64+0xf2>
        }
        normExpSig = softfloat_normSubnormalF32Sig( frac );
 80074ee:	fe043503          	ld	a0,-32(s0)
 80074f2:	11d020ef          	jal	ra,8009e0e <softfloat_normSubnormalF32Sig>
 80074f6:	87aa                	mv	a5,a0
 80074f8:	882e                	mv	a6,a1
 80074fa:	faf43023          	sd	a5,-96(s0)
 80074fe:	fb043423          	sd	a6,-88(s0)
        exp = normExpSig.exp - 1;
 8007502:	fa043783          	ld	a5,-96(s0)
 8007506:	17fd                	addi	a5,a5,-1
 8007508:	fef43423          	sd	a5,-24(s0)
        frac = normExpSig.sig;
 800750c:	fa843783          	ld	a5,-88(s0)
 8007510:	fef43023          	sd	a5,-32(s0)
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    uiZ = packToF64UI( sign, exp + 0x380, (uint_fast64_t) frac<<29 );
 8007514:	fcf44783          	lbu	a5,-49(s0)
 8007518:	03f79713          	slli	a4,a5,0x3f
 800751c:	fe843783          	ld	a5,-24(s0)
 8007520:	38078793          	addi	a5,a5,896 # fff380 <MEM_START-0x7000c80>
 8007524:	17d2                	slli	a5,a5,0x34
 8007526:	973e                	add	a4,a4,a5
 8007528:	fe043783          	ld	a5,-32(s0)
 800752c:	07f6                	slli	a5,a5,0x1d
 800752e:	97ba                	add	a5,a5,a4
 8007530:	fcf43c23          	sd	a5,-40(s0)
 uiZ:
    uZ.ui = uiZ;
 8007534:	fd843783          	ld	a5,-40(s0)
 8007538:	f8f43c23          	sd	a5,-104(s0)
    return uZ.f;
 800753c:	f9843783          	ld	a5,-104(s0)

}
 8007540:	853e                	mv	a0,a5
 8007542:	70e6                	ld	ra,120(sp)
 8007544:	7446                	ld	s0,112(sp)
 8007546:	6109                	addi	sp,sp,128
 8007548:	8082                	ret

000000000800754a <f32_classify>:
#include "internals.h"
#include "specialize.h"
#include "softfloat.h"

uint_fast16_t f32_classify( float32_t a )
{
 800754a:	7139                	addi	sp,sp,-64
 800754c:	fc22                	sd	s0,56(sp)
 800754e:	0080                	addi	s0,sp,64
 8007550:	fca42423          	sw	a0,-56(s0)
    union ui32_f32 uA;
    uint_fast32_t uiA;

    uA.f = a;
 8007554:	fc842783          	lw	a5,-56(s0)
 8007558:	fcf42823          	sw	a5,-48(s0)
    uiA = uA.ui;
 800755c:	fd042783          	lw	a5,-48(s0)
 8007560:	1782                	slli	a5,a5,0x20
 8007562:	9381                	srli	a5,a5,0x20
 8007564:	fef43423          	sd	a5,-24(s0)

    uint_fast16_t infOrNaN = expF32UI( uiA ) == 0xFF;
 8007568:	fe843783          	ld	a5,-24(s0)
 800756c:	83dd                	srli	a5,a5,0x17
 800756e:	0ff7f793          	andi	a5,a5,255
 8007572:	f0178793          	addi	a5,a5,-255
 8007576:	0017b793          	seqz	a5,a5
 800757a:	0ff7f793          	andi	a5,a5,255
 800757e:	fef43023          	sd	a5,-32(s0)
    uint_fast16_t subnormalOrZero = expF32UI( uiA ) == 0;
 8007582:	fe843783          	ld	a5,-24(s0)
 8007586:	83dd                	srli	a5,a5,0x17
 8007588:	0ff7f793          	andi	a5,a5,255
 800758c:	0017b793          	seqz	a5,a5
 8007590:	0ff7f793          	andi	a5,a5,255
 8007594:	fcf43c23          	sd	a5,-40(s0)
    bool sign = signF32UI( uiA );
 8007598:	fe843783          	ld	a5,-24(s0)
 800759c:	2781                	sext.w	a5,a5
 800759e:	01f7d79b          	srliw	a5,a5,0x1f
 80075a2:	fcf40ba3          	sb	a5,-41(s0)

    return
        (  sign && infOrNaN && fracF32UI( uiA ) == 0 )          << 0 |
 80075a6:	fd744783          	lbu	a5,-41(s0)
 80075aa:	0ff7f793          	andi	a5,a5,255
 80075ae:	cf89                	beqz	a5,80075c8 <f32_classify+0x7e>
 80075b0:	fe043783          	ld	a5,-32(s0)
 80075b4:	cb91                	beqz	a5,80075c8 <f32_classify+0x7e>
 80075b6:	fe843703          	ld	a4,-24(s0)
 80075ba:	008007b7          	lui	a5,0x800
 80075be:	17fd                	addi	a5,a5,-1
 80075c0:	8ff9                	and	a5,a5,a4
 80075c2:	e399                	bnez	a5,80075c8 <f32_classify+0x7e>
 80075c4:	4785                	li	a5,1
 80075c6:	a011                	j	80075ca <f32_classify+0x80>
 80075c8:	4781                	li	a5,0
        (  sign && !infOrNaN && !subnormalOrZero )              << 1 |
 80075ca:	fd744703          	lbu	a4,-41(s0)
 80075ce:	0ff77713          	andi	a4,a4,255
 80075d2:	cb09                	beqz	a4,80075e4 <f32_classify+0x9a>
 80075d4:	fe043703          	ld	a4,-32(s0)
 80075d8:	e711                	bnez	a4,80075e4 <f32_classify+0x9a>
 80075da:	fd843703          	ld	a4,-40(s0)
 80075de:	e319                	bnez	a4,80075e4 <f32_classify+0x9a>
 80075e0:	4705                	li	a4,1
 80075e2:	a011                	j	80075e6 <f32_classify+0x9c>
 80075e4:	4701                	li	a4,0
 80075e6:	0017171b          	slliw	a4,a4,0x1
 80075ea:	2701                	sext.w	a4,a4
        (  sign && infOrNaN && fracF32UI( uiA ) == 0 )          << 0 |
 80075ec:	8fd9                	or	a5,a5,a4
 80075ee:	0007871b          	sext.w	a4,a5
        (  sign && subnormalOrZero && fracF32UI( uiA ) )        << 2 |
 80075f2:	fd744783          	lbu	a5,-41(s0)
 80075f6:	0ff7f793          	andi	a5,a5,255
 80075fa:	cf89                	beqz	a5,8007614 <f32_classify+0xca>
 80075fc:	fd843783          	ld	a5,-40(s0)
 8007600:	cb91                	beqz	a5,8007614 <f32_classify+0xca>
 8007602:	fe843683          	ld	a3,-24(s0)
 8007606:	008007b7          	lui	a5,0x800
 800760a:	17fd                	addi	a5,a5,-1
 800760c:	8ff5                	and	a5,a5,a3
 800760e:	c399                	beqz	a5,8007614 <f32_classify+0xca>
 8007610:	4785                	li	a5,1
 8007612:	a011                	j	8007616 <f32_classify+0xcc>
 8007614:	4781                	li	a5,0
 8007616:	0027979b          	slliw	a5,a5,0x2
 800761a:	2781                	sext.w	a5,a5
        (  sign && !infOrNaN && !subnormalOrZero )              << 1 |
 800761c:	8fd9                	or	a5,a5,a4
 800761e:	0007871b          	sext.w	a4,a5
        (  sign && subnormalOrZero && fracF32UI( uiA ) == 0 )   << 3 |
 8007622:	fd744783          	lbu	a5,-41(s0)
 8007626:	0ff7f793          	andi	a5,a5,255
 800762a:	cf89                	beqz	a5,8007644 <f32_classify+0xfa>
 800762c:	fd843783          	ld	a5,-40(s0)
 8007630:	cb91                	beqz	a5,8007644 <f32_classify+0xfa>
 8007632:	fe843683          	ld	a3,-24(s0)
 8007636:	008007b7          	lui	a5,0x800
 800763a:	17fd                	addi	a5,a5,-1
 800763c:	8ff5                	and	a5,a5,a3
 800763e:	e399                	bnez	a5,8007644 <f32_classify+0xfa>
 8007640:	4785                	li	a5,1
 8007642:	a011                	j	8007646 <f32_classify+0xfc>
 8007644:	4781                	li	a5,0
 8007646:	0037979b          	slliw	a5,a5,0x3
 800764a:	2781                	sext.w	a5,a5
        (  sign && subnormalOrZero && fracF32UI( uiA ) )        << 2 |
 800764c:	8fd9                	or	a5,a5,a4
 800764e:	0007871b          	sext.w	a4,a5
        ( !sign && infOrNaN && fracF32UI( uiA ) == 0 )          << 7 |
 8007652:	fd744783          	lbu	a5,-41(s0)
 8007656:	0017c793          	xori	a5,a5,1
 800765a:	0ff7f793          	andi	a5,a5,255
 800765e:	cf89                	beqz	a5,8007678 <f32_classify+0x12e>
 8007660:	fe043783          	ld	a5,-32(s0)
 8007664:	cb91                	beqz	a5,8007678 <f32_classify+0x12e>
 8007666:	fe843683          	ld	a3,-24(s0)
 800766a:	008007b7          	lui	a5,0x800
 800766e:	17fd                	addi	a5,a5,-1
 8007670:	8ff5                	and	a5,a5,a3
 8007672:	e399                	bnez	a5,8007678 <f32_classify+0x12e>
 8007674:	4785                	li	a5,1
 8007676:	a011                	j	800767a <f32_classify+0x130>
 8007678:	4781                	li	a5,0
 800767a:	0077979b          	slliw	a5,a5,0x7
 800767e:	2781                	sext.w	a5,a5
        (  sign && subnormalOrZero && fracF32UI( uiA ) == 0 )   << 3 |
 8007680:	8fd9                	or	a5,a5,a4
 8007682:	0007871b          	sext.w	a4,a5
        ( !sign && !infOrNaN && !subnormalOrZero )              << 6 |
 8007686:	fd744783          	lbu	a5,-41(s0)
 800768a:	0017c793          	xori	a5,a5,1
 800768e:	0ff7f793          	andi	a5,a5,255
 8007692:	cb89                	beqz	a5,80076a4 <f32_classify+0x15a>
 8007694:	fe043783          	ld	a5,-32(s0)
 8007698:	e791                	bnez	a5,80076a4 <f32_classify+0x15a>
 800769a:	fd843783          	ld	a5,-40(s0)
 800769e:	e399                	bnez	a5,80076a4 <f32_classify+0x15a>
 80076a0:	4785                	li	a5,1
 80076a2:	a011                	j	80076a6 <f32_classify+0x15c>
 80076a4:	4781                	li	a5,0
 80076a6:	0067979b          	slliw	a5,a5,0x6
 80076aa:	2781                	sext.w	a5,a5
        ( !sign && infOrNaN && fracF32UI( uiA ) == 0 )          << 7 |
 80076ac:	8fd9                	or	a5,a5,a4
 80076ae:	0007871b          	sext.w	a4,a5
        ( !sign && subnormalOrZero && fracF32UI( uiA ) )        << 5 |
 80076b2:	fd744783          	lbu	a5,-41(s0)
 80076b6:	0017c793          	xori	a5,a5,1
 80076ba:	0ff7f793          	andi	a5,a5,255
 80076be:	cf89                	beqz	a5,80076d8 <f32_classify+0x18e>
 80076c0:	fd843783          	ld	a5,-40(s0)
 80076c4:	cb91                	beqz	a5,80076d8 <f32_classify+0x18e>
 80076c6:	fe843683          	ld	a3,-24(s0)
 80076ca:	008007b7          	lui	a5,0x800
 80076ce:	17fd                	addi	a5,a5,-1
 80076d0:	8ff5                	and	a5,a5,a3
 80076d2:	c399                	beqz	a5,80076d8 <f32_classify+0x18e>
 80076d4:	4785                	li	a5,1
 80076d6:	a011                	j	80076da <f32_classify+0x190>
 80076d8:	4781                	li	a5,0
 80076da:	0057979b          	slliw	a5,a5,0x5
 80076de:	2781                	sext.w	a5,a5
        ( !sign && !infOrNaN && !subnormalOrZero )              << 6 |
 80076e0:	8fd9                	or	a5,a5,a4
 80076e2:	0007871b          	sext.w	a4,a5
        ( !sign && subnormalOrZero && fracF32UI( uiA ) == 0 )   << 4 |
 80076e6:	fd744783          	lbu	a5,-41(s0)
 80076ea:	0017c793          	xori	a5,a5,1
 80076ee:	0ff7f793          	andi	a5,a5,255
 80076f2:	cf89                	beqz	a5,800770c <f32_classify+0x1c2>
 80076f4:	fd843783          	ld	a5,-40(s0)
 80076f8:	cb91                	beqz	a5,800770c <f32_classify+0x1c2>
 80076fa:	fe843683          	ld	a3,-24(s0)
 80076fe:	008007b7          	lui	a5,0x800
 8007702:	17fd                	addi	a5,a5,-1
 8007704:	8ff5                	and	a5,a5,a3
 8007706:	e399                	bnez	a5,800770c <f32_classify+0x1c2>
 8007708:	4785                	li	a5,1
 800770a:	a011                	j	800770e <f32_classify+0x1c4>
 800770c:	4781                	li	a5,0
 800770e:	0047979b          	slliw	a5,a5,0x4
 8007712:	2781                	sext.w	a5,a5
        ( !sign && subnormalOrZero && fracF32UI( uiA ) )        << 5 |
 8007714:	8fd9                	or	a5,a5,a4
 8007716:	0007871b          	sext.w	a4,a5
        ( isNaNF32UI( uiA ) &&  softfloat_isSigNaNF32UI( uiA )) << 8 |
 800771a:	fe843783          	ld	a5,-24(s0)
 800771e:	fff7c693          	not	a3,a5
 8007722:	7f8007b7          	lui	a5,0x7f800
 8007726:	8ff5                	and	a5,a5,a3
 8007728:	eb95                	bnez	a5,800775c <f32_classify+0x212>
 800772a:	fe843683          	ld	a3,-24(s0)
 800772e:	008007b7          	lui	a5,0x800
 8007732:	17fd                	addi	a5,a5,-1
 8007734:	8ff5                	and	a5,a5,a3
 8007736:	c39d                	beqz	a5,800775c <f32_classify+0x212>
 8007738:	fe843683          	ld	a3,-24(s0)
 800773c:	7fc007b7          	lui	a5,0x7fc00
 8007740:	8efd                	and	a3,a3,a5
 8007742:	7f8007b7          	lui	a5,0x7f800
 8007746:	00f69b63          	bne	a3,a5,800775c <f32_classify+0x212>
 800774a:	fe843683          	ld	a3,-24(s0)
 800774e:	004007b7          	lui	a5,0x400
 8007752:	17fd                	addi	a5,a5,-1
 8007754:	8ff5                	and	a5,a5,a3
 8007756:	c399                	beqz	a5,800775c <f32_classify+0x212>
 8007758:	4785                	li	a5,1
 800775a:	a011                	j	800775e <f32_classify+0x214>
 800775c:	4781                	li	a5,0
 800775e:	0087979b          	slliw	a5,a5,0x8
 8007762:	2781                	sext.w	a5,a5
        ( !sign && subnormalOrZero && fracF32UI( uiA ) == 0 )   << 4 |
 8007764:	8fd9                	or	a5,a5,a4
 8007766:	0007871b          	sext.w	a4,a5
        ( isNaNF32UI( uiA ) && !softfloat_isSigNaNF32UI( uiA )) << 9;
 800776a:	fe843783          	ld	a5,-24(s0)
 800776e:	fff7c693          	not	a3,a5
 8007772:	7f8007b7          	lui	a5,0x7f800
 8007776:	8ff5                	and	a5,a5,a3
 8007778:	eb95                	bnez	a5,80077ac <f32_classify+0x262>
 800777a:	fe843683          	ld	a3,-24(s0)
 800777e:	008007b7          	lui	a5,0x800
 8007782:	17fd                	addi	a5,a5,-1
 8007784:	8ff5                	and	a5,a5,a3
 8007786:	c39d                	beqz	a5,80077ac <f32_classify+0x262>
 8007788:	fe843683          	ld	a3,-24(s0)
 800778c:	7fc007b7          	lui	a5,0x7fc00
 8007790:	8efd                	and	a3,a3,a5
 8007792:	7f8007b7          	lui	a5,0x7f800
 8007796:	00f69963          	bne	a3,a5,80077a8 <f32_classify+0x25e>
 800779a:	fe843683          	ld	a3,-24(s0)
 800779e:	004007b7          	lui	a5,0x400
 80077a2:	17fd                	addi	a5,a5,-1
 80077a4:	8ff5                	and	a5,a5,a3
 80077a6:	e399                	bnez	a5,80077ac <f32_classify+0x262>
 80077a8:	4785                	li	a5,1
 80077aa:	a011                	j	80077ae <f32_classify+0x264>
 80077ac:	4781                	li	a5,0
 80077ae:	0097979b          	slliw	a5,a5,0x9
 80077b2:	2781                	sext.w	a5,a5
        ( isNaNF32UI( uiA ) &&  softfloat_isSigNaNF32UI( uiA )) << 8 |
 80077b4:	8fd9                	or	a5,a5,a4
 80077b6:	2781                	sext.w	a5,a5
}
 80077b8:	853e                	mv	a0,a5
 80077ba:	7462                	ld	s0,56(sp)
 80077bc:	6121                	addi	sp,sp,64
 80077be:	8082                	ret

00000000080077c0 <f64_add>:
#include "platform.h"
#include "internals.h"
#include "softfloat.h"

float64_t f64_add( float64_t a, float64_t b )
{
 80077c0:	711d                	addi	sp,sp,-96
 80077c2:	ec86                	sd	ra,88(sp)
 80077c4:	e8a2                	sd	s0,80(sp)
 80077c6:	1080                	addi	s0,sp,96
 80077c8:	faa43423          	sd	a0,-88(s0)
 80077cc:	fab43023          	sd	a1,-96(s0)
    bool signB;
#if ! defined INLINE_LEVEL || (INLINE_LEVEL < 2)
    float64_t (*magsFuncPtr)( uint_fast64_t, uint_fast64_t, bool );
#endif

    uA.f = a;
 80077d0:	fa843783          	ld	a5,-88(s0)
 80077d4:	fcf43023          	sd	a5,-64(s0)
    uiA = uA.ui;
 80077d8:	fc043783          	ld	a5,-64(s0)
 80077dc:	fef43423          	sd	a5,-24(s0)
    signA = signF64UI( uiA );
 80077e0:	fe843783          	ld	a5,-24(s0)
 80077e4:	93fd                	srli	a5,a5,0x3f
 80077e6:	fef403a3          	sb	a5,-25(s0)
    uB.f = b;
 80077ea:	fa043783          	ld	a5,-96(s0)
 80077ee:	faf43c23          	sd	a5,-72(s0)
    uiB = uB.ui;
 80077f2:	fb843783          	ld	a5,-72(s0)
 80077f6:	fcf43c23          	sd	a5,-40(s0)
    signB = signF64UI( uiB );
 80077fa:	fd843783          	ld	a5,-40(s0)
 80077fe:	93fd                	srli	a5,a5,0x3f
 8007800:	fcf40ba3          	sb	a5,-41(s0)
    } else {
        return softfloat_subMagsF64( uiA, uiB, signA );
    }
#else
    magsFuncPtr =
        (signA == signB) ? softfloat_addMagsF64 : softfloat_subMagsF64;
 8007804:	fe744703          	lbu	a4,-25(s0)
 8007808:	fd744783          	lbu	a5,-41(s0)
 800780c:	0ff77713          	andi	a4,a4,255
 8007810:	0ff7f793          	andi	a5,a5,255
 8007814:	00f71763          	bne	a4,a5,8007822 <f64_add+0x62>
 8007818:	00001797          	auipc	a5,0x1
 800781c:	2ee78793          	addi	a5,a5,750 # 8008b06 <softfloat_addMagsF64>
 8007820:	a029                	j	800782a <f64_add+0x6a>
 8007822:	00003797          	auipc	a5,0x3
 8007826:	73a78793          	addi	a5,a5,1850 # 800af5c <softfloat_subMagsF64>
    magsFuncPtr =
 800782a:	fcf43423          	sd	a5,-56(s0)
    return (*magsFuncPtr)( uiA, uiB, signA );
 800782e:	fe744783          	lbu	a5,-25(s0)
 8007832:	fc843703          	ld	a4,-56(s0)
 8007836:	863e                	mv	a2,a5
 8007838:	fd843583          	ld	a1,-40(s0)
 800783c:	fe843503          	ld	a0,-24(s0)
 8007840:	9702                	jalr	a4
 8007842:	87aa                	mv	a5,a0
#endif

}
 8007844:	853e                	mv	a0,a5
 8007846:	60e6                	ld	ra,88(sp)
 8007848:	6446                	ld	s0,80(sp)
 800784a:	6125                	addi	sp,sp,96
 800784c:	8082                	ret

000000000800784e <f64_div>:
#include "internals.h"
#include "specialize.h"
#include "softfloat.h"

float64_t f64_div( float64_t a, float64_t b )
{
 800784e:	7155                	addi	sp,sp,-208
 8007850:	e586                	sd	ra,200(sp)
 8007852:	e1a2                	sd	s0,192(sp)
 8007854:	0980                	addi	s0,sp,208
 8007856:	f2a43c23          	sd	a0,-200(s0)
 800785a:	f2b43823          	sd	a1,-208(s0)
    uint_fast64_t uiZ;
    union ui64_f64 uZ;

    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    uA.f = a;
 800785e:	f3843783          	ld	a5,-200(s0)
 8007862:	f6f43023          	sd	a5,-160(s0)
    uiA = uA.ui;
 8007866:	f6043783          	ld	a5,-160(s0)
 800786a:	faf43823          	sd	a5,-80(s0)
    signA = signF64UI( uiA );
 800786e:	fb043783          	ld	a5,-80(s0)
 8007872:	93fd                	srli	a5,a5,0x3f
 8007874:	faf407a3          	sb	a5,-81(s0)
    expA  = expF64UI( uiA );
 8007878:	fb043783          	ld	a5,-80(s0)
 800787c:	93d1                	srli	a5,a5,0x34
 800787e:	7ff7f793          	andi	a5,a5,2047
 8007882:	fef43423          	sd	a5,-24(s0)
    sigA  = fracF64UI( uiA );
 8007886:	fb043703          	ld	a4,-80(s0)
 800788a:	57fd                	li	a5,-1
 800788c:	83b1                	srli	a5,a5,0xc
 800788e:	8ff9                	and	a5,a5,a4
 8007890:	fef43023          	sd	a5,-32(s0)
    uB.f = b;
 8007894:	f3043783          	ld	a5,-208(s0)
 8007898:	f4f43c23          	sd	a5,-168(s0)
    uiB = uB.ui;
 800789c:	f5843783          	ld	a5,-168(s0)
 80078a0:	faf43023          	sd	a5,-96(s0)
    signB = signF64UI( uiB );
 80078a4:	fa043783          	ld	a5,-96(s0)
 80078a8:	93fd                	srli	a5,a5,0x3f
 80078aa:	f8f40fa3          	sb	a5,-97(s0)
    expB  = expF64UI( uiB );
 80078ae:	fa043783          	ld	a5,-96(s0)
 80078b2:	93d1                	srli	a5,a5,0x34
 80078b4:	7ff7f793          	andi	a5,a5,2047
 80078b8:	fcf43c23          	sd	a5,-40(s0)
    sigB  = fracF64UI( uiB );
 80078bc:	fa043703          	ld	a4,-96(s0)
 80078c0:	57fd                	li	a5,-1
 80078c2:	83b1                	srli	a5,a5,0xc
 80078c4:	8ff9                	and	a5,a5,a4
 80078c6:	fcf43823          	sd	a5,-48(s0)
    signZ = signA ^ signB;
 80078ca:	faf44703          	lbu	a4,-81(s0)
 80078ce:	f9f44783          	lbu	a5,-97(s0)
 80078d2:	8fb9                	xor	a5,a5,a4
 80078d4:	0ff7f793          	andi	a5,a5,255
 80078d8:	2781                	sext.w	a5,a5
 80078da:	00f037b3          	snez	a5,a5
 80078de:	f8f40f23          	sb	a5,-98(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( expA == 0x7FF ) {
 80078e2:	fe843703          	ld	a4,-24(s0)
 80078e6:	7ff00793          	li	a5,2047
 80078ea:	02f71163          	bne	a4,a5,800790c <f64_div+0xbe>
        if ( sigA ) goto propagateNaN;
 80078ee:	fe043783          	ld	a5,-32(s0)
 80078f2:	26079763          	bnez	a5,8007b60 <f64_div+0x312>
        if ( expB == 0x7FF ) {
 80078f6:	fd843703          	ld	a4,-40(s0)
 80078fa:	7ff00793          	li	a5,2047
 80078fe:	28f71863          	bne	a4,a5,8007b8e <f64_div+0x340>
            if ( sigB ) goto propagateNaN;
 8007902:	fd043783          	ld	a5,-48(s0)
 8007906:	26078763          	beqz	a5,8007b74 <f64_div+0x326>
 800790a:	aca1                	j	8007b62 <f64_div+0x314>
            goto invalid;
        }
        goto infinity;
    }
    if ( expB == 0x7FF ) {
 800790c:	fd843703          	ld	a4,-40(s0)
 8007910:	7ff00793          	li	a5,2047
 8007914:	00f71763          	bne	a4,a5,8007922 <f64_div+0xd4>
        if ( sigB ) goto propagateNaN;
 8007918:	fd043783          	ld	a5,-48(s0)
 800791c:	28078563          	beqz	a5,8007ba6 <f64_div+0x358>
 8007920:	a489                	j	8007b62 <f64_div+0x314>
        goto zero;
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( ! expB ) {
 8007922:	fd843783          	ld	a5,-40(s0)
 8007926:	e3b1                	bnez	a5,800796a <f64_div+0x11c>
        if ( ! sigB ) {
 8007928:	fd043783          	ld	a5,-48(s0)
 800792c:	ef89                	bnez	a5,8007946 <f64_div+0xf8>
            if ( ! (expA | sigA) ) goto invalid;
 800792e:	fe843703          	ld	a4,-24(s0)
 8007932:	fe043783          	ld	a5,-32(s0)
 8007936:	8fd9                	or	a5,a5,a4
 8007938:	24078063          	beqz	a5,8007b78 <f64_div+0x32a>
            softfloat_raiseFlags( softfloat_flag_infinite );
 800793c:	001467f3          	csrrsi	a5,fflags,8
 8007940:	f8f43823          	sd	a5,-112(s0)
            goto infinity;
 8007944:	a4b1                	j	8007b90 <f64_div+0x342>
        }
        normExpSig = softfloat_normSubnormalF64Sig( sigB );
 8007946:	fd043503          	ld	a0,-48(s0)
 800794a:	546020ef          	jal	ra,8009e90 <softfloat_normSubnormalF64Sig>
 800794e:	87aa                	mv	a5,a0
 8007950:	882e                	mv	a6,a1
 8007952:	f4f43423          	sd	a5,-184(s0)
 8007956:	f5043823          	sd	a6,-176(s0)
        expB = normExpSig.exp;
 800795a:	f4843783          	ld	a5,-184(s0)
 800795e:	fcf43c23          	sd	a5,-40(s0)
        sigB = normExpSig.sig;
 8007962:	f5043783          	ld	a5,-176(s0)
 8007966:	fcf43823          	sd	a5,-48(s0)
    }
    if ( ! expA ) {
 800796a:	fe843783          	ld	a5,-24(s0)
 800796e:	e79d                	bnez	a5,800799c <f64_div+0x14e>
        if ( ! sigA ) goto zero;
 8007970:	fe043783          	ld	a5,-32(s0)
 8007974:	22078b63          	beqz	a5,8007baa <f64_div+0x35c>
        normExpSig = softfloat_normSubnormalF64Sig( sigA );
 8007978:	fe043503          	ld	a0,-32(s0)
 800797c:	514020ef          	jal	ra,8009e90 <softfloat_normSubnormalF64Sig>
 8007980:	87aa                	mv	a5,a0
 8007982:	882e                	mv	a6,a1
 8007984:	f4f43423          	sd	a5,-184(s0)
 8007988:	f5043823          	sd	a6,-176(s0)
        expA = normExpSig.exp;
 800798c:	f4843783          	ld	a5,-184(s0)
 8007990:	fef43423          	sd	a5,-24(s0)
        sigA = normExpSig.sig;
 8007994:	f5043783          	ld	a5,-176(s0)
 8007998:	fef43023          	sd	a5,-32(s0)
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    expZ = expA - expB + 0x3FE;
 800799c:	fe843703          	ld	a4,-24(s0)
 80079a0:	fd843783          	ld	a5,-40(s0)
 80079a4:	40f707b3          	sub	a5,a4,a5
 80079a8:	3fe78793          	addi	a5,a5,1022
 80079ac:	fcf43423          	sd	a5,-56(s0)
    sigA |= UINT64_C( 0x0010000000000000 );
 80079b0:	fe043703          	ld	a4,-32(s0)
 80079b4:	4785                	li	a5,1
 80079b6:	17d2                	slli	a5,a5,0x34
 80079b8:	8fd9                	or	a5,a5,a4
 80079ba:	fef43023          	sd	a5,-32(s0)
    sigB |= UINT64_C( 0x0010000000000000 );
 80079be:	fd043703          	ld	a4,-48(s0)
 80079c2:	4785                	li	a5,1
 80079c4:	17d2                	slli	a5,a5,0x34
 80079c6:	8fd9                	or	a5,a5,a4
 80079c8:	fcf43823          	sd	a5,-48(s0)
    if ( sigA < sigB ) {
 80079cc:	fe043703          	ld	a4,-32(s0)
 80079d0:	fd043783          	ld	a5,-48(s0)
 80079d4:	00f77d63          	bleu	a5,a4,80079ee <f64_div+0x1a0>
        --expZ;
 80079d8:	fc843783          	ld	a5,-56(s0)
 80079dc:	17fd                	addi	a5,a5,-1
 80079de:	fcf43423          	sd	a5,-56(s0)
        sigA <<= 11;
 80079e2:	fe043783          	ld	a5,-32(s0)
 80079e6:	07ae                	slli	a5,a5,0xb
 80079e8:	fef43023          	sd	a5,-32(s0)
 80079ec:	a031                	j	80079f8 <f64_div+0x1aa>
    } else {
        sigA <<= 10;
 80079ee:	fe043783          	ld	a5,-32(s0)
 80079f2:	07aa                	slli	a5,a5,0xa
 80079f4:	fef43023          	sd	a5,-32(s0)
    }
    sigB <<= 11;
 80079f8:	fd043783          	ld	a5,-48(s0)
 80079fc:	07ae                	slli	a5,a5,0xb
 80079fe:	fcf43823          	sd	a5,-48(s0)
    recip32 = softfloat_approxRecip32_1( sigB>>32 ) - 2;
 8007a02:	fd043783          	ld	a5,-48(s0)
 8007a06:	9381                	srli	a5,a5,0x20
 8007a08:	2781                	sext.w	a5,a5
 8007a0a:	853e                	mv	a0,a5
 8007a0c:	316010ef          	jal	ra,8008d22 <softfloat_approxRecip32_1>
 8007a10:	87aa                	mv	a5,a0
 8007a12:	2781                	sext.w	a5,a5
 8007a14:	37f9                	addiw	a5,a5,-2
 8007a16:	f8f42623          	sw	a5,-116(s0)
    sig32Z = ((uint32_t) (sigA>>32) * (uint_fast64_t) recip32)>>32;
 8007a1a:	fe043783          	ld	a5,-32(s0)
 8007a1e:	9381                	srli	a5,a5,0x20
 8007a20:	2781                	sext.w	a5,a5
 8007a22:	02079713          	slli	a4,a5,0x20
 8007a26:	9301                	srli	a4,a4,0x20
 8007a28:	f8c46783          	lwu	a5,-116(s0)
 8007a2c:	02f707b3          	mul	a5,a4,a5
 8007a30:	9381                	srli	a5,a5,0x20
 8007a32:	f8f42423          	sw	a5,-120(s0)
    doubleTerm = sig32Z<<1;
 8007a36:	f8842783          	lw	a5,-120(s0)
 8007a3a:	0017979b          	slliw	a5,a5,0x1
 8007a3e:	f8f42223          	sw	a5,-124(s0)
    rem =
        ((sigA - (uint_fast64_t) doubleTerm * (uint32_t) (sigB>>32))<<28)
 8007a42:	f8446703          	lwu	a4,-124(s0)
 8007a46:	fd043783          	ld	a5,-48(s0)
 8007a4a:	9381                	srli	a5,a5,0x20
 8007a4c:	2781                	sext.w	a5,a5
 8007a4e:	1782                	slli	a5,a5,0x20
 8007a50:	9381                	srli	a5,a5,0x20
 8007a52:	02f707b3          	mul	a5,a4,a5
 8007a56:	fe043703          	ld	a4,-32(s0)
 8007a5a:	40f707b3          	sub	a5,a4,a5
 8007a5e:	01c79713          	slli	a4,a5,0x1c
            - (uint_fast64_t) doubleTerm * ((uint32_t) sigB>>4);
 8007a62:	f8446683          	lwu	a3,-124(s0)
 8007a66:	fd043783          	ld	a5,-48(s0)
 8007a6a:	2781                	sext.w	a5,a5
 8007a6c:	0047d79b          	srliw	a5,a5,0x4
 8007a70:	2781                	sext.w	a5,a5
 8007a72:	1782                	slli	a5,a5,0x20
 8007a74:	9381                	srli	a5,a5,0x20
 8007a76:	02f687b3          	mul	a5,a3,a5
    rem =
 8007a7a:	40f707b3          	sub	a5,a4,a5
 8007a7e:	f6f43c23          	sd	a5,-136(s0)
    q = (((uint32_t) (rem>>32) * (uint_fast64_t) recip32)>>32) + 4;
 8007a82:	f7843783          	ld	a5,-136(s0)
 8007a86:	9381                	srli	a5,a5,0x20
 8007a88:	2781                	sext.w	a5,a5
 8007a8a:	02079713          	slli	a4,a5,0x20
 8007a8e:	9301                	srli	a4,a4,0x20
 8007a90:	f8c46783          	lwu	a5,-116(s0)
 8007a94:	02f707b3          	mul	a5,a4,a5
 8007a98:	9381                	srli	a5,a5,0x20
 8007a9a:	2781                	sext.w	a5,a5
 8007a9c:	2791                	addiw	a5,a5,4
 8007a9e:	f6f42a23          	sw	a5,-140(s0)
    sigZ = ((uint_fast64_t) sig32Z<<32) + ((uint_fast64_t) q<<4);
 8007aa2:	f8846783          	lwu	a5,-120(s0)
 8007aa6:	02079713          	slli	a4,a5,0x20
 8007aaa:	f7446783          	lwu	a5,-140(s0)
 8007aae:	0792                	slli	a5,a5,0x4
 8007ab0:	97ba                	add	a5,a5,a4
 8007ab2:	fcf43023          	sd	a5,-64(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( (sigZ & 0x1FF) < 4<<4 ) {
 8007ab6:	fc043783          	ld	a5,-64(s0)
 8007aba:	1c07f793          	andi	a5,a5,448
 8007abe:	e7d1                	bnez	a5,8007b4a <f64_div+0x2fc>
        q &= ~7;
 8007ac0:	f7442783          	lw	a5,-140(s0)
 8007ac4:	9be1                	andi	a5,a5,-8
 8007ac6:	f6f42a23          	sw	a5,-140(s0)
        sigZ &= ~(uint_fast64_t) 0x7F;
 8007aca:	fc043783          	ld	a5,-64(s0)
 8007ace:	f807f793          	andi	a5,a5,-128
 8007ad2:	fcf43023          	sd	a5,-64(s0)
        doubleTerm = q<<1;
 8007ad6:	f7442783          	lw	a5,-140(s0)
 8007ada:	0017979b          	slliw	a5,a5,0x1
 8007ade:	f8f42223          	sw	a5,-124(s0)
        rem =
            ((rem - (uint_fast64_t) doubleTerm * (uint32_t) (sigB>>32))<<28)
 8007ae2:	f8446703          	lwu	a4,-124(s0)
 8007ae6:	fd043783          	ld	a5,-48(s0)
 8007aea:	9381                	srli	a5,a5,0x20
 8007aec:	2781                	sext.w	a5,a5
 8007aee:	1782                	slli	a5,a5,0x20
 8007af0:	9381                	srli	a5,a5,0x20
 8007af2:	02f707b3          	mul	a5,a4,a5
 8007af6:	f7843703          	ld	a4,-136(s0)
 8007afa:	40f707b3          	sub	a5,a4,a5
 8007afe:	01c79713          	slli	a4,a5,0x1c
                - (uint_fast64_t) doubleTerm * ((uint32_t) sigB>>4);
 8007b02:	f8446683          	lwu	a3,-124(s0)
 8007b06:	fd043783          	ld	a5,-48(s0)
 8007b0a:	2781                	sext.w	a5,a5
 8007b0c:	0047d79b          	srliw	a5,a5,0x4
 8007b10:	2781                	sext.w	a5,a5
 8007b12:	1782                	slli	a5,a5,0x20
 8007b14:	9381                	srli	a5,a5,0x20
 8007b16:	02f687b3          	mul	a5,a3,a5
        rem =
 8007b1a:	40f707b3          	sub	a5,a4,a5
 8007b1e:	f6f43c23          	sd	a5,-136(s0)
        if ( rem & UINT64_C( 0x8000000000000000 ) ) {
 8007b22:	f7843783          	ld	a5,-136(s0)
 8007b26:	0007d963          	bgez	a5,8007b38 <f64_div+0x2ea>
            sigZ -= 1<<7;
 8007b2a:	fc043783          	ld	a5,-64(s0)
 8007b2e:	f8078793          	addi	a5,a5,-128
 8007b32:	fcf43023          	sd	a5,-64(s0)
 8007b36:	a811                	j	8007b4a <f64_div+0x2fc>
        } else {
            if ( rem ) sigZ |= 1;
 8007b38:	f7843783          	ld	a5,-136(s0)
 8007b3c:	c799                	beqz	a5,8007b4a <f64_div+0x2fc>
 8007b3e:	fc043783          	ld	a5,-64(s0)
 8007b42:	0017e793          	ori	a5,a5,1
 8007b46:	fcf43023          	sd	a5,-64(s0)
        }
    }
    return softfloat_roundPackToF64( signZ, expZ, sigZ );
 8007b4a:	f9e44783          	lbu	a5,-98(s0)
 8007b4e:	fc043603          	ld	a2,-64(s0)
 8007b52:	fc843583          	ld	a1,-56(s0)
 8007b56:	853e                	mv	a0,a5
 8007b58:	724020ef          	jal	ra,800a27c <softfloat_roundPackToF64>
 8007b5c:	87aa                	mv	a5,a0
 8007b5e:	a095                	j	8007bc2 <f64_div+0x374>
        if ( sigA ) goto propagateNaN;
 8007b60:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 propagateNaN:
    uiZ = softfloat_propagateNaNF64UI( uiA, uiB );
 8007b62:	fa043583          	ld	a1,-96(s0)
 8007b66:	fb043503          	ld	a0,-80(s0)
 8007b6a:	79a030ef          	jal	ra,800b304 <softfloat_propagateNaNF64UI>
 8007b6e:	faa43c23          	sd	a0,-72(s0)
    goto uiZ;
 8007b72:	a091                	j	8007bb6 <f64_div+0x368>
            goto invalid;
 8007b74:	0001                	nop
 8007b76:	a011                	j	8007b7a <f64_div+0x32c>
            if ( ! (expA | sigA) ) goto invalid;
 8007b78:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 invalid:
    softfloat_raiseFlags( softfloat_flag_invalid );
 8007b7a:	001867f3          	csrrsi	a5,fflags,16
 8007b7e:	f6f43423          	sd	a5,-152(s0)
    uiZ = defaultNaNF64UI;
 8007b82:	00fff7b7          	lui	a5,0xfff
 8007b86:	179e                	slli	a5,a5,0x27
 8007b88:	faf43c23          	sd	a5,-72(s0)
    goto uiZ;
 8007b8c:	a02d                	j	8007bb6 <f64_div+0x368>
        goto infinity;
 8007b8e:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 infinity:
    uiZ = packToF64UI( signZ, 0x7FF, 0 );
 8007b90:	f9e44783          	lbu	a5,-98(s0)
 8007b94:	03f79713          	slli	a4,a5,0x3f
 8007b98:	7ff00793          	li	a5,2047
 8007b9c:	17d2                	slli	a5,a5,0x34
 8007b9e:	97ba                	add	a5,a5,a4
 8007ba0:	faf43c23          	sd	a5,-72(s0)
    goto uiZ;
 8007ba4:	a809                	j	8007bb6 <f64_div+0x368>
        goto zero;
 8007ba6:	0001                	nop
 8007ba8:	a011                	j	8007bac <f64_div+0x35e>
        if ( ! sigA ) goto zero;
 8007baa:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 zero:
    uiZ = packToF64UI( signZ, 0, 0 );
 8007bac:	f9e44783          	lbu	a5,-98(s0)
 8007bb0:	17fe                	slli	a5,a5,0x3f
 8007bb2:	faf43c23          	sd	a5,-72(s0)
 uiZ:
    uZ.ui = uiZ;
 8007bb6:	fb843783          	ld	a5,-72(s0)
 8007bba:	f4f43023          	sd	a5,-192(s0)
    return uZ.f;
 8007bbe:	f4043783          	ld	a5,-192(s0)

}
 8007bc2:	853e                	mv	a0,a5
 8007bc4:	60ae                	ld	ra,200(sp)
 8007bc6:	640e                	ld	s0,192(sp)
 8007bc8:	6169                	addi	sp,sp,208
 8007bca:	8082                	ret

0000000008007bcc <f64_eq>:
#include "internals.h"
#include "specialize.h"
#include "softfloat.h"

bool f64_eq( float64_t a, float64_t b )
{
 8007bcc:	715d                	addi	sp,sp,-80
 8007bce:	e4a2                	sd	s0,72(sp)
 8007bd0:	0880                	addi	s0,sp,80
 8007bd2:	faa43c23          	sd	a0,-72(s0)
 8007bd6:	fab43823          	sd	a1,-80(s0)
    union ui64_f64 uA;
    uint_fast64_t uiA;
    union ui64_f64 uB;
    uint_fast64_t uiB;

    uA.f = a;
 8007bda:	fb843783          	ld	a5,-72(s0)
 8007bde:	fcf43823          	sd	a5,-48(s0)
    uiA = uA.ui;
 8007be2:	fd043783          	ld	a5,-48(s0)
 8007be6:	fef43423          	sd	a5,-24(s0)
    uB.f = b;
 8007bea:	fb043783          	ld	a5,-80(s0)
 8007bee:	fcf43423          	sd	a5,-56(s0)
    uiB = uB.ui;
 8007bf2:	fc843783          	ld	a5,-56(s0)
 8007bf6:	fef43023          	sd	a5,-32(s0)
    if ( isNaNF64UI( uiA ) || isNaNF64UI( uiB ) ) {
 8007bfa:	fe843783          	ld	a5,-24(s0)
 8007bfe:	fff7c713          	not	a4,a5
 8007c02:	7ff00793          	li	a5,2047
 8007c06:	17d2                	slli	a5,a5,0x34
 8007c08:	8ff9                	and	a5,a5,a4
 8007c0a:	e799                	bnez	a5,8007c18 <f64_eq+0x4c>
 8007c0c:	fe843703          	ld	a4,-24(s0)
 8007c10:	57fd                	li	a5,-1
 8007c12:	83b1                	srli	a5,a5,0xc
 8007c14:	8ff9                	and	a5,a5,a4
 8007c16:	e385                	bnez	a5,8007c36 <f64_eq+0x6a>
 8007c18:	fe043783          	ld	a5,-32(s0)
 8007c1c:	fff7c713          	not	a4,a5
 8007c20:	7ff00793          	li	a5,2047
 8007c24:	17d2                	slli	a5,a5,0x34
 8007c26:	8ff9                	and	a5,a5,a4
 8007c28:	efb9                	bnez	a5,8007c86 <f64_eq+0xba>
 8007c2a:	fe043703          	ld	a4,-32(s0)
 8007c2e:	57fd                	li	a5,-1
 8007c30:	83b1                	srli	a5,a5,0xc
 8007c32:	8ff9                	and	a5,a5,a4
 8007c34:	cba9                	beqz	a5,8007c86 <f64_eq+0xba>
        if (
            softfloat_isSigNaNF64UI( uiA ) || softfloat_isSigNaNF64UI( uiB )
 8007c36:	fe843703          	ld	a4,-24(s0)
 8007c3a:	00fff7b7          	lui	a5,0xfff
 8007c3e:	179e                	slli	a5,a5,0x27
 8007c40:	8f7d                	and	a4,a4,a5
        if (
 8007c42:	7ff00793          	li	a5,2047
 8007c46:	17d2                	slli	a5,a5,0x34
 8007c48:	00f71863          	bne	a4,a5,8007c58 <f64_eq+0x8c>
            softfloat_isSigNaNF64UI( uiA ) || softfloat_isSigNaNF64UI( uiB )
 8007c4c:	fe843703          	ld	a4,-24(s0)
 8007c50:	57fd                	li	a5,-1
 8007c52:	83b5                	srli	a5,a5,0xd
 8007c54:	8ff9                	and	a5,a5,a4
 8007c56:	e395                	bnez	a5,8007c7a <f64_eq+0xae>
 8007c58:	fe043703          	ld	a4,-32(s0)
 8007c5c:	00fff7b7          	lui	a5,0xfff
 8007c60:	179e                	slli	a5,a5,0x27
 8007c62:	8f7d                	and	a4,a4,a5
 8007c64:	7ff00793          	li	a5,2047
 8007c68:	17d2                	slli	a5,a5,0x34
 8007c6a:	00f71c63          	bne	a4,a5,8007c82 <f64_eq+0xb6>
 8007c6e:	fe043703          	ld	a4,-32(s0)
 8007c72:	57fd                	li	a5,-1
 8007c74:	83b5                	srli	a5,a5,0xd
 8007c76:	8ff9                	and	a5,a5,a4
 8007c78:	c789                	beqz	a5,8007c82 <f64_eq+0xb6>
        ) {
            softfloat_raiseFlags( softfloat_flag_invalid );
 8007c7a:	001867f3          	csrrsi	a5,fflags,16
 8007c7e:	fcf43c23          	sd	a5,-40(s0)
        }
        return false;
 8007c82:	4781                	li	a5,0
 8007c84:	a035                	j	8007cb0 <f64_eq+0xe4>
    }
    return (uiA == uiB) || ! ((uiA | uiB) & UINT64_C( 0x7FFFFFFFFFFFFFFF ));
 8007c86:	fe843703          	ld	a4,-24(s0)
 8007c8a:	fe043783          	ld	a5,-32(s0)
 8007c8e:	00f70b63          	beq	a4,a5,8007ca4 <f64_eq+0xd8>
 8007c92:	fe843703          	ld	a4,-24(s0)
 8007c96:	fe043783          	ld	a5,-32(s0)
 8007c9a:	8f5d                	or	a4,a4,a5
 8007c9c:	57fd                	li	a5,-1
 8007c9e:	8385                	srli	a5,a5,0x1
 8007ca0:	8ff9                	and	a5,a5,a4
 8007ca2:	e399                	bnez	a5,8007ca8 <f64_eq+0xdc>
 8007ca4:	4785                	li	a5,1
 8007ca6:	a011                	j	8007caa <f64_eq+0xde>
 8007ca8:	4781                	li	a5,0
 8007caa:	8b85                	andi	a5,a5,1
 8007cac:	0ff7f793          	andi	a5,a5,255

}
 8007cb0:	853e                	mv	a0,a5
 8007cb2:	6426                	ld	s0,72(sp)
 8007cb4:	6161                	addi	sp,sp,80
 8007cb6:	8082                	ret

0000000008007cb8 <f64_lt>:
#include "platform.h"
#include "internals.h"
#include "softfloat.h"

bool f64_lt( float64_t a, float64_t b )
{
 8007cb8:	715d                	addi	sp,sp,-80
 8007cba:	e4a2                	sd	s0,72(sp)
 8007cbc:	0880                	addi	s0,sp,80
 8007cbe:	faa43c23          	sd	a0,-72(s0)
 8007cc2:	fab43823          	sd	a1,-80(s0)
    uint_fast64_t uiA;
    union ui64_f64 uB;
    uint_fast64_t uiB;
    bool signA, signB;

    uA.f = a;
 8007cc6:	fb843783          	ld	a5,-72(s0)
 8007cca:	fcf43423          	sd	a5,-56(s0)
    uiA = uA.ui;
 8007cce:	fc843783          	ld	a5,-56(s0)
 8007cd2:	fef43423          	sd	a5,-24(s0)
    uB.f = b;
 8007cd6:	fb043783          	ld	a5,-80(s0)
 8007cda:	fcf43023          	sd	a5,-64(s0)
    uiB = uB.ui;
 8007cde:	fc043783          	ld	a5,-64(s0)
 8007ce2:	fef43023          	sd	a5,-32(s0)
    if ( isNaNF64UI( uiA ) || isNaNF64UI( uiB ) ) {
 8007ce6:	fe843783          	ld	a5,-24(s0)
 8007cea:	fff7c713          	not	a4,a5
 8007cee:	7ff00793          	li	a5,2047
 8007cf2:	17d2                	slli	a5,a5,0x34
 8007cf4:	8ff9                	and	a5,a5,a4
 8007cf6:	e799                	bnez	a5,8007d04 <f64_lt+0x4c>
 8007cf8:	fe843703          	ld	a4,-24(s0)
 8007cfc:	57fd                	li	a5,-1
 8007cfe:	83b1                	srli	a5,a5,0xc
 8007d00:	8ff9                	and	a5,a5,a4
 8007d02:	e385                	bnez	a5,8007d22 <f64_lt+0x6a>
 8007d04:	fe043783          	ld	a5,-32(s0)
 8007d08:	fff7c713          	not	a4,a5
 8007d0c:	7ff00793          	li	a5,2047
 8007d10:	17d2                	slli	a5,a5,0x34
 8007d12:	8ff9                	and	a5,a5,a4
 8007d14:	ef89                	bnez	a5,8007d2e <f64_lt+0x76>
 8007d16:	fe043703          	ld	a4,-32(s0)
 8007d1a:	57fd                	li	a5,-1
 8007d1c:	83b1                	srli	a5,a5,0xc
 8007d1e:	8ff9                	and	a5,a5,a4
 8007d20:	c799                	beqz	a5,8007d2e <f64_lt+0x76>
        softfloat_raiseFlags( softfloat_flag_invalid );
 8007d22:	001867f3          	csrrsi	a5,fflags,16
 8007d26:	fcf43823          	sd	a5,-48(s0)
        return false;
 8007d2a:	4781                	li	a5,0
 8007d2c:	a071                	j	8007db8 <f64_lt+0x100>
    }
    signA = signF64UI( uiA );
 8007d2e:	fe843783          	ld	a5,-24(s0)
 8007d32:	93fd                	srli	a5,a5,0x3f
 8007d34:	fcf40fa3          	sb	a5,-33(s0)
    signB = signF64UI( uiB );
 8007d38:	fe043783          	ld	a5,-32(s0)
 8007d3c:	93fd                	srli	a5,a5,0x3f
 8007d3e:	fcf40f23          	sb	a5,-34(s0)
    return
        (signA != signB)
            ? signA && ((uiA | uiB) & UINT64_C( 0x7FFFFFFFFFFFFFFF ))
            : (uiA != uiB) && (signA ^ (uiA < uiB));
 8007d42:	fdf44703          	lbu	a4,-33(s0)
 8007d46:	fde44783          	lbu	a5,-34(s0)
 8007d4a:	0ff77713          	andi	a4,a4,255
 8007d4e:	0ff7f793          	andi	a5,a5,255
 8007d52:	02f70763          	beq	a4,a5,8007d80 <f64_lt+0xc8>
            ? signA && ((uiA | uiB) & UINT64_C( 0x7FFFFFFFFFFFFFFF ))
 8007d56:	fdf44783          	lbu	a5,-33(s0)
 8007d5a:	0ff7f793          	andi	a5,a5,255
 8007d5e:	cf81                	beqz	a5,8007d76 <f64_lt+0xbe>
 8007d60:	fe843703          	ld	a4,-24(s0)
 8007d64:	fe043783          	ld	a5,-32(s0)
 8007d68:	8f5d                	or	a4,a4,a5
 8007d6a:	57fd                	li	a5,-1
 8007d6c:	8385                	srli	a5,a5,0x1
 8007d6e:	8ff9                	and	a5,a5,a4
 8007d70:	c399                	beqz	a5,8007d76 <f64_lt+0xbe>
 8007d72:	4785                	li	a5,1
 8007d74:	a011                	j	8007d78 <f64_lt+0xc0>
 8007d76:	4781                	li	a5,0
            : (uiA != uiB) && (signA ^ (uiA < uiB));
 8007d78:	8b85                	andi	a5,a5,1
 8007d7a:	0ff7f793          	andi	a5,a5,255
 8007d7e:	a82d                	j	8007db8 <f64_lt+0x100>
 8007d80:	fe843703          	ld	a4,-24(s0)
 8007d84:	fe043783          	ld	a5,-32(s0)
 8007d88:	02f70463          	beq	a4,a5,8007db0 <f64_lt+0xf8>
 8007d8c:	fdf44783          	lbu	a5,-33(s0)
 8007d90:	0007869b          	sext.w	a3,a5
 8007d94:	fe843703          	ld	a4,-24(s0)
 8007d98:	fe043783          	ld	a5,-32(s0)
 8007d9c:	00f737b3          	sltu	a5,a4,a5
 8007da0:	0ff7f793          	andi	a5,a5,255
 8007da4:	2781                	sext.w	a5,a5
 8007da6:	8736                	mv	a4,a3
 8007da8:	00f70463          	beq	a4,a5,8007db0 <f64_lt+0xf8>
 8007dac:	4785                	li	a5,1
 8007dae:	a011                	j	8007db2 <f64_lt+0xfa>
 8007db0:	4781                	li	a5,0
 8007db2:	8b85                	andi	a5,a5,1
 8007db4:	0ff7f793          	andi	a5,a5,255

}
 8007db8:	853e                	mv	a0,a5
 8007dba:	6426                	ld	s0,72(sp)
 8007dbc:	6161                	addi	sp,sp,80
 8007dbe:	8082                	ret

0000000008007dc0 <f64_lt_quiet>:
#include "internals.h"
#include "specialize.h"
#include "softfloat.h"

bool f64_lt_quiet( float64_t a, float64_t b )
{
 8007dc0:	715d                	addi	sp,sp,-80
 8007dc2:	e4a2                	sd	s0,72(sp)
 8007dc4:	0880                	addi	s0,sp,80
 8007dc6:	faa43c23          	sd	a0,-72(s0)
 8007dca:	fab43823          	sd	a1,-80(s0)
    uint_fast64_t uiA;
    union ui64_f64 uB;
    uint_fast64_t uiB;
    bool signA, signB;

    uA.f = a;
 8007dce:	fb843783          	ld	a5,-72(s0)
 8007dd2:	fcf43423          	sd	a5,-56(s0)
    uiA = uA.ui;
 8007dd6:	fc843783          	ld	a5,-56(s0)
 8007dda:	fef43423          	sd	a5,-24(s0)
    uB.f = b;
 8007dde:	fb043783          	ld	a5,-80(s0)
 8007de2:	fcf43023          	sd	a5,-64(s0)
    uiB = uB.ui;
 8007de6:	fc043783          	ld	a5,-64(s0)
 8007dea:	fef43023          	sd	a5,-32(s0)
    if ( isNaNF64UI( uiA ) || isNaNF64UI( uiB ) ) {
 8007dee:	fe843783          	ld	a5,-24(s0)
 8007df2:	fff7c713          	not	a4,a5
 8007df6:	7ff00793          	li	a5,2047
 8007dfa:	17d2                	slli	a5,a5,0x34
 8007dfc:	8ff9                	and	a5,a5,a4
 8007dfe:	e799                	bnez	a5,8007e0c <f64_lt_quiet+0x4c>
 8007e00:	fe843703          	ld	a4,-24(s0)
 8007e04:	57fd                	li	a5,-1
 8007e06:	83b1                	srli	a5,a5,0xc
 8007e08:	8ff9                	and	a5,a5,a4
 8007e0a:	e385                	bnez	a5,8007e2a <f64_lt_quiet+0x6a>
 8007e0c:	fe043783          	ld	a5,-32(s0)
 8007e10:	fff7c713          	not	a4,a5
 8007e14:	7ff00793          	li	a5,2047
 8007e18:	17d2                	slli	a5,a5,0x34
 8007e1a:	8ff9                	and	a5,a5,a4
 8007e1c:	efb9                	bnez	a5,8007e7a <f64_lt_quiet+0xba>
 8007e1e:	fe043703          	ld	a4,-32(s0)
 8007e22:	57fd                	li	a5,-1
 8007e24:	83b1                	srli	a5,a5,0xc
 8007e26:	8ff9                	and	a5,a5,a4
 8007e28:	cba9                	beqz	a5,8007e7a <f64_lt_quiet+0xba>
        if (
            softfloat_isSigNaNF64UI( uiA ) || softfloat_isSigNaNF64UI( uiB )
 8007e2a:	fe843703          	ld	a4,-24(s0)
 8007e2e:	00fff7b7          	lui	a5,0xfff
 8007e32:	179e                	slli	a5,a5,0x27
 8007e34:	8f7d                	and	a4,a4,a5
        if (
 8007e36:	7ff00793          	li	a5,2047
 8007e3a:	17d2                	slli	a5,a5,0x34
 8007e3c:	00f71863          	bne	a4,a5,8007e4c <f64_lt_quiet+0x8c>
            softfloat_isSigNaNF64UI( uiA ) || softfloat_isSigNaNF64UI( uiB )
 8007e40:	fe843703          	ld	a4,-24(s0)
 8007e44:	57fd                	li	a5,-1
 8007e46:	83b5                	srli	a5,a5,0xd
 8007e48:	8ff9                	and	a5,a5,a4
 8007e4a:	e395                	bnez	a5,8007e6e <f64_lt_quiet+0xae>
 8007e4c:	fe043703          	ld	a4,-32(s0)
 8007e50:	00fff7b7          	lui	a5,0xfff
 8007e54:	179e                	slli	a5,a5,0x27
 8007e56:	8f7d                	and	a4,a4,a5
 8007e58:	7ff00793          	li	a5,2047
 8007e5c:	17d2                	slli	a5,a5,0x34
 8007e5e:	00f71c63          	bne	a4,a5,8007e76 <f64_lt_quiet+0xb6>
 8007e62:	fe043703          	ld	a4,-32(s0)
 8007e66:	57fd                	li	a5,-1
 8007e68:	83b5                	srli	a5,a5,0xd
 8007e6a:	8ff9                	and	a5,a5,a4
 8007e6c:	c789                	beqz	a5,8007e76 <f64_lt_quiet+0xb6>
        ) {
            softfloat_raiseFlags( softfloat_flag_invalid );
 8007e6e:	001867f3          	csrrsi	a5,fflags,16
 8007e72:	fcf43823          	sd	a5,-48(s0)
        }
        return false;
 8007e76:	4781                	li	a5,0
 8007e78:	a071                	j	8007f04 <f64_lt_quiet+0x144>
    }
    signA = signF64UI( uiA );
 8007e7a:	fe843783          	ld	a5,-24(s0)
 8007e7e:	93fd                	srli	a5,a5,0x3f
 8007e80:	fcf40fa3          	sb	a5,-33(s0)
    signB = signF64UI( uiB );
 8007e84:	fe043783          	ld	a5,-32(s0)
 8007e88:	93fd                	srli	a5,a5,0x3f
 8007e8a:	fcf40f23          	sb	a5,-34(s0)
    return
        (signA != signB)
            ? signA && ((uiA | uiB) & UINT64_C( 0x7FFFFFFFFFFFFFFF ))
            : (uiA != uiB) && (signA ^ (uiA < uiB));
 8007e8e:	fdf44703          	lbu	a4,-33(s0)
 8007e92:	fde44783          	lbu	a5,-34(s0)
 8007e96:	0ff77713          	andi	a4,a4,255
 8007e9a:	0ff7f793          	andi	a5,a5,255
 8007e9e:	02f70763          	beq	a4,a5,8007ecc <f64_lt_quiet+0x10c>
            ? signA && ((uiA | uiB) & UINT64_C( 0x7FFFFFFFFFFFFFFF ))
 8007ea2:	fdf44783          	lbu	a5,-33(s0)
 8007ea6:	0ff7f793          	andi	a5,a5,255
 8007eaa:	cf81                	beqz	a5,8007ec2 <f64_lt_quiet+0x102>
 8007eac:	fe843703          	ld	a4,-24(s0)
 8007eb0:	fe043783          	ld	a5,-32(s0)
 8007eb4:	8f5d                	or	a4,a4,a5
 8007eb6:	57fd                	li	a5,-1
 8007eb8:	8385                	srli	a5,a5,0x1
 8007eba:	8ff9                	and	a5,a5,a4
 8007ebc:	c399                	beqz	a5,8007ec2 <f64_lt_quiet+0x102>
 8007ebe:	4785                	li	a5,1
 8007ec0:	a011                	j	8007ec4 <f64_lt_quiet+0x104>
 8007ec2:	4781                	li	a5,0
            : (uiA != uiB) && (signA ^ (uiA < uiB));
 8007ec4:	8b85                	andi	a5,a5,1
 8007ec6:	0ff7f793          	andi	a5,a5,255
 8007eca:	a82d                	j	8007f04 <f64_lt_quiet+0x144>
 8007ecc:	fe843703          	ld	a4,-24(s0)
 8007ed0:	fe043783          	ld	a5,-32(s0)
 8007ed4:	02f70463          	beq	a4,a5,8007efc <f64_lt_quiet+0x13c>
 8007ed8:	fdf44783          	lbu	a5,-33(s0)
 8007edc:	0007869b          	sext.w	a3,a5
 8007ee0:	fe843703          	ld	a4,-24(s0)
 8007ee4:	fe043783          	ld	a5,-32(s0)
 8007ee8:	00f737b3          	sltu	a5,a4,a5
 8007eec:	0ff7f793          	andi	a5,a5,255
 8007ef0:	2781                	sext.w	a5,a5
 8007ef2:	8736                	mv	a4,a3
 8007ef4:	00f70463          	beq	a4,a5,8007efc <f64_lt_quiet+0x13c>
 8007ef8:	4785                	li	a5,1
 8007efa:	a011                	j	8007efe <f64_lt_quiet+0x13e>
 8007efc:	4781                	li	a5,0
 8007efe:	8b85                	andi	a5,a5,1
 8007f00:	0ff7f793          	andi	a5,a5,255

}
 8007f04:	853e                	mv	a0,a5
 8007f06:	6426                	ld	s0,72(sp)
 8007f08:	6161                	addi	sp,sp,80
 8007f0a:	8082                	ret

0000000008007f0c <f64_mul>:
#include "internals.h"
#include "specialize.h"
#include "softfloat.h"

float64_t f64_mul( float64_t a, float64_t b )
{
 8007f0c:	7131                	addi	sp,sp,-192
 8007f0e:	fd06                	sd	ra,184(sp)
 8007f10:	f922                	sd	s0,176(sp)
 8007f12:	0180                	addi	s0,sp,192
 8007f14:	f4a43423          	sd	a0,-184(s0)
 8007f18:	f4b43023          	sd	a1,-192(s0)
    uint_fast64_t sigZ, uiZ;
    union ui64_f64 uZ;

    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    uA.f = a;
 8007f1c:	f4843783          	ld	a5,-184(s0)
 8007f20:	f8f43023          	sd	a5,-128(s0)
    uiA = uA.ui;
 8007f24:	f8043783          	ld	a5,-128(s0)
 8007f28:	faf43423          	sd	a5,-88(s0)
    signA = signF64UI( uiA );
 8007f2c:	fa843783          	ld	a5,-88(s0)
 8007f30:	93fd                	srli	a5,a5,0x3f
 8007f32:	faf403a3          	sb	a5,-89(s0)
    expA  = expF64UI( uiA );
 8007f36:	fa843783          	ld	a5,-88(s0)
 8007f3a:	93d1                	srli	a5,a5,0x34
 8007f3c:	7ff7f793          	andi	a5,a5,2047
 8007f40:	fef43423          	sd	a5,-24(s0)
    sigA  = fracF64UI( uiA );
 8007f44:	fa843703          	ld	a4,-88(s0)
 8007f48:	57fd                	li	a5,-1
 8007f4a:	83b1                	srli	a5,a5,0xc
 8007f4c:	8ff9                	and	a5,a5,a4
 8007f4e:	fef43023          	sd	a5,-32(s0)
    uB.f = b;
 8007f52:	f4043783          	ld	a5,-192(s0)
 8007f56:	f6f43c23          	sd	a5,-136(s0)
    uiB = uB.ui;
 8007f5a:	f7843783          	ld	a5,-136(s0)
 8007f5e:	f8f43c23          	sd	a5,-104(s0)
    signB = signF64UI( uiB );
 8007f62:	f9843783          	ld	a5,-104(s0)
 8007f66:	93fd                	srli	a5,a5,0x3f
 8007f68:	f8f40ba3          	sb	a5,-105(s0)
    expB  = expF64UI( uiB );
 8007f6c:	f9843783          	ld	a5,-104(s0)
 8007f70:	93d1                	srli	a5,a5,0x34
 8007f72:	7ff7f793          	andi	a5,a5,2047
 8007f76:	fcf43c23          	sd	a5,-40(s0)
    sigB  = fracF64UI( uiB );
 8007f7a:	f9843703          	ld	a4,-104(s0)
 8007f7e:	57fd                	li	a5,-1
 8007f80:	83b1                	srli	a5,a5,0xc
 8007f82:	8ff9                	and	a5,a5,a4
 8007f84:	fcf43823          	sd	a5,-48(s0)
    signZ = signA ^ signB;
 8007f88:	fa744703          	lbu	a4,-89(s0)
 8007f8c:	f9744783          	lbu	a5,-105(s0)
 8007f90:	8fb9                	xor	a5,a5,a4
 8007f92:	0ff7f793          	andi	a5,a5,255
 8007f96:	2781                	sext.w	a5,a5
 8007f98:	00f037b3          	snez	a5,a5
 8007f9c:	f8f40b23          	sb	a5,-106(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( expA == 0x7FF ) {
 8007fa0:	fe843703          	ld	a4,-24(s0)
 8007fa4:	7ff00793          	li	a5,2047
 8007fa8:	02f71863          	bne	a4,a5,8007fd8 <f64_mul+0xcc>
        if ( sigA || ((expB == 0x7FF) && sigB) ) goto propagateNaN;
 8007fac:	fe043783          	ld	a5,-32(s0)
 8007fb0:	16079063          	bnez	a5,8008110 <f64_mul+0x204>
 8007fb4:	fd843703          	ld	a4,-40(s0)
 8007fb8:	7ff00793          	li	a5,2047
 8007fbc:	00f71663          	bne	a4,a5,8007fc8 <f64_mul+0xbc>
 8007fc0:	fd043783          	ld	a5,-48(s0)
 8007fc4:	14079663          	bnez	a5,8008110 <f64_mul+0x204>
        magBits = expB | sigB;
 8007fc8:	fd843783          	ld	a5,-40(s0)
 8007fcc:	fd043703          	ld	a4,-48(s0)
 8007fd0:	8fd9                	or	a5,a5,a4
 8007fd2:	fcf43423          	sd	a5,-56(s0)
        goto infArg;
 8007fd6:	aa89                	j	8008128 <f64_mul+0x21c>
    }
    if ( expB == 0x7FF ) {
 8007fd8:	fd843703          	ld	a4,-40(s0)
 8007fdc:	7ff00793          	li	a5,2047
 8007fe0:	00f71e63          	bne	a4,a5,8007ffc <f64_mul+0xf0>
        if ( sigB ) goto propagateNaN;
 8007fe4:	fd043783          	ld	a5,-48(s0)
 8007fe8:	12079663          	bnez	a5,8008114 <f64_mul+0x208>
        magBits = expA | sigA;
 8007fec:	fe843783          	ld	a5,-24(s0)
 8007ff0:	fe043703          	ld	a4,-32(s0)
 8007ff4:	8fd9                	or	a5,a5,a4
 8007ff6:	fcf43423          	sd	a5,-56(s0)
        goto infArg;
 8007ffa:	a23d                	j	8008128 <f64_mul+0x21c>
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( ! expA ) {
 8007ffc:	fe843783          	ld	a5,-24(s0)
 8008000:	e79d                	bnez	a5,800802e <f64_mul+0x122>
        if ( ! sigA ) goto zero;
 8008002:	fe043783          	ld	a5,-32(s0)
 8008006:	14078963          	beqz	a5,8008158 <f64_mul+0x24c>
        normExpSig = softfloat_normSubnormalF64Sig( sigA );
 800800a:	fe043503          	ld	a0,-32(s0)
 800800e:	683010ef          	jal	ra,8009e90 <softfloat_normSubnormalF64Sig>
 8008012:	87aa                	mv	a5,a0
 8008014:	882e                	mv	a6,a1
 8008016:	f6f43423          	sd	a5,-152(s0)
 800801a:	f7043823          	sd	a6,-144(s0)
        expA = normExpSig.exp;
 800801e:	f6843783          	ld	a5,-152(s0)
 8008022:	fef43423          	sd	a5,-24(s0)
        sigA = normExpSig.sig;
 8008026:	f7043783          	ld	a5,-144(s0)
 800802a:	fef43023          	sd	a5,-32(s0)
    }
    if ( ! expB ) {
 800802e:	fd843783          	ld	a5,-40(s0)
 8008032:	e79d                	bnez	a5,8008060 <f64_mul+0x154>
        if ( ! sigB ) goto zero;
 8008034:	fd043783          	ld	a5,-48(s0)
 8008038:	12078263          	beqz	a5,800815c <f64_mul+0x250>
        normExpSig = softfloat_normSubnormalF64Sig( sigB );
 800803c:	fd043503          	ld	a0,-48(s0)
 8008040:	651010ef          	jal	ra,8009e90 <softfloat_normSubnormalF64Sig>
 8008044:	87aa                	mv	a5,a0
 8008046:	882e                	mv	a6,a1
 8008048:	f6f43423          	sd	a5,-152(s0)
 800804c:	f7043823          	sd	a6,-144(s0)
        expB = normExpSig.exp;
 8008050:	f6843783          	ld	a5,-152(s0)
 8008054:	fcf43c23          	sd	a5,-40(s0)
        sigB = normExpSig.sig;
 8008058:	f7043783          	ld	a5,-144(s0)
 800805c:	fcf43823          	sd	a5,-48(s0)
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    expZ = expA + expB - 0x3FF;
 8008060:	fe843703          	ld	a4,-24(s0)
 8008064:	fd843783          	ld	a5,-40(s0)
 8008068:	97ba                	add	a5,a5,a4
 800806a:	c0178793          	addi	a5,a5,-1023 # ffec01 <MEM_START-0x70013ff>
 800806e:	fcf43023          	sd	a5,-64(s0)
    sigA = (sigA | UINT64_C( 0x0010000000000000 ))<<10;
 8008072:	fe043783          	ld	a5,-32(s0)
 8008076:	00a79713          	slli	a4,a5,0xa
 800807a:	4785                	li	a5,1
 800807c:	17fa                	slli	a5,a5,0x3e
 800807e:	8fd9                	or	a5,a5,a4
 8008080:	fef43023          	sd	a5,-32(s0)
    sigB = (sigB | UINT64_C( 0x0010000000000000 ))<<11;
 8008084:	fd043783          	ld	a5,-48(s0)
 8008088:	00b79713          	slli	a4,a5,0xb
 800808c:	57fd                	li	a5,-1
 800808e:	17fe                	slli	a5,a5,0x3f
 8008090:	8fd9                	or	a5,a5,a4
 8008092:	fcf43823          	sd	a5,-48(s0)
#ifdef SOFTFLOAT_FAST_INT64
    sig128Z = softfloat_mul64To128( sigA, sigB );
    sigZ = sig128Z.v64 | (sig128Z.v0 != 0);
#else
    softfloat_mul64To128M( sigA, sigB, sig128Z );
 8008096:	f5840793          	addi	a5,s0,-168
 800809a:	863e                	mv	a2,a5
 800809c:	fd043583          	ld	a1,-48(s0)
 80080a0:	fe043503          	ld	a0,-32(s0)
 80080a4:	6b1000ef          	jal	ra,8008f54 <softfloat_mul64To128M>
    sigZ =
        (uint64_t) sig128Z[indexWord( 4, 3 )]<<32 | sig128Z[indexWord( 4, 2 )];
 80080a8:	f6442783          	lw	a5,-156(s0)
 80080ac:	1782                	slli	a5,a5,0x20
 80080ae:	9381                	srli	a5,a5,0x20
 80080b0:	02079713          	slli	a4,a5,0x20
 80080b4:	f6042783          	lw	a5,-160(s0)
 80080b8:	1782                	slli	a5,a5,0x20
 80080ba:	9381                	srli	a5,a5,0x20
    sigZ =
 80080bc:	8fd9                	or	a5,a5,a4
 80080be:	faf43c23          	sd	a5,-72(s0)
    if ( sig128Z[indexWord( 4, 1 )] || sig128Z[indexWord( 4, 0 )] ) sigZ |= 1;
 80080c2:	f5c42783          	lw	a5,-164(s0)
 80080c6:	e781                	bnez	a5,80080ce <f64_mul+0x1c2>
 80080c8:	f5842783          	lw	a5,-168(s0)
 80080cc:	c799                	beqz	a5,80080da <f64_mul+0x1ce>
 80080ce:	fb843783          	ld	a5,-72(s0)
 80080d2:	0017e793          	ori	a5,a5,1
 80080d6:	faf43c23          	sd	a5,-72(s0)
#endif
    if ( sigZ < UINT64_C( 0x4000000000000000 ) ) {
 80080da:	fb843703          	ld	a4,-72(s0)
 80080de:	57fd                	li	a5,-1
 80080e0:	8389                	srli	a5,a5,0x2
 80080e2:	00e7ec63          	bltu	a5,a4,80080fa <f64_mul+0x1ee>
        --expZ;
 80080e6:	fc043783          	ld	a5,-64(s0)
 80080ea:	17fd                	addi	a5,a5,-1
 80080ec:	fcf43023          	sd	a5,-64(s0)
        sigZ <<= 1;
 80080f0:	fb843783          	ld	a5,-72(s0)
 80080f4:	0786                	slli	a5,a5,0x1
 80080f6:	faf43c23          	sd	a5,-72(s0)
    }
    return softfloat_roundPackToF64( signZ, expZ, sigZ );
 80080fa:	f9644783          	lbu	a5,-106(s0)
 80080fe:	fb843603          	ld	a2,-72(s0)
 8008102:	fc043583          	ld	a1,-64(s0)
 8008106:	853e                	mv	a0,a5
 8008108:	174020ef          	jal	ra,800a27c <softfloat_roundPackToF64>
 800810c:	87aa                	mv	a5,a0
 800810e:	a09d                	j	8008174 <f64_mul+0x268>
        if ( sigA || ((expB == 0x7FF) && sigB) ) goto propagateNaN;
 8008110:	0001                	nop
 8008112:	a011                	j	8008116 <f64_mul+0x20a>
        if ( sigB ) goto propagateNaN;
 8008114:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 propagateNaN:
    uiZ = softfloat_propagateNaNF64UI( uiA, uiB );
 8008116:	f9843583          	ld	a1,-104(s0)
 800811a:	fa843503          	ld	a0,-88(s0)
 800811e:	1e6030ef          	jal	ra,800b304 <softfloat_propagateNaNF64UI>
 8008122:	faa43823          	sd	a0,-80(s0)
    goto uiZ;
 8008126:	a089                	j	8008168 <f64_mul+0x25c>
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 infArg:
    if ( ! magBits ) {
 8008128:	fc843783          	ld	a5,-56(s0)
 800812c:	eb99                	bnez	a5,8008142 <f64_mul+0x236>
        softfloat_raiseFlags( softfloat_flag_invalid );
 800812e:	001867f3          	csrrsi	a5,fflags,16
 8008132:	f8f43423          	sd	a5,-120(s0)
        uiZ = defaultNaNF64UI;
 8008136:	00fff7b7          	lui	a5,0xfff
 800813a:	179e                	slli	a5,a5,0x27
 800813c:	faf43823          	sd	a5,-80(s0)
    } else {
        uiZ = packToF64UI( signZ, 0x7FF, 0 );
    }
    goto uiZ;
 8008140:	a025                	j	8008168 <f64_mul+0x25c>
        uiZ = packToF64UI( signZ, 0x7FF, 0 );
 8008142:	f9644783          	lbu	a5,-106(s0)
 8008146:	03f79713          	slli	a4,a5,0x3f
 800814a:	7ff00793          	li	a5,2047
 800814e:	17d2                	slli	a5,a5,0x34
 8008150:	97ba                	add	a5,a5,a4
 8008152:	faf43823          	sd	a5,-80(s0)
    goto uiZ;
 8008156:	a809                	j	8008168 <f64_mul+0x25c>
        if ( ! sigA ) goto zero;
 8008158:	0001                	nop
 800815a:	a011                	j	800815e <f64_mul+0x252>
        if ( ! sigB ) goto zero;
 800815c:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 zero:
    uiZ = packToF64UI( signZ, 0, 0 );
 800815e:	f9644783          	lbu	a5,-106(s0)
 8008162:	17fe                	slli	a5,a5,0x3f
 8008164:	faf43823          	sd	a5,-80(s0)
 uiZ:
    uZ.ui = uiZ;
 8008168:	fb043783          	ld	a5,-80(s0)
 800816c:	f4f43823          	sd	a5,-176(s0)
    return uZ.f;
 8008170:	f5043783          	ld	a5,-176(s0)

}
 8008174:	853e                	mv	a0,a5
 8008176:	70ea                	ld	ra,184(sp)
 8008178:	744a                	ld	s0,176(sp)
 800817a:	6129                	addi	sp,sp,192
 800817c:	8082                	ret

000000000800817e <f64_sqrt>:
#include "internals.h"
#include "specialize.h"
#include "softfloat.h"

float64_t f64_sqrt( float64_t a )
{
 800817e:	7171                	addi	sp,sp,-176
 8008180:	f506                	sd	ra,168(sp)
 8008182:	f122                	sd	s0,160(sp)
 8008184:	1900                	addi	s0,sp,176
 8008186:	f4a43c23          	sd	a0,-168(s0)
    uint_fast64_t sigZ, shiftedSigZ;
    union ui64_f64 uZ;

    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    uA.f = a;
 800818a:	f5843783          	ld	a5,-168(s0)
 800818e:	f8f43023          	sd	a5,-128(s0)
    uiA = uA.ui;
 8008192:	f8043783          	ld	a5,-128(s0)
 8008196:	fcf43023          	sd	a5,-64(s0)
    signA = signF64UI( uiA );
 800819a:	fc043783          	ld	a5,-64(s0)
 800819e:	93fd                	srli	a5,a5,0x3f
 80081a0:	faf40fa3          	sb	a5,-65(s0)
    expA  = expF64UI( uiA );
 80081a4:	fc043783          	ld	a5,-64(s0)
 80081a8:	93d1                	srli	a5,a5,0x34
 80081aa:	7ff7f793          	andi	a5,a5,2047
 80081ae:	fef43423          	sd	a5,-24(s0)
    sigA  = fracF64UI( uiA );
 80081b2:	fc043703          	ld	a4,-64(s0)
 80081b6:	57fd                	li	a5,-1
 80081b8:	83b1                	srli	a5,a5,0xc
 80081ba:	8ff9                	and	a5,a5,a4
 80081bc:	fef43023          	sd	a5,-32(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( expA == 0x7FF ) {
 80081c0:	fe843703          	ld	a4,-24(s0)
 80081c4:	7ff00793          	li	a5,2047
 80081c8:	02f71863          	bne	a4,a5,80081f8 <f64_sqrt+0x7a>
        if ( sigA ) {
 80081cc:	fe043783          	ld	a5,-32(s0)
 80081d0:	cb89                	beqz	a5,80081e2 <f64_sqrt+0x64>
            uiZ = softfloat_propagateNaNF64UI( uiA, 0 );
 80081d2:	4581                	li	a1,0
 80081d4:	fc043503          	ld	a0,-64(s0)
 80081d8:	12c030ef          	jal	ra,800b304 <softfloat_propagateNaNF64UI>
 80081dc:	fca43c23          	sd	a0,-40(s0)
            goto uiZ;
 80081e0:	a2f9                	j	80083ae <f64_sqrt+0x230>
        }
        if ( ! signA ) return a;
 80081e2:	fbf44783          	lbu	a5,-65(s0)
 80081e6:	0017c793          	xori	a5,a5,1
 80081ea:	0ff7f793          	andi	a5,a5,255
 80081ee:	1a078463          	beqz	a5,8008396 <f64_sqrt+0x218>
 80081f2:	f5843783          	ld	a5,-168(s0)
 80081f6:	a2d1                	j	80083ba <f64_sqrt+0x23c>
        goto invalid;
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( signA ) {
 80081f8:	fbf44783          	lbu	a5,-65(s0)
 80081fc:	0ff7f793          	andi	a5,a5,255
 8008200:	cb99                	beqz	a5,8008216 <f64_sqrt+0x98>
        if ( ! (expA | sigA) ) return a;
 8008202:	fe843703          	ld	a4,-24(s0)
 8008206:	fe043783          	ld	a5,-32(s0)
 800820a:	8fd9                	or	a5,a5,a4
 800820c:	18079763          	bnez	a5,800839a <f64_sqrt+0x21c>
 8008210:	f5843783          	ld	a5,-168(s0)
 8008214:	a25d                	j	80083ba <f64_sqrt+0x23c>
        goto invalid;
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( ! expA ) {
 8008216:	fe843783          	ld	a5,-24(s0)
 800821a:	eb8d                	bnez	a5,800824c <f64_sqrt+0xce>
        if ( ! sigA ) return a;
 800821c:	fe043783          	ld	a5,-32(s0)
 8008220:	e781                	bnez	a5,8008228 <f64_sqrt+0xaa>
 8008222:	f5843783          	ld	a5,-168(s0)
 8008226:	aa51                	j	80083ba <f64_sqrt+0x23c>
        normExpSig = softfloat_normSubnormalF64Sig( sigA );
 8008228:	fe043503          	ld	a0,-32(s0)
 800822c:	465010ef          	jal	ra,8009e90 <softfloat_normSubnormalF64Sig>
 8008230:	87aa                	mv	a5,a0
 8008232:	882e                	mv	a6,a1
 8008234:	f6f43823          	sd	a5,-144(s0)
 8008238:	f7043c23          	sd	a6,-136(s0)
        expA = normExpSig.exp;
 800823c:	f7043783          	ld	a5,-144(s0)
 8008240:	fef43423          	sd	a5,-24(s0)
        sigA = normExpSig.sig;
 8008244:	f7843783          	ld	a5,-136(s0)
 8008248:	fef43023          	sd	a5,-32(s0)
    /*------------------------------------------------------------------------
    | (`sig32Z' is guaranteed to be a lower bound on the square root of
    | `sig32A', which makes `sig32Z' also a lower bound on the square root of
    | `sigA'.)
    *------------------------------------------------------------------------*/
    expZ = ((expA - 0x3FF)>>1) + 0x3FE;
 800824c:	fe843783          	ld	a5,-24(s0)
 8008250:	c0178793          	addi	a5,a5,-1023 # ffec01 <MEM_START-0x70013ff>
 8008254:	8785                	srai	a5,a5,0x1
 8008256:	3fe78793          	addi	a5,a5,1022
 800825a:	faf43823          	sd	a5,-80(s0)
    expA &= 1;
 800825e:	fe843783          	ld	a5,-24(s0)
 8008262:	8b85                	andi	a5,a5,1
 8008264:	fef43423          	sd	a5,-24(s0)
    sigA |= UINT64_C( 0x0010000000000000 );
 8008268:	fe043703          	ld	a4,-32(s0)
 800826c:	4785                	li	a5,1
 800826e:	17d2                	slli	a5,a5,0x34
 8008270:	8fd9                	or	a5,a5,a4
 8008272:	fef43023          	sd	a5,-32(s0)
    sig32A = sigA>>21;
 8008276:	fe043783          	ld	a5,-32(s0)
 800827a:	83d5                	srli	a5,a5,0x15
 800827c:	faf42623          	sw	a5,-84(s0)
    recipSqrt32 = softfloat_approxRecipSqrt32_1( expA, sig32A );
 8008280:	fe843783          	ld	a5,-24(s0)
 8008284:	2781                	sext.w	a5,a5
 8008286:	fac42703          	lw	a4,-84(s0)
 800828a:	85ba                	mv	a1,a4
 800828c:	853e                	mv	a0,a5
 800828e:	375000ef          	jal	ra,8008e02 <softfloat_approxRecipSqrt32_1>
 8008292:	87aa                	mv	a5,a0
 8008294:	faf42423          	sw	a5,-88(s0)
    sig32Z = ((uint_fast64_t) sig32A * recipSqrt32)>>32;
 8008298:	fac46703          	lwu	a4,-84(s0)
 800829c:	fa846783          	lwu	a5,-88(s0)
 80082a0:	02f707b3          	mul	a5,a4,a5
 80082a4:	9381                	srli	a5,a5,0x20
 80082a6:	fcf42a23          	sw	a5,-44(s0)
    if ( expA ) {
 80082aa:	fe843783          	ld	a5,-24(s0)
 80082ae:	cf89                	beqz	a5,80082c8 <f64_sqrt+0x14a>
        sigA <<= 8;
 80082b0:	fe043783          	ld	a5,-32(s0)
 80082b4:	07a2                	slli	a5,a5,0x8
 80082b6:	fef43023          	sd	a5,-32(s0)
        sig32Z >>= 1;
 80082ba:	fd442783          	lw	a5,-44(s0)
 80082be:	0017d79b          	srliw	a5,a5,0x1
 80082c2:	fcf42a23          	sw	a5,-44(s0)
 80082c6:	a031                	j	80082d2 <f64_sqrt+0x154>
    } else {
        sigA <<= 9;
 80082c8:	fe043783          	ld	a5,-32(s0)
 80082cc:	07a6                	slli	a5,a5,0x9
 80082ce:	fef43023          	sd	a5,-32(s0)
    }
    rem = sigA - (uint_fast64_t) sig32Z * sig32Z;
 80082d2:	fd446703          	lwu	a4,-44(s0)
 80082d6:	fd446783          	lwu	a5,-44(s0)
 80082da:	02f707b3          	mul	a5,a4,a5
 80082de:	fe043703          	ld	a4,-32(s0)
 80082e2:	40f707b3          	sub	a5,a4,a5
 80082e6:	faf43023          	sd	a5,-96(s0)
    q = ((uint32_t) (rem>>2) * (uint_fast64_t) recipSqrt32)>>32;
 80082ea:	fa043783          	ld	a5,-96(s0)
 80082ee:	8389                	srli	a5,a5,0x2
 80082f0:	2781                	sext.w	a5,a5
 80082f2:	02079713          	slli	a4,a5,0x20
 80082f6:	9301                	srli	a4,a4,0x20
 80082f8:	fa846783          	lwu	a5,-88(s0)
 80082fc:	02f707b3          	mul	a5,a4,a5
 8008300:	9381                	srli	a5,a5,0x20
 8008302:	f8f42e23          	sw	a5,-100(s0)
    sigZ = ((uint_fast64_t) sig32Z<<32 | 1<<5) + ((uint_fast64_t) q<<3);
 8008306:	fd446783          	lwu	a5,-44(s0)
 800830a:	1782                	slli	a5,a5,0x20
 800830c:	0207e713          	ori	a4,a5,32
 8008310:	f9c46783          	lwu	a5,-100(s0)
 8008314:	078e                	slli	a5,a5,0x3
 8008316:	97ba                	add	a5,a5,a4
 8008318:	fcf43423          	sd	a5,-56(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( (sigZ & 0x1FF) < 0x22 ) {
 800831c:	fc843783          	ld	a5,-56(s0)
 8008320:	1ff7f713          	andi	a4,a5,511
 8008324:	02100793          	li	a5,33
 8008328:	04e7ee63          	bltu	a5,a4,8008384 <f64_sqrt+0x206>
        sigZ &= ~(uint_fast64_t) 0x3F;
 800832c:	fc843783          	ld	a5,-56(s0)
 8008330:	fc07f793          	andi	a5,a5,-64
 8008334:	fcf43423          	sd	a5,-56(s0)
        shiftedSigZ = sigZ>>6;
 8008338:	fc843783          	ld	a5,-56(s0)
 800833c:	8399                	srli	a5,a5,0x6
 800833e:	f8f43823          	sd	a5,-112(s0)
        rem = (sigA<<52) - shiftedSigZ * shiftedSigZ;
 8008342:	fe043783          	ld	a5,-32(s0)
 8008346:	03479713          	slli	a4,a5,0x34
 800834a:	f9043683          	ld	a3,-112(s0)
 800834e:	f9043783          	ld	a5,-112(s0)
 8008352:	02f687b3          	mul	a5,a3,a5
 8008356:	40f707b3          	sub	a5,a4,a5
 800835a:	faf43023          	sd	a5,-96(s0)
        if ( rem & UINT64_C( 0x8000000000000000 ) ) {
 800835e:	fa043783          	ld	a5,-96(s0)
 8008362:	0007d863          	bgez	a5,8008372 <f64_sqrt+0x1f4>
            --sigZ;
 8008366:	fc843783          	ld	a5,-56(s0)
 800836a:	17fd                	addi	a5,a5,-1
 800836c:	fcf43423          	sd	a5,-56(s0)
 8008370:	a811                	j	8008384 <f64_sqrt+0x206>
        } else {
            if ( rem ) sigZ |= 1;
 8008372:	fa043783          	ld	a5,-96(s0)
 8008376:	c799                	beqz	a5,8008384 <f64_sqrt+0x206>
 8008378:	fc843783          	ld	a5,-56(s0)
 800837c:	0017e793          	ori	a5,a5,1
 8008380:	fcf43423          	sd	a5,-56(s0)
        }
    }
    return softfloat_roundPackToF64( 0, expZ, sigZ );
 8008384:	fc843603          	ld	a2,-56(s0)
 8008388:	fb043583          	ld	a1,-80(s0)
 800838c:	4501                	li	a0,0
 800838e:	6ef010ef          	jal	ra,800a27c <softfloat_roundPackToF64>
 8008392:	87aa                	mv	a5,a0
 8008394:	a01d                	j	80083ba <f64_sqrt+0x23c>
        goto invalid;
 8008396:	0001                	nop
 8008398:	a011                	j	800839c <f64_sqrt+0x21e>
        goto invalid;
 800839a:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 invalid:
    softfloat_raiseFlags( softfloat_flag_invalid );
 800839c:	001867f3          	csrrsi	a5,fflags,16
 80083a0:	f8f43423          	sd	a5,-120(s0)
    uiZ = defaultNaNF64UI;
 80083a4:	00fff7b7          	lui	a5,0xfff
 80083a8:	179e                	slli	a5,a5,0x27
 80083aa:	fcf43c23          	sd	a5,-40(s0)
 uiZ:
    uZ.ui = uiZ;
 80083ae:	fd843783          	ld	a5,-40(s0)
 80083b2:	f6f43423          	sd	a5,-152(s0)
    return uZ.f;
 80083b6:	f6843783          	ld	a5,-152(s0)

}
 80083ba:	853e                	mv	a0,a5
 80083bc:	70aa                	ld	ra,168(sp)
 80083be:	740a                	ld	s0,160(sp)
 80083c0:	614d                	addi	sp,sp,176
 80083c2:	8082                	ret

00000000080083c4 <f64_to_f32>:
#include "internals.h"
#include "specialize.h"
#include "softfloat.h"

float32_t f64_to_f32( float64_t a )
{
 80083c4:	7159                	addi	sp,sp,-112
 80083c6:	f486                	sd	ra,104(sp)
 80083c8:	f0a2                	sd	s0,96(sp)
 80083ca:	1880                	addi	s0,sp,112
 80083cc:	f8a43c23          	sd	a0,-104(s0)
    uint_fast32_t uiZ, frac32;
    union ui32_f32 uZ;

    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    uA.f = a;
 80083d0:	f9843783          	ld	a5,-104(s0)
 80083d4:	faf43823          	sd	a5,-80(s0)
    uiA = uA.ui;
 80083d8:	fb043783          	ld	a5,-80(s0)
 80083dc:	fef43023          	sd	a5,-32(s0)
    sign = signF64UI( uiA );
 80083e0:	fe043783          	ld	a5,-32(s0)
 80083e4:	93fd                	srli	a5,a5,0x3f
 80083e6:	fcf40fa3          	sb	a5,-33(s0)
    exp  = expF64UI( uiA );
 80083ea:	fe043783          	ld	a5,-32(s0)
 80083ee:	93d1                	srli	a5,a5,0x34
 80083f0:	7ff7f793          	andi	a5,a5,2047
 80083f4:	fcf43823          	sd	a5,-48(s0)
    frac = fracF64UI( uiA );
 80083f8:	fe043703          	ld	a4,-32(s0)
 80083fc:	57fd                	li	a5,-1
 80083fe:	83b1                	srli	a5,a5,0xc
 8008400:	8ff9                	and	a5,a5,a4
 8008402:	fcf43423          	sd	a5,-56(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( exp == 0x7FF ) {
 8008406:	fd043703          	ld	a4,-48(s0)
 800840a:	7ff00793          	li	a5,2047
 800840e:	04f71463          	bne	a4,a5,8008456 <f64_to_f32+0x92>
        if ( frac ) {
 8008412:	fc843783          	ld	a5,-56(s0)
 8008416:	c385                	beqz	a5,8008436 <f64_to_f32+0x72>
            softfloat_f64UIToCommonNaN( uiA, &commonNaN );
 8008418:	fe043703          	ld	a4,-32(s0)
 800841c:	4785                	li	a5,1
 800841e:	17ce                	slli	a5,a5,0x33
 8008420:	8ff9                	and	a5,a5,a4
 8008422:	e789                	bnez	a5,800842c <f64_to_f32+0x68>
 8008424:	001867f3          	csrrsi	a5,fflags,16
 8008428:	fcf43023          	sd	a5,-64(s0)
            uiZ = softfloat_commonNaNToF32UI( &commonNaN );
 800842c:	7fc007b7          	lui	a5,0x7fc00
 8008430:	fef43423          	sd	a5,-24(s0)
        } else {
            uiZ = packToF32UI( sign, 0xFF, 0 );
        }
        goto uiZ;
 8008434:	a89d                	j	80084aa <f64_to_f32+0xe6>
            uiZ = packToF32UI( sign, 0xFF, 0 );
 8008436:	fdf44783          	lbu	a5,-33(s0)
 800843a:	2781                	sext.w	a5,a5
 800843c:	01f7979b          	slliw	a5,a5,0x1f
 8008440:	0007871b          	sext.w	a4,a5
 8008444:	7f8007b7          	lui	a5,0x7f800
 8008448:	9fb9                	addw	a5,a5,a4
 800844a:	2781                	sext.w	a5,a5
 800844c:	1782                	slli	a5,a5,0x20
 800844e:	9381                	srli	a5,a5,0x20
 8008450:	fef43423          	sd	a5,-24(s0)
        goto uiZ;
 8008454:	a899                	j	80084aa <f64_to_f32+0xe6>
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    frac32 = softfloat_shortShiftRightJam64( frac, 22 );
 8008456:	45d9                	li	a1,22
 8008458:	fc843503          	ld	a0,-56(s0)
 800845c:	5b6020ef          	jal	ra,800aa12 <softfloat_shortShiftRightJam64>
 8008460:	faa43c23          	sd	a0,-72(s0)
    if ( ! (exp | frac32) ) {
 8008464:	fd043703          	ld	a4,-48(s0)
 8008468:	fb843783          	ld	a5,-72(s0)
 800846c:	8fd9                	or	a5,a5,a4
 800846e:	ef81                	bnez	a5,8008486 <f64_to_f32+0xc2>
        uiZ = packToF32UI( sign, 0, 0 );
 8008470:	fdf44783          	lbu	a5,-33(s0)
 8008474:	2781                	sext.w	a5,a5
 8008476:	01f7979b          	slliw	a5,a5,0x1f
 800847a:	2781                	sext.w	a5,a5
 800847c:	1782                	slli	a5,a5,0x20
 800847e:	9381                	srli	a5,a5,0x20
 8008480:	fef43423          	sd	a5,-24(s0)
        goto uiZ;
 8008484:	a01d                	j	80084aa <f64_to_f32+0xe6>
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    return softfloat_roundPackToF32( sign, exp - 0x381, frac32 | 0x40000000 );
 8008486:	fd043783          	ld	a5,-48(s0)
 800848a:	c7f78693          	addi	a3,a5,-897 # 7f7ffc7f <_payload_end+0x77033cdf>
 800848e:	fb843703          	ld	a4,-72(s0)
 8008492:	400007b7          	lui	a5,0x40000
 8008496:	8f5d                	or	a4,a4,a5
 8008498:	fdf44783          	lbu	a5,-33(s0)
 800849c:	863a                	mv	a2,a4
 800849e:	85b6                	mv	a1,a3
 80084a0:	853e                	mv	a0,a5
 80084a2:	3a5010ef          	jal	ra,800a046 <softfloat_roundPackToF32>
 80084a6:	87aa                	mv	a5,a0
 80084a8:	a801                	j	80084b8 <f64_to_f32+0xf4>
 uiZ:
    uZ.ui = uiZ;
 80084aa:	fe843783          	ld	a5,-24(s0)
 80084ae:	2781                	sext.w	a5,a5
 80084b0:	faf42023          	sw	a5,-96(s0)
    return uZ.f;
 80084b4:	fa042783          	lw	a5,-96(s0)

}
 80084b8:	853e                	mv	a0,a5
 80084ba:	70a6                	ld	ra,104(sp)
 80084bc:	7406                	ld	s0,96(sp)
 80084be:	6165                	addi	sp,sp,112
 80084c0:	8082                	ret

00000000080084c2 <f64_to_ui64>:
#include "internals.h"
#include "specialize.h"
#include "softfloat.h"

uint_fast64_t f64_to_ui64( float64_t a, uint_fast8_t roundingMode, bool exact )
{
 80084c2:	7159                	addi	sp,sp,-112
 80084c4:	f486                	sd	ra,104(sp)
 80084c6:	f0a2                	sd	s0,96(sp)
 80084c8:	1880                	addi	s0,sp,112
 80084ca:	f8a43c23          	sd	a0,-104(s0)
 80084ce:	87ae                	mv	a5,a1
 80084d0:	8732                	mv	a4,a2
 80084d2:	f8f40ba3          	sb	a5,-105(s0)
 80084d6:	87ba                	mv	a5,a4
 80084d8:	f8f40b23          	sb	a5,-106(s0)
    uint32_t extSig[3];
#endif

    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    uA.f = a;
 80084dc:	f9843783          	ld	a5,-104(s0)
 80084e0:	faf43c23          	sd	a5,-72(s0)
    uiA = uA.ui;
 80084e4:	fb843783          	ld	a5,-72(s0)
 80084e8:	fef43023          	sd	a5,-32(s0)
    sign = signF64UI( uiA );
 80084ec:	fe043783          	ld	a5,-32(s0)
 80084f0:	93fd                	srli	a5,a5,0x3f
 80084f2:	fcf40fa3          	sb	a5,-33(s0)
    exp  = expF64UI( uiA );
 80084f6:	fe043783          	ld	a5,-32(s0)
 80084fa:	93d1                	srli	a5,a5,0x34
 80084fc:	7ff7f793          	andi	a5,a5,2047
 8008500:	fcf43823          	sd	a5,-48(s0)
    sig  = fracF64UI( uiA );
 8008504:	fe043703          	ld	a4,-32(s0)
 8008508:	57fd                	li	a5,-1
 800850a:	83b1                	srli	a5,a5,0xc
 800850c:	8ff9                	and	a5,a5,a4
 800850e:	fef43423          	sd	a5,-24(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( exp ) sig |= UINT64_C( 0x0010000000000000 );
 8008512:	fd043783          	ld	a5,-48(s0)
 8008516:	cb81                	beqz	a5,8008526 <f64_to_ui64+0x64>
 8008518:	fe843703          	ld	a4,-24(s0)
 800851c:	4785                	li	a5,1
 800851e:	17d2                	slli	a5,a5,0x34
 8008520:	8fd9                	or	a5,a5,a4
 8008522:	fef43423          	sd	a5,-24(s0)
    shiftDist = 0x433 - exp;
 8008526:	43300713          	li	a4,1075
 800852a:	fd043783          	ld	a5,-48(s0)
 800852e:	40f707b3          	sub	a5,a4,a5
 8008532:	fcf43423          	sd	a5,-56(s0)
    }
    return
        softfloat_roundToUI64(
            sign, sigExtra.v, sigExtra.extra, roundingMode, exact );
#else
    extSig[indexWord( 3, 0 )] = 0;
 8008536:	fa042423          	sw	zero,-88(s0)
    if ( shiftDist <= 0 ) {
 800853a:	fc843783          	ld	a5,-56(s0)
 800853e:	04f04063          	bgtz	a5,800857e <f64_to_ui64+0xbc>
        if ( shiftDist < -11 ) goto invalid;
 8008542:	fc843703          	ld	a4,-56(s0)
 8008546:	57d5                	li	a5,-11
 8008548:	08f74163          	blt	a4,a5,80085ca <f64_to_ui64+0x108>
        sig <<= -shiftDist;
 800854c:	fc843783          	ld	a5,-56(s0)
 8008550:	2781                	sext.w	a5,a5
 8008552:	40f007bb          	negw	a5,a5
 8008556:	2781                	sext.w	a5,a5
 8008558:	873e                	mv	a4,a5
 800855a:	fe843783          	ld	a5,-24(s0)
 800855e:	00e797b3          	sll	a5,a5,a4
 8008562:	fef43423          	sd	a5,-24(s0)
        extSig[indexWord( 3, 2 )] = sig>>32;
 8008566:	fe843783          	ld	a5,-24(s0)
 800856a:	9381                	srli	a5,a5,0x20
 800856c:	2781                	sext.w	a5,a5
 800856e:	faf42823          	sw	a5,-80(s0)
        extSig[indexWord( 3, 1 )] = sig;
 8008572:	fe843783          	ld	a5,-24(s0)
 8008576:	2781                	sext.w	a5,a5
 8008578:	faf42623          	sw	a5,-84(s0)
 800857c:	a80d                	j	80085ae <f64_to_ui64+0xec>
    } else {
        extSig[indexWord( 3, 2 )] = sig>>32;
 800857e:	fe843783          	ld	a5,-24(s0)
 8008582:	9381                	srli	a5,a5,0x20
 8008584:	2781                	sext.w	a5,a5
 8008586:	faf42823          	sw	a5,-80(s0)
        extSig[indexWord( 3, 1 )] = sig;
 800858a:	fe843783          	ld	a5,-24(s0)
 800858e:	2781                	sext.w	a5,a5
 8008590:	faf42623          	sw	a5,-84(s0)
        softfloat_shiftRightJam96M( extSig, shiftDist, extSig );
 8008594:	fc843783          	ld	a5,-56(s0)
 8008598:	0007871b          	sext.w	a4,a5
 800859c:	fa840693          	addi	a3,s0,-88
 80085a0:	fa840793          	addi	a5,s0,-88
 80085a4:	863a                	mv	a2,a4
 80085a6:	85be                	mv	a1,a5
 80085a8:	450d                	li	a0,3
 80085aa:	0d0020ef          	jal	ra,800a67a <softfloat_shiftRightJamM>
    }
    return softfloat_roundMToUI64( sign, extSig, roundingMode, exact );
 80085ae:	f9644683          	lbu	a3,-106(s0)
 80085b2:	f9744603          	lbu	a2,-105(s0)
 80085b6:	fa840713          	addi	a4,s0,-88
 80085ba:	fdf44783          	lbu	a5,-33(s0)
 80085be:	85ba                	mv	a1,a4
 80085c0:	853e                	mv	a0,a5
 80085c2:	14d010ef          	jal	ra,8009f0e <softfloat_roundMToUI64>
 80085c6:	87aa                	mv	a5,a0
 80085c8:	a825                	j	8008600 <f64_to_ui64+0x13e>
        if ( shiftDist < -11 ) goto invalid;
 80085ca:	0001                	nop
#endif
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 invalid:
    softfloat_raiseFlags( softfloat_flag_invalid );
 80085cc:	001867f3          	csrrsi	a5,fflags,16
 80085d0:	fcf43023          	sd	a5,-64(s0)
    return
        (exp == 0x7FF) && fracF64UI( uiA ) ? ui64_fromNaN
            : sign ? ui64_fromNegOverflow : ui64_fromPosOverflow;
 80085d4:	fd043703          	ld	a4,-48(s0)
 80085d8:	7ff00793          	li	a5,2047
 80085dc:	00f71863          	bne	a4,a5,80085ec <f64_to_ui64+0x12a>
        (exp == 0x7FF) && fracF64UI( uiA ) ? ui64_fromNaN
 80085e0:	fe043703          	ld	a4,-32(s0)
 80085e4:	57fd                	li	a5,-1
 80085e6:	83b1                	srli	a5,a5,0xc
 80085e8:	8ff9                	and	a5,a5,a4
 80085ea:	eb91                	bnez	a5,80085fe <f64_to_ui64+0x13c>
            : sign ? ui64_fromNegOverflow : ui64_fromPosOverflow;
 80085ec:	fdf44783          	lbu	a5,-33(s0)
 80085f0:	0ff7f793          	andi	a5,a5,255
 80085f4:	c399                	beqz	a5,80085fa <f64_to_ui64+0x138>
 80085f6:	4781                	li	a5,0
 80085f8:	a021                	j	8008600 <f64_to_ui64+0x13e>
 80085fa:	57fd                	li	a5,-1
 80085fc:	a011                	j	8008600 <f64_to_ui64+0x13e>
 80085fe:	57fd                	li	a5,-1

}
 8008600:	853e                	mv	a0,a5
 8008602:	70a6                	ld	ra,104(sp)
 8008604:	7406                	ld	s0,96(sp)
 8008606:	6165                	addi	sp,sp,112
 8008608:	8082                	ret

000000000800860a <f64_classify>:
#include "internals.h"
#include "specialize.h"
#include "softfloat.h"

uint_fast16_t f64_classify( float64_t a )
{
 800860a:	715d                	addi	sp,sp,-80
 800860c:	e4a2                	sd	s0,72(sp)
 800860e:	0880                	addi	s0,sp,80
 8008610:	faa43c23          	sd	a0,-72(s0)
    union ui64_f64 uA;
    uint_fast64_t uiA;

    uA.f = a;
 8008614:	fb843783          	ld	a5,-72(s0)
 8008618:	fcf43423          	sd	a5,-56(s0)
    uiA = uA.ui;
 800861c:	fc843783          	ld	a5,-56(s0)
 8008620:	fef43423          	sd	a5,-24(s0)

    uint_fast16_t infOrNaN = expF64UI( uiA ) == 0x7FF;
 8008624:	fe843783          	ld	a5,-24(s0)
 8008628:	93d1                	srli	a5,a5,0x34
 800862a:	7ff7f793          	andi	a5,a5,2047
 800862e:	80178793          	addi	a5,a5,-2047 # 3ffff801 <_payload_end+0x37833861>
 8008632:	0017b793          	seqz	a5,a5
 8008636:	0ff7f793          	andi	a5,a5,255
 800863a:	fef43023          	sd	a5,-32(s0)
    uint_fast16_t subnormalOrZero = expF64UI( uiA ) == 0;
 800863e:	fe843783          	ld	a5,-24(s0)
 8008642:	93d1                	srli	a5,a5,0x34
 8008644:	7ff7f793          	andi	a5,a5,2047
 8008648:	0017b793          	seqz	a5,a5
 800864c:	0ff7f793          	andi	a5,a5,255
 8008650:	fcf43c23          	sd	a5,-40(s0)
    bool sign = signF64UI( uiA );
 8008654:	fe843783          	ld	a5,-24(s0)
 8008658:	93fd                	srli	a5,a5,0x3f
 800865a:	fcf40ba3          	sb	a5,-41(s0)

    return
        (  sign && infOrNaN && fracF64UI( uiA ) == 0 )          << 0 |
 800865e:	fd744783          	lbu	a5,-41(s0)
 8008662:	0ff7f793          	andi	a5,a5,255
 8008666:	cf81                	beqz	a5,800867e <f64_classify+0x74>
 8008668:	fe043783          	ld	a5,-32(s0)
 800866c:	cb89                	beqz	a5,800867e <f64_classify+0x74>
 800866e:	fe843703          	ld	a4,-24(s0)
 8008672:	57fd                	li	a5,-1
 8008674:	83b1                	srli	a5,a5,0xc
 8008676:	8ff9                	and	a5,a5,a4
 8008678:	e399                	bnez	a5,800867e <f64_classify+0x74>
 800867a:	4785                	li	a5,1
 800867c:	a011                	j	8008680 <f64_classify+0x76>
 800867e:	4781                	li	a5,0
        (  sign && !infOrNaN && !subnormalOrZero )              << 1 |
 8008680:	fd744703          	lbu	a4,-41(s0)
 8008684:	0ff77713          	andi	a4,a4,255
 8008688:	cb09                	beqz	a4,800869a <f64_classify+0x90>
 800868a:	fe043703          	ld	a4,-32(s0)
 800868e:	e711                	bnez	a4,800869a <f64_classify+0x90>
 8008690:	fd843703          	ld	a4,-40(s0)
 8008694:	e319                	bnez	a4,800869a <f64_classify+0x90>
 8008696:	4705                	li	a4,1
 8008698:	a011                	j	800869c <f64_classify+0x92>
 800869a:	4701                	li	a4,0
 800869c:	0017171b          	slliw	a4,a4,0x1
 80086a0:	2701                	sext.w	a4,a4
        (  sign && infOrNaN && fracF64UI( uiA ) == 0 )          << 0 |
 80086a2:	8fd9                	or	a5,a5,a4
 80086a4:	0007871b          	sext.w	a4,a5
        (  sign && subnormalOrZero && fracF64UI( uiA ) )        << 2 |
 80086a8:	fd744783          	lbu	a5,-41(s0)
 80086ac:	0ff7f793          	andi	a5,a5,255
 80086b0:	cf81                	beqz	a5,80086c8 <f64_classify+0xbe>
 80086b2:	fd843783          	ld	a5,-40(s0)
 80086b6:	cb89                	beqz	a5,80086c8 <f64_classify+0xbe>
 80086b8:	fe843683          	ld	a3,-24(s0)
 80086bc:	57fd                	li	a5,-1
 80086be:	83b1                	srli	a5,a5,0xc
 80086c0:	8ff5                	and	a5,a5,a3
 80086c2:	c399                	beqz	a5,80086c8 <f64_classify+0xbe>
 80086c4:	4785                	li	a5,1
 80086c6:	a011                	j	80086ca <f64_classify+0xc0>
 80086c8:	4781                	li	a5,0
 80086ca:	0027979b          	slliw	a5,a5,0x2
 80086ce:	2781                	sext.w	a5,a5
        (  sign && !infOrNaN && !subnormalOrZero )              << 1 |
 80086d0:	8fd9                	or	a5,a5,a4
 80086d2:	0007871b          	sext.w	a4,a5
        (  sign && subnormalOrZero && fracF64UI( uiA ) == 0 )   << 3 |
 80086d6:	fd744783          	lbu	a5,-41(s0)
 80086da:	0ff7f793          	andi	a5,a5,255
 80086de:	cf81                	beqz	a5,80086f6 <f64_classify+0xec>
 80086e0:	fd843783          	ld	a5,-40(s0)
 80086e4:	cb89                	beqz	a5,80086f6 <f64_classify+0xec>
 80086e6:	fe843683          	ld	a3,-24(s0)
 80086ea:	57fd                	li	a5,-1
 80086ec:	83b1                	srli	a5,a5,0xc
 80086ee:	8ff5                	and	a5,a5,a3
 80086f0:	e399                	bnez	a5,80086f6 <f64_classify+0xec>
 80086f2:	4785                	li	a5,1
 80086f4:	a011                	j	80086f8 <f64_classify+0xee>
 80086f6:	4781                	li	a5,0
 80086f8:	0037979b          	slliw	a5,a5,0x3
 80086fc:	2781                	sext.w	a5,a5
        (  sign && subnormalOrZero && fracF64UI( uiA ) )        << 2 |
 80086fe:	8fd9                	or	a5,a5,a4
 8008700:	0007871b          	sext.w	a4,a5
        ( !sign && infOrNaN && fracF64UI( uiA ) == 0 )          << 7 |
 8008704:	fd744783          	lbu	a5,-41(s0)
 8008708:	0017c793          	xori	a5,a5,1
 800870c:	0ff7f793          	andi	a5,a5,255
 8008710:	cf81                	beqz	a5,8008728 <f64_classify+0x11e>
 8008712:	fe043783          	ld	a5,-32(s0)
 8008716:	cb89                	beqz	a5,8008728 <f64_classify+0x11e>
 8008718:	fe843683          	ld	a3,-24(s0)
 800871c:	57fd                	li	a5,-1
 800871e:	83b1                	srli	a5,a5,0xc
 8008720:	8ff5                	and	a5,a5,a3
 8008722:	e399                	bnez	a5,8008728 <f64_classify+0x11e>
 8008724:	4785                	li	a5,1
 8008726:	a011                	j	800872a <f64_classify+0x120>
 8008728:	4781                	li	a5,0
 800872a:	0077979b          	slliw	a5,a5,0x7
 800872e:	2781                	sext.w	a5,a5
        (  sign && subnormalOrZero && fracF64UI( uiA ) == 0 )   << 3 |
 8008730:	8fd9                	or	a5,a5,a4
 8008732:	0007871b          	sext.w	a4,a5
        ( !sign && !infOrNaN && !subnormalOrZero )              << 6 |
 8008736:	fd744783          	lbu	a5,-41(s0)
 800873a:	0017c793          	xori	a5,a5,1
 800873e:	0ff7f793          	andi	a5,a5,255
 8008742:	cb89                	beqz	a5,8008754 <f64_classify+0x14a>
 8008744:	fe043783          	ld	a5,-32(s0)
 8008748:	e791                	bnez	a5,8008754 <f64_classify+0x14a>
 800874a:	fd843783          	ld	a5,-40(s0)
 800874e:	e399                	bnez	a5,8008754 <f64_classify+0x14a>
 8008750:	4785                	li	a5,1
 8008752:	a011                	j	8008756 <f64_classify+0x14c>
 8008754:	4781                	li	a5,0
 8008756:	0067979b          	slliw	a5,a5,0x6
 800875a:	2781                	sext.w	a5,a5
        ( !sign && infOrNaN && fracF64UI( uiA ) == 0 )          << 7 |
 800875c:	8fd9                	or	a5,a5,a4
 800875e:	0007871b          	sext.w	a4,a5
        ( !sign && subnormalOrZero && fracF64UI( uiA ) )        << 5 |
 8008762:	fd744783          	lbu	a5,-41(s0)
 8008766:	0017c793          	xori	a5,a5,1
 800876a:	0ff7f793          	andi	a5,a5,255
 800876e:	cf81                	beqz	a5,8008786 <f64_classify+0x17c>
 8008770:	fd843783          	ld	a5,-40(s0)
 8008774:	cb89                	beqz	a5,8008786 <f64_classify+0x17c>
 8008776:	fe843683          	ld	a3,-24(s0)
 800877a:	57fd                	li	a5,-1
 800877c:	83b1                	srli	a5,a5,0xc
 800877e:	8ff5                	and	a5,a5,a3
 8008780:	c399                	beqz	a5,8008786 <f64_classify+0x17c>
 8008782:	4785                	li	a5,1
 8008784:	a011                	j	8008788 <f64_classify+0x17e>
 8008786:	4781                	li	a5,0
 8008788:	0057979b          	slliw	a5,a5,0x5
 800878c:	2781                	sext.w	a5,a5
        ( !sign && !infOrNaN && !subnormalOrZero )              << 6 |
 800878e:	8fd9                	or	a5,a5,a4
 8008790:	0007871b          	sext.w	a4,a5
        ( !sign && subnormalOrZero && fracF64UI( uiA ) == 0 )   << 4 |
 8008794:	fd744783          	lbu	a5,-41(s0)
 8008798:	0017c793          	xori	a5,a5,1
 800879c:	0ff7f793          	andi	a5,a5,255
 80087a0:	cf81                	beqz	a5,80087b8 <f64_classify+0x1ae>
 80087a2:	fd843783          	ld	a5,-40(s0)
 80087a6:	cb89                	beqz	a5,80087b8 <f64_classify+0x1ae>
 80087a8:	fe843683          	ld	a3,-24(s0)
 80087ac:	57fd                	li	a5,-1
 80087ae:	83b1                	srli	a5,a5,0xc
 80087b0:	8ff5                	and	a5,a5,a3
 80087b2:	e399                	bnez	a5,80087b8 <f64_classify+0x1ae>
 80087b4:	4785                	li	a5,1
 80087b6:	a011                	j	80087ba <f64_classify+0x1b0>
 80087b8:	4781                	li	a5,0
 80087ba:	0047979b          	slliw	a5,a5,0x4
 80087be:	2781                	sext.w	a5,a5
        ( !sign && subnormalOrZero && fracF64UI( uiA ) )        << 5 |
 80087c0:	8fd9                	or	a5,a5,a4
 80087c2:	0007871b          	sext.w	a4,a5
        ( isNaNF64UI( uiA ) &&  softfloat_isSigNaNF64UI( uiA )) << 8 |
 80087c6:	fe843783          	ld	a5,-24(s0)
 80087ca:	fff7c693          	not	a3,a5
 80087ce:	7ff00793          	li	a5,2047
 80087d2:	17d2                	slli	a5,a5,0x34
 80087d4:	8ff5                	and	a5,a5,a3
 80087d6:	eb95                	bnez	a5,800880a <f64_classify+0x200>
 80087d8:	fe843683          	ld	a3,-24(s0)
 80087dc:	57fd                	li	a5,-1
 80087de:	83b1                	srli	a5,a5,0xc
 80087e0:	8ff5                	and	a5,a5,a3
 80087e2:	c785                	beqz	a5,800880a <f64_classify+0x200>
 80087e4:	fe843683          	ld	a3,-24(s0)
 80087e8:	00fff7b7          	lui	a5,0xfff
 80087ec:	179e                	slli	a5,a5,0x27
 80087ee:	8efd                	and	a3,a3,a5
 80087f0:	7ff00793          	li	a5,2047
 80087f4:	17d2                	slli	a5,a5,0x34
 80087f6:	00f69a63          	bne	a3,a5,800880a <f64_classify+0x200>
 80087fa:	fe843683          	ld	a3,-24(s0)
 80087fe:	57fd                	li	a5,-1
 8008800:	83b5                	srli	a5,a5,0xd
 8008802:	8ff5                	and	a5,a5,a3
 8008804:	c399                	beqz	a5,800880a <f64_classify+0x200>
 8008806:	4785                	li	a5,1
 8008808:	a011                	j	800880c <f64_classify+0x202>
 800880a:	4781                	li	a5,0
 800880c:	0087979b          	slliw	a5,a5,0x8
 8008810:	2781                	sext.w	a5,a5
        ( !sign && subnormalOrZero && fracF64UI( uiA ) == 0 )   << 4 |
 8008812:	8fd9                	or	a5,a5,a4
 8008814:	0007871b          	sext.w	a4,a5
        ( isNaNF64UI( uiA ) && !softfloat_isSigNaNF64UI( uiA )) << 9;
 8008818:	fe843783          	ld	a5,-24(s0)
 800881c:	fff7c693          	not	a3,a5
 8008820:	7ff00793          	li	a5,2047
 8008824:	17d2                	slli	a5,a5,0x34
 8008826:	8ff5                	and	a5,a5,a3
 8008828:	eb95                	bnez	a5,800885c <f64_classify+0x252>
 800882a:	fe843683          	ld	a3,-24(s0)
 800882e:	57fd                	li	a5,-1
 8008830:	83b1                	srli	a5,a5,0xc
 8008832:	8ff5                	and	a5,a5,a3
 8008834:	c785                	beqz	a5,800885c <f64_classify+0x252>
 8008836:	fe843683          	ld	a3,-24(s0)
 800883a:	00fff7b7          	lui	a5,0xfff
 800883e:	179e                	slli	a5,a5,0x27
 8008840:	8efd                	and	a3,a3,a5
 8008842:	7ff00793          	li	a5,2047
 8008846:	17d2                	slli	a5,a5,0x34
 8008848:	00f69863          	bne	a3,a5,8008858 <f64_classify+0x24e>
 800884c:	fe843683          	ld	a3,-24(s0)
 8008850:	57fd                	li	a5,-1
 8008852:	83b5                	srli	a5,a5,0xd
 8008854:	8ff5                	and	a5,a5,a3
 8008856:	e399                	bnez	a5,800885c <f64_classify+0x252>
 8008858:	4785                	li	a5,1
 800885a:	a011                	j	800885e <f64_classify+0x254>
 800885c:	4781                	li	a5,0
 800885e:	0097979b          	slliw	a5,a5,0x9
 8008862:	2781                	sext.w	a5,a5
        ( isNaNF64UI( uiA ) &&  softfloat_isSigNaNF64UI( uiA )) << 8 |
 8008864:	8fd9                	or	a5,a5,a4
 8008866:	2781                	sext.w	a5,a5
}
 8008868:	853e                	mv	a0,a5
 800886a:	6426                	ld	s0,72(sp)
 800886c:	6161                	addi	sp,sp,80
 800886e:	8082                	ret

0000000008008870 <softfloat_addMagsF32>:
#include "platform.h"
#include "internals.h"
#include "specialize.h"

float32_t softfloat_addMagsF32( uint_fast32_t uiA, uint_fast32_t uiB )
{
 8008870:	7159                	addi	sp,sp,-112
 8008872:	f486                	sd	ra,104(sp)
 8008874:	f0a2                	sd	s0,96(sp)
 8008876:	1880                	addi	s0,sp,112
 8008878:	f8a43c23          	sd	a0,-104(s0)
 800887c:	f8b43823          	sd	a1,-112(s0)
    uint_fast32_t sigZ;
    union ui32_f32 uZ;

    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    expA = expF32UI( uiA );
 8008880:	f9843783          	ld	a5,-104(s0)
 8008884:	83dd                	srli	a5,a5,0x17
 8008886:	0ff7f793          	andi	a5,a5,255
 800888a:	faf43c23          	sd	a5,-72(s0)
    sigA = fracF32UI( uiA );
 800888e:	f9843703          	ld	a4,-104(s0)
 8008892:	008007b7          	lui	a5,0x800
 8008896:	17fd                	addi	a5,a5,-1
 8008898:	8ff9                	and	a5,a5,a4
 800889a:	fef43423          	sd	a5,-24(s0)
    expB = expF32UI( uiB );
 800889e:	f9043783          	ld	a5,-112(s0)
 80088a2:	83dd                	srli	a5,a5,0x17
 80088a4:	0ff7f793          	andi	a5,a5,255
 80088a8:	faf43823          	sd	a5,-80(s0)
    sigB = fracF32UI( uiB );
 80088ac:	f9043703          	ld	a4,-112(s0)
 80088b0:	008007b7          	lui	a5,0x800
 80088b4:	17fd                	addi	a5,a5,-1
 80088b6:	8ff9                	and	a5,a5,a4
 80088b8:	fef43023          	sd	a5,-32(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    expDiff = expA - expB;
 80088bc:	fb843703          	ld	a4,-72(s0)
 80088c0:	fb043783          	ld	a5,-80(s0)
 80088c4:	40f707b3          	sub	a5,a4,a5
 80088c8:	faf43423          	sd	a5,-88(s0)
    if ( ! expDiff ) {
 80088cc:	fa843783          	ld	a5,-88(s0)
 80088d0:	efc5                	bnez	a5,8008988 <softfloat_addMagsF32+0x118>
        /*--------------------------------------------------------------------
        *--------------------------------------------------------------------*/
        if ( ! expA ) {
 80088d2:	fb843783          	ld	a5,-72(s0)
 80088d6:	eb89                	bnez	a5,80088e8 <softfloat_addMagsF32+0x78>
            uiZ = uiA + sigB;
 80088d8:	f9843703          	ld	a4,-104(s0)
 80088dc:	fe043783          	ld	a5,-32(s0)
 80088e0:	97ba                	add	a5,a5,a4
 80088e2:	fcf43c23          	sd	a5,-40(s0)
            goto uiZ;
 80088e6:	a421                	j	8008aee <softfloat_addMagsF32+0x27e>
        }
        if ( expA == 0xFF ) {
 80088e8:	fb843703          	ld	a4,-72(s0)
 80088ec:	0ff00793          	li	a5,255
 80088f0:	00f71e63          	bne	a4,a5,800890c <softfloat_addMagsF32+0x9c>
            if ( sigA | sigB ) goto propagateNaN;
 80088f4:	fe843703          	ld	a4,-24(s0)
 80088f8:	fe043783          	ld	a5,-32(s0)
 80088fc:	8fd9                	or	a5,a5,a4
 80088fe:	1c079b63          	bnez	a5,8008ad4 <softfloat_addMagsF32+0x264>
            uiZ = uiA;
 8008902:	f9843783          	ld	a5,-104(s0)
 8008906:	fcf43c23          	sd	a5,-40(s0)
            goto uiZ;
 800890a:	a2d5                	j	8008aee <softfloat_addMagsF32+0x27e>
        }
        signZ = signF32UI( uiA );
 800890c:	f9843783          	ld	a5,-104(s0)
 8008910:	2781                	sext.w	a5,a5
 8008912:	01f7d79b          	srliw	a5,a5,0x1f
 8008916:	fcf40ba3          	sb	a5,-41(s0)
        expZ = expA;
 800891a:	fb843783          	ld	a5,-72(s0)
 800891e:	fcf43423          	sd	a5,-56(s0)
        sigZ = 0x01000000 + sigA + sigB;
 8008922:	fe843703          	ld	a4,-24(s0)
 8008926:	fe043783          	ld	a5,-32(s0)
 800892a:	973e                	add	a4,a4,a5
 800892c:	010007b7          	lui	a5,0x1000
 8008930:	97ba                	add	a5,a5,a4
 8008932:	fcf43023          	sd	a5,-64(s0)
        if ( ! (sigZ & 1) && (expZ < 0xFE) ) {
 8008936:	fc043783          	ld	a5,-64(s0)
 800893a:	8b85                	andi	a5,a5,1
 800893c:	e3a1                	bnez	a5,800897c <softfloat_addMagsF32+0x10c>
 800893e:	fc843703          	ld	a4,-56(s0)
 8008942:	0fd00793          	li	a5,253
 8008946:	02e7cb63          	blt	a5,a4,800897c <softfloat_addMagsF32+0x10c>
            uiZ = packToF32UI( signZ, expZ, sigZ>>1 );
 800894a:	fd744783          	lbu	a5,-41(s0)
 800894e:	2781                	sext.w	a5,a5
 8008950:	01f7979b          	slliw	a5,a5,0x1f
 8008954:	0007871b          	sext.w	a4,a5
 8008958:	fc843783          	ld	a5,-56(s0)
 800895c:	2781                	sext.w	a5,a5
 800895e:	0177979b          	slliw	a5,a5,0x17
 8008962:	2781                	sext.w	a5,a5
 8008964:	9fb9                	addw	a5,a5,a4
 8008966:	2781                	sext.w	a5,a5
 8008968:	02079713          	slli	a4,a5,0x20
 800896c:	9301                	srli	a4,a4,0x20
 800896e:	fc043783          	ld	a5,-64(s0)
 8008972:	8385                	srli	a5,a5,0x1
 8008974:	97ba                	add	a5,a5,a4
 8008976:	fcf43c23          	sd	a5,-40(s0)
            goto uiZ;
 800897a:	aa95                	j	8008aee <softfloat_addMagsF32+0x27e>
        }
        sigZ <<= 6;
 800897c:	fc043783          	ld	a5,-64(s0)
 8008980:	079a                	slli	a5,a5,0x6
 8008982:	fcf43023          	sd	a5,-64(s0)
 8008986:	aa25                	j	8008abe <softfloat_addMagsF32+0x24e>
    } else {
        /*--------------------------------------------------------------------
        *--------------------------------------------------------------------*/
        signZ = signF32UI( uiA );
 8008988:	f9843783          	ld	a5,-104(s0)
 800898c:	2781                	sext.w	a5,a5
 800898e:	01f7d79b          	srliw	a5,a5,0x1f
 8008992:	fcf40ba3          	sb	a5,-41(s0)
        sigA <<= 6;
 8008996:	fe843783          	ld	a5,-24(s0)
 800899a:	079a                	slli	a5,a5,0x6
 800899c:	fef43423          	sd	a5,-24(s0)
        sigB <<= 6;
 80089a0:	fe043783          	ld	a5,-32(s0)
 80089a4:	079a                	slli	a5,a5,0x6
 80089a6:	fef43023          	sd	a5,-32(s0)
        if ( expDiff < 0 ) {
 80089aa:	fa843783          	ld	a5,-88(s0)
 80089ae:	0807d063          	bgez	a5,8008a2e <softfloat_addMagsF32+0x1be>
            if ( expB == 0xFF ) {
 80089b2:	fb043703          	ld	a4,-80(s0)
 80089b6:	0ff00793          	li	a5,255
 80089ba:	02f71663          	bne	a4,a5,80089e6 <softfloat_addMagsF32+0x176>
                if ( sigB ) goto propagateNaN;
 80089be:	fe043783          	ld	a5,-32(s0)
 80089c2:	10079b63          	bnez	a5,8008ad8 <softfloat_addMagsF32+0x268>
                uiZ = packToF32UI( signZ, 0xFF, 0 );
 80089c6:	fd744783          	lbu	a5,-41(s0)
 80089ca:	2781                	sext.w	a5,a5
 80089cc:	01f7979b          	slliw	a5,a5,0x1f
 80089d0:	0007871b          	sext.w	a4,a5
 80089d4:	7f8007b7          	lui	a5,0x7f800
 80089d8:	9fb9                	addw	a5,a5,a4
 80089da:	2781                	sext.w	a5,a5
 80089dc:	1782                	slli	a5,a5,0x20
 80089de:	9381                	srli	a5,a5,0x20
 80089e0:	fcf43c23          	sd	a5,-40(s0)
                goto uiZ;
 80089e4:	a229                	j	8008aee <softfloat_addMagsF32+0x27e>
            }
            expZ = expB;
 80089e6:	fb043783          	ld	a5,-80(s0)
 80089ea:	fcf43423          	sd	a5,-56(s0)
            sigA += expA ? 0x20000000 : sigA;
 80089ee:	fb843783          	ld	a5,-72(s0)
 80089f2:	e781                	bnez	a5,80089fa <softfloat_addMagsF32+0x18a>
 80089f4:	fe843783          	ld	a5,-24(s0)
 80089f8:	a019                	j	80089fe <softfloat_addMagsF32+0x18e>
 80089fa:	200007b7          	lui	a5,0x20000
 80089fe:	fe843703          	ld	a4,-24(s0)
 8008a02:	97ba                	add	a5,a5,a4
 8008a04:	fef43423          	sd	a5,-24(s0)
            sigA = softfloat_shiftRightJam32( sigA, -expDiff );
 8008a08:	fe843783          	ld	a5,-24(s0)
 8008a0c:	0007871b          	sext.w	a4,a5
 8008a10:	fa843783          	ld	a5,-88(s0)
 8008a14:	40f007b3          	neg	a5,a5
 8008a18:	85be                	mv	a1,a5
 8008a1a:	853a                	mv	a0,a4
 8008a1c:	381010ef          	jal	ra,800a59c <softfloat_shiftRightJam32>
 8008a20:	87aa                	mv	a5,a0
 8008a22:	2781                	sext.w	a5,a5
 8008a24:	1782                	slli	a5,a5,0x20
 8008a26:	9381                	srli	a5,a5,0x20
 8008a28:	fef43423          	sd	a5,-24(s0)
 8008a2c:	a8b9                	j	8008a8a <softfloat_addMagsF32+0x21a>
        } else {
            if ( expA == 0xFF ) {
 8008a2e:	fb843703          	ld	a4,-72(s0)
 8008a32:	0ff00793          	li	a5,255
 8008a36:	00f71a63          	bne	a4,a5,8008a4a <softfloat_addMagsF32+0x1da>
                if ( sigA ) goto propagateNaN;
 8008a3a:	fe843783          	ld	a5,-24(s0)
 8008a3e:	efd9                	bnez	a5,8008adc <softfloat_addMagsF32+0x26c>
                uiZ = uiA;
 8008a40:	f9843783          	ld	a5,-104(s0)
 8008a44:	fcf43c23          	sd	a5,-40(s0)
                goto uiZ;
 8008a48:	a05d                	j	8008aee <softfloat_addMagsF32+0x27e>
            }
            expZ = expA;
 8008a4a:	fb843783          	ld	a5,-72(s0)
 8008a4e:	fcf43423          	sd	a5,-56(s0)
            sigB += expB ? 0x20000000 : sigB;
 8008a52:	fb043783          	ld	a5,-80(s0)
 8008a56:	e781                	bnez	a5,8008a5e <softfloat_addMagsF32+0x1ee>
 8008a58:	fe043783          	ld	a5,-32(s0)
 8008a5c:	a019                	j	8008a62 <softfloat_addMagsF32+0x1f2>
 8008a5e:	200007b7          	lui	a5,0x20000
 8008a62:	fe043703          	ld	a4,-32(s0)
 8008a66:	97ba                	add	a5,a5,a4
 8008a68:	fef43023          	sd	a5,-32(s0)
            sigB = softfloat_shiftRightJam32( sigB, expDiff );
 8008a6c:	fe043783          	ld	a5,-32(s0)
 8008a70:	2781                	sext.w	a5,a5
 8008a72:	fa843703          	ld	a4,-88(s0)
 8008a76:	85ba                	mv	a1,a4
 8008a78:	853e                	mv	a0,a5
 8008a7a:	323010ef          	jal	ra,800a59c <softfloat_shiftRightJam32>
 8008a7e:	87aa                	mv	a5,a0
 8008a80:	2781                	sext.w	a5,a5
 8008a82:	1782                	slli	a5,a5,0x20
 8008a84:	9381                	srli	a5,a5,0x20
 8008a86:	fef43023          	sd	a5,-32(s0)
        }
        sigZ = 0x20000000 + sigA + sigB;
 8008a8a:	fe843703          	ld	a4,-24(s0)
 8008a8e:	fe043783          	ld	a5,-32(s0)
 8008a92:	973e                	add	a4,a4,a5
 8008a94:	200007b7          	lui	a5,0x20000
 8008a98:	97ba                	add	a5,a5,a4
 8008a9a:	fcf43023          	sd	a5,-64(s0)
        if ( sigZ < 0x40000000 ) {
 8008a9e:	fc043703          	ld	a4,-64(s0)
 8008aa2:	400007b7          	lui	a5,0x40000
 8008aa6:	00f77c63          	bleu	a5,a4,8008abe <softfloat_addMagsF32+0x24e>
            --expZ;
 8008aaa:	fc843783          	ld	a5,-56(s0)
 8008aae:	17fd                	addi	a5,a5,-1
 8008ab0:	fcf43423          	sd	a5,-56(s0)
            sigZ <<= 1;
 8008ab4:	fc043783          	ld	a5,-64(s0)
 8008ab8:	0786                	slli	a5,a5,0x1
 8008aba:	fcf43023          	sd	a5,-64(s0)
        }
    }
    return softfloat_roundPackToF32( signZ, expZ, sigZ );
 8008abe:	fd744783          	lbu	a5,-41(s0)
 8008ac2:	fc043603          	ld	a2,-64(s0)
 8008ac6:	fc843583          	ld	a1,-56(s0)
 8008aca:	853e                	mv	a0,a5
 8008acc:	57a010ef          	jal	ra,800a046 <softfloat_roundPackToF32>
 8008ad0:	87aa                	mv	a5,a0
 8008ad2:	a02d                	j	8008afc <softfloat_addMagsF32+0x28c>
            if ( sigA | sigB ) goto propagateNaN;
 8008ad4:	0001                	nop
 8008ad6:	a021                	j	8008ade <softfloat_addMagsF32+0x26e>
                if ( sigB ) goto propagateNaN;
 8008ad8:	0001                	nop
 8008ada:	a011                	j	8008ade <softfloat_addMagsF32+0x26e>
                if ( sigA ) goto propagateNaN;
 8008adc:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 propagateNaN:
    uiZ = softfloat_propagateNaNF32UI( uiA, uiB );
 8008ade:	f9043583          	ld	a1,-112(s0)
 8008ae2:	f9843503          	ld	a0,-104(s0)
 8008ae6:	7bc020ef          	jal	ra,800b2a2 <softfloat_propagateNaNF32UI>
 8008aea:	fca43c23          	sd	a0,-40(s0)
 uiZ:
    uZ.ui = uiZ;
 8008aee:	fd843783          	ld	a5,-40(s0)
 8008af2:	2781                	sext.w	a5,a5
 8008af4:	faf42023          	sw	a5,-96(s0)
    return uZ.f;
 8008af8:	fa042783          	lw	a5,-96(s0)

}
 8008afc:	853e                	mv	a0,a5
 8008afe:	70a6                	ld	ra,104(sp)
 8008b00:	7406                	ld	s0,96(sp)
 8008b02:	6165                	addi	sp,sp,112
 8008b04:	8082                	ret

0000000008008b06 <softfloat_addMagsF64>:
#include "internals.h"
#include "specialize.h"

float64_t
 softfloat_addMagsF64( uint_fast64_t uiA, uint_fast64_t uiB, bool signZ )
{
 8008b06:	7119                	addi	sp,sp,-128
 8008b08:	fc86                	sd	ra,120(sp)
 8008b0a:	f8a2                	sd	s0,112(sp)
 8008b0c:	0100                	addi	s0,sp,128
 8008b0e:	f8a43c23          	sd	a0,-104(s0)
 8008b12:	f8b43823          	sd	a1,-112(s0)
 8008b16:	87b2                	mv	a5,a2
 8008b18:	f8f407a3          	sb	a5,-113(s0)
    uint_fast64_t sigZ;
    union ui64_f64 uZ;

    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    expA = expF64UI( uiA );
 8008b1c:	f9843783          	ld	a5,-104(s0)
 8008b20:	93d1                	srli	a5,a5,0x34
 8008b22:	7ff7f793          	andi	a5,a5,2047
 8008b26:	fcf43023          	sd	a5,-64(s0)
    sigA = fracF64UI( uiA );
 8008b2a:	f9843703          	ld	a4,-104(s0)
 8008b2e:	57fd                	li	a5,-1
 8008b30:	83b1                	srli	a5,a5,0xc
 8008b32:	8ff9                	and	a5,a5,a4
 8008b34:	fef43423          	sd	a5,-24(s0)
    expB = expF64UI( uiB );
 8008b38:	f9043783          	ld	a5,-112(s0)
 8008b3c:	93d1                	srli	a5,a5,0x34
 8008b3e:	7ff7f793          	andi	a5,a5,2047
 8008b42:	faf43c23          	sd	a5,-72(s0)
    sigB = fracF64UI( uiB );
 8008b46:	f9043703          	ld	a4,-112(s0)
 8008b4a:	57fd                	li	a5,-1
 8008b4c:	83b1                	srli	a5,a5,0xc
 8008b4e:	8ff9                	and	a5,a5,a4
 8008b50:	fef43023          	sd	a5,-32(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    expDiff = expA - expB;
 8008b54:	fc043703          	ld	a4,-64(s0)
 8008b58:	fb843783          	ld	a5,-72(s0)
 8008b5c:	40f707b3          	sub	a5,a4,a5
 8008b60:	faf43823          	sd	a5,-80(s0)
    if ( ! expDiff ) {
 8008b64:	fb043783          	ld	a5,-80(s0)
 8008b68:	e3b5                	bnez	a5,8008bcc <softfloat_addMagsF64+0xc6>
        /*--------------------------------------------------------------------
        *--------------------------------------------------------------------*/
        if ( ! expA ) {
 8008b6a:	fc043783          	ld	a5,-64(s0)
 8008b6e:	eb89                	bnez	a5,8008b80 <softfloat_addMagsF64+0x7a>
            uiZ = uiA + sigB;
 8008b70:	f9843703          	ld	a4,-104(s0)
 8008b74:	fe043783          	ld	a5,-32(s0)
 8008b78:	97ba                	add	a5,a5,a4
 8008b7a:	fcf43c23          	sd	a5,-40(s0)
            goto uiZ;
 8008b7e:	a279                	j	8008d0c <softfloat_addMagsF64+0x206>
        }
        if ( expA == 0x7FF ) {
 8008b80:	fc043703          	ld	a4,-64(s0)
 8008b84:	7ff00793          	li	a5,2047
 8008b88:	00f71e63          	bne	a4,a5,8008ba4 <softfloat_addMagsF64+0x9e>
            if ( sigA | sigB ) goto propagateNaN;
 8008b8c:	fe843703          	ld	a4,-24(s0)
 8008b90:	fe043783          	ld	a5,-32(s0)
 8008b94:	8fd9                	or	a5,a5,a4
 8008b96:	14079e63          	bnez	a5,8008cf2 <softfloat_addMagsF64+0x1ec>
            uiZ = uiA;
 8008b9a:	f9843783          	ld	a5,-104(s0)
 8008b9e:	fcf43c23          	sd	a5,-40(s0)
            goto uiZ;
 8008ba2:	a2ad                	j	8008d0c <softfloat_addMagsF64+0x206>
        }
        expZ = expA;
 8008ba4:	fc043783          	ld	a5,-64(s0)
 8008ba8:	fcf43823          	sd	a5,-48(s0)
        sigZ = UINT64_C( 0x0020000000000000 ) + sigA + sigB;
 8008bac:	fe843703          	ld	a4,-24(s0)
 8008bb0:	fe043783          	ld	a5,-32(s0)
 8008bb4:	973e                	add	a4,a4,a5
 8008bb6:	4785                	li	a5,1
 8008bb8:	17d6                	slli	a5,a5,0x35
 8008bba:	97ba                	add	a5,a5,a4
 8008bbc:	fcf43423          	sd	a5,-56(s0)
        sigZ <<= 9;
 8008bc0:	fc843783          	ld	a5,-56(s0)
 8008bc4:	07a6                	slli	a5,a5,0x9
 8008bc6:	fcf43423          	sd	a5,-56(s0)
 8008bca:	aa09                	j	8008cdc <softfloat_addMagsF64+0x1d6>
    } else {
        /*--------------------------------------------------------------------
        *--------------------------------------------------------------------*/
        sigA <<= 9;
 8008bcc:	fe843783          	ld	a5,-24(s0)
 8008bd0:	07a6                	slli	a5,a5,0x9
 8008bd2:	fef43423          	sd	a5,-24(s0)
        sigB <<= 9;
 8008bd6:	fe043783          	ld	a5,-32(s0)
 8008bda:	07a6                	slli	a5,a5,0x9
 8008bdc:	fef43023          	sd	a5,-32(s0)
        if ( expDiff < 0 ) {
 8008be0:	fb043783          	ld	a5,-80(s0)
 8008be4:	0607d763          	bgez	a5,8008c52 <softfloat_addMagsF64+0x14c>
            if ( expB == 0x7FF ) {
 8008be8:	fb843703          	ld	a4,-72(s0)
 8008bec:	7ff00793          	li	a5,2047
 8008bf0:	02f71163          	bne	a4,a5,8008c12 <softfloat_addMagsF64+0x10c>
                if ( sigB ) goto propagateNaN;
 8008bf4:	fe043783          	ld	a5,-32(s0)
 8008bf8:	0e079f63          	bnez	a5,8008cf6 <softfloat_addMagsF64+0x1f0>
                uiZ = packToF64UI( signZ, 0x7FF, 0 );
 8008bfc:	f8f44783          	lbu	a5,-113(s0)
 8008c00:	03f79713          	slli	a4,a5,0x3f
 8008c04:	7ff00793          	li	a5,2047
 8008c08:	17d2                	slli	a5,a5,0x34
 8008c0a:	97ba                	add	a5,a5,a4
 8008c0c:	fcf43c23          	sd	a5,-40(s0)
                goto uiZ;
 8008c10:	a8f5                	j	8008d0c <softfloat_addMagsF64+0x206>
            }
            expZ = expB;
 8008c12:	fb843783          	ld	a5,-72(s0)
 8008c16:	fcf43823          	sd	a5,-48(s0)
            if ( expA ) {
 8008c1a:	fc043783          	ld	a5,-64(s0)
 8008c1e:	cb89                	beqz	a5,8008c30 <softfloat_addMagsF64+0x12a>
                sigA += UINT64_C( 0x2000000000000000 );
 8008c20:	fe843703          	ld	a4,-24(s0)
 8008c24:	4785                	li	a5,1
 8008c26:	17f6                	slli	a5,a5,0x3d
 8008c28:	97ba                	add	a5,a5,a4
 8008c2a:	fef43423          	sd	a5,-24(s0)
 8008c2e:	a031                	j	8008c3a <softfloat_addMagsF64+0x134>
            } else {
                sigA <<= 1;
 8008c30:	fe843783          	ld	a5,-24(s0)
 8008c34:	0786                	slli	a5,a5,0x1
 8008c36:	fef43423          	sd	a5,-24(s0)
            }
            sigA = softfloat_shiftRightJam64( sigA, -expDiff );
 8008c3a:	fb043783          	ld	a5,-80(s0)
 8008c3e:	40f007b3          	neg	a5,a5
 8008c42:	85be                	mv	a1,a5
 8008c44:	fe843503          	ld	a0,-24(s0)
 8008c48:	1cb010ef          	jal	ra,800a612 <softfloat_shiftRightJam64>
 8008c4c:	fea43423          	sd	a0,-24(s0)
 8008c50:	a8a1                	j	8008ca8 <softfloat_addMagsF64+0x1a2>
        } else {
            if ( expA == 0x7FF ) {
 8008c52:	fc043703          	ld	a4,-64(s0)
 8008c56:	7ff00793          	li	a5,2047
 8008c5a:	00f71a63          	bne	a4,a5,8008c6e <softfloat_addMagsF64+0x168>
                if ( sigA ) goto propagateNaN;
 8008c5e:	fe843783          	ld	a5,-24(s0)
 8008c62:	efc1                	bnez	a5,8008cfa <softfloat_addMagsF64+0x1f4>
                uiZ = uiA;
 8008c64:	f9843783          	ld	a5,-104(s0)
 8008c68:	fcf43c23          	sd	a5,-40(s0)
                goto uiZ;
 8008c6c:	a045                	j	8008d0c <softfloat_addMagsF64+0x206>
            }
            expZ = expA;
 8008c6e:	fc043783          	ld	a5,-64(s0)
 8008c72:	fcf43823          	sd	a5,-48(s0)
            if ( expB ) {
 8008c76:	fb843783          	ld	a5,-72(s0)
 8008c7a:	cb89                	beqz	a5,8008c8c <softfloat_addMagsF64+0x186>
                sigB += UINT64_C( 0x2000000000000000 );
 8008c7c:	fe043703          	ld	a4,-32(s0)
 8008c80:	4785                	li	a5,1
 8008c82:	17f6                	slli	a5,a5,0x3d
 8008c84:	97ba                	add	a5,a5,a4
 8008c86:	fef43023          	sd	a5,-32(s0)
 8008c8a:	a031                	j	8008c96 <softfloat_addMagsF64+0x190>
            } else {
                sigB <<= 1;
 8008c8c:	fe043783          	ld	a5,-32(s0)
 8008c90:	0786                	slli	a5,a5,0x1
 8008c92:	fef43023          	sd	a5,-32(s0)
            }
            sigB = softfloat_shiftRightJam64( sigB, expDiff );
 8008c96:	fb043783          	ld	a5,-80(s0)
 8008c9a:	85be                	mv	a1,a5
 8008c9c:	fe043503          	ld	a0,-32(s0)
 8008ca0:	173010ef          	jal	ra,800a612 <softfloat_shiftRightJam64>
 8008ca4:	fea43023          	sd	a0,-32(s0)
        }
        sigZ = UINT64_C( 0x2000000000000000 ) + sigA + sigB;
 8008ca8:	fe843703          	ld	a4,-24(s0)
 8008cac:	fe043783          	ld	a5,-32(s0)
 8008cb0:	973e                	add	a4,a4,a5
 8008cb2:	4785                	li	a5,1
 8008cb4:	17f6                	slli	a5,a5,0x3d
 8008cb6:	97ba                	add	a5,a5,a4
 8008cb8:	fcf43423          	sd	a5,-56(s0)
        if ( sigZ < UINT64_C( 0x4000000000000000 ) ) {
 8008cbc:	fc843703          	ld	a4,-56(s0)
 8008cc0:	57fd                	li	a5,-1
 8008cc2:	8389                	srli	a5,a5,0x2
 8008cc4:	00e7ec63          	bltu	a5,a4,8008cdc <softfloat_addMagsF64+0x1d6>
            --expZ;
 8008cc8:	fd043783          	ld	a5,-48(s0)
 8008ccc:	17fd                	addi	a5,a5,-1
 8008cce:	fcf43823          	sd	a5,-48(s0)
            sigZ <<= 1;
 8008cd2:	fc843783          	ld	a5,-56(s0)
 8008cd6:	0786                	slli	a5,a5,0x1
 8008cd8:	fcf43423          	sd	a5,-56(s0)
        }
    }
    return softfloat_roundPackToF64( signZ, expZ, sigZ );
 8008cdc:	f8f44783          	lbu	a5,-113(s0)
 8008ce0:	fc843603          	ld	a2,-56(s0)
 8008ce4:	fd043583          	ld	a1,-48(s0)
 8008ce8:	853e                	mv	a0,a5
 8008cea:	592010ef          	jal	ra,800a27c <softfloat_roundPackToF64>
 8008cee:	87aa                	mv	a5,a0
 8008cf0:	a025                	j	8008d18 <softfloat_addMagsF64+0x212>
            if ( sigA | sigB ) goto propagateNaN;
 8008cf2:	0001                	nop
 8008cf4:	a021                	j	8008cfc <softfloat_addMagsF64+0x1f6>
                if ( sigB ) goto propagateNaN;
 8008cf6:	0001                	nop
 8008cf8:	a011                	j	8008cfc <softfloat_addMagsF64+0x1f6>
                if ( sigA ) goto propagateNaN;
 8008cfa:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 propagateNaN:
    uiZ = softfloat_propagateNaNF64UI( uiA, uiB );
 8008cfc:	f9043583          	ld	a1,-112(s0)
 8008d00:	f9843503          	ld	a0,-104(s0)
 8008d04:	600020ef          	jal	ra,800b304 <softfloat_propagateNaNF64UI>
 8008d08:	fca43c23          	sd	a0,-40(s0)
 uiZ:
    uZ.ui = uiZ;
 8008d0c:	fd843783          	ld	a5,-40(s0)
 8008d10:	faf43423          	sd	a5,-88(s0)
    return uZ.f;
 8008d14:	fa843783          	ld	a5,-88(s0)

}
 8008d18:	853e                	mv	a0,a5
 8008d1a:	70e6                	ld	ra,120(sp)
 8008d1c:	7446                	ld	s0,112(sp)
 8008d1e:	6109                	addi	sp,sp,128
 8008d20:	8082                	ret

0000000008008d22 <softfloat_approxRecip32_1>:

extern const uint16_t softfloat_approxRecip_1k0s[16];
extern const uint16_t softfloat_approxRecip_1k1s[16];

uint32_t softfloat_approxRecip32_1( uint32_t a )
{
 8008d22:	7139                	addi	sp,sp,-64
 8008d24:	fc22                	sd	s0,56(sp)
 8008d26:	0080                	addi	s0,sp,64
 8008d28:	87aa                	mv	a5,a0
 8008d2a:	fcf42623          	sw	a5,-52(s0)
    uint16_t eps, r0;
    uint32_t sigma0;
    uint_fast32_t r;
    uint32_t sqrSigma0;

    index = a>>27 & 0xF;
 8008d2e:	fcc42783          	lw	a5,-52(s0)
 8008d32:	01b7d79b          	srliw	a5,a5,0x1b
 8008d36:	2781                	sext.w	a5,a5
 8008d38:	2781                	sext.w	a5,a5
 8008d3a:	8bbd                	andi	a5,a5,15
 8008d3c:	fef42623          	sw	a5,-20(s0)
    eps = (uint16_t) (a>>11);
 8008d40:	fcc42783          	lw	a5,-52(s0)
 8008d44:	00b7d79b          	srliw	a5,a5,0xb
 8008d48:	2781                	sext.w	a5,a5
 8008d4a:	fef41523          	sh	a5,-22(s0)
    r0 = softfloat_approxRecip_1k0s[index]
 8008d4e:	00004717          	auipc	a4,0x4
 8008d52:	a2a70713          	addi	a4,a4,-1494 # 800c778 <softfloat_approxRecip_1k0s>
 8008d56:	fec42783          	lw	a5,-20(s0)
 8008d5a:	0786                	slli	a5,a5,0x1
 8008d5c:	97ba                	add	a5,a5,a4
 8008d5e:	0007d703          	lhu	a4,0(a5) # 40000000 <_payload_end+0x37834060>
             - ((softfloat_approxRecip_1k1s[index] * (uint_fast32_t) eps)>>20);
 8008d62:	00004697          	auipc	a3,0x4
 8008d66:	a3668693          	addi	a3,a3,-1482 # 800c798 <softfloat_approxRecip_1k1s>
 8008d6a:	fec42783          	lw	a5,-20(s0)
 8008d6e:	0786                	slli	a5,a5,0x1
 8008d70:	97b6                	add	a5,a5,a3
 8008d72:	0007d783          	lhu	a5,0(a5)
 8008d76:	86be                	mv	a3,a5
 8008d78:	fea45783          	lhu	a5,-22(s0)
 8008d7c:	02f687b3          	mul	a5,a3,a5
 8008d80:	83d1                	srli	a5,a5,0x14
 8008d82:	17c2                	slli	a5,a5,0x30
 8008d84:	93c1                	srli	a5,a5,0x30
    r0 = softfloat_approxRecip_1k0s[index]
 8008d86:	40f707bb          	subw	a5,a4,a5
 8008d8a:	fef41423          	sh	a5,-24(s0)
    sigma0 = ~(uint_fast32_t) ((r0 * (uint_fast64_t) a)>>7);
 8008d8e:	fe845703          	lhu	a4,-24(s0)
 8008d92:	fcc46783          	lwu	a5,-52(s0)
 8008d96:	02f707b3          	mul	a5,a4,a5
 8008d9a:	839d                	srli	a5,a5,0x7
 8008d9c:	2781                	sext.w	a5,a5
 8008d9e:	fff7c793          	not	a5,a5
 8008da2:	fef42223          	sw	a5,-28(s0)
    r = ((uint_fast32_t) r0<<16) + ((r0 * (uint_fast64_t) sigma0)>>24);
 8008da6:	fe845783          	lhu	a5,-24(s0)
 8008daa:	01079713          	slli	a4,a5,0x10
 8008dae:	fe845683          	lhu	a3,-24(s0)
 8008db2:	fe446783          	lwu	a5,-28(s0)
 8008db6:	02f687b3          	mul	a5,a3,a5
 8008dba:	83e1                	srli	a5,a5,0x18
 8008dbc:	97ba                	add	a5,a5,a4
 8008dbe:	fcf43c23          	sd	a5,-40(s0)
    sqrSigma0 = ((uint_fast64_t) sigma0 * sigma0)>>32;
 8008dc2:	fe446703          	lwu	a4,-28(s0)
 8008dc6:	fe446783          	lwu	a5,-28(s0)
 8008dca:	02f707b3          	mul	a5,a4,a5
 8008dce:	9381                	srli	a5,a5,0x20
 8008dd0:	fcf42a23          	sw	a5,-44(s0)
    r += ((uint32_t) r * (uint_fast64_t) sqrSigma0)>>48;
 8008dd4:	fd843783          	ld	a5,-40(s0)
 8008dd8:	2781                	sext.w	a5,a5
 8008dda:	02079713          	slli	a4,a5,0x20
 8008dde:	9301                	srli	a4,a4,0x20
 8008de0:	fd446783          	lwu	a5,-44(s0)
 8008de4:	02f707b3          	mul	a5,a4,a5
 8008de8:	93c1                	srli	a5,a5,0x30
 8008dea:	fd843703          	ld	a4,-40(s0)
 8008dee:	97ba                	add	a5,a5,a4
 8008df0:	fcf43c23          	sd	a5,-40(s0)
    return r;
 8008df4:	fd843783          	ld	a5,-40(s0)
 8008df8:	2781                	sext.w	a5,a5

}
 8008dfa:	853e                	mv	a0,a5
 8008dfc:	7462                	ld	s0,56(sp)
 8008dfe:	6121                	addi	sp,sp,64
 8008e00:	8082                	ret

0000000008008e02 <softfloat_approxRecipSqrt32_1>:

extern const uint16_t softfloat_approxRecipSqrt_1k0s[];
extern const uint16_t softfloat_approxRecipSqrt_1k1s[];

uint32_t softfloat_approxRecipSqrt32_1( unsigned int oddExpA, uint32_t a )
{
 8008e02:	7139                	addi	sp,sp,-64
 8008e04:	fc22                	sd	s0,56(sp)
 8008e06:	0080                	addi	s0,sp,64
 8008e08:	87aa                	mv	a5,a0
 8008e0a:	872e                	mv	a4,a1
 8008e0c:	fcf42623          	sw	a5,-52(s0)
 8008e10:	87ba                	mv	a5,a4
 8008e12:	fcf42423          	sw	a5,-56(s0)
    uint_fast32_t ESqrR0;
    uint32_t sigma0;
    uint_fast32_t r;
    uint32_t sqrSigma0;

    index = (a>>27 & 0xE) + oddExpA;
 8008e16:	fc842783          	lw	a5,-56(s0)
 8008e1a:	01b7d79b          	srliw	a5,a5,0x1b
 8008e1e:	2781                	sext.w	a5,a5
 8008e20:	8bb9                	andi	a5,a5,14
 8008e22:	2781                	sext.w	a5,a5
 8008e24:	fcc42703          	lw	a4,-52(s0)
 8008e28:	9fb9                	addw	a5,a5,a4
 8008e2a:	2781                	sext.w	a5,a5
 8008e2c:	fcf42e23          	sw	a5,-36(s0)
    eps = (uint16_t) (a>>12);
 8008e30:	fc842783          	lw	a5,-56(s0)
 8008e34:	00c7d79b          	srliw	a5,a5,0xc
 8008e38:	2781                	sext.w	a5,a5
 8008e3a:	fcf41d23          	sh	a5,-38(s0)
    r0 = softfloat_approxRecipSqrt_1k0s[index]
 8008e3e:	00004717          	auipc	a4,0x4
 8008e42:	97a70713          	addi	a4,a4,-1670 # 800c7b8 <softfloat_approxRecipSqrt_1k0s>
 8008e46:	fdc42783          	lw	a5,-36(s0)
 8008e4a:	0786                	slli	a5,a5,0x1
 8008e4c:	97ba                	add	a5,a5,a4
 8008e4e:	0007d703          	lhu	a4,0(a5)
             - ((softfloat_approxRecipSqrt_1k1s[index] * (uint_fast32_t) eps)
 8008e52:	00004697          	auipc	a3,0x4
 8008e56:	98668693          	addi	a3,a3,-1658 # 800c7d8 <softfloat_approxRecipSqrt_1k1s>
 8008e5a:	fdc42783          	lw	a5,-36(s0)
 8008e5e:	0786                	slli	a5,a5,0x1
 8008e60:	97b6                	add	a5,a5,a3
 8008e62:	0007d783          	lhu	a5,0(a5)
 8008e66:	86be                	mv	a3,a5
 8008e68:	fda45783          	lhu	a5,-38(s0)
 8008e6c:	02f687b3          	mul	a5,a3,a5
                    >>20);
 8008e70:	83d1                	srli	a5,a5,0x14
             - ((softfloat_approxRecipSqrt_1k1s[index] * (uint_fast32_t) eps)
 8008e72:	17c2                	slli	a5,a5,0x30
 8008e74:	93c1                	srli	a5,a5,0x30
    r0 = softfloat_approxRecipSqrt_1k0s[index]
 8008e76:	40f707bb          	subw	a5,a4,a5
 8008e7a:	fcf41c23          	sh	a5,-40(s0)
    ESqrR0 = (uint_fast32_t) r0 * r0;
 8008e7e:	fd845703          	lhu	a4,-40(s0)
 8008e82:	fd845783          	lhu	a5,-40(s0)
 8008e86:	02f707b3          	mul	a5,a4,a5
 8008e8a:	fef43423          	sd	a5,-24(s0)
    if ( ! oddExpA ) ESqrR0 <<= 1;
 8008e8e:	fcc42783          	lw	a5,-52(s0)
 8008e92:	2781                	sext.w	a5,a5
 8008e94:	e791                	bnez	a5,8008ea0 <softfloat_approxRecipSqrt32_1+0x9e>
 8008e96:	fe843783          	ld	a5,-24(s0)
 8008e9a:	0786                	slli	a5,a5,0x1
 8008e9c:	fef43423          	sd	a5,-24(s0)
    sigma0 = ~(uint_fast32_t) (((uint32_t) ESqrR0 * (uint_fast64_t) a)>>23);
 8008ea0:	fe843783          	ld	a5,-24(s0)
 8008ea4:	2781                	sext.w	a5,a5
 8008ea6:	02079713          	slli	a4,a5,0x20
 8008eaa:	9301                	srli	a4,a4,0x20
 8008eac:	fc846783          	lwu	a5,-56(s0)
 8008eb0:	02f707b3          	mul	a5,a4,a5
 8008eb4:	83dd                	srli	a5,a5,0x17
 8008eb6:	2781                	sext.w	a5,a5
 8008eb8:	fff7c793          	not	a5,a5
 8008ebc:	fcf42a23          	sw	a5,-44(s0)
    r = ((uint_fast32_t) r0<<16) + ((r0 * (uint_fast64_t) sigma0)>>25);
 8008ec0:	fd845783          	lhu	a5,-40(s0)
 8008ec4:	01079713          	slli	a4,a5,0x10
 8008ec8:	fd845683          	lhu	a3,-40(s0)
 8008ecc:	fd446783          	lwu	a5,-44(s0)
 8008ed0:	02f687b3          	mul	a5,a3,a5
 8008ed4:	83e5                	srli	a5,a5,0x19
 8008ed6:	97ba                	add	a5,a5,a4
 8008ed8:	fef43023          	sd	a5,-32(s0)
    sqrSigma0 = ((uint_fast64_t) sigma0 * sigma0)>>32;
 8008edc:	fd446703          	lwu	a4,-44(s0)
 8008ee0:	fd446783          	lwu	a5,-44(s0)
 8008ee4:	02f707b3          	mul	a5,a4,a5
 8008ee8:	9381                	srli	a5,a5,0x20
 8008eea:	fcf42823          	sw	a5,-48(s0)
    r += ((uint32_t) ((r>>1) + (r>>3) - ((uint_fast32_t) r0<<14))
 8008eee:	fe043783          	ld	a5,-32(s0)
 8008ef2:	8385                	srli	a5,a5,0x1
 8008ef4:	0007871b          	sext.w	a4,a5
 8008ef8:	fe043783          	ld	a5,-32(s0)
 8008efc:	838d                	srli	a5,a5,0x3
 8008efe:	2781                	sext.w	a5,a5
 8008f00:	9fb9                	addw	a5,a5,a4
 8008f02:	0007871b          	sext.w	a4,a5
 8008f06:	fd845783          	lhu	a5,-40(s0)
 8008f0a:	2781                	sext.w	a5,a5
 8008f0c:	00e7979b          	slliw	a5,a5,0xe
 8008f10:	2781                	sext.w	a5,a5
 8008f12:	40f707bb          	subw	a5,a4,a5
 8008f16:	2781                	sext.w	a5,a5
 8008f18:	02079713          	slli	a4,a5,0x20
 8008f1c:	9301                	srli	a4,a4,0x20
              * (uint_fast64_t) sqrSigma0)
 8008f1e:	fd046783          	lwu	a5,-48(s0)
 8008f22:	02f707b3          	mul	a5,a4,a5
             >>48;
 8008f26:	93c1                	srli	a5,a5,0x30
    r += ((uint32_t) ((r>>1) + (r>>3) - ((uint_fast32_t) r0<<14))
 8008f28:	fe043703          	ld	a4,-32(s0)
 8008f2c:	97ba                	add	a5,a5,a4
 8008f2e:	fef43023          	sd	a5,-32(s0)
    if ( ! (r & 0x80000000) ) r = 0x80000000;
 8008f32:	fe043703          	ld	a4,-32(s0)
 8008f36:	4785                	li	a5,1
 8008f38:	07fe                	slli	a5,a5,0x1f
 8008f3a:	8ff9                	and	a5,a5,a4
 8008f3c:	e789                	bnez	a5,8008f46 <softfloat_approxRecipSqrt32_1+0x144>
 8008f3e:	4785                	li	a5,1
 8008f40:	07fe                	slli	a5,a5,0x1f
 8008f42:	fef43023          	sd	a5,-32(s0)
    return r;
 8008f46:	fe043783          	ld	a5,-32(s0)
 8008f4a:	2781                	sext.w	a5,a5

}
 8008f4c:	853e                	mv	a0,a5
 8008f4e:	7462                	ld	s0,56(sp)
 8008f50:	6121                	addi	sp,sp,64
 8008f52:	8082                	ret

0000000008008f54 <softfloat_mul64To128M>:
#include "primitiveTypes.h"

#ifndef softfloat_mul64To128M

void softfloat_mul64To128M( uint64_t a, uint64_t b, uint32_t *zPtr )
{
 8008f54:	711d                	addi	sp,sp,-96
 8008f56:	eca2                	sd	s0,88(sp)
 8008f58:	1080                	addi	s0,sp,96
 8008f5a:	faa43c23          	sd	a0,-72(s0)
 8008f5e:	fab43823          	sd	a1,-80(s0)
 8008f62:	fac43423          	sd	a2,-88(s0)
    uint32_t a32, a0, b32, b0;
    uint64_t z0, mid1, z64, mid;

    a32 = a>>32;
 8008f66:	fb843783          	ld	a5,-72(s0)
 8008f6a:	9381                	srli	a5,a5,0x20
 8008f6c:	fef42623          	sw	a5,-20(s0)
    a0 = a;
 8008f70:	fb843783          	ld	a5,-72(s0)
 8008f74:	fef42423          	sw	a5,-24(s0)
    b32 = b>>32;
 8008f78:	fb043783          	ld	a5,-80(s0)
 8008f7c:	9381                	srli	a5,a5,0x20
 8008f7e:	fef42223          	sw	a5,-28(s0)
    b0 = b;
 8008f82:	fb043783          	ld	a5,-80(s0)
 8008f86:	fef42023          	sw	a5,-32(s0)
    z0 = (uint64_t) a0 * b0;
 8008f8a:	fe846703          	lwu	a4,-24(s0)
 8008f8e:	fe046783          	lwu	a5,-32(s0)
 8008f92:	02f707b3          	mul	a5,a4,a5
 8008f96:	fcf43c23          	sd	a5,-40(s0)
    mid1 = (uint64_t) a32 * b0;
 8008f9a:	fec46703          	lwu	a4,-20(s0)
 8008f9e:	fe046783          	lwu	a5,-32(s0)
 8008fa2:	02f707b3          	mul	a5,a4,a5
 8008fa6:	fcf43823          	sd	a5,-48(s0)
    mid = mid1 + (uint64_t) a0 * b32;
 8008faa:	fe846703          	lwu	a4,-24(s0)
 8008fae:	fe446783          	lwu	a5,-28(s0)
 8008fb2:	02f707b3          	mul	a5,a4,a5
 8008fb6:	fd043703          	ld	a4,-48(s0)
 8008fba:	97ba                	add	a5,a5,a4
 8008fbc:	fcf43423          	sd	a5,-56(s0)
    z64 = (uint64_t) a32 * b32;
 8008fc0:	fec46703          	lwu	a4,-20(s0)
 8008fc4:	fe446783          	lwu	a5,-28(s0)
 8008fc8:	02f707b3          	mul	a5,a4,a5
 8008fcc:	fcf43023          	sd	a5,-64(s0)
    z64 += (uint64_t) (mid < mid1)<<32 | mid>>32;
 8008fd0:	fc843703          	ld	a4,-56(s0)
 8008fd4:	fd043783          	ld	a5,-48(s0)
 8008fd8:	00f77563          	bleu	a5,a4,8008fe2 <softfloat_mul64To128M+0x8e>
 8008fdc:	4785                	li	a5,1
 8008fde:	1782                	slli	a5,a5,0x20
 8008fe0:	a011                	j	8008fe4 <softfloat_mul64To128M+0x90>
 8008fe2:	4781                	li	a5,0
 8008fe4:	fc843703          	ld	a4,-56(s0)
 8008fe8:	9301                	srli	a4,a4,0x20
 8008fea:	8fd9                	or	a5,a5,a4
 8008fec:	fc043703          	ld	a4,-64(s0)
 8008ff0:	97ba                	add	a5,a5,a4
 8008ff2:	fcf43023          	sd	a5,-64(s0)
    mid <<= 32;
 8008ff6:	fc843783          	ld	a5,-56(s0)
 8008ffa:	1782                	slli	a5,a5,0x20
 8008ffc:	fcf43423          	sd	a5,-56(s0)
    z0 += mid;
 8009000:	fd843703          	ld	a4,-40(s0)
 8009004:	fc843783          	ld	a5,-56(s0)
 8009008:	97ba                	add	a5,a5,a4
 800900a:	fcf43c23          	sd	a5,-40(s0)
    zPtr[indexWord( 4, 1 )] = z0>>32;
 800900e:	fd843783          	ld	a5,-40(s0)
 8009012:	0207d713          	srli	a4,a5,0x20
 8009016:	fa843783          	ld	a5,-88(s0)
 800901a:	0791                	addi	a5,a5,4
 800901c:	2701                	sext.w	a4,a4
 800901e:	c398                	sw	a4,0(a5)
    zPtr[indexWord( 4, 0 )] = z0;
 8009020:	fd843783          	ld	a5,-40(s0)
 8009024:	0007871b          	sext.w	a4,a5
 8009028:	fa843783          	ld	a5,-88(s0)
 800902c:	c398                	sw	a4,0(a5)
    z64 += (z0 < mid);
 800902e:	fd843703          	ld	a4,-40(s0)
 8009032:	fc843783          	ld	a5,-56(s0)
 8009036:	00f737b3          	sltu	a5,a4,a5
 800903a:	0ff7f793          	andi	a5,a5,255
 800903e:	873e                	mv	a4,a5
 8009040:	fc043783          	ld	a5,-64(s0)
 8009044:	97ba                	add	a5,a5,a4
 8009046:	fcf43023          	sd	a5,-64(s0)
    zPtr[indexWord( 4, 3 )] = z64>>32;
 800904a:	fc043783          	ld	a5,-64(s0)
 800904e:	0207d713          	srli	a4,a5,0x20
 8009052:	fa843783          	ld	a5,-88(s0)
 8009056:	07b1                	addi	a5,a5,12
 8009058:	2701                	sext.w	a4,a4
 800905a:	c398                	sw	a4,0(a5)
    zPtr[indexWord( 4, 2 )] = z64;
 800905c:	fa843783          	ld	a5,-88(s0)
 8009060:	07a1                	addi	a5,a5,8
 8009062:	fc043703          	ld	a4,-64(s0)
 8009066:	2701                	sext.w	a4,a4
 8009068:	c398                	sw	a4,0(a5)

}
 800906a:	0001                	nop
 800906c:	6466                	ld	s0,88(sp)
 800906e:	6125                	addi	sp,sp,96
 8009070:	8082                	ret

0000000008009072 <softfloat_mulAddF32>:
#include "softfloat.h"

float32_t
 softfloat_mulAddF32(
     uint_fast32_t uiA, uint_fast32_t uiB, uint_fast32_t uiC, uint_fast8_t op )
{
 8009072:	7115                	addi	sp,sp,-224
 8009074:	ed86                	sd	ra,216(sp)
 8009076:	e9a2                	sd	s0,208(sp)
 8009078:	1180                	addi	s0,sp,224
 800907a:	f2a43c23          	sd	a0,-200(s0)
 800907e:	f2b43823          	sd	a1,-208(s0)
 8009082:	f2c43423          	sd	a2,-216(s0)
 8009086:	87b6                	mv	a5,a3
 8009088:	f2f403a3          	sb	a5,-217(s0)
    int_fast8_t shiftDist;
    union ui32_f32 uZ;

    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    signA = signF32UI( uiA );
 800908c:	f3843783          	ld	a5,-200(s0)
 8009090:	2781                	sext.w	a5,a5
 8009092:	01f7d79b          	srliw	a5,a5,0x1f
 8009096:	f6f40fa3          	sb	a5,-129(s0)
    expA  = expF32UI( uiA );
 800909a:	f3843783          	ld	a5,-200(s0)
 800909e:	83dd                	srli	a5,a5,0x17
 80090a0:	0ff7f793          	andi	a5,a5,255
 80090a4:	fef43423          	sd	a5,-24(s0)
    sigA  = fracF32UI( uiA );
 80090a8:	f3843703          	ld	a4,-200(s0)
 80090ac:	008007b7          	lui	a5,0x800
 80090b0:	17fd                	addi	a5,a5,-1
 80090b2:	8ff9                	and	a5,a5,a4
 80090b4:	fef43023          	sd	a5,-32(s0)
    signB = signF32UI( uiB );
 80090b8:	f3043783          	ld	a5,-208(s0)
 80090bc:	2781                	sext.w	a5,a5
 80090be:	01f7d79b          	srliw	a5,a5,0x1f
 80090c2:	f6f40f23          	sb	a5,-130(s0)
    expB  = expF32UI( uiB );
 80090c6:	f3043783          	ld	a5,-208(s0)
 80090ca:	83dd                	srli	a5,a5,0x17
 80090cc:	0ff7f793          	andi	a5,a5,255
 80090d0:	fcf43c23          	sd	a5,-40(s0)
    sigB  = fracF32UI( uiB );
 80090d4:	f3043703          	ld	a4,-208(s0)
 80090d8:	008007b7          	lui	a5,0x800
 80090dc:	17fd                	addi	a5,a5,-1
 80090de:	8ff9                	and	a5,a5,a4
 80090e0:	fcf43823          	sd	a5,-48(s0)
    signC = signF32UI( uiC ) ^ (op == softfloat_mulAdd_subC);
 80090e4:	f2843783          	ld	a5,-216(s0)
 80090e8:	2781                	sext.w	a5,a5
 80090ea:	01f7d79b          	srliw	a5,a5,0x1f
 80090ee:	0ff7f793          	andi	a5,a5,255
 80090f2:	0007871b          	sext.w	a4,a5
 80090f6:	f2744783          	lbu	a5,-217(s0)
 80090fa:	0007869b          	sext.w	a3,a5
 80090fe:	4785                	li	a5,1
 8009100:	40f687b3          	sub	a5,a3,a5
 8009104:	0017b793          	seqz	a5,a5
 8009108:	0ff7f793          	andi	a5,a5,255
 800910c:	2781                	sext.w	a5,a5
 800910e:	8fb9                	xor	a5,a5,a4
 8009110:	2781                	sext.w	a5,a5
 8009112:	00f037b3          	snez	a5,a5
 8009116:	f6f40ea3          	sb	a5,-131(s0)
    expC  = expF32UI( uiC );
 800911a:	f2843783          	ld	a5,-216(s0)
 800911e:	83dd                	srli	a5,a5,0x17
 8009120:	0ff7f793          	andi	a5,a5,255
 8009124:	fcf43423          	sd	a5,-56(s0)
    sigC  = fracF32UI( uiC );
 8009128:	f2843703          	ld	a4,-216(s0)
 800912c:	008007b7          	lui	a5,0x800
 8009130:	17fd                	addi	a5,a5,-1
 8009132:	8ff9                	and	a5,a5,a4
 8009134:	fcf43023          	sd	a5,-64(s0)
    signProd = signA ^ signB ^ (op == softfloat_mulAdd_subProd);
 8009138:	f7f44703          	lbu	a4,-129(s0)
 800913c:	f7e44783          	lbu	a5,-130(s0)
 8009140:	8fb9                	xor	a5,a5,a4
 8009142:	0ff7f793          	andi	a5,a5,255
 8009146:	0007871b          	sext.w	a4,a5
 800914a:	f2744783          	lbu	a5,-217(s0)
 800914e:	0007869b          	sext.w	a3,a5
 8009152:	4789                	li	a5,2
 8009154:	40f687b3          	sub	a5,a3,a5
 8009158:	0017b793          	seqz	a5,a5
 800915c:	0ff7f793          	andi	a5,a5,255
 8009160:	2781                	sext.w	a5,a5
 8009162:	8fb9                	xor	a5,a5,a4
 8009164:	2781                	sext.w	a5,a5
 8009166:	00f037b3          	snez	a5,a5
 800916a:	f6f40e23          	sb	a5,-132(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( expA == 0xFF ) {
 800916e:	fe843703          	ld	a4,-24(s0)
 8009172:	0ff00793          	li	a5,255
 8009176:	02f71863          	bne	a4,a5,80091a6 <softfloat_mulAddF32+0x134>
        if ( sigA || ((expB == 0xFF) && sigB) ) goto propagateNaN_ABC;
 800917a:	fe043783          	ld	a5,-32(s0)
 800917e:	38079d63          	bnez	a5,8009518 <softfloat_mulAddF32+0x4a6>
 8009182:	fd843703          	ld	a4,-40(s0)
 8009186:	0ff00793          	li	a5,255
 800918a:	00f71663          	bne	a4,a5,8009196 <softfloat_mulAddF32+0x124>
 800918e:	fd043783          	ld	a5,-48(s0)
 8009192:	38079363          	bnez	a5,8009518 <softfloat_mulAddF32+0x4a6>
        magBits = expB | sigB;
 8009196:	fd843783          	ld	a5,-40(s0)
 800919a:	fd043703          	ld	a4,-48(s0)
 800919e:	8fd9                	or	a5,a5,a4
 80091a0:	faf43c23          	sd	a5,-72(s0)
        goto infProdArg;
 80091a4:	a671                	j	8009530 <softfloat_mulAddF32+0x4be>
    }
    if ( expB == 0xFF ) {
 80091a6:	fd843703          	ld	a4,-40(s0)
 80091aa:	0ff00793          	li	a5,255
 80091ae:	00f71e63          	bne	a4,a5,80091ca <softfloat_mulAddF32+0x158>
        if ( sigB ) goto propagateNaN_ABC;
 80091b2:	fd043783          	ld	a5,-48(s0)
 80091b6:	36079363          	bnez	a5,800951c <softfloat_mulAddF32+0x4aa>
        magBits = expA | sigA;
 80091ba:	fe843783          	ld	a5,-24(s0)
 80091be:	fe043703          	ld	a4,-32(s0)
 80091c2:	8fd9                	or	a5,a5,a4
 80091c4:	faf43c23          	sd	a5,-72(s0)
        goto infProdArg;
 80091c8:	a6a5                	j	8009530 <softfloat_mulAddF32+0x4be>
    }
    if ( expC == 0xFF ) {
 80091ca:	fc843703          	ld	a4,-56(s0)
 80091ce:	0ff00793          	li	a5,255
 80091d2:	00f71d63          	bne	a4,a5,80091ec <softfloat_mulAddF32+0x17a>
        if ( sigC ) {
 80091d6:	fc043783          	ld	a5,-64(s0)
 80091da:	c781                	beqz	a5,80091e2 <softfloat_mulAddF32+0x170>
            uiZ = 0;
 80091dc:	fa043823          	sd	zero,-80(s0)
            goto propagateNaN_ZC;
 80091e0:	a67d                	j	800958e <softfloat_mulAddF32+0x51c>
        }
        uiZ = uiC;
 80091e2:	f2843783          	ld	a5,-216(s0)
 80091e6:	faf43823          	sd	a5,-80(s0)
        goto uiZ;
 80091ea:	a131                	j	80095f6 <softfloat_mulAddF32+0x584>
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( ! expA ) {
 80091ec:	fe843783          	ld	a5,-24(s0)
 80091f0:	e79d                	bnez	a5,800921e <softfloat_mulAddF32+0x1ac>
        if ( ! sigA ) goto zeroProd;
 80091f2:	fe043783          	ld	a5,-32(s0)
 80091f6:	3a078563          	beqz	a5,80095a0 <softfloat_mulAddF32+0x52e>
        normExpSig = softfloat_normSubnormalF32Sig( sigA );
 80091fa:	fe043503          	ld	a0,-32(s0)
 80091fe:	411000ef          	jal	ra,8009e0e <softfloat_normSubnormalF32Sig>
 8009202:	87aa                	mv	a5,a0
 8009204:	882e                	mv	a6,a1
 8009206:	f4f43423          	sd	a5,-184(s0)
 800920a:	f5043823          	sd	a6,-176(s0)
        expA = normExpSig.exp;
 800920e:	f4843783          	ld	a5,-184(s0)
 8009212:	fef43423          	sd	a5,-24(s0)
        sigA = normExpSig.sig;
 8009216:	f5043783          	ld	a5,-176(s0)
 800921a:	fef43023          	sd	a5,-32(s0)
    }
    if ( ! expB ) {
 800921e:	fd843783          	ld	a5,-40(s0)
 8009222:	e79d                	bnez	a5,8009250 <softfloat_mulAddF32+0x1de>
        if ( ! sigB ) goto zeroProd;
 8009224:	fd043783          	ld	a5,-48(s0)
 8009228:	36078e63          	beqz	a5,80095a4 <softfloat_mulAddF32+0x532>
        normExpSig = softfloat_normSubnormalF32Sig( sigB );
 800922c:	fd043503          	ld	a0,-48(s0)
 8009230:	3df000ef          	jal	ra,8009e0e <softfloat_normSubnormalF32Sig>
 8009234:	87aa                	mv	a5,a0
 8009236:	882e                	mv	a6,a1
 8009238:	f4f43423          	sd	a5,-184(s0)
 800923c:	f5043823          	sd	a6,-176(s0)
        expB = normExpSig.exp;
 8009240:	f4843783          	ld	a5,-184(s0)
 8009244:	fcf43c23          	sd	a5,-40(s0)
        sigB = normExpSig.sig;
 8009248:	f5043783          	ld	a5,-176(s0)
 800924c:	fcf43823          	sd	a5,-48(s0)
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    expProd = expA + expB - 0x7E;
 8009250:	fe843703          	ld	a4,-24(s0)
 8009254:	fd843783          	ld	a5,-40(s0)
 8009258:	97ba                	add	a5,a5,a4
 800925a:	f8278793          	addi	a5,a5,-126 # 7fff82 <MEM_START-0x780007e>
 800925e:	faf43423          	sd	a5,-88(s0)
    sigA = (sigA | 0x00800000)<<7;
 8009262:	fe043783          	ld	a5,-32(s0)
 8009266:	00779713          	slli	a4,a5,0x7
 800926a:	400007b7          	lui	a5,0x40000
 800926e:	8fd9                	or	a5,a5,a4
 8009270:	fef43023          	sd	a5,-32(s0)
    sigB = (sigB | 0x00800000)<<7;
 8009274:	fd043783          	ld	a5,-48(s0)
 8009278:	00779713          	slli	a4,a5,0x7
 800927c:	400007b7          	lui	a5,0x40000
 8009280:	8fd9                	or	a5,a5,a4
 8009282:	fcf43823          	sd	a5,-48(s0)
    sigProd = (uint_fast64_t) sigA * sigB;
 8009286:	fe043703          	ld	a4,-32(s0)
 800928a:	fd043783          	ld	a5,-48(s0)
 800928e:	02f707b3          	mul	a5,a4,a5
 8009292:	faf43023          	sd	a5,-96(s0)
    if ( sigProd < UINT64_C( 0x2000000000000000 ) ) {
 8009296:	fa043703          	ld	a4,-96(s0)
 800929a:	57fd                	li	a5,-1
 800929c:	838d                	srli	a5,a5,0x3
 800929e:	00e7ec63          	bltu	a5,a4,80092b6 <softfloat_mulAddF32+0x244>
        --expProd;
 80092a2:	fa843783          	ld	a5,-88(s0)
 80092a6:	17fd                	addi	a5,a5,-1
 80092a8:	faf43423          	sd	a5,-88(s0)
        sigProd <<= 1;
 80092ac:	fa043783          	ld	a5,-96(s0)
 80092b0:	0786                	slli	a5,a5,0x1
 80092b2:	faf43023          	sd	a5,-96(s0)
    }
    signZ = signProd;
 80092b6:	f7c44783          	lbu	a5,-132(s0)
 80092ba:	f8f40fa3          	sb	a5,-97(s0)
    if ( ! expC ) {
 80092be:	fc843783          	ld	a5,-56(s0)
 80092c2:	e3b9                	bnez	a5,8009308 <softfloat_mulAddF32+0x296>
        if ( ! sigC ) {
 80092c4:	fc043783          	ld	a5,-64(s0)
 80092c8:	ef91                	bnez	a5,80092e4 <softfloat_mulAddF32+0x272>
            expZ = expProd - 1;
 80092ca:	fa843783          	ld	a5,-88(s0)
 80092ce:	17fd                	addi	a5,a5,-1
 80092d0:	f8f43823          	sd	a5,-112(s0)
            sigZ = softfloat_shortShiftRightJam64( sigProd, 31 );
 80092d4:	45fd                	li	a1,31
 80092d6:	fa043503          	ld	a0,-96(s0)
 80092da:	738010ef          	jal	ra,800aa12 <softfloat_shortShiftRightJam64>
 80092de:	f8a43423          	sd	a0,-120(s0)
            goto roundPack;
 80092e2:	a405                	j	8009502 <softfloat_mulAddF32+0x490>
        }
        normExpSig = softfloat_normSubnormalF32Sig( sigC );
 80092e4:	fc043503          	ld	a0,-64(s0)
 80092e8:	327000ef          	jal	ra,8009e0e <softfloat_normSubnormalF32Sig>
 80092ec:	87aa                	mv	a5,a0
 80092ee:	882e                	mv	a6,a1
 80092f0:	f4f43423          	sd	a5,-184(s0)
 80092f4:	f5043823          	sd	a6,-176(s0)
        expC = normExpSig.exp;
 80092f8:	f4843783          	ld	a5,-184(s0)
 80092fc:	fcf43423          	sd	a5,-56(s0)
        sigC = normExpSig.sig;
 8009300:	f5043783          	ld	a5,-176(s0)
 8009304:	fcf43023          	sd	a5,-64(s0)
    }
    sigC = (sigC | 0x00800000)<<6;
 8009308:	fc043783          	ld	a5,-64(s0)
 800930c:	00679713          	slli	a4,a5,0x6
 8009310:	200007b7          	lui	a5,0x20000
 8009314:	8fd9                	or	a5,a5,a4
 8009316:	fcf43023          	sd	a5,-64(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    expDiff = expProd - expC;
 800931a:	fa843703          	ld	a4,-88(s0)
 800931e:	fc843783          	ld	a5,-56(s0)
 8009322:	40f707b3          	sub	a5,a4,a5
 8009326:	f6f43823          	sd	a5,-144(s0)
    if ( signProd == signC ) {
 800932a:	f7c44703          	lbu	a4,-132(s0)
 800932e:	f7d44783          	lbu	a5,-131(s0)
 8009332:	0ff77713          	andi	a4,a4,255
 8009336:	0ff7f793          	andi	a5,a5,255
 800933a:	08f71863          	bne	a4,a5,80093ca <softfloat_mulAddF32+0x358>
        /*--------------------------------------------------------------------
        *--------------------------------------------------------------------*/
        if ( expDiff <= 0 ) {
 800933e:	f7043783          	ld	a5,-144(s0)
 8009342:	02f04863          	bgtz	a5,8009372 <softfloat_mulAddF32+0x300>
            expZ = expC;
 8009346:	fc843783          	ld	a5,-56(s0)
 800934a:	f8f43823          	sd	a5,-112(s0)
            sigZ = sigC + softfloat_shiftRightJam64( sigProd, 32 - expDiff );
 800934e:	02000713          	li	a4,32
 8009352:	f7043783          	ld	a5,-144(s0)
 8009356:	40f707b3          	sub	a5,a4,a5
 800935a:	85be                	mv	a1,a5
 800935c:	fa043503          	ld	a0,-96(s0)
 8009360:	2b2010ef          	jal	ra,800a612 <softfloat_shiftRightJam64>
 8009364:	872a                	mv	a4,a0
 8009366:	fc043783          	ld	a5,-64(s0)
 800936a:	97ba                	add	a5,a5,a4
 800936c:	f8f43423          	sd	a5,-120(s0)
 8009370:	a825                	j	80093a8 <softfloat_mulAddF32+0x336>
        } else {
            expZ = expProd;
 8009372:	fa843783          	ld	a5,-88(s0)
 8009376:	f8f43823          	sd	a5,-112(s0)
            sig64Z =
                sigProd
                    + softfloat_shiftRightJam64(
 800937a:	fc043783          	ld	a5,-64(s0)
 800937e:	1782                	slli	a5,a5,0x20
 8009380:	f7043703          	ld	a4,-144(s0)
 8009384:	85ba                	mv	a1,a4
 8009386:	853e                	mv	a0,a5
 8009388:	28a010ef          	jal	ra,800a612 <softfloat_shiftRightJam64>
 800938c:	872a                	mv	a4,a0
            sig64Z =
 800938e:	fa043783          	ld	a5,-96(s0)
 8009392:	97ba                	add	a5,a5,a4
 8009394:	f8f43023          	sd	a5,-128(s0)
                          (uint_fast64_t) sigC<<32, expDiff );
            sigZ = softfloat_shortShiftRightJam64( sig64Z, 32 );
 8009398:	02000593          	li	a1,32
 800939c:	f8043503          	ld	a0,-128(s0)
 80093a0:	672010ef          	jal	ra,800aa12 <softfloat_shortShiftRightJam64>
 80093a4:	f8a43423          	sd	a0,-120(s0)
        }
        if ( sigZ < 0x40000000 ) {
 80093a8:	f8843703          	ld	a4,-120(s0)
 80093ac:	400007b7          	lui	a5,0x40000
 80093b0:	14f77963          	bleu	a5,a4,8009502 <softfloat_mulAddF32+0x490>
            --expZ;
 80093b4:	f9043783          	ld	a5,-112(s0)
 80093b8:	17fd                	addi	a5,a5,-1
 80093ba:	f8f43823          	sd	a5,-112(s0)
            sigZ <<= 1;
 80093be:	f8843783          	ld	a5,-120(s0)
 80093c2:	0786                	slli	a5,a5,0x1
 80093c4:	f8f43423          	sd	a5,-120(s0)
 80093c8:	aa2d                	j	8009502 <softfloat_mulAddF32+0x490>
        }
    } else {
        /*--------------------------------------------------------------------
        *--------------------------------------------------------------------*/
        sig64C = (uint_fast64_t) sigC<<32;
 80093ca:	fc043783          	ld	a5,-64(s0)
 80093ce:	1782                	slli	a5,a5,0x20
 80093d0:	f6f43423          	sd	a5,-152(s0)
        if ( expDiff < 0 ) {
 80093d4:	f7043783          	ld	a5,-144(s0)
 80093d8:	0207da63          	bgez	a5,800940c <softfloat_mulAddF32+0x39a>
            signZ = signC;
 80093dc:	f7d44783          	lbu	a5,-131(s0)
 80093e0:	f8f40fa3          	sb	a5,-97(s0)
            expZ = expC;
 80093e4:	fc843783          	ld	a5,-56(s0)
 80093e8:	f8f43823          	sd	a5,-112(s0)
            sig64Z = sig64C - softfloat_shiftRightJam64( sigProd, -expDiff );
 80093ec:	f7043783          	ld	a5,-144(s0)
 80093f0:	40f007b3          	neg	a5,a5
 80093f4:	85be                	mv	a1,a5
 80093f6:	fa043503          	ld	a0,-96(s0)
 80093fa:	218010ef          	jal	ra,800a612 <softfloat_shiftRightJam64>
 80093fe:	872a                	mv	a4,a0
 8009400:	f6843783          	ld	a5,-152(s0)
 8009404:	8f99                	sub	a5,a5,a4
 8009406:	f8f43023          	sd	a5,-128(s0)
 800940a:	a059                	j	8009490 <softfloat_mulAddF32+0x41e>
        } else if ( ! expDiff ) {
 800940c:	f7043783          	ld	a5,-144(s0)
 8009410:	efb9                	bnez	a5,800946e <softfloat_mulAddF32+0x3fc>
            expZ = expProd;
 8009412:	fa843783          	ld	a5,-88(s0)
 8009416:	f8f43823          	sd	a5,-112(s0)
            sig64Z = sigProd - sig64C;
 800941a:	fa043703          	ld	a4,-96(s0)
 800941e:	f6843783          	ld	a5,-152(s0)
 8009422:	40f707b3          	sub	a5,a4,a5
 8009426:	f8f43023          	sd	a5,-128(s0)
            if ( ! sig64Z ) goto completeCancellation;
 800942a:	f8043783          	ld	a5,-128(s0)
 800942e:	1a078163          	beqz	a5,80095d0 <softfloat_mulAddF32+0x55e>
            if ( sig64Z & UINT64_C( 0x8000000000000000 ) ) {
 8009432:	f8043783          	ld	a5,-128(s0)
 8009436:	0407dd63          	bgez	a5,8009490 <softfloat_mulAddF32+0x41e>
                signZ = ! signZ;
 800943a:	f9f44783          	lbu	a5,-97(s0)
 800943e:	2781                	sext.w	a5,a5
 8009440:	00f037b3          	snez	a5,a5
 8009444:	0ff7f793          	andi	a5,a5,255
 8009448:	0017c793          	xori	a5,a5,1
 800944c:	0ff7f793          	andi	a5,a5,255
 8009450:	2781                	sext.w	a5,a5
 8009452:	f8f40fa3          	sb	a5,-97(s0)
 8009456:	f9f44783          	lbu	a5,-97(s0)
 800945a:	8b85                	andi	a5,a5,1
 800945c:	f8f40fa3          	sb	a5,-97(s0)
                sig64Z = -sig64Z;
 8009460:	f8043783          	ld	a5,-128(s0)
 8009464:	40f007b3          	neg	a5,a5
 8009468:	f8f43023          	sd	a5,-128(s0)
 800946c:	a015                	j	8009490 <softfloat_mulAddF32+0x41e>
            }
        } else {
            expZ = expProd;
 800946e:	fa843783          	ld	a5,-88(s0)
 8009472:	f8f43823          	sd	a5,-112(s0)
            sig64Z = sigProd - softfloat_shiftRightJam64( sig64C, expDiff );
 8009476:	f7043783          	ld	a5,-144(s0)
 800947a:	85be                	mv	a1,a5
 800947c:	f6843503          	ld	a0,-152(s0)
 8009480:	192010ef          	jal	ra,800a612 <softfloat_shiftRightJam64>
 8009484:	872a                	mv	a4,a0
 8009486:	fa043783          	ld	a5,-96(s0)
 800948a:	8f99                	sub	a5,a5,a4
 800948c:	f8f43023          	sd	a5,-128(s0)
        }
        shiftDist = softfloat_countLeadingZeros64( sig64Z ) - 1;
 8009490:	f8043503          	ld	a0,-128(s0)
 8009494:	024020ef          	jal	ra,800b4b8 <softfloat_countLeadingZeros64>
 8009498:	87aa                	mv	a5,a0
 800949a:	37fd                	addiw	a5,a5,-1
 800949c:	0ff7f793          	andi	a5,a5,255
 80094a0:	f6f403a3          	sb	a5,-153(s0)
        expZ -= shiftDist;
 80094a4:	f6740783          	lb	a5,-153(s0)
 80094a8:	f9043703          	ld	a4,-112(s0)
 80094ac:	40f707b3          	sub	a5,a4,a5
 80094b0:	f8f43823          	sd	a5,-112(s0)
        shiftDist -= 32;
 80094b4:	f6744783          	lbu	a5,-153(s0)
 80094b8:	3781                	addiw	a5,a5,-32
 80094ba:	0ff7f793          	andi	a5,a5,255
 80094be:	f6f403a3          	sb	a5,-153(s0)
        if ( shiftDist < 0 ) {
 80094c2:	f6744783          	lbu	a5,-153(s0)
 80094c6:	0187979b          	slliw	a5,a5,0x18
 80094ca:	4187d79b          	sraiw	a5,a5,0x18
 80094ce:	0207d063          	bgez	a5,80094ee <softfloat_mulAddF32+0x47c>
            sigZ = softfloat_shortShiftRightJam64( sig64Z, -shiftDist );
 80094d2:	f6744783          	lbu	a5,-153(s0)
 80094d6:	40f007b3          	neg	a5,a5
 80094da:	0ff7f793          	andi	a5,a5,255
 80094de:	85be                	mv	a1,a5
 80094e0:	f8043503          	ld	a0,-128(s0)
 80094e4:	52e010ef          	jal	ra,800aa12 <softfloat_shortShiftRightJam64>
 80094e8:	f8a43423          	sd	a0,-120(s0)
 80094ec:	a819                	j	8009502 <softfloat_mulAddF32+0x490>
        } else {
            sigZ = (uint_fast32_t) sig64Z<<shiftDist;
 80094ee:	f6740783          	lb	a5,-153(s0)
 80094f2:	2781                	sext.w	a5,a5
 80094f4:	873e                	mv	a4,a5
 80094f6:	f8043783          	ld	a5,-128(s0)
 80094fa:	00e797b3          	sll	a5,a5,a4
 80094fe:	f8f43423          	sd	a5,-120(s0)
        }
    }
 roundPack:
    return softfloat_roundPackToF32( signZ, expZ, sigZ );
 8009502:	f9f44783          	lbu	a5,-97(s0)
 8009506:	f8843603          	ld	a2,-120(s0)
 800950a:	f9043583          	ld	a1,-112(s0)
 800950e:	853e                	mv	a0,a5
 8009510:	337000ef          	jal	ra,800a046 <softfloat_roundPackToF32>
 8009514:	87aa                	mv	a5,a0
 8009516:	a0fd                	j	8009604 <softfloat_mulAddF32+0x592>
        if ( sigA || ((expB == 0xFF) && sigB) ) goto propagateNaN_ABC;
 8009518:	0001                	nop
 800951a:	a011                	j	800951e <softfloat_mulAddF32+0x4ac>
        if ( sigB ) goto propagateNaN_ABC;
 800951c:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 propagateNaN_ABC:
    uiZ = softfloat_propagateNaNF32UI( uiA, uiB );
 800951e:	f3043583          	ld	a1,-208(s0)
 8009522:	f3843503          	ld	a0,-200(s0)
 8009526:	57d010ef          	jal	ra,800b2a2 <softfloat_propagateNaNF32UI>
 800952a:	faa43823          	sd	a0,-80(s0)
    goto propagateNaN_ZC;
 800952e:	a085                	j	800958e <softfloat_mulAddF32+0x51c>
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 infProdArg:
    if ( magBits ) {
 8009530:	fb843783          	ld	a5,-72(s0)
 8009534:	c3b9                	beqz	a5,800957a <softfloat_mulAddF32+0x508>
        uiZ = packToF32UI( signProd, 0xFF, 0 );
 8009536:	f7c44783          	lbu	a5,-132(s0)
 800953a:	2781                	sext.w	a5,a5
 800953c:	01f7979b          	slliw	a5,a5,0x1f
 8009540:	0007871b          	sext.w	a4,a5
 8009544:	7f8007b7          	lui	a5,0x7f800
 8009548:	9fb9                	addw	a5,a5,a4
 800954a:	2781                	sext.w	a5,a5
 800954c:	1782                	slli	a5,a5,0x20
 800954e:	9381                	srli	a5,a5,0x20
 8009550:	faf43823          	sd	a5,-80(s0)
        if ( expC != 0xFF ) goto uiZ;
 8009554:	fc843703          	ld	a4,-56(s0)
 8009558:	0ff00793          	li	a5,255
 800955c:	08f71863          	bne	a4,a5,80095ec <softfloat_mulAddF32+0x57a>
        if ( sigC ) goto propagateNaN_ZC;
 8009560:	fc043783          	ld	a5,-64(s0)
 8009564:	e785                	bnez	a5,800958c <softfloat_mulAddF32+0x51a>
        if ( signProd == signC ) goto uiZ;
 8009566:	f7c44703          	lbu	a4,-132(s0)
 800956a:	f7d44783          	lbu	a5,-131(s0)
 800956e:	0ff77713          	andi	a4,a4,255
 8009572:	0ff7f793          	andi	a5,a5,255
 8009576:	06f70d63          	beq	a4,a5,80095f0 <softfloat_mulAddF32+0x57e>
    }
    softfloat_raiseFlags( softfloat_flag_invalid );
 800957a:	001867f3          	csrrsi	a5,fflags,16
 800957e:	f4f43c23          	sd	a5,-168(s0)
    uiZ = defaultNaNF32UI;
 8009582:	7fc007b7          	lui	a5,0x7fc00
 8009586:	faf43823          	sd	a5,-80(s0)
 800958a:	a011                	j	800958e <softfloat_mulAddF32+0x51c>
        if ( sigC ) goto propagateNaN_ZC;
 800958c:	0001                	nop
 propagateNaN_ZC:
    uiZ = softfloat_propagateNaNF32UI( uiZ, uiC );
 800958e:	f2843583          	ld	a1,-216(s0)
 8009592:	fb043503          	ld	a0,-80(s0)
 8009596:	50d010ef          	jal	ra,800b2a2 <softfloat_propagateNaNF32UI>
 800959a:	faa43823          	sd	a0,-80(s0)
    goto uiZ;
 800959e:	a8a1                	j	80095f6 <softfloat_mulAddF32+0x584>
        if ( ! sigA ) goto zeroProd;
 80095a0:	0001                	nop
 80095a2:	a011                	j	80095a6 <softfloat_mulAddF32+0x534>
        if ( ! sigB ) goto zeroProd;
 80095a4:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 zeroProd:
    uiZ = uiC;
 80095a6:	f2843783          	ld	a5,-216(s0)
 80095aa:	faf43823          	sd	a5,-80(s0)
    if ( ! (expC | sigC) && (signProd != signC) ) {
 80095ae:	fc843703          	ld	a4,-56(s0)
 80095b2:	fc043783          	ld	a5,-64(s0)
 80095b6:	8fd9                	or	a5,a5,a4
 80095b8:	ef95                	bnez	a5,80095f4 <softfloat_mulAddF32+0x582>
 80095ba:	f7c44703          	lbu	a4,-132(s0)
 80095be:	f7d44783          	lbu	a5,-131(s0)
 80095c2:	0ff77713          	andi	a4,a4,255
 80095c6:	0ff7f793          	andi	a5,a5,255
 80095ca:	02f70563          	beq	a4,a5,80095f4 <softfloat_mulAddF32+0x582>
 completeCancellation:
 80095ce:	a011                	j	80095d2 <softfloat_mulAddF32+0x560>
            if ( ! sig64Z ) goto completeCancellation;
 80095d0:	0001                	nop
        uiZ =
            packToF32UI(
 80095d2:	8792                	mv	a5,tp
 80095d4:	2781                	sext.w	a5,a5
 80095d6:	873e                	mv	a4,a5
 80095d8:	4789                	li	a5,2
 80095da:	00f71563          	bne	a4,a5,80095e4 <softfloat_mulAddF32+0x572>
 80095de:	4785                	li	a5,1
 80095e0:	07fe                	slli	a5,a5,0x1f
 80095e2:	a011                	j	80095e6 <softfloat_mulAddF32+0x574>
 80095e4:	4781                	li	a5,0
        uiZ =
 80095e6:	faf43823          	sd	a5,-80(s0)
 80095ea:	a031                	j	80095f6 <softfloat_mulAddF32+0x584>
        if ( expC != 0xFF ) goto uiZ;
 80095ec:	0001                	nop
 80095ee:	a021                	j	80095f6 <softfloat_mulAddF32+0x584>
        if ( signProd == signC ) goto uiZ;
 80095f0:	0001                	nop
 80095f2:	a011                	j	80095f6 <softfloat_mulAddF32+0x584>
                (softfloat_roundingMode == softfloat_round_min), 0, 0 );
    }
 uiZ:
 80095f4:	0001                	nop
    uZ.ui = uiZ;
 80095f6:	fb043783          	ld	a5,-80(s0)
 80095fa:	2781                	sext.w	a5,a5
 80095fc:	f4f42023          	sw	a5,-192(s0)
    return uZ.f;
 8009600:	f4042783          	lw	a5,-192(s0)

}
 8009604:	853e                	mv	a0,a5
 8009606:	60ee                	ld	ra,216(sp)
 8009608:	644e                	ld	s0,208(sp)
 800960a:	612d                	addi	sp,sp,224
 800960c:	8082                	ret

000000000800960e <softfloat_mulAddF64>:
#else

float64_t
 softfloat_mulAddF64(
     uint_fast64_t uiA, uint_fast64_t uiB, uint_fast64_t uiC, uint_fast8_t op )
{
 800960e:	7115                	addi	sp,sp,-224
 8009610:	ed86                	sd	ra,216(sp)
 8009612:	e9a2                	sd	s0,208(sp)
 8009614:	1180                	addi	s0,sp,224
 8009616:	f2a43c23          	sd	a0,-200(s0)
 800961a:	f2b43823          	sd	a1,-208(s0)
 800961e:	f2c43423          	sd	a2,-216(s0)
 8009622:	87b6                	mv	a5,a3
 8009624:	f2f403a3          	sb	a5,-217(s0)
    uint32_t sig128C[4];
    union ui64_f64 uZ;

    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    signA = signF64UI( uiA );
 8009628:	f3843783          	ld	a5,-200(s0)
 800962c:	93fd                	srli	a5,a5,0x3f
 800962e:	f8f407a3          	sb	a5,-113(s0)
    expA  = expF64UI( uiA );
 8009632:	f3843783          	ld	a5,-200(s0)
 8009636:	93d1                	srli	a5,a5,0x34
 8009638:	7ff7f793          	andi	a5,a5,2047
 800963c:	fef43423          	sd	a5,-24(s0)
    sigA  = fracF64UI( uiA );
 8009640:	f3843703          	ld	a4,-200(s0)
 8009644:	57fd                	li	a5,-1
 8009646:	83b1                	srli	a5,a5,0xc
 8009648:	8ff9                	and	a5,a5,a4
 800964a:	fef43023          	sd	a5,-32(s0)
    signB = signF64UI( uiB );
 800964e:	f3043783          	ld	a5,-208(s0)
 8009652:	93fd                	srli	a5,a5,0x3f
 8009654:	f8f40723          	sb	a5,-114(s0)
    expB  = expF64UI( uiB );
 8009658:	f3043783          	ld	a5,-208(s0)
 800965c:	93d1                	srli	a5,a5,0x34
 800965e:	7ff7f793          	andi	a5,a5,2047
 8009662:	fcf43c23          	sd	a5,-40(s0)
    sigB  = fracF64UI( uiB );
 8009666:	f3043703          	ld	a4,-208(s0)
 800966a:	57fd                	li	a5,-1
 800966c:	83b1                	srli	a5,a5,0xc
 800966e:	8ff9                	and	a5,a5,a4
 8009670:	fcf43823          	sd	a5,-48(s0)
    signC = signF64UI( uiC ) ^ (op == softfloat_mulAdd_subC);
 8009674:	f2843783          	ld	a5,-216(s0)
 8009678:	93fd                	srli	a5,a5,0x3f
 800967a:	0ff7f793          	andi	a5,a5,255
 800967e:	0007871b          	sext.w	a4,a5
 8009682:	f2744783          	lbu	a5,-217(s0)
 8009686:	0007869b          	sext.w	a3,a5
 800968a:	4785                	li	a5,1
 800968c:	40f687b3          	sub	a5,a3,a5
 8009690:	0017b793          	seqz	a5,a5
 8009694:	0ff7f793          	andi	a5,a5,255
 8009698:	2781                	sext.w	a5,a5
 800969a:	8fb9                	xor	a5,a5,a4
 800969c:	2781                	sext.w	a5,a5
 800969e:	00f037b3          	snez	a5,a5
 80096a2:	f8f406a3          	sb	a5,-115(s0)
    expC  = expF64UI( uiC );
 80096a6:	f2843783          	ld	a5,-216(s0)
 80096aa:	93d1                	srli	a5,a5,0x34
 80096ac:	7ff7f793          	andi	a5,a5,2047
 80096b0:	fcf43423          	sd	a5,-56(s0)
    sigC  = fracF64UI( uiC );
 80096b4:	f2843703          	ld	a4,-216(s0)
 80096b8:	57fd                	li	a5,-1
 80096ba:	83b1                	srli	a5,a5,0xc
 80096bc:	8ff9                	and	a5,a5,a4
 80096be:	fcf43023          	sd	a5,-64(s0)
    signZ = signA ^ signB ^ (op == softfloat_mulAdd_subProd);
 80096c2:	f8f44703          	lbu	a4,-113(s0)
 80096c6:	f8e44783          	lbu	a5,-114(s0)
 80096ca:	8fb9                	xor	a5,a5,a4
 80096cc:	0ff7f793          	andi	a5,a5,255
 80096d0:	0007871b          	sext.w	a4,a5
 80096d4:	f2744783          	lbu	a5,-217(s0)
 80096d8:	0007869b          	sext.w	a3,a5
 80096dc:	4789                	li	a5,2
 80096de:	40f687b3          	sub	a5,a3,a5
 80096e2:	0017b793          	seqz	a5,a5
 80096e6:	0ff7f793          	andi	a5,a5,255
 80096ea:	2781                	sext.w	a5,a5
 80096ec:	8fb9                	xor	a5,a5,a4
 80096ee:	2781                	sext.w	a5,a5
 80096f0:	00f037b3          	snez	a5,a5
 80096f4:	faf40fa3          	sb	a5,-65(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( expA == 0x7FF ) {
 80096f8:	fe843703          	ld	a4,-24(s0)
 80096fc:	7ff00793          	li	a5,2047
 8009700:	02f71863          	bne	a4,a5,8009730 <softfloat_mulAddF64+0x122>
        if ( sigA || ((expB == 0x7FF) && sigB) ) goto propagateNaN_ABC;
 8009704:	fe043783          	ld	a5,-32(s0)
 8009708:	58079663          	bnez	a5,8009c94 <softfloat_mulAddF64+0x686>
 800970c:	fd843703          	ld	a4,-40(s0)
 8009710:	7ff00793          	li	a5,2047
 8009714:	00f71663          	bne	a4,a5,8009720 <softfloat_mulAddF64+0x112>
 8009718:	fd043783          	ld	a5,-48(s0)
 800971c:	56079c63          	bnez	a5,8009c94 <softfloat_mulAddF64+0x686>
        magBits = expB | sigB;
 8009720:	fd843783          	ld	a5,-40(s0)
 8009724:	fd043703          	ld	a4,-48(s0)
 8009728:	8fd9                	or	a5,a5,a4
 800972a:	faf43823          	sd	a5,-80(s0)
        goto infProdArg;
 800972e:	abbd                	j	8009cac <softfloat_mulAddF64+0x69e>
    }
    if ( expB == 0x7FF ) {
 8009730:	fd843703          	ld	a4,-40(s0)
 8009734:	7ff00793          	li	a5,2047
 8009738:	00f71e63          	bne	a4,a5,8009754 <softfloat_mulAddF64+0x146>
        if ( sigB ) goto propagateNaN_ABC;
 800973c:	fd043783          	ld	a5,-48(s0)
 8009740:	54079c63          	bnez	a5,8009c98 <softfloat_mulAddF64+0x68a>
        magBits = expA | sigA;
 8009744:	fe843783          	ld	a5,-24(s0)
 8009748:	fe043703          	ld	a4,-32(s0)
 800974c:	8fd9                	or	a5,a5,a4
 800974e:	faf43823          	sd	a5,-80(s0)
        goto infProdArg;
 8009752:	aba9                	j	8009cac <softfloat_mulAddF64+0x69e>
    }
    if ( expC == 0x7FF ) {
 8009754:	fc843703          	ld	a4,-56(s0)
 8009758:	7ff00793          	li	a5,2047
 800975c:	00f71d63          	bne	a4,a5,8009776 <softfloat_mulAddF64+0x168>
        if ( sigC ) {
 8009760:	fc043783          	ld	a5,-64(s0)
 8009764:	c781                	beqz	a5,800976c <softfloat_mulAddF64+0x15e>
            uiZ = 0;
 8009766:	fa043423          	sd	zero,-88(s0)
            goto propagateNaN_ZC;
 800976a:	ab61                	j	8009d02 <softfloat_mulAddF64+0x6f4>
        }
        uiZ = uiC;
 800976c:	f2843783          	ld	a5,-216(s0)
 8009770:	faf43423          	sd	a5,-88(s0)
        goto uiZ;
 8009774:	abdd                	j	8009d6a <softfloat_mulAddF64+0x75c>
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( ! expA ) {
 8009776:	fe843783          	ld	a5,-24(s0)
 800977a:	e79d                	bnez	a5,80097a8 <softfloat_mulAddF64+0x19a>
        if ( ! sigA ) goto zeroProd;
 800977c:	fe043783          	ld	a5,-32(s0)
 8009780:	58078a63          	beqz	a5,8009d14 <softfloat_mulAddF64+0x706>
        normExpSig = softfloat_normSubnormalF64Sig( sigA );
 8009784:	fe043503          	ld	a0,-32(s0)
 8009788:	708000ef          	jal	ra,8009e90 <softfloat_normSubnormalF64Sig>
 800978c:	87aa                	mv	a5,a0
 800978e:	882e                	mv	a6,a1
 8009790:	f6f43423          	sd	a5,-152(s0)
 8009794:	f7043823          	sd	a6,-144(s0)
        expA = normExpSig.exp;
 8009798:	f6843783          	ld	a5,-152(s0)
 800979c:	fef43423          	sd	a5,-24(s0)
        sigA = normExpSig.sig;
 80097a0:	f7043783          	ld	a5,-144(s0)
 80097a4:	fef43023          	sd	a5,-32(s0)
    }
    if ( ! expB ) {
 80097a8:	fd843783          	ld	a5,-40(s0)
 80097ac:	e79d                	bnez	a5,80097da <softfloat_mulAddF64+0x1cc>
        if ( ! sigB ) goto zeroProd;
 80097ae:	fd043783          	ld	a5,-48(s0)
 80097b2:	56078363          	beqz	a5,8009d18 <softfloat_mulAddF64+0x70a>
        normExpSig = softfloat_normSubnormalF64Sig( sigB );
 80097b6:	fd043503          	ld	a0,-48(s0)
 80097ba:	6d6000ef          	jal	ra,8009e90 <softfloat_normSubnormalF64Sig>
 80097be:	87aa                	mv	a5,a0
 80097c0:	882e                	mv	a6,a1
 80097c2:	f6f43423          	sd	a5,-152(s0)
 80097c6:	f7043823          	sd	a6,-144(s0)
        expB = normExpSig.exp;
 80097ca:	f6843783          	ld	a5,-152(s0)
 80097ce:	fcf43c23          	sd	a5,-40(s0)
        sigB = normExpSig.sig;
 80097d2:	f7043783          	ld	a5,-144(s0)
 80097d6:	fcf43823          	sd	a5,-48(s0)
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    expZ = expA + expB - 0x3FE;
 80097da:	fe843703          	ld	a4,-24(s0)
 80097de:	fd843783          	ld	a5,-40(s0)
 80097e2:	97ba                	add	a5,a5,a4
 80097e4:	c0278793          	addi	a5,a5,-1022 # 7fbffc02 <_payload_end+0x77433c62>
 80097e8:	faf43023          	sd	a5,-96(s0)
    sigA = (sigA | UINT64_C( 0x0010000000000000 ))<<10;
 80097ec:	fe043783          	ld	a5,-32(s0)
 80097f0:	00a79713          	slli	a4,a5,0xa
 80097f4:	4785                	li	a5,1
 80097f6:	17fa                	slli	a5,a5,0x3e
 80097f8:	8fd9                	or	a5,a5,a4
 80097fa:	fef43023          	sd	a5,-32(s0)
    sigB = (sigB | UINT64_C( 0x0010000000000000 ))<<11;
 80097fe:	fd043783          	ld	a5,-48(s0)
 8009802:	00b79713          	slli	a4,a5,0xb
 8009806:	57fd                	li	a5,-1
 8009808:	17fe                	slli	a5,a5,0x3f
 800980a:	8fd9                	or	a5,a5,a4
 800980c:	fcf43823          	sd	a5,-48(s0)
    softfloat_mul64To128M( sigA, sigB, sig128Z );
 8009810:	f5840793          	addi	a5,s0,-168
 8009814:	863e                	mv	a2,a5
 8009816:	fd043583          	ld	a1,-48(s0)
 800981a:	fe043503          	ld	a0,-32(s0)
 800981e:	f36ff0ef          	jal	ra,8008f54 <softfloat_mul64To128M>
    sigZ =
        (uint64_t) sig128Z[indexWord( 4, 3 )]<<32 | sig128Z[indexWord( 4, 2 )];
 8009822:	f6442783          	lw	a5,-156(s0)
 8009826:	1782                	slli	a5,a5,0x20
 8009828:	9381                	srli	a5,a5,0x20
 800982a:	02079713          	slli	a4,a5,0x20
 800982e:	f6042783          	lw	a5,-160(s0)
 8009832:	1782                	slli	a5,a5,0x20
 8009834:	9381                	srli	a5,a5,0x20
    sigZ =
 8009836:	8fd9                	or	a5,a5,a4
 8009838:	f8f43c23          	sd	a5,-104(s0)
    shiftDist = 0;
 800983c:	f8043823          	sd	zero,-112(s0)
    if ( ! (sigZ & UINT64_C( 0x4000000000000000 )) ) {
 8009840:	f9843703          	ld	a4,-104(s0)
 8009844:	4785                	li	a5,1
 8009846:	17fa                	slli	a5,a5,0x3e
 8009848:	8ff9                	and	a5,a5,a4
 800984a:	eb89                	bnez	a5,800985c <softfloat_mulAddF64+0x24e>
        --expZ;
 800984c:	fa043783          	ld	a5,-96(s0)
 8009850:	17fd                	addi	a5,a5,-1
 8009852:	faf43023          	sd	a5,-96(s0)
        shiftDist = -1;
 8009856:	57fd                	li	a5,-1
 8009858:	f8f43823          	sd	a5,-112(s0)
    }
    if ( ! expC ) {
 800985c:	fc843783          	ld	a5,-56(s0)
 8009860:	e3a1                	bnez	a5,80098a0 <softfloat_mulAddF64+0x292>
        if ( ! sigC ) {
 8009862:	fc043783          	ld	a5,-64(s0)
 8009866:	eb99                	bnez	a5,800987c <softfloat_mulAddF64+0x26e>
            if ( shiftDist ) sigZ <<= 1;
 8009868:	f9043783          	ld	a5,-112(s0)
 800986c:	3e078163          	beqz	a5,8009c4e <softfloat_mulAddF64+0x640>
 8009870:	f9843783          	ld	a5,-104(s0)
 8009874:	0786                	slli	a5,a5,0x1
 8009876:	f8f43c23          	sd	a5,-104(s0)
            goto sigZ;
 800987a:	aed1                	j	8009c4e <softfloat_mulAddF64+0x640>
        }
        normExpSig = softfloat_normSubnormalF64Sig( sigC );
 800987c:	fc043503          	ld	a0,-64(s0)
 8009880:	610000ef          	jal	ra,8009e90 <softfloat_normSubnormalF64Sig>
 8009884:	87aa                	mv	a5,a0
 8009886:	882e                	mv	a6,a1
 8009888:	f6f43423          	sd	a5,-152(s0)
 800988c:	f7043823          	sd	a6,-144(s0)
        expC = normExpSig.exp;
 8009890:	f6843783          	ld	a5,-152(s0)
 8009894:	fcf43423          	sd	a5,-56(s0)
        sigC = normExpSig.sig;
 8009898:	f7043783          	ld	a5,-144(s0)
 800989c:	fcf43023          	sd	a5,-64(s0)
    }
    sigC = (sigC | UINT64_C( 0x0010000000000000 ))<<10;
 80098a0:	fc043783          	ld	a5,-64(s0)
 80098a4:	00a79713          	slli	a4,a5,0xa
 80098a8:	4785                	li	a5,1
 80098aa:	17fa                	slli	a5,a5,0x3e
 80098ac:	8fd9                	or	a5,a5,a4
 80098ae:	fcf43023          	sd	a5,-64(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    expDiff = expZ - expC;
 80098b2:	fa043703          	ld	a4,-96(s0)
 80098b6:	fc843783          	ld	a5,-56(s0)
 80098ba:	40f707b3          	sub	a5,a4,a5
 80098be:	f8f43023          	sd	a5,-128(s0)
    if ( expDiff < 0 ) {
 80098c2:	f8043783          	ld	a5,-128(s0)
 80098c6:	0607d863          	bgez	a5,8009936 <softfloat_mulAddF64+0x328>
        expZ = expC;
 80098ca:	fc843783          	ld	a5,-56(s0)
 80098ce:	faf43023          	sd	a5,-96(s0)
        if ( (signZ == signC) || (expDiff < -1) ) {
 80098d2:	fbf44703          	lbu	a4,-65(s0)
 80098d6:	f8d44783          	lbu	a5,-115(s0)
 80098da:	0ff77713          	andi	a4,a4,255
 80098de:	0ff7f793          	andi	a5,a5,255
 80098e2:	00f70763          	beq	a4,a5,80098f0 <softfloat_mulAddF64+0x2e2>
 80098e6:	f8043703          	ld	a4,-128(s0)
 80098ea:	57fd                	li	a5,-1
 80098ec:	02f75763          	ble	a5,a4,800991a <softfloat_mulAddF64+0x30c>
            shiftDist -= expDiff;
 80098f0:	f9043703          	ld	a4,-112(s0)
 80098f4:	f8043783          	ld	a5,-128(s0)
 80098f8:	40f707b3          	sub	a5,a4,a5
 80098fc:	f8f43823          	sd	a5,-112(s0)
            if ( shiftDist) {
 8009900:	f9043783          	ld	a5,-112(s0)
 8009904:	c7c5                	beqz	a5,80099ac <softfloat_mulAddF64+0x39e>
                sigZ = softfloat_shiftRightJam64( sigZ, shiftDist );
 8009906:	f9043783          	ld	a5,-112(s0)
 800990a:	85be                	mv	a1,a5
 800990c:	f9843503          	ld	a0,-104(s0)
 8009910:	503000ef          	jal	ra,800a612 <softfloat_shiftRightJam64>
 8009914:	f8a43c23          	sd	a0,-104(s0)
            if ( shiftDist) {
 8009918:	a851                	j	80099ac <softfloat_mulAddF64+0x39e>
            }
        } else {
            if ( ! shiftDist ) {
 800991a:	f9043783          	ld	a5,-112(s0)
 800991e:	e7d9                	bnez	a5,80099ac <softfloat_mulAddF64+0x39e>
                softfloat_shortShiftRight128M( sig128Z, 1, sig128Z );
 8009920:	f5840713          	addi	a4,s0,-168
 8009924:	f5840793          	addi	a5,s0,-168
 8009928:	86ba                	mv	a3,a4
 800992a:	4605                	li	a2,1
 800992c:	85be                	mv	a1,a5
 800992e:	4511                	li	a0,4
 8009930:	7fb000ef          	jal	ra,800a92a <softfloat_shortShiftRightM>
 8009934:	a8a5                	j	80099ac <softfloat_mulAddF64+0x39e>
            }
        }
    } else {
        if ( shiftDist ) softfloat_add128M( sig128Z, sig128Z, sig128Z );
 8009936:	f9043783          	ld	a5,-112(s0)
 800993a:	cf81                	beqz	a5,8009952 <softfloat_mulAddF64+0x344>
 800993c:	f5840693          	addi	a3,s0,-168
 8009940:	f5840713          	addi	a4,s0,-168
 8009944:	f5840793          	addi	a5,s0,-168
 8009948:	863a                	mv	a2,a4
 800994a:	85be                	mv	a1,a5
 800994c:	4511                	li	a0,4
 800994e:	21f010ef          	jal	ra,800b36c <softfloat_addM>
        if ( ! expDiff ) {
 8009952:	f8043783          	ld	a5,-128(s0)
 8009956:	ef99                	bnez	a5,8009974 <softfloat_mulAddF64+0x366>
            sigZ =
                (uint64_t) sig128Z[indexWord( 4, 3 )]<<32
 8009958:	f6442783          	lw	a5,-156(s0)
 800995c:	1782                	slli	a5,a5,0x20
 800995e:	9381                	srli	a5,a5,0x20
 8009960:	02079713          	slli	a4,a5,0x20
                    | sig128Z[indexWord( 4, 2 )];
 8009964:	f6042783          	lw	a5,-160(s0)
 8009968:	1782                	slli	a5,a5,0x20
 800996a:	9381                	srli	a5,a5,0x20
            sigZ =
 800996c:	8fd9                	or	a5,a5,a4
 800996e:	f8f43c23          	sd	a5,-104(s0)
 8009972:	a82d                	j	80099ac <softfloat_mulAddF64+0x39e>
        } else {
            sig128C[indexWord( 4, 3 )] = sigC>>32;
 8009974:	fc043783          	ld	a5,-64(s0)
 8009978:	9381                	srli	a5,a5,0x20
 800997a:	2781                	sext.w	a5,a5
 800997c:	f4f42a23          	sw	a5,-172(s0)
            sig128C[indexWord( 4, 2 )] = sigC;
 8009980:	fc043783          	ld	a5,-64(s0)
 8009984:	2781                	sext.w	a5,a5
 8009986:	f4f42823          	sw	a5,-176(s0)
            sig128C[indexWord( 4, 1 )] = 0;
 800998a:	f4042623          	sw	zero,-180(s0)
            sig128C[indexWord( 4, 0 )] = 0;
 800998e:	f4042423          	sw	zero,-184(s0)
            softfloat_shiftRightJam128M( sig128C, expDiff, sig128C );
 8009992:	f8043783          	ld	a5,-128(s0)
 8009996:	0007871b          	sext.w	a4,a5
 800999a:	f4840693          	addi	a3,s0,-184
 800999e:	f4840793          	addi	a5,s0,-184
 80099a2:	863a                	mv	a2,a4
 80099a4:	85be                	mv	a1,a5
 80099a6:	4511                	li	a0,4
 80099a8:	4d3000ef          	jal	ra,800a67a <softfloat_shiftRightJamM>
        }
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( signZ == signC ) {
 80099ac:	fbf44703          	lbu	a4,-65(s0)
 80099b0:	f8d44783          	lbu	a5,-115(s0)
 80099b4:	0ff77713          	andi	a4,a4,255
 80099b8:	0ff7f793          	andi	a5,a5,255
 80099bc:	06f71763          	bne	a4,a5,8009a2a <softfloat_mulAddF64+0x41c>
        /*--------------------------------------------------------------------
        *--------------------------------------------------------------------*/
        if ( expDiff <= 0 ) {
 80099c0:	f8043783          	ld	a5,-128(s0)
 80099c4:	00f04a63          	bgtz	a5,80099d8 <softfloat_mulAddF64+0x3ca>
            sigZ += sigC;
 80099c8:	f9843703          	ld	a4,-104(s0)
 80099cc:	fc043783          	ld	a5,-64(s0)
 80099d0:	97ba                	add	a5,a5,a4
 80099d2:	f8f43c23          	sd	a5,-104(s0)
 80099d6:	a80d                	j	8009a08 <softfloat_mulAddF64+0x3fa>
        } else {
            softfloat_add128M( sig128Z, sig128C, sig128Z );
 80099d8:	f5840693          	addi	a3,s0,-168
 80099dc:	f4840713          	addi	a4,s0,-184
 80099e0:	f5840793          	addi	a5,s0,-168
 80099e4:	863a                	mv	a2,a4
 80099e6:	85be                	mv	a1,a5
 80099e8:	4511                	li	a0,4
 80099ea:	183010ef          	jal	ra,800b36c <softfloat_addM>
            sigZ =
                (uint64_t) sig128Z[indexWord( 4, 3 )]<<32
 80099ee:	f6442783          	lw	a5,-156(s0)
 80099f2:	1782                	slli	a5,a5,0x20
 80099f4:	9381                	srli	a5,a5,0x20
 80099f6:	02079713          	slli	a4,a5,0x20
                    | sig128Z[indexWord( 4, 2 )];
 80099fa:	f6042783          	lw	a5,-160(s0)
 80099fe:	1782                	slli	a5,a5,0x20
 8009a00:	9381                	srli	a5,a5,0x20
            sigZ =
 8009a02:	8fd9                	or	a5,a5,a4
 8009a04:	f8f43c23          	sd	a5,-104(s0)
        }
        if ( sigZ & UINT64_C( 0x8000000000000000 ) ) {
 8009a08:	f9843783          	ld	a5,-104(s0)
 8009a0c:	2407d663          	bgez	a5,8009c58 <softfloat_mulAddF64+0x64a>
            ++expZ;
 8009a10:	fa043783          	ld	a5,-96(s0)
 8009a14:	0785                	addi	a5,a5,1
 8009a16:	faf43023          	sd	a5,-96(s0)
            sigZ = softfloat_shortShiftRightJam64( sigZ, 1 );
 8009a1a:	4585                	li	a1,1
 8009a1c:	f9843503          	ld	a0,-104(s0)
 8009a20:	7f3000ef          	jal	ra,800aa12 <softfloat_shortShiftRightJam64>
 8009a24:	f8a43c23          	sd	a0,-104(s0)
 8009a28:	ac05                	j	8009c58 <softfloat_mulAddF64+0x64a>
        }
    } else {
        /*--------------------------------------------------------------------
        *--------------------------------------------------------------------*/
        if ( expDiff < 0 ) {
 8009a2a:	f8043783          	ld	a5,-128(s0)
 8009a2e:	0807dd63          	bgez	a5,8009ac8 <softfloat_mulAddF64+0x4ba>
            signZ = signC;
 8009a32:	f8d44783          	lbu	a5,-115(s0)
 8009a36:	faf40fa3          	sb	a5,-65(s0)
            if ( expDiff < -1 ) {
 8009a3a:	f8043703          	ld	a4,-128(s0)
 8009a3e:	57fd                	li	a5,-1
 8009a40:	04f75963          	ble	a5,a4,8009a92 <softfloat_mulAddF64+0x484>
                sigZ = sigC - sigZ;
 8009a44:	fc043703          	ld	a4,-64(s0)
 8009a48:	f9843783          	ld	a5,-104(s0)
 8009a4c:	40f707b3          	sub	a5,a4,a5
 8009a50:	f8f43c23          	sd	a5,-104(s0)
                if (
                    sig128Z[indexWord( 4, 1 )] || sig128Z[indexWord( 4, 0 )]
 8009a54:	f5c42783          	lw	a5,-164(s0)
                if (
 8009a58:	e781                	bnez	a5,8009a60 <softfloat_mulAddF64+0x452>
                    sig128Z[indexWord( 4, 1 )] || sig128Z[indexWord( 4, 0 )]
 8009a5a:	f5842783          	lw	a5,-168(s0)
 8009a5e:	cb81                	beqz	a5,8009a6e <softfloat_mulAddF64+0x460>
                ) {
                    sigZ = (sigZ - 1) | 1;
 8009a60:	f9843783          	ld	a5,-104(s0)
 8009a64:	17fd                	addi	a5,a5,-1
 8009a66:	0017e793          	ori	a5,a5,1
 8009a6a:	f8f43c23          	sd	a5,-104(s0)
                }
                if ( ! (sigZ & UINT64_C( 0x4000000000000000 )) ) {
 8009a6e:	f9843703          	ld	a4,-104(s0)
 8009a72:	4785                	li	a5,1
 8009a74:	17fa                	slli	a5,a5,0x3e
 8009a76:	8ff9                	and	a5,a5,a4
 8009a78:	1e079d63          	bnez	a5,8009c72 <softfloat_mulAddF64+0x664>
                    --expZ;
 8009a7c:	fa043783          	ld	a5,-96(s0)
 8009a80:	17fd                	addi	a5,a5,-1
 8009a82:	faf43023          	sd	a5,-96(s0)
                    sigZ <<= 1;
 8009a86:	f9843783          	ld	a5,-104(s0)
 8009a8a:	0786                	slli	a5,a5,0x1
 8009a8c:	f8f43c23          	sd	a5,-104(s0)
                }
                goto roundPack;
 8009a90:	a2cd                	j	8009c72 <softfloat_mulAddF64+0x664>
            } else {
                sig128C[indexWord( 4, 3 )] = sigC>>32;
 8009a92:	fc043783          	ld	a5,-64(s0)
 8009a96:	9381                	srli	a5,a5,0x20
 8009a98:	2781                	sext.w	a5,a5
 8009a9a:	f4f42a23          	sw	a5,-172(s0)
                sig128C[indexWord( 4, 2 )] = sigC;
 8009a9e:	fc043783          	ld	a5,-64(s0)
 8009aa2:	2781                	sext.w	a5,a5
 8009aa4:	f4f42823          	sw	a5,-176(s0)
                sig128C[indexWord( 4, 1 )] = 0;
 8009aa8:	f4042623          	sw	zero,-180(s0)
                sig128C[indexWord( 4, 0 )] = 0;
 8009aac:	f4042423          	sw	zero,-184(s0)
                softfloat_sub128M( sig128C, sig128Z, sig128Z );
 8009ab0:	f5840693          	addi	a3,s0,-168
 8009ab4:	f5840713          	addi	a4,s0,-168
 8009ab8:	f4840793          	addi	a5,s0,-184
 8009abc:	863a                	mv	a2,a4
 8009abe:	85be                	mv	a1,a5
 8009ac0:	4511                	li	a0,4
 8009ac2:	0b6010ef          	jal	ra,800ab78 <softfloat_subM>
 8009ac6:	a8e9                	j	8009ba0 <softfloat_mulAddF64+0x592>
            }
        } else if ( ! expDiff ) {
 8009ac8:	f8043783          	ld	a5,-128(s0)
 8009acc:	efa5                	bnez	a5,8009b44 <softfloat_mulAddF64+0x536>
            sigZ -= sigC;
 8009ace:	f9843703          	ld	a4,-104(s0)
 8009ad2:	fc043783          	ld	a5,-64(s0)
 8009ad6:	40f707b3          	sub	a5,a4,a5
 8009ada:	f8f43c23          	sd	a5,-104(s0)
            if (
 8009ade:	f9843783          	ld	a5,-104(s0)
 8009ae2:	eb81                	bnez	a5,8009af2 <softfloat_mulAddF64+0x4e4>
                ! sigZ && ! sig128Z[indexWord( 4, 1 )]
 8009ae4:	f5c42783          	lw	a5,-164(s0)
 8009ae8:	e789                	bnez	a5,8009af2 <softfloat_mulAddF64+0x4e4>
                    && ! sig128Z[indexWord( 4, 0 )]
 8009aea:	f5842783          	lw	a5,-168(s0)
 8009aee:	24078b63          	beqz	a5,8009d44 <softfloat_mulAddF64+0x736>
            ) {
                goto completeCancellation;
            }
            sig128Z[indexWord( 4, 3 )] = sigZ>>32;
 8009af2:	f9843783          	ld	a5,-104(s0)
 8009af6:	9381                	srli	a5,a5,0x20
 8009af8:	2781                	sext.w	a5,a5
 8009afa:	f6f42223          	sw	a5,-156(s0)
            sig128Z[indexWord( 4, 2 )] = sigZ;
 8009afe:	f9843783          	ld	a5,-104(s0)
 8009b02:	2781                	sext.w	a5,a5
 8009b04:	f6f42023          	sw	a5,-160(s0)
            if ( sigZ & UINT64_C( 0x8000000000000000 ) ) {
 8009b08:	f9843783          	ld	a5,-104(s0)
 8009b0c:	0807da63          	bgez	a5,8009ba0 <softfloat_mulAddF64+0x592>
                signZ = ! signZ;
 8009b10:	fbf44783          	lbu	a5,-65(s0)
 8009b14:	2781                	sext.w	a5,a5
 8009b16:	00f037b3          	snez	a5,a5
 8009b1a:	0ff7f793          	andi	a5,a5,255
 8009b1e:	0017c793          	xori	a5,a5,1
 8009b22:	0ff7f793          	andi	a5,a5,255
 8009b26:	2781                	sext.w	a5,a5
 8009b28:	faf40fa3          	sb	a5,-65(s0)
 8009b2c:	fbf44783          	lbu	a5,-65(s0)
 8009b30:	8b85                	andi	a5,a5,1
 8009b32:	faf40fa3          	sb	a5,-65(s0)
                softfloat_negX128M( sig128Z );
 8009b36:	f5840793          	addi	a5,s0,-168
 8009b3a:	85be                	mv	a1,a5
 8009b3c:	4511                	li	a0,4
 8009b3e:	242000ef          	jal	ra,8009d80 <softfloat_negXM>
 8009b42:	a8b9                	j	8009ba0 <softfloat_mulAddF64+0x592>
            }
        } else {
            softfloat_sub128M( sig128Z, sig128C, sig128Z );
 8009b44:	f5840693          	addi	a3,s0,-168
 8009b48:	f4840713          	addi	a4,s0,-184
 8009b4c:	f5840793          	addi	a5,s0,-168
 8009b50:	863a                	mv	a2,a4
 8009b52:	85be                	mv	a1,a5
 8009b54:	4511                	li	a0,4
 8009b56:	022010ef          	jal	ra,800ab78 <softfloat_subM>
            if ( 1 < expDiff ) {
 8009b5a:	f8043703          	ld	a4,-128(s0)
 8009b5e:	4785                	li	a5,1
 8009b60:	04e7d063          	ble	a4,a5,8009ba0 <softfloat_mulAddF64+0x592>
                sigZ =
                    (uint64_t) sig128Z[indexWord( 4, 3 )]<<32
 8009b64:	f6442783          	lw	a5,-156(s0)
 8009b68:	1782                	slli	a5,a5,0x20
 8009b6a:	9381                	srli	a5,a5,0x20
 8009b6c:	02079713          	slli	a4,a5,0x20
                        | sig128Z[indexWord( 4, 2 )];
 8009b70:	f6042783          	lw	a5,-160(s0)
 8009b74:	1782                	slli	a5,a5,0x20
 8009b76:	9381                	srli	a5,a5,0x20
                sigZ =
 8009b78:	8fd9                	or	a5,a5,a4
 8009b7a:	f8f43c23          	sd	a5,-104(s0)
                if ( ! (sigZ & UINT64_C( 0x4000000000000000 )) ) {
 8009b7e:	f9843703          	ld	a4,-104(s0)
 8009b82:	4785                	li	a5,1
 8009b84:	17fa                	slli	a5,a5,0x3e
 8009b86:	8ff9                	and	a5,a5,a4
 8009b88:	e7e9                	bnez	a5,8009c52 <softfloat_mulAddF64+0x644>
                    --expZ;
 8009b8a:	fa043783          	ld	a5,-96(s0)
 8009b8e:	17fd                	addi	a5,a5,-1
 8009b90:	faf43023          	sd	a5,-96(s0)
                    sigZ <<= 1;
 8009b94:	f9843783          	ld	a5,-104(s0)
 8009b98:	0786                	slli	a5,a5,0x1
 8009b9a:	f8f43c23          	sd	a5,-104(s0)
                }
                goto sigZ;
 8009b9e:	a855                	j	8009c52 <softfloat_mulAddF64+0x644>
            }
        }
        /*--------------------------------------------------------------------
        *--------------------------------------------------------------------*/
        shiftDist = 0;
 8009ba0:	f8043823          	sd	zero,-112(s0)
        sigZ =
            (uint64_t) sig128Z[indexWord( 4, 3 )]<<32
 8009ba4:	f6442783          	lw	a5,-156(s0)
 8009ba8:	1782                	slli	a5,a5,0x20
 8009baa:	9381                	srli	a5,a5,0x20
 8009bac:	02079713          	slli	a4,a5,0x20
                | sig128Z[indexWord( 4, 2 )];
 8009bb0:	f6042783          	lw	a5,-160(s0)
 8009bb4:	1782                	slli	a5,a5,0x20
 8009bb6:	9381                	srli	a5,a5,0x20
        sigZ =
 8009bb8:	8fd9                	or	a5,a5,a4
 8009bba:	f8f43c23          	sd	a5,-104(s0)
        if ( ! sigZ ) {
 8009bbe:	f9843783          	ld	a5,-104(s0)
 8009bc2:	e395                	bnez	a5,8009be6 <softfloat_mulAddF64+0x5d8>
            shiftDist = 64;
 8009bc4:	04000793          	li	a5,64
 8009bc8:	f8f43823          	sd	a5,-112(s0)
            sigZ =
                (uint64_t) sig128Z[indexWord( 4, 1 )]<<32
 8009bcc:	f5c42783          	lw	a5,-164(s0)
 8009bd0:	1782                	slli	a5,a5,0x20
 8009bd2:	9381                	srli	a5,a5,0x20
 8009bd4:	02079713          	slli	a4,a5,0x20
                    | sig128Z[indexWord( 4, 0 )];
 8009bd8:	f5842783          	lw	a5,-168(s0)
 8009bdc:	1782                	slli	a5,a5,0x20
 8009bde:	9381                	srli	a5,a5,0x20
            sigZ =
 8009be0:	8fd9                	or	a5,a5,a4
 8009be2:	f8f43c23          	sd	a5,-104(s0)
        }
        shiftDist += softfloat_countLeadingZeros64( sigZ ) - 1;
 8009be6:	f9843503          	ld	a0,-104(s0)
 8009bea:	0cf010ef          	jal	ra,800b4b8 <softfloat_countLeadingZeros64>
 8009bee:	87aa                	mv	a5,a0
 8009bf0:	2781                	sext.w	a5,a5
 8009bf2:	37fd                	addiw	a5,a5,-1
 8009bf4:	2781                	sext.w	a5,a5
 8009bf6:	873e                	mv	a4,a5
 8009bf8:	f9043783          	ld	a5,-112(s0)
 8009bfc:	97ba                	add	a5,a5,a4
 8009bfe:	f8f43823          	sd	a5,-112(s0)
        if ( shiftDist ) {
 8009c02:	f9043783          	ld	a5,-112(s0)
 8009c06:	cba1                	beqz	a5,8009c56 <softfloat_mulAddF64+0x648>
            expZ -= shiftDist;
 8009c08:	fa043703          	ld	a4,-96(s0)
 8009c0c:	f9043783          	ld	a5,-112(s0)
 8009c10:	40f707b3          	sub	a5,a4,a5
 8009c14:	faf43023          	sd	a5,-96(s0)
            softfloat_shiftLeft128M( sig128Z, shiftDist, sig128Z );
 8009c18:	f9043783          	ld	a5,-112(s0)
 8009c1c:	0007871b          	sext.w	a4,a5
 8009c20:	f5840693          	addi	a3,s0,-168
 8009c24:	f5840793          	addi	a5,s0,-168
 8009c28:	863a                	mv	a2,a4
 8009c2a:	85be                	mv	a1,a5
 8009c2c:	4511                	li	a0,4
 8009c2e:	02b000ef          	jal	ra,800a458 <softfloat_shiftLeftM>
            sigZ =
                (uint64_t) sig128Z[indexWord( 4, 3 )]<<32
 8009c32:	f6442783          	lw	a5,-156(s0)
 8009c36:	1782                	slli	a5,a5,0x20
 8009c38:	9381                	srli	a5,a5,0x20
 8009c3a:	02079713          	slli	a4,a5,0x20
                    | sig128Z[indexWord( 4, 2 )];
 8009c3e:	f6042783          	lw	a5,-160(s0)
 8009c42:	1782                	slli	a5,a5,0x20
 8009c44:	9381                	srli	a5,a5,0x20
            sigZ =
 8009c46:	8fd9                	or	a5,a5,a4
 8009c48:	f8f43c23          	sd	a5,-104(s0)
 8009c4c:	a031                	j	8009c58 <softfloat_mulAddF64+0x64a>
            goto sigZ;
 8009c4e:	0001                	nop
 8009c50:	a021                	j	8009c58 <softfloat_mulAddF64+0x64a>
                goto sigZ;
 8009c52:	0001                	nop
 8009c54:	a011                	j	8009c58 <softfloat_mulAddF64+0x64a>
        }
    }
 sigZ:
 8009c56:	0001                	nop
    if ( sig128Z[indexWord( 4, 1 )] || sig128Z[indexWord( 4, 0 )] ) sigZ |= 1;
 8009c58:	f5c42783          	lw	a5,-164(s0)
 8009c5c:	e781                	bnez	a5,8009c64 <softfloat_mulAddF64+0x656>
 8009c5e:	f5842783          	lw	a5,-168(s0)
 8009c62:	cb91                	beqz	a5,8009c76 <softfloat_mulAddF64+0x668>
 8009c64:	f9843783          	ld	a5,-104(s0)
 8009c68:	0017e793          	ori	a5,a5,1
 8009c6c:	f8f43c23          	sd	a5,-104(s0)
 8009c70:	a021                	j	8009c78 <softfloat_mulAddF64+0x66a>
                goto roundPack;
 8009c72:	0001                	nop
 8009c74:	a011                	j	8009c78 <softfloat_mulAddF64+0x66a>
 roundPack:
 8009c76:	0001                	nop
    return softfloat_roundPackToF64( signZ, expZ - 1, sigZ );
 8009c78:	fa043783          	ld	a5,-96(s0)
 8009c7c:	fff78713          	addi	a4,a5,-1
 8009c80:	fbf44783          	lbu	a5,-65(s0)
 8009c84:	f9843603          	ld	a2,-104(s0)
 8009c88:	85ba                	mv	a1,a4
 8009c8a:	853e                	mv	a0,a5
 8009c8c:	5f0000ef          	jal	ra,800a27c <softfloat_roundPackToF64>
 8009c90:	87aa                	mv	a5,a0
 8009c92:	a0d5                	j	8009d76 <softfloat_mulAddF64+0x768>
        if ( sigA || ((expB == 0x7FF) && sigB) ) goto propagateNaN_ABC;
 8009c94:	0001                	nop
 8009c96:	a011                	j	8009c9a <softfloat_mulAddF64+0x68c>
        if ( sigB ) goto propagateNaN_ABC;
 8009c98:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 propagateNaN_ABC:
    uiZ = softfloat_propagateNaNF64UI( uiA, uiB );
 8009c9a:	f3043583          	ld	a1,-208(s0)
 8009c9e:	f3843503          	ld	a0,-200(s0)
 8009ca2:	662010ef          	jal	ra,800b304 <softfloat_propagateNaNF64UI>
 8009ca6:	faa43423          	sd	a0,-88(s0)
    goto propagateNaN_ZC;
 8009caa:	a8a1                	j	8009d02 <softfloat_mulAddF64+0x6f4>
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 infProdArg:
    if ( magBits ) {
 8009cac:	fb043783          	ld	a5,-80(s0)
 8009cb0:	cf95                	beqz	a5,8009cec <softfloat_mulAddF64+0x6de>
        uiZ = packToF64UI( signZ, 0x7FF, 0 );
 8009cb2:	fbf44783          	lbu	a5,-65(s0)
 8009cb6:	03f79713          	slli	a4,a5,0x3f
 8009cba:	7ff00793          	li	a5,2047
 8009cbe:	17d2                	slli	a5,a5,0x34
 8009cc0:	97ba                	add	a5,a5,a4
 8009cc2:	faf43423          	sd	a5,-88(s0)
        if ( expC != 0x7FF ) goto uiZ;
 8009cc6:	fc843703          	ld	a4,-56(s0)
 8009cca:	7ff00793          	li	a5,2047
 8009cce:	08f71963          	bne	a4,a5,8009d60 <softfloat_mulAddF64+0x752>
        if ( sigC ) goto propagateNaN_ZC;
 8009cd2:	fc043783          	ld	a5,-64(s0)
 8009cd6:	e78d                	bnez	a5,8009d00 <softfloat_mulAddF64+0x6f2>
        if ( signZ == signC ) goto uiZ;
 8009cd8:	fbf44703          	lbu	a4,-65(s0)
 8009cdc:	f8d44783          	lbu	a5,-115(s0)
 8009ce0:	0ff77713          	andi	a4,a4,255
 8009ce4:	0ff7f793          	andi	a5,a5,255
 8009ce8:	06f70e63          	beq	a4,a5,8009d64 <softfloat_mulAddF64+0x756>
    }
    softfloat_raiseFlags( softfloat_flag_invalid );
 8009cec:	001867f3          	csrrsi	a5,fflags,16
 8009cf0:	f6f43c23          	sd	a5,-136(s0)
    uiZ = defaultNaNF64UI;
 8009cf4:	00fff7b7          	lui	a5,0xfff
 8009cf8:	179e                	slli	a5,a5,0x27
 8009cfa:	faf43423          	sd	a5,-88(s0)
 8009cfe:	a011                	j	8009d02 <softfloat_mulAddF64+0x6f4>
        if ( sigC ) goto propagateNaN_ZC;
 8009d00:	0001                	nop
 propagateNaN_ZC:
    uiZ = softfloat_propagateNaNF64UI( uiZ, uiC );
 8009d02:	f2843583          	ld	a1,-216(s0)
 8009d06:	fa843503          	ld	a0,-88(s0)
 8009d0a:	5fa010ef          	jal	ra,800b304 <softfloat_propagateNaNF64UI>
 8009d0e:	faa43423          	sd	a0,-88(s0)
    goto uiZ;
 8009d12:	a8a1                	j	8009d6a <softfloat_mulAddF64+0x75c>
        if ( ! sigA ) goto zeroProd;
 8009d14:	0001                	nop
 8009d16:	a011                	j	8009d1a <softfloat_mulAddF64+0x70c>
        if ( ! sigB ) goto zeroProd;
 8009d18:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 zeroProd:
    uiZ = uiC;
 8009d1a:	f2843783          	ld	a5,-216(s0)
 8009d1e:	faf43423          	sd	a5,-88(s0)
    if ( ! (expC | sigC) && (signZ != signC) ) {
 8009d22:	fc843703          	ld	a4,-56(s0)
 8009d26:	fc043783          	ld	a5,-64(s0)
 8009d2a:	8fd9                	or	a5,a5,a4
 8009d2c:	ef95                	bnez	a5,8009d68 <softfloat_mulAddF64+0x75a>
 8009d2e:	fbf44703          	lbu	a4,-65(s0)
 8009d32:	f8d44783          	lbu	a5,-115(s0)
 8009d36:	0ff77713          	andi	a4,a4,255
 8009d3a:	0ff7f793          	andi	a5,a5,255
 8009d3e:	02f70563          	beq	a4,a5,8009d68 <softfloat_mulAddF64+0x75a>
 completeCancellation:
 8009d42:	a011                	j	8009d46 <softfloat_mulAddF64+0x738>
                goto completeCancellation;
 8009d44:	0001                	nop
        uiZ =
            packToF64UI(
 8009d46:	8792                	mv	a5,tp
 8009d48:	2781                	sext.w	a5,a5
 8009d4a:	873e                	mv	a4,a5
 8009d4c:	4789                	li	a5,2
 8009d4e:	00f71563          	bne	a4,a5,8009d58 <softfloat_mulAddF64+0x74a>
 8009d52:	57fd                	li	a5,-1
 8009d54:	17fe                	slli	a5,a5,0x3f
 8009d56:	a011                	j	8009d5a <softfloat_mulAddF64+0x74c>
 8009d58:	4781                	li	a5,0
        uiZ =
 8009d5a:	faf43423          	sd	a5,-88(s0)
 8009d5e:	a031                	j	8009d6a <softfloat_mulAddF64+0x75c>
        if ( expC != 0x7FF ) goto uiZ;
 8009d60:	0001                	nop
 8009d62:	a021                	j	8009d6a <softfloat_mulAddF64+0x75c>
        if ( signZ == signC ) goto uiZ;
 8009d64:	0001                	nop
 8009d66:	a011                	j	8009d6a <softfloat_mulAddF64+0x75c>
                (softfloat_roundingMode == softfloat_round_min), 0, 0 );
    }
 uiZ:
 8009d68:	0001                	nop
    uZ.ui = uiZ;
 8009d6a:	fa843783          	ld	a5,-88(s0)
 8009d6e:	f4f43023          	sd	a5,-192(s0)
    return uZ.f;
 8009d72:	f4043783          	ld	a5,-192(s0)

}
 8009d76:	853e                	mv	a0,a5
 8009d78:	60ee                	ld	ra,216(sp)
 8009d7a:	644e                	ld	s0,208(sp)
 8009d7c:	612d                	addi	sp,sp,224
 8009d7e:	8082                	ret

0000000008009d80 <softfloat_negXM>:
#include "primitiveTypes.h"

#ifndef softfloat_negXM

void softfloat_negXM( uint_fast8_t size_words, uint32_t *zPtr )
{
 8009d80:	7179                	addi	sp,sp,-48
 8009d82:	f422                	sd	s0,40(sp)
 8009d84:	1800                	addi	s0,sp,48
 8009d86:	87aa                	mv	a5,a0
 8009d88:	fcb43823          	sd	a1,-48(s0)
 8009d8c:	fcf40fa3          	sb	a5,-33(s0)
    unsigned int index, lastIndex;
    uint_fast8_t carry;
    uint32_t word;

    index = indexWordLo( size_words );
 8009d90:	fe042623          	sw	zero,-20(s0)
    lastIndex = indexWordHi( size_words );
 8009d94:	fdf44783          	lbu	a5,-33(s0)
 8009d98:	2781                	sext.w	a5,a5
 8009d9a:	37fd                	addiw	a5,a5,-1
 8009d9c:	2781                	sext.w	a5,a5
 8009d9e:	fef42223          	sw	a5,-28(s0)
    carry = 1;
 8009da2:	4785                	li	a5,1
 8009da4:	fef405a3          	sb	a5,-21(s0)
    for (;;) {
        word = ~zPtr[index] + carry;
 8009da8:	feb44783          	lbu	a5,-21(s0)
 8009dac:	0007871b          	sext.w	a4,a5
 8009db0:	fec46783          	lwu	a5,-20(s0)
 8009db4:	078a                	slli	a5,a5,0x2
 8009db6:	fd043683          	ld	a3,-48(s0)
 8009dba:	97b6                	add	a5,a5,a3
 8009dbc:	439c                	lw	a5,0(a5)
 8009dbe:	40f707bb          	subw	a5,a4,a5
 8009dc2:	2781                	sext.w	a5,a5
 8009dc4:	37fd                	addiw	a5,a5,-1
 8009dc6:	fef42023          	sw	a5,-32(s0)
        zPtr[index] = word;
 8009dca:	fec46783          	lwu	a5,-20(s0)
 8009dce:	078a                	slli	a5,a5,0x2
 8009dd0:	fd043703          	ld	a4,-48(s0)
 8009dd4:	97ba                	add	a5,a5,a4
 8009dd6:	fe042703          	lw	a4,-32(s0)
 8009dda:	c398                	sw	a4,0(a5)
        if ( index == lastIndex ) break;
 8009ddc:	fec42703          	lw	a4,-20(s0)
 8009de0:	fe442783          	lw	a5,-28(s0)
 8009de4:	2701                	sext.w	a4,a4
 8009de6:	2781                	sext.w	a5,a5
 8009de8:	00f70e63          	beq	a4,a5,8009e04 <softfloat_negXM+0x84>
        index += wordIncr;
 8009dec:	fec42783          	lw	a5,-20(s0)
 8009df0:	2785                	addiw	a5,a5,1
 8009df2:	fef42623          	sw	a5,-20(s0)
        if ( word ) carry = 0;
 8009df6:	fe042783          	lw	a5,-32(s0)
 8009dfa:	2781                	sext.w	a5,a5
 8009dfc:	d7d5                	beqz	a5,8009da8 <softfloat_negXM+0x28>
 8009dfe:	fe0405a3          	sb	zero,-21(s0)
        word = ~zPtr[index] + carry;
 8009e02:	b75d                	j	8009da8 <softfloat_negXM+0x28>
        if ( index == lastIndex ) break;
 8009e04:	0001                	nop
    }

}
 8009e06:	0001                	nop
 8009e08:	7422                	ld	s0,40(sp)
 8009e0a:	6145                	addi	sp,sp,48
 8009e0c:	8082                	ret

0000000008009e0e <softfloat_normSubnormalF32Sig>:
#include <stdint.h>
#include "platform.h"
#include "internals.h"

struct exp16_sig32 softfloat_normSubnormalF32Sig( uint_fast32_t sig )
{
 8009e0e:	711d                	addi	sp,sp,-96
 8009e10:	ec86                	sd	ra,88(sp)
 8009e12:	e8a2                	sd	s0,80(sp)
 8009e14:	e4ca                	sd	s2,72(sp)
 8009e16:	e0ce                	sd	s3,64(sp)
 8009e18:	1080                	addi	s0,sp,96
 8009e1a:	faa43423          	sd	a0,-88(s0)
    int_fast8_t shiftDist;
    struct exp16_sig32 z;

    shiftDist = softfloat_countLeadingZeros32( sig ) - 8;
 8009e1e:	fa843783          	ld	a5,-88(s0)
 8009e22:	2781                	sext.w	a5,a5
 8009e24:	853e                	mv	a0,a5
 8009e26:	60a010ef          	jal	ra,800b430 <softfloat_countLeadingZeros32>
 8009e2a:	87aa                	mv	a5,a0
 8009e2c:	37e1                	addiw	a5,a5,-8
 8009e2e:	0ff7f793          	andi	a5,a5,255
 8009e32:	fcf40fa3          	sb	a5,-33(s0)
    z.exp = 1 - shiftDist;
 8009e36:	fdf40783          	lb	a5,-33(s0)
 8009e3a:	2781                	sext.w	a5,a5
 8009e3c:	4705                	li	a4,1
 8009e3e:	40f707bb          	subw	a5,a4,a5
 8009e42:	2781                	sext.w	a5,a5
 8009e44:	faf43c23          	sd	a5,-72(s0)
    z.sig = sig<<shiftDist;
 8009e48:	fdf40783          	lb	a5,-33(s0)
 8009e4c:	2781                	sext.w	a5,a5
 8009e4e:	873e                	mv	a4,a5
 8009e50:	fa843783          	ld	a5,-88(s0)
 8009e54:	00e797b3          	sll	a5,a5,a4
 8009e58:	fcf43023          	sd	a5,-64(s0)
    return z;
 8009e5c:	fb843783          	ld	a5,-72(s0)
 8009e60:	fcf43423          	sd	a5,-56(s0)
 8009e64:	fc043783          	ld	a5,-64(s0)
 8009e68:	fcf43823          	sd	a5,-48(s0)
 8009e6c:	4701                	li	a4,0
 8009e6e:	fc843703          	ld	a4,-56(s0)
 8009e72:	4781                	li	a5,0
 8009e74:	fd043783          	ld	a5,-48(s0)
 8009e78:	893a                	mv	s2,a4
 8009e7a:	89be                	mv	s3,a5
 8009e7c:	87ca                	mv	a5,s2
 8009e7e:	884e                	mv	a6,s3

}
 8009e80:	853e                	mv	a0,a5
 8009e82:	85c2                	mv	a1,a6
 8009e84:	60e6                	ld	ra,88(sp)
 8009e86:	6446                	ld	s0,80(sp)
 8009e88:	6926                	ld	s2,72(sp)
 8009e8a:	6986                	ld	s3,64(sp)
 8009e8c:	6125                	addi	sp,sp,96
 8009e8e:	8082                	ret

0000000008009e90 <softfloat_normSubnormalF64Sig>:
#include <stdint.h>
#include "platform.h"
#include "internals.h"

struct exp16_sig64 softfloat_normSubnormalF64Sig( uint_fast64_t sig )
{
 8009e90:	711d                	addi	sp,sp,-96
 8009e92:	ec86                	sd	ra,88(sp)
 8009e94:	e8a2                	sd	s0,80(sp)
 8009e96:	e4ca                	sd	s2,72(sp)
 8009e98:	e0ce                	sd	s3,64(sp)
 8009e9a:	1080                	addi	s0,sp,96
 8009e9c:	faa43423          	sd	a0,-88(s0)
    int_fast8_t shiftDist;
    struct exp16_sig64 z;

    shiftDist = softfloat_countLeadingZeros64( sig ) - 11;
 8009ea0:	fa843503          	ld	a0,-88(s0)
 8009ea4:	614010ef          	jal	ra,800b4b8 <softfloat_countLeadingZeros64>
 8009ea8:	87aa                	mv	a5,a0
 8009eaa:	37d5                	addiw	a5,a5,-11
 8009eac:	0ff7f793          	andi	a5,a5,255
 8009eb0:	fcf40fa3          	sb	a5,-33(s0)
    z.exp = 1 - shiftDist;
 8009eb4:	fdf40783          	lb	a5,-33(s0)
 8009eb8:	2781                	sext.w	a5,a5
 8009eba:	4705                	li	a4,1
 8009ebc:	40f707bb          	subw	a5,a4,a5
 8009ec0:	2781                	sext.w	a5,a5
 8009ec2:	faf43c23          	sd	a5,-72(s0)
    z.sig = sig<<shiftDist;
 8009ec6:	fdf40783          	lb	a5,-33(s0)
 8009eca:	2781                	sext.w	a5,a5
 8009ecc:	873e                	mv	a4,a5
 8009ece:	fa843783          	ld	a5,-88(s0)
 8009ed2:	00e797b3          	sll	a5,a5,a4
 8009ed6:	fcf43023          	sd	a5,-64(s0)
    return z;
 8009eda:	fb843783          	ld	a5,-72(s0)
 8009ede:	fcf43423          	sd	a5,-56(s0)
 8009ee2:	fc043783          	ld	a5,-64(s0)
 8009ee6:	fcf43823          	sd	a5,-48(s0)
 8009eea:	4701                	li	a4,0
 8009eec:	fc843703          	ld	a4,-56(s0)
 8009ef0:	4781                	li	a5,0
 8009ef2:	fd043783          	ld	a5,-48(s0)
 8009ef6:	893a                	mv	s2,a4
 8009ef8:	89be                	mv	s3,a5
 8009efa:	87ca                	mv	a5,s2
 8009efc:	884e                	mv	a6,s3

}
 8009efe:	853e                	mv	a0,a5
 8009f00:	85c2                	mv	a1,a6
 8009f02:	60e6                	ld	ra,88(sp)
 8009f04:	6446                	ld	s0,80(sp)
 8009f06:	6926                	ld	s2,72(sp)
 8009f08:	6986                	ld	s3,64(sp)
 8009f0a:	6125                	addi	sp,sp,96
 8009f0c:	8082                	ret

0000000008009f0e <softfloat_roundMToUI64>:
#include "softfloat.h"

uint_fast64_t
 softfloat_roundMToUI64(
     bool sign, uint32_t *extSigPtr, uint_fast8_t roundingMode, bool exact )
{
 8009f0e:	7139                	addi	sp,sp,-64
 8009f10:	fc22                	sd	s0,56(sp)
 8009f12:	0080                	addi	s0,sp,64
 8009f14:	87aa                	mv	a5,a0
 8009f16:	fcb43023          	sd	a1,-64(s0)
 8009f1a:	8736                	mv	a4,a3
 8009f1c:	fcf407a3          	sb	a5,-49(s0)
 8009f20:	87b2                	mv	a5,a2
 8009f22:	fcf40723          	sb	a5,-50(s0)
 8009f26:	87ba                	mv	a5,a4
 8009f28:	fcf406a3          	sb	a5,-51(s0)
    uint32_t sigExtra;

    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    sig =
        (uint64_t) extSigPtr[indexWord( 3, 2 )]<<32
 8009f2c:	fc043783          	ld	a5,-64(s0)
 8009f30:	07a1                	addi	a5,a5,8
 8009f32:	439c                	lw	a5,0(a5)
 8009f34:	1782                	slli	a5,a5,0x20
 8009f36:	9381                	srli	a5,a5,0x20
 8009f38:	02079713          	slli	a4,a5,0x20
            | extSigPtr[indexWord( 3, 1 )];
 8009f3c:	fc043783          	ld	a5,-64(s0)
 8009f40:	0791                	addi	a5,a5,4
 8009f42:	439c                	lw	a5,0(a5)
 8009f44:	1782                	slli	a5,a5,0x20
 8009f46:	9381                	srli	a5,a5,0x20
    sig =
 8009f48:	8fd9                	or	a5,a5,a4
 8009f4a:	fef43423          	sd	a5,-24(s0)
    sigExtra = extSigPtr[indexWordLo( 3 )];
 8009f4e:	fc043783          	ld	a5,-64(s0)
 8009f52:	439c                	lw	a5,0(a5)
 8009f54:	fef42223          	sw	a5,-28(s0)
    if (
 8009f58:	fce44783          	lbu	a5,-50(s0)
 8009f5c:	0ff7f713          	andi	a4,a5,255
 8009f60:	4791                	li	a5,4
 8009f62:	00f70763          	beq	a4,a5,8009f70 <softfloat_roundMToUI64+0x62>
        (roundingMode == softfloat_round_near_maxMag)
            || (roundingMode == softfloat_round_near_even)
 8009f66:	fce44783          	lbu	a5,-50(s0)
 8009f6a:	0ff7f793          	andi	a5,a5,255
 8009f6e:	e791                	bnez	a5,8009f7a <softfloat_roundMToUI64+0x6c>
    ) {
        if ( 0x80000000 <= sigExtra ) goto increment;
 8009f70:	fe442783          	lw	a5,-28(s0)
 8009f74:	0607de63          	bgez	a5,8009ff0 <softfloat_roundMToUI64+0xe2>
 8009f78:	a091                	j	8009fbc <softfloat_roundMToUI64+0xae>
    } else {
        if ( sign ) {
 8009f7a:	fcf44783          	lbu	a5,-49(s0)
 8009f7e:	0ff7f793          	andi	a5,a5,255
 8009f82:	c38d                	beqz	a5,8009fa4 <softfloat_roundMToUI64+0x96>
            if ( !(sig | sigExtra) ) return 0;
 8009f84:	fe446703          	lwu	a4,-28(s0)
 8009f88:	fe843783          	ld	a5,-24(s0)
 8009f8c:	8fd9                	or	a5,a5,a4
 8009f8e:	e399                	bnez	a5,8009f94 <softfloat_roundMToUI64+0x86>
 8009f90:	4781                	li	a5,0
 8009f92:	a075                	j	800a03e <softfloat_roundMToUI64+0x130>
            if ( roundingMode == softfloat_round_min ) goto invalid;
 8009f94:	fce44783          	lbu	a5,-50(s0)
 8009f98:	0ff7f713          	andi	a4,a5,255
 8009f9c:	4789                	li	a5,2
 8009f9e:	04f71963          	bne	a4,a5,8009ff0 <softfloat_roundMToUI64+0xe2>
 8009fa2:	a051                	j	800a026 <softfloat_roundMToUI64+0x118>
#ifdef SOFTFLOAT_ROUND_ODD
            if ( roundingMode == softfloat_round_odd ) goto invalid;
#endif
        } else {
            if ( (roundingMode == softfloat_round_max) && sigExtra ) {
 8009fa4:	fce44783          	lbu	a5,-50(s0)
 8009fa8:	0ff7f713          	andi	a4,a5,255
 8009fac:	478d                	li	a5,3
 8009fae:	04f71163          	bne	a4,a5,8009ff0 <softfloat_roundMToUI64+0xe2>
 8009fb2:	fe442783          	lw	a5,-28(s0)
 8009fb6:	2781                	sext.w	a5,a5
 8009fb8:	cf85                	beqz	a5,8009ff0 <softfloat_roundMToUI64+0xe2>
 increment:
 8009fba:	0001                	nop
                ++sig;
 8009fbc:	fe843783          	ld	a5,-24(s0)
 8009fc0:	0785                	addi	a5,a5,1
 8009fc2:	fef43423          	sd	a5,-24(s0)
                if ( !sig ) goto invalid;
 8009fc6:	fe843783          	ld	a5,-24(s0)
 8009fca:	cbb9                	beqz	a5,800a020 <softfloat_roundMToUI64+0x112>
                if (
 8009fcc:	fe442783          	lw	a5,-28(s0)
 8009fd0:	0007871b          	sext.w	a4,a5
 8009fd4:	800007b7          	lui	a5,0x80000
 8009fd8:	00f71c63          	bne	a4,a5,8009ff0 <softfloat_roundMToUI64+0xe2>
                    (sigExtra == 0x80000000)
                        && (roundingMode == softfloat_round_near_even)
 8009fdc:	fce44783          	lbu	a5,-50(s0)
 8009fe0:	0ff7f793          	andi	a5,a5,255
 8009fe4:	e791                	bnez	a5,8009ff0 <softfloat_roundMToUI64+0xe2>
                ) {
                    sig &= ~(uint_fast64_t) 1;
 8009fe6:	fe843783          	ld	a5,-24(s0)
 8009fea:	9bf9                	andi	a5,a5,-2
 8009fec:	fef43423          	sd	a5,-24(s0)
                }
            }
        }
    }
    if ( sign && sig ) goto invalid;
 8009ff0:	fcf44783          	lbu	a5,-49(s0)
 8009ff4:	0ff7f793          	andi	a5,a5,255
 8009ff8:	c781                	beqz	a5,800a000 <softfloat_roundMToUI64+0xf2>
 8009ffa:	fe843783          	ld	a5,-24(s0)
 8009ffe:	e39d                	bnez	a5,800a024 <softfloat_roundMToUI64+0x116>
    if ( sigExtra ) {
 800a000:	fe442783          	lw	a5,-28(s0)
 800a004:	2781                	sext.w	a5,a5
 800a006:	cb91                	beqz	a5,800a01a <softfloat_roundMToUI64+0x10c>
#ifdef SOFTFLOAT_ROUND_ODD
        if ( roundingMode == softfloat_round_odd ) sig |= 1;
#endif
        if ( exact ) softfloat_raiseFlags( softfloat_flag_inexact );
 800a008:	fcd44783          	lbu	a5,-51(s0)
 800a00c:	0ff7f793          	andi	a5,a5,255
 800a010:	c789                	beqz	a5,800a01a <softfloat_roundMToUI64+0x10c>
 800a012:	0010e7f3          	csrrsi	a5,fflags,1
 800a016:	fcf43c23          	sd	a5,-40(s0)
    }
    return sig;
 800a01a:	fe843783          	ld	a5,-24(s0)
 800a01e:	a005                	j	800a03e <softfloat_roundMToUI64+0x130>
                if ( !sig ) goto invalid;
 800a020:	0001                	nop
 800a022:	a011                	j	800a026 <softfloat_roundMToUI64+0x118>
    if ( sign && sig ) goto invalid;
 800a024:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 invalid:
    softfloat_raiseFlags( softfloat_flag_invalid );
 800a026:	001867f3          	csrrsi	a5,fflags,16
 800a02a:	fcf43823          	sd	a5,-48(s0)
    return sign ? ui64_fromNegOverflow : ui64_fromPosOverflow;
 800a02e:	fcf44783          	lbu	a5,-49(s0)
 800a032:	0ff7f793          	andi	a5,a5,255
 800a036:	c399                	beqz	a5,800a03c <softfloat_roundMToUI64+0x12e>
 800a038:	4781                	li	a5,0
 800a03a:	a011                	j	800a03e <softfloat_roundMToUI64+0x130>
 800a03c:	57fd                	li	a5,-1

}
 800a03e:	853e                	mv	a0,a5
 800a040:	7462                	ld	s0,56(sp)
 800a042:	6121                	addi	sp,sp,64
 800a044:	8082                	ret

000000000800a046 <softfloat_roundPackToF32>:
#include "internals.h"
#include "softfloat.h"

float32_t
 softfloat_roundPackToF32( bool sign, int_fast16_t exp, uint_fast32_t sig )
{
 800a046:	7159                	addi	sp,sp,-112
 800a048:	f486                	sd	ra,104(sp)
 800a04a:	f0a2                	sd	s0,96(sp)
 800a04c:	1880                	addi	s0,sp,112
 800a04e:	87aa                	mv	a5,a0
 800a050:	fab43023          	sd	a1,-96(s0)
 800a054:	f8c43c23          	sd	a2,-104(s0)
 800a058:	faf407a3          	sb	a5,-81(s0)
    uint_fast32_t uiZ;
    union ui32_f32 uZ;

    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    roundingMode = softfloat_roundingMode;
 800a05c:	8792                	mv	a5,tp
 800a05e:	fcf40fa3          	sb	a5,-33(s0)
    roundNearEven = (roundingMode == softfloat_round_near_even);
 800a062:	fdf44783          	lbu	a5,-33(s0)
 800a066:	2781                	sext.w	a5,a5
 800a068:	0017b793          	seqz	a5,a5
 800a06c:	fcf40f23          	sb	a5,-34(s0)
    roundIncrement = 0x40;
 800a070:	04000793          	li	a5,64
 800a074:	fef407a3          	sb	a5,-17(s0)
    if ( ! roundNearEven && (roundingMode != softfloat_round_near_maxMag) ) {
 800a078:	fde44783          	lbu	a5,-34(s0)
 800a07c:	0017c793          	xori	a5,a5,1
 800a080:	0ff7f793          	andi	a5,a5,255
 800a084:	cf95                	beqz	a5,800a0c0 <softfloat_roundPackToF32+0x7a>
 800a086:	fdf44783          	lbu	a5,-33(s0)
 800a08a:	0ff7f713          	andi	a4,a5,255
 800a08e:	4791                	li	a5,4
 800a090:	02f70863          	beq	a4,a5,800a0c0 <softfloat_roundPackToF32+0x7a>
        roundIncrement =
            (roundingMode
                 == (sign ? softfloat_round_min : softfloat_round_max))
 800a094:	fdf44783          	lbu	a5,-33(s0)
 800a098:	0007869b          	sext.w	a3,a5
 800a09c:	faf44783          	lbu	a5,-81(s0)
 800a0a0:	0ff7f793          	andi	a5,a5,255
 800a0a4:	c399                	beqz	a5,800a0aa <softfloat_roundPackToF32+0x64>
 800a0a6:	4789                	li	a5,2
 800a0a8:	a011                	j	800a0ac <softfloat_roundPackToF32+0x66>
 800a0aa:	478d                	li	a5,3
        roundIncrement =
 800a0ac:	873e                	mv	a4,a5
 800a0ae:	87b6                	mv	a5,a3
 800a0b0:	00f71563          	bne	a4,a5,800a0ba <softfloat_roundPackToF32+0x74>
 800a0b4:	07f00793          	li	a5,127
 800a0b8:	a011                	j	800a0bc <softfloat_roundPackToF32+0x76>
 800a0ba:	4781                	li	a5,0
 800a0bc:	fef407a3          	sb	a5,-17(s0)
                ? 0x7F
                : 0;
    }
    roundBits = sig & 0x7F;
 800a0c0:	f9843783          	ld	a5,-104(s0)
 800a0c4:	0ff7f793          	andi	a5,a5,255
 800a0c8:	07f7f793          	andi	a5,a5,127
 800a0cc:	fef40723          	sb	a5,-18(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( 0xFD <= (unsigned int) exp ) {
 800a0d0:	fa043783          	ld	a5,-96(s0)
 800a0d4:	2781                	sext.w	a5,a5
 800a0d6:	873e                	mv	a4,a5
 800a0d8:	0fc00793          	li	a5,252
 800a0dc:	0ee7fc63          	bleu	a4,a5,800a1d4 <softfloat_roundPackToF32+0x18e>
        if ( exp < 0 ) {
 800a0e0:	fa043783          	ld	a5,-96(s0)
 800a0e4:	0807d763          	bgez	a5,800a172 <softfloat_roundPackToF32+0x12c>
            /*----------------------------------------------------------------
            *----------------------------------------------------------------*/
            isTiny =
                (softfloat_detectTininess == softfloat_tininess_beforeRounding)
                    || (exp < -1) || (sig + roundIncrement < 0x80000000);
 800a0e8:	fa043703          	ld	a4,-96(s0)
 800a0ec:	57fd                	li	a5,-1
 800a0ee:	00f74d63          	blt	a4,a5,800a108 <softfloat_roundPackToF32+0xc2>
 800a0f2:	fef44703          	lbu	a4,-17(s0)
 800a0f6:	f9843783          	ld	a5,-104(s0)
 800a0fa:	973e                	add	a4,a4,a5
 800a0fc:	800007b7          	lui	a5,0x80000
 800a100:	fff7c793          	not	a5,a5
 800a104:	00e7e463          	bltu	a5,a4,800a10c <softfloat_roundPackToF32+0xc6>
 800a108:	4785                	li	a5,1
 800a10a:	a011                	j	800a10e <softfloat_roundPackToF32+0xc8>
 800a10c:	4781                	li	a5,0
            isTiny =
 800a10e:	fcf40ea3          	sb	a5,-35(s0)
 800a112:	fdd44783          	lbu	a5,-35(s0)
 800a116:	8b85                	andi	a5,a5,1
 800a118:	fcf40ea3          	sb	a5,-35(s0)
            sig = softfloat_shiftRightJam32( sig, -exp );
 800a11c:	f9843783          	ld	a5,-104(s0)
 800a120:	0007871b          	sext.w	a4,a5
 800a124:	fa043783          	ld	a5,-96(s0)
 800a128:	40f007b3          	neg	a5,a5
 800a12c:	85be                	mv	a1,a5
 800a12e:	853a                	mv	a0,a4
 800a130:	46c000ef          	jal	ra,800a59c <softfloat_shiftRightJam32>
 800a134:	87aa                	mv	a5,a0
 800a136:	2781                	sext.w	a5,a5
 800a138:	1782                	slli	a5,a5,0x20
 800a13a:	9381                	srli	a5,a5,0x20
 800a13c:	f8f43c23          	sd	a5,-104(s0)
            exp = 0;
 800a140:	fa043023          	sd	zero,-96(s0)
            roundBits = sig & 0x7F;
 800a144:	f9843783          	ld	a5,-104(s0)
 800a148:	0ff7f793          	andi	a5,a5,255
 800a14c:	07f7f793          	andi	a5,a5,127
 800a150:	fef40723          	sb	a5,-18(s0)
            if ( isTiny && roundBits ) {
 800a154:	fdd44783          	lbu	a5,-35(s0)
 800a158:	0ff7f793          	andi	a5,a5,255
 800a15c:	cfa5                	beqz	a5,800a1d4 <softfloat_roundPackToF32+0x18e>
 800a15e:	fee44783          	lbu	a5,-18(s0)
 800a162:	0ff7f793          	andi	a5,a5,255
 800a166:	c7bd                	beqz	a5,800a1d4 <softfloat_roundPackToF32+0x18e>
                softfloat_raiseFlags( softfloat_flag_underflow );
 800a168:	001167f3          	csrrsi	a5,fflags,2
 800a16c:	fcf43823          	sd	a5,-48(s0)
 800a170:	a095                	j	800a1d4 <softfloat_roundPackToF32+0x18e>
            }
        } else if ( (0xFD < exp) || (0x80000000 <= sig + roundIncrement) ) {
 800a172:	fa043703          	ld	a4,-96(s0)
 800a176:	0fd00793          	li	a5,253
 800a17a:	00e7cd63          	blt	a5,a4,800a194 <softfloat_roundPackToF32+0x14e>
 800a17e:	fef44703          	lbu	a4,-17(s0)
 800a182:	f9843783          	ld	a5,-104(s0)
 800a186:	973e                	add	a4,a4,a5
 800a188:	800007b7          	lui	a5,0x80000
 800a18c:	fff7c793          	not	a5,a5
 800a190:	04e7f263          	bleu	a4,a5,800a1d4 <softfloat_roundPackToF32+0x18e>
            /*----------------------------------------------------------------
            *----------------------------------------------------------------*/
            softfloat_raiseFlags(
 800a194:	0012e7f3          	csrrsi	a5,fflags,5
 800a198:	fcf43423          	sd	a5,-56(s0)
                softfloat_flag_overflow | softfloat_flag_inexact );
            uiZ = packToF32UI( sign, 0xFF, 0 ) - ! roundIncrement;
 800a19c:	faf44783          	lbu	a5,-81(s0)
 800a1a0:	2781                	sext.w	a5,a5
 800a1a2:	01f7979b          	slliw	a5,a5,0x1f
 800a1a6:	0007871b          	sext.w	a4,a5
 800a1aa:	fef44783          	lbu	a5,-17(s0)
 800a1ae:	2781                	sext.w	a5,a5
 800a1b0:	0017b793          	seqz	a5,a5
 800a1b4:	0ff7f793          	andi	a5,a5,255
 800a1b8:	2781                	sext.w	a5,a5
 800a1ba:	40f707bb          	subw	a5,a4,a5
 800a1be:	0007871b          	sext.w	a4,a5
 800a1c2:	7f8007b7          	lui	a5,0x7f800
 800a1c6:	9fb9                	addw	a5,a5,a4
 800a1c8:	2781                	sext.w	a5,a5
 800a1ca:	1782                	slli	a5,a5,0x20
 800a1cc:	9381                	srli	a5,a5,0x20
 800a1ce:	fef43023          	sd	a5,-32(s0)
            goto uiZ;
 800a1d2:	a849                	j	800a264 <softfloat_roundPackToF32+0x21e>
        }
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    sig = (sig + roundIncrement)>>7;
 800a1d4:	fef44703          	lbu	a4,-17(s0)
 800a1d8:	f9843783          	ld	a5,-104(s0)
 800a1dc:	97ba                	add	a5,a5,a4
 800a1de:	839d                	srli	a5,a5,0x7
 800a1e0:	f8f43c23          	sd	a5,-104(s0)
    if ( roundBits ) {
 800a1e4:	fee44783          	lbu	a5,-18(s0)
 800a1e8:	0ff7f793          	andi	a5,a5,255
 800a1ec:	c789                	beqz	a5,800a1f6 <softfloat_roundPackToF32+0x1b0>
        softfloat_raiseFlags( softfloat_flag_inexact );
 800a1ee:	0010e7f3          	csrrsi	a5,fflags,1
 800a1f2:	fcf43023          	sd	a5,-64(s0)
            sig |= 1;
            goto packReturn;
        }
#endif
    }
    sig &= ~(uint_fast32_t) (! (roundBits ^ 0x40) & roundNearEven);
 800a1f6:	fee44783          	lbu	a5,-18(s0)
 800a1fa:	0007871b          	sext.w	a4,a5
 800a1fe:	04000793          	li	a5,64
 800a202:	40f707b3          	sub	a5,a4,a5
 800a206:	0017b793          	seqz	a5,a5
 800a20a:	0ff7f793          	andi	a5,a5,255
 800a20e:	0007871b          	sext.w	a4,a5
 800a212:	fde44783          	lbu	a5,-34(s0)
 800a216:	2781                	sext.w	a5,a5
 800a218:	8ff9                	and	a5,a5,a4
 800a21a:	2781                	sext.w	a5,a5
 800a21c:	fff7c793          	not	a5,a5
 800a220:	f9843703          	ld	a4,-104(s0)
 800a224:	8ff9                	and	a5,a5,a4
 800a226:	f8f43c23          	sd	a5,-104(s0)
    if ( ! sig ) exp = 0;
 800a22a:	f9843783          	ld	a5,-104(s0)
 800a22e:	e781                	bnez	a5,800a236 <softfloat_roundPackToF32+0x1f0>
 800a230:	fa043023          	sd	zero,-96(s0)
 800a234:	a011                	j	800a238 <softfloat_roundPackToF32+0x1f2>
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 packReturn:
 800a236:	0001                	nop
    uiZ = packToF32UI( sign, exp, sig );
 800a238:	faf44783          	lbu	a5,-81(s0)
 800a23c:	2781                	sext.w	a5,a5
 800a23e:	01f7979b          	slliw	a5,a5,0x1f
 800a242:	0007871b          	sext.w	a4,a5
 800a246:	fa043783          	ld	a5,-96(s0)
 800a24a:	2781                	sext.w	a5,a5
 800a24c:	0177979b          	slliw	a5,a5,0x17
 800a250:	2781                	sext.w	a5,a5
 800a252:	9fb9                	addw	a5,a5,a4
 800a254:	2781                	sext.w	a5,a5
 800a256:	1782                	slli	a5,a5,0x20
 800a258:	9381                	srli	a5,a5,0x20
 800a25a:	f9843703          	ld	a4,-104(s0)
 800a25e:	97ba                	add	a5,a5,a4
 800a260:	fef43023          	sd	a5,-32(s0)
 uiZ:
    uZ.ui = uiZ;
 800a264:	fe043783          	ld	a5,-32(s0)
 800a268:	2781                	sext.w	a5,a5
 800a26a:	faf42c23          	sw	a5,-72(s0)
    return uZ.f;
 800a26e:	fb842783          	lw	a5,-72(s0)

}
 800a272:	853e                	mv	a0,a5
 800a274:	70a6                	ld	ra,104(sp)
 800a276:	7406                	ld	s0,96(sp)
 800a278:	6165                	addi	sp,sp,112
 800a27a:	8082                	ret

000000000800a27c <softfloat_roundPackToF64>:
#include "internals.h"
#include "softfloat.h"

float64_t
 softfloat_roundPackToF64( bool sign, int_fast16_t exp, uint_fast64_t sig )
{
 800a27c:	7159                	addi	sp,sp,-112
 800a27e:	f486                	sd	ra,104(sp)
 800a280:	f0a2                	sd	s0,96(sp)
 800a282:	1880                	addi	s0,sp,112
 800a284:	87aa                	mv	a5,a0
 800a286:	fab43023          	sd	a1,-96(s0)
 800a28a:	f8c43c23          	sd	a2,-104(s0)
 800a28e:	faf407a3          	sb	a5,-81(s0)
    uint_fast64_t uiZ;
    union ui64_f64 uZ;

    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    roundingMode = softfloat_roundingMode;
 800a292:	8792                	mv	a5,tp
 800a294:	fcf40ba3          	sb	a5,-41(s0)
    roundNearEven = (roundingMode == softfloat_round_near_even);
 800a298:	fd744783          	lbu	a5,-41(s0)
 800a29c:	2781                	sext.w	a5,a5
 800a29e:	0017b793          	seqz	a5,a5
 800a2a2:	fcf40b23          	sb	a5,-42(s0)
    roundIncrement = 0x200;
 800a2a6:	20000793          	li	a5,512
 800a2aa:	fef43423          	sd	a5,-24(s0)
    if ( ! roundNearEven && (roundingMode != softfloat_round_near_maxMag) ) {
 800a2ae:	fd644783          	lbu	a5,-42(s0)
 800a2b2:	0017c793          	xori	a5,a5,1
 800a2b6:	0ff7f793          	andi	a5,a5,255
 800a2ba:	cf95                	beqz	a5,800a2f6 <softfloat_roundPackToF64+0x7a>
 800a2bc:	fd744783          	lbu	a5,-41(s0)
 800a2c0:	0ff7f713          	andi	a4,a5,255
 800a2c4:	4791                	li	a5,4
 800a2c6:	02f70863          	beq	a4,a5,800a2f6 <softfloat_roundPackToF64+0x7a>
        roundIncrement =
            (roundingMode
                 == (sign ? softfloat_round_min : softfloat_round_max))
 800a2ca:	fd744783          	lbu	a5,-41(s0)
 800a2ce:	0007869b          	sext.w	a3,a5
 800a2d2:	faf44783          	lbu	a5,-81(s0)
 800a2d6:	0ff7f793          	andi	a5,a5,255
 800a2da:	c399                	beqz	a5,800a2e0 <softfloat_roundPackToF64+0x64>
 800a2dc:	4789                	li	a5,2
 800a2de:	a011                	j	800a2e2 <softfloat_roundPackToF64+0x66>
 800a2e0:	478d                	li	a5,3
                ? 0x3FF
                : 0;
 800a2e2:	873e                	mv	a4,a5
 800a2e4:	87b6                	mv	a5,a3
 800a2e6:	00f71563          	bne	a4,a5,800a2f0 <softfloat_roundPackToF64+0x74>
 800a2ea:	3ff00793          	li	a5,1023
 800a2ee:	a011                	j	800a2f2 <softfloat_roundPackToF64+0x76>
 800a2f0:	4781                	li	a5,0
        roundIncrement =
 800a2f2:	fef43423          	sd	a5,-24(s0)
    }
    roundBits = sig & 0x3FF;
 800a2f6:	f9843783          	ld	a5,-104(s0)
 800a2fa:	3ff7f793          	andi	a5,a5,1023
 800a2fe:	fef43023          	sd	a5,-32(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( 0x7FD <= (uint16_t) exp ) {
 800a302:	fa043783          	ld	a5,-96(s0)
 800a306:	17c2                	slli	a5,a5,0x30
 800a308:	93c1                	srli	a5,a5,0x30
 800a30a:	0007871b          	sext.w	a4,a5
 800a30e:	7fc00793          	li	a5,2044
 800a312:	0ae7ff63          	bleu	a4,a5,800a3d0 <softfloat_roundPackToF64+0x154>
        if ( exp < 0 ) {
 800a316:	fa043783          	ld	a5,-96(s0)
 800a31a:	0607d863          	bgez	a5,800a38a <softfloat_roundPackToF64+0x10e>
            /*----------------------------------------------------------------
            *----------------------------------------------------------------*/
            isTiny =
                (softfloat_detectTininess == softfloat_tininess_beforeRounding)
                    || (exp < -1)
                    || (sig + roundIncrement < UINT64_C( 0x8000000000000000 ));
 800a31e:	fa043703          	ld	a4,-96(s0)
 800a322:	57fd                	li	a5,-1
 800a324:	00f74963          	blt	a4,a5,800a336 <softfloat_roundPackToF64+0xba>
 800a328:	f9843703          	ld	a4,-104(s0)
 800a32c:	fe843783          	ld	a5,-24(s0)
 800a330:	97ba                	add	a5,a5,a4
 800a332:	0007c463          	bltz	a5,800a33a <softfloat_roundPackToF64+0xbe>
 800a336:	4785                	li	a5,1
 800a338:	a011                	j	800a33c <softfloat_roundPackToF64+0xc0>
 800a33a:	4781                	li	a5,0
            isTiny =
 800a33c:	fcf40aa3          	sb	a5,-43(s0)
 800a340:	fd544783          	lbu	a5,-43(s0)
 800a344:	8b85                	andi	a5,a5,1
 800a346:	fcf40aa3          	sb	a5,-43(s0)
            sig = softfloat_shiftRightJam64( sig, -exp );
 800a34a:	fa043783          	ld	a5,-96(s0)
 800a34e:	40f007b3          	neg	a5,a5
 800a352:	85be                	mv	a1,a5
 800a354:	f9843503          	ld	a0,-104(s0)
 800a358:	2ba000ef          	jal	ra,800a612 <softfloat_shiftRightJam64>
 800a35c:	f8a43c23          	sd	a0,-104(s0)
            exp = 0;
 800a360:	fa043023          	sd	zero,-96(s0)
            roundBits = sig & 0x3FF;
 800a364:	f9843783          	ld	a5,-104(s0)
 800a368:	3ff7f793          	andi	a5,a5,1023
 800a36c:	fef43023          	sd	a5,-32(s0)
            if ( isTiny && roundBits ) {
 800a370:	fd544783          	lbu	a5,-43(s0)
 800a374:	0ff7f793          	andi	a5,a5,255
 800a378:	cfa1                	beqz	a5,800a3d0 <softfloat_roundPackToF64+0x154>
 800a37a:	fe043783          	ld	a5,-32(s0)
 800a37e:	cba9                	beqz	a5,800a3d0 <softfloat_roundPackToF64+0x154>
                softfloat_raiseFlags( softfloat_flag_underflow );
 800a380:	001167f3          	csrrsi	a5,fflags,2
 800a384:	fcf43423          	sd	a5,-56(s0)
 800a388:	a0a1                	j	800a3d0 <softfloat_roundPackToF64+0x154>
            }
        } else if (
 800a38a:	fa043703          	ld	a4,-96(s0)
 800a38e:	7fd00793          	li	a5,2045
 800a392:	00e7c963          	blt	a5,a4,800a3a4 <softfloat_roundPackToF64+0x128>
            (0x7FD < exp)
                || (UINT64_C( 0x8000000000000000 ) <= sig + roundIncrement)
 800a396:	f9843703          	ld	a4,-104(s0)
 800a39a:	fe843783          	ld	a5,-24(s0)
 800a39e:	97ba                	add	a5,a5,a4
 800a3a0:	0207d863          	bgez	a5,800a3d0 <softfloat_roundPackToF64+0x154>
        ) {
            /*----------------------------------------------------------------
            *----------------------------------------------------------------*/
            softfloat_raiseFlags(
 800a3a4:	0012e7f3          	csrrsi	a5,fflags,5
 800a3a8:	fcf43023          	sd	a5,-64(s0)
                softfloat_flag_overflow | softfloat_flag_inexact );
            uiZ = packToF64UI( sign, 0x7FF, 0 ) - ! roundIncrement;
 800a3ac:	faf44783          	lbu	a5,-81(s0)
 800a3b0:	17fe                	slli	a5,a5,0x3f
 800a3b2:	fe843703          	ld	a4,-24(s0)
 800a3b6:	00173713          	seqz	a4,a4
 800a3ba:	0ff77713          	andi	a4,a4,255
 800a3be:	40e78733          	sub	a4,a5,a4
 800a3c2:	7ff00793          	li	a5,2047
 800a3c6:	17d2                	slli	a5,a5,0x34
 800a3c8:	97ba                	add	a5,a5,a4
 800a3ca:	fcf43c23          	sd	a5,-40(s0)
            goto uiZ;
 800a3ce:	a895                	j	800a442 <softfloat_roundPackToF64+0x1c6>
        }
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    sig = (sig + roundIncrement)>>10;
 800a3d0:	f9843703          	ld	a4,-104(s0)
 800a3d4:	fe843783          	ld	a5,-24(s0)
 800a3d8:	97ba                	add	a5,a5,a4
 800a3da:	83a9                	srli	a5,a5,0xa
 800a3dc:	f8f43c23          	sd	a5,-104(s0)
    if ( roundBits ) {
 800a3e0:	fe043783          	ld	a5,-32(s0)
 800a3e4:	c789                	beqz	a5,800a3ee <softfloat_roundPackToF64+0x172>
        softfloat_raiseFlags( softfloat_flag_inexact );
 800a3e6:	0010e7f3          	csrrsi	a5,fflags,1
 800a3ea:	faf43c23          	sd	a5,-72(s0)
            sig |= 1;
            goto packReturn;
        }
#endif
    }
    sig &= ~(uint_fast64_t) (! (roundBits ^ 0x200) & roundNearEven);
 800a3ee:	fe043783          	ld	a5,-32(s0)
 800a3f2:	e0078793          	addi	a5,a5,-512 # 7f7ffe00 <_payload_end+0x77033e60>
 800a3f6:	0017b793          	seqz	a5,a5
 800a3fa:	0ff7f793          	andi	a5,a5,255
 800a3fe:	0007871b          	sext.w	a4,a5
 800a402:	fd644783          	lbu	a5,-42(s0)
 800a406:	2781                	sext.w	a5,a5
 800a408:	8ff9                	and	a5,a5,a4
 800a40a:	2781                	sext.w	a5,a5
 800a40c:	fff7c793          	not	a5,a5
 800a410:	f9843703          	ld	a4,-104(s0)
 800a414:	8ff9                	and	a5,a5,a4
 800a416:	f8f43c23          	sd	a5,-104(s0)
    if ( ! sig ) exp = 0;
 800a41a:	f9843783          	ld	a5,-104(s0)
 800a41e:	e781                	bnez	a5,800a426 <softfloat_roundPackToF64+0x1aa>
 800a420:	fa043023          	sd	zero,-96(s0)
 800a424:	a011                	j	800a428 <softfloat_roundPackToF64+0x1ac>
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 packReturn:
 800a426:	0001                	nop
    uiZ = packToF64UI( sign, exp, sig );
 800a428:	faf44783          	lbu	a5,-81(s0)
 800a42c:	03f79713          	slli	a4,a5,0x3f
 800a430:	fa043783          	ld	a5,-96(s0)
 800a434:	17d2                	slli	a5,a5,0x34
 800a436:	97ba                	add	a5,a5,a4
 800a438:	f9843703          	ld	a4,-104(s0)
 800a43c:	97ba                	add	a5,a5,a4
 800a43e:	fcf43c23          	sd	a5,-40(s0)
 uiZ:
    uZ.ui = uiZ;
 800a442:	fd843783          	ld	a5,-40(s0)
 800a446:	faf43823          	sd	a5,-80(s0)
    return uZ.f;
 800a44a:	fb043783          	ld	a5,-80(s0)

}
 800a44e:	853e                	mv	a0,a5
 800a450:	70a6                	ld	ra,104(sp)
 800a452:	7406                	ld	s0,96(sp)
 800a454:	6165                	addi	sp,sp,112
 800a456:	8082                	ret

000000000800a458 <softfloat_shiftLeftM>:
     uint_fast8_t size_words,
     const uint32_t *aPtr,
     uint32_t dist,
     uint32_t *zPtr
 )
{
 800a458:	715d                	addi	sp,sp,-80
 800a45a:	e486                	sd	ra,72(sp)
 800a45c:	e0a2                	sd	s0,64(sp)
 800a45e:	0880                	addi	s0,sp,80
 800a460:	87aa                	mv	a5,a0
 800a462:	fcb43023          	sd	a1,-64(s0)
 800a466:	8732                	mv	a4,a2
 800a468:	fad43c23          	sd	a3,-72(s0)
 800a46c:	fcf407a3          	sb	a5,-49(s0)
 800a470:	87ba                	mv	a5,a4
 800a472:	fcf42423          	sw	a5,-56(s0)
    uint32_t wordDist;
    uint_fast8_t innerDist;
    uint32_t *destPtr;
    uint_fast8_t i;

    wordDist = dist>>5;
 800a476:	fc842783          	lw	a5,-56(s0)
 800a47a:	0057d79b          	srliw	a5,a5,0x5
 800a47e:	fef42623          	sw	a5,-20(s0)
    if ( wordDist < size_words ) {
 800a482:	fcf44783          	lbu	a5,-49(s0)
 800a486:	0007871b          	sext.w	a4,a5
 800a48a:	fec42783          	lw	a5,-20(s0)
 800a48e:	2781                	sext.w	a5,a5
 800a490:	0ce7fd63          	bleu	a4,a5,800a56a <softfloat_shiftLeftM+0x112>
        aPtr += indexMultiwordLoBut( size_words, wordDist );
        innerDist = dist & 31;
 800a494:	fc842783          	lw	a5,-56(s0)
 800a498:	0ff7f793          	andi	a5,a5,255
 800a49c:	8bfd                	andi	a5,a5,31
 800a49e:	fcf40f23          	sb	a5,-34(s0)
        if ( innerDist ) {
 800a4a2:	fde44783          	lbu	a5,-34(s0)
 800a4a6:	0ff7f793          	andi	a5,a5,255
 800a4aa:	cf95                	beqz	a5,800a4e6 <softfloat_shiftLeftM+0x8e>
            softfloat_shortShiftLeftM(
 800a4ac:	fec42783          	lw	a5,-20(s0)
 800a4b0:	0ff7f793          	andi	a5,a5,255
 800a4b4:	fcf44703          	lbu	a4,-49(s0)
 800a4b8:	40f707bb          	subw	a5,a4,a5
 800a4bc:	0ff7f513          	andi	a0,a5,255
                size_words - wordDist,
                aPtr,
                innerDist,
                zPtr + indexMultiwordHiBut( size_words, wordDist )
 800a4c0:	fec46783          	lwu	a5,-20(s0)
 800a4c4:	078a                	slli	a5,a5,0x2
            softfloat_shortShiftLeftM(
 800a4c6:	fb843703          	ld	a4,-72(s0)
 800a4ca:	973e                	add	a4,a4,a5
 800a4cc:	fde44783          	lbu	a5,-34(s0)
 800a4d0:	86ba                	mv	a3,a4
 800a4d2:	863e                	mv	a2,a5
 800a4d4:	fc043583          	ld	a1,-64(s0)
 800a4d8:	36a000ef          	jal	ra,800a842 <softfloat_shortShiftLeftM>
            );
            if ( ! wordDist ) return;
 800a4dc:	fec42783          	lw	a5,-20(s0)
 800a4e0:	2781                	sext.w	a5,a5
 800a4e2:	ebc1                	bnez	a5,800a572 <softfloat_shiftLeftM+0x11a>
 800a4e4:	a845                	j	800a594 <softfloat_shiftLeftM+0x13c>
        } else {
            aPtr += indexWordHi( size_words - wordDist );
 800a4e6:	fcf44783          	lbu	a5,-49(s0)
 800a4ea:	0007871b          	sext.w	a4,a5
 800a4ee:	fec42783          	lw	a5,-20(s0)
 800a4f2:	40f707bb          	subw	a5,a4,a5
 800a4f6:	2781                	sext.w	a5,a5
 800a4f8:	37fd                	addiw	a5,a5,-1
 800a4fa:	2781                	sext.w	a5,a5
 800a4fc:	1782                	slli	a5,a5,0x20
 800a4fe:	9381                	srli	a5,a5,0x20
 800a500:	078a                	slli	a5,a5,0x2
 800a502:	fc043703          	ld	a4,-64(s0)
 800a506:	97ba                	add	a5,a5,a4
 800a508:	fcf43023          	sd	a5,-64(s0)
            destPtr = zPtr + indexWordHi( size_words );
 800a50c:	fcf44783          	lbu	a5,-49(s0)
 800a510:	078a                	slli	a5,a5,0x2
 800a512:	17f1                	addi	a5,a5,-4
 800a514:	fb843703          	ld	a4,-72(s0)
 800a518:	97ba                	add	a5,a5,a4
 800a51a:	fef43023          	sd	a5,-32(s0)
            for ( i = size_words - wordDist; i; --i ) {
 800a51e:	fec42783          	lw	a5,-20(s0)
 800a522:	0ff7f793          	andi	a5,a5,255
 800a526:	fcf44703          	lbu	a4,-49(s0)
 800a52a:	40f707bb          	subw	a5,a4,a5
 800a52e:	fcf40fa3          	sb	a5,-33(s0)
 800a532:	a035                	j	800a55e <softfloat_shiftLeftM+0x106>
                *destPtr = *aPtr;
 800a534:	fc043783          	ld	a5,-64(s0)
 800a538:	4398                	lw	a4,0(a5)
 800a53a:	fe043783          	ld	a5,-32(s0)
 800a53e:	c398                	sw	a4,0(a5)
                aPtr -= wordIncr;
 800a540:	fc043783          	ld	a5,-64(s0)
 800a544:	17f1                	addi	a5,a5,-4
 800a546:	fcf43023          	sd	a5,-64(s0)
                destPtr -= wordIncr;
 800a54a:	fe043783          	ld	a5,-32(s0)
 800a54e:	17f1                	addi	a5,a5,-4
 800a550:	fef43023          	sd	a5,-32(s0)
            for ( i = size_words - wordDist; i; --i ) {
 800a554:	fdf44783          	lbu	a5,-33(s0)
 800a558:	37fd                	addiw	a5,a5,-1
 800a55a:	fcf40fa3          	sb	a5,-33(s0)
 800a55e:	fdf44783          	lbu	a5,-33(s0)
 800a562:	0ff7f793          	andi	a5,a5,255
 800a566:	f7f9                	bnez	a5,800a534 <softfloat_shiftLeftM+0xdc>
 800a568:	a029                	j	800a572 <softfloat_shiftLeftM+0x11a>
            }
        }
        zPtr += indexMultiwordLo( size_words, wordDist );
    } else {
        wordDist = size_words;
 800a56a:	fcf44783          	lbu	a5,-49(s0)
 800a56e:	fef42623          	sw	a5,-20(s0)
    }
    do {
        *zPtr++ = 0;
 800a572:	fb843783          	ld	a5,-72(s0)
 800a576:	00478713          	addi	a4,a5,4
 800a57a:	fae43c23          	sd	a4,-72(s0)
 800a57e:	0007a023          	sw	zero,0(a5)
        --wordDist;
 800a582:	fec42783          	lw	a5,-20(s0)
 800a586:	37fd                	addiw	a5,a5,-1
 800a588:	fef42623          	sw	a5,-20(s0)
    } while ( wordDist );
 800a58c:	fec42783          	lw	a5,-20(s0)
 800a590:	2781                	sext.w	a5,a5
 800a592:	f3e5                	bnez	a5,800a572 <softfloat_shiftLeftM+0x11a>

}
 800a594:	60a6                	ld	ra,72(sp)
 800a596:	6406                	ld	s0,64(sp)
 800a598:	6161                	addi	sp,sp,80
 800a59a:	8082                	ret

000000000800a59c <softfloat_shiftRightJam32>:
#include "platform.h"

#ifndef softfloat_shiftRightJam32

uint32_t softfloat_shiftRightJam32( uint32_t a, uint_fast16_t dist )
{
 800a59c:	1101                	addi	sp,sp,-32
 800a59e:	ec22                	sd	s0,24(sp)
 800a5a0:	1000                	addi	s0,sp,32
 800a5a2:	87aa                	mv	a5,a0
 800a5a4:	feb43023          	sd	a1,-32(s0)
 800a5a8:	fef42623          	sw	a5,-20(s0)

    return
        (dist < 31) ? a>>dist | ((uint32_t) (a<<(-dist & 31)) != 0) : (a != 0);
 800a5ac:	fe043703          	ld	a4,-32(s0)
 800a5b0:	47f9                	li	a5,30
 800a5b2:	04e7e263          	bltu	a5,a4,800a5f6 <softfloat_shiftRightJam32+0x5a>
 800a5b6:	fe043783          	ld	a5,-32(s0)
 800a5ba:	2781                	sext.w	a5,a5
 800a5bc:	873e                	mv	a4,a5
 800a5be:	fec42783          	lw	a5,-20(s0)
 800a5c2:	00e7d7bb          	srlw	a5,a5,a4
 800a5c6:	0007871b          	sext.w	a4,a5
 800a5ca:	fe043783          	ld	a5,-32(s0)
 800a5ce:	2781                	sext.w	a5,a5
 800a5d0:	40f007bb          	negw	a5,a5
 800a5d4:	2781                	sext.w	a5,a5
 800a5d6:	8bfd                	andi	a5,a5,31
 800a5d8:	2781                	sext.w	a5,a5
 800a5da:	86be                	mv	a3,a5
 800a5dc:	fec42783          	lw	a5,-20(s0)
 800a5e0:	00d797bb          	sllw	a5,a5,a3
 800a5e4:	2781                	sext.w	a5,a5
 800a5e6:	00f037b3          	snez	a5,a5
 800a5ea:	0ff7f793          	andi	a5,a5,255
 800a5ee:	2781                	sext.w	a5,a5
 800a5f0:	8fd9                	or	a5,a5,a4
 800a5f2:	2781                	sext.w	a5,a5
 800a5f4:	a811                	j	800a608 <softfloat_shiftRightJam32+0x6c>
 800a5f6:	fec42783          	lw	a5,-20(s0)
 800a5fa:	2781                	sext.w	a5,a5
 800a5fc:	00f037b3          	snez	a5,a5
 800a600:	0ff7f793          	andi	a5,a5,255
 800a604:	2781                	sext.w	a5,a5
 800a606:	2781                	sext.w	a5,a5
 800a608:	2781                	sext.w	a5,a5

}
 800a60a:	853e                	mv	a0,a5
 800a60c:	6462                	ld	s0,24(sp)
 800a60e:	6105                	addi	sp,sp,32
 800a610:	8082                	ret

000000000800a612 <softfloat_shiftRightJam64>:
#include "platform.h"

#ifndef softfloat_shiftRightJam64

uint64_t softfloat_shiftRightJam64( uint64_t a, uint_fast32_t dist )
{
 800a612:	1101                	addi	sp,sp,-32
 800a614:	ec22                	sd	s0,24(sp)
 800a616:	1000                	addi	s0,sp,32
 800a618:	fea43423          	sd	a0,-24(s0)
 800a61c:	feb43023          	sd	a1,-32(s0)

    return
        (dist < 63) ? a>>dist | ((uint64_t) (a<<(-dist & 63)) != 0) : (a != 0);
 800a620:	fe043703          	ld	a4,-32(s0)
 800a624:	03e00793          	li	a5,62
 800a628:	02e7ee63          	bltu	a5,a4,800a664 <softfloat_shiftRightJam64+0x52>
 800a62c:	fe043783          	ld	a5,-32(s0)
 800a630:	2781                	sext.w	a5,a5
 800a632:	873e                	mv	a4,a5
 800a634:	fe843783          	ld	a5,-24(s0)
 800a638:	00e7d7b3          	srl	a5,a5,a4
 800a63c:	fe043703          	ld	a4,-32(s0)
 800a640:	2701                	sext.w	a4,a4
 800a642:	40e0073b          	negw	a4,a4
 800a646:	2701                	sext.w	a4,a4
 800a648:	03f77713          	andi	a4,a4,63
 800a64c:	2701                	sext.w	a4,a4
 800a64e:	86ba                	mv	a3,a4
 800a650:	fe843703          	ld	a4,-24(s0)
 800a654:	00d71733          	sll	a4,a4,a3
 800a658:	00e03733          	snez	a4,a4
 800a65c:	0ff77713          	andi	a4,a4,255
 800a660:	8fd9                	or	a5,a5,a4
 800a662:	a801                	j	800a672 <softfloat_shiftRightJam64+0x60>
 800a664:	fe843783          	ld	a5,-24(s0)
 800a668:	00f037b3          	snez	a5,a5
 800a66c:	0ff7f793          	andi	a5,a5,255
 800a670:	2781                	sext.w	a5,a5

}
 800a672:	853e                	mv	a0,a5
 800a674:	6462                	ld	s0,24(sp)
 800a676:	6105                	addi	sp,sp,32
 800a678:	8082                	ret

000000000800a67a <softfloat_shiftRightJamM>:
     uint_fast8_t size_words,
     const uint32_t *aPtr,
     uint32_t dist,
     uint32_t *zPtr
 )
{
 800a67a:	715d                	addi	sp,sp,-80
 800a67c:	e486                	sd	ra,72(sp)
 800a67e:	e0a2                	sd	s0,64(sp)
 800a680:	0880                	addi	s0,sp,80
 800a682:	87aa                	mv	a5,a0
 800a684:	fcb43023          	sd	a1,-64(s0)
 800a688:	8732                	mv	a4,a2
 800a68a:	fad43c23          	sd	a3,-72(s0)
 800a68e:	fcf407a3          	sb	a5,-49(s0)
 800a692:	87ba                	mv	a5,a4
 800a694:	fcf42423          	sw	a5,-56(s0)
    uint32_t wordJam, wordDist, *ptr = 0;
 800a698:	fe043023          	sd	zero,-32(s0)
    uint_fast8_t i, innerDist;

    wordJam = 0;
 800a69c:	fe042623          	sw	zero,-20(s0)
    wordDist = dist>>5;
 800a6a0:	fc842783          	lw	a5,-56(s0)
 800a6a4:	0057d79b          	srliw	a5,a5,0x5
 800a6a8:	fef42423          	sw	a5,-24(s0)
    if ( wordDist ) {
 800a6ac:	fe842783          	lw	a5,-24(s0)
 800a6b0:	2781                	sext.w	a5,a5
 800a6b2:	c3bd                	beqz	a5,800a718 <softfloat_shiftRightJamM+0x9e>
        if ( size_words < wordDist ) wordDist = size_words;
 800a6b4:	fcf44783          	lbu	a5,-49(s0)
 800a6b8:	0007871b          	sext.w	a4,a5
 800a6bc:	fe842783          	lw	a5,-24(s0)
 800a6c0:	2781                	sext.w	a5,a5
 800a6c2:	00f77663          	bleu	a5,a4,800a6ce <softfloat_shiftRightJamM+0x54>
 800a6c6:	fcf44783          	lbu	a5,-49(s0)
 800a6ca:	fef42423          	sw	a5,-24(s0)
        ptr = (uint32_t *) (aPtr + indexMultiwordLo( size_words, wordDist ));
 800a6ce:	fc043783          	ld	a5,-64(s0)
 800a6d2:	fef43023          	sd	a5,-32(s0)
        i = wordDist;
 800a6d6:	fe842783          	lw	a5,-24(s0)
 800a6da:	fcf40fa3          	sb	a5,-33(s0)
        do {
            wordJam = *ptr++;
 800a6de:	fe043783          	ld	a5,-32(s0)
 800a6e2:	00478713          	addi	a4,a5,4
 800a6e6:	fee43023          	sd	a4,-32(s0)
 800a6ea:	439c                	lw	a5,0(a5)
 800a6ec:	fef42623          	sw	a5,-20(s0)
            if ( wordJam ) break;
 800a6f0:	fec42783          	lw	a5,-20(s0)
 800a6f4:	2781                	sext.w	a5,a5
 800a6f6:	ef81                	bnez	a5,800a70e <softfloat_shiftRightJamM+0x94>
            --i;
 800a6f8:	fdf44783          	lbu	a5,-33(s0)
 800a6fc:	37fd                	addiw	a5,a5,-1
 800a6fe:	fcf40fa3          	sb	a5,-33(s0)
        } while ( i );
 800a702:	fdf44783          	lbu	a5,-33(s0)
 800a706:	0ff7f793          	andi	a5,a5,255
 800a70a:	fbf1                	bnez	a5,800a6de <softfloat_shiftRightJamM+0x64>
 800a70c:	a011                	j	800a710 <softfloat_shiftRightJamM+0x96>
            if ( wordJam ) break;
 800a70e:	0001                	nop
        ptr = zPtr;
 800a710:	fb843783          	ld	a5,-72(s0)
 800a714:	fef43023          	sd	a5,-32(s0)
    }
    if ( wordDist < size_words ) {
 800a718:	fcf44783          	lbu	a5,-49(s0)
 800a71c:	0007871b          	sext.w	a4,a5
 800a720:	fe842783          	lw	a5,-24(s0)
 800a724:	2781                	sext.w	a5,a5
 800a726:	0ce7f963          	bleu	a4,a5,800a7f8 <softfloat_shiftRightJamM+0x17e>
        aPtr += indexMultiwordHiBut( size_words, wordDist );
 800a72a:	fe846783          	lwu	a5,-24(s0)
 800a72e:	078a                	slli	a5,a5,0x2
 800a730:	fc043703          	ld	a4,-64(s0)
 800a734:	97ba                	add	a5,a5,a4
 800a736:	fcf43023          	sd	a5,-64(s0)
        innerDist = dist & 31;
 800a73a:	fc842783          	lw	a5,-56(s0)
 800a73e:	0ff7f793          	andi	a5,a5,255
 800a742:	8bfd                	andi	a5,a5,31
 800a744:	fcf40f23          	sb	a5,-34(s0)
        if ( innerDist ) {
 800a748:	fde44783          	lbu	a5,-34(s0)
 800a74c:	0ff7f793          	andi	a5,a5,255
 800a750:	cb95                	beqz	a5,800a784 <softfloat_shiftRightJamM+0x10a>
            softfloat_shortShiftRightJamM(
 800a752:	fe842783          	lw	a5,-24(s0)
 800a756:	0ff7f793          	andi	a5,a5,255
 800a75a:	fcf44703          	lbu	a4,-49(s0)
 800a75e:	40f707bb          	subw	a5,a4,a5
 800a762:	0ff7f793          	andi	a5,a5,255
 800a766:	fde44703          	lbu	a4,-34(s0)
 800a76a:	fb843683          	ld	a3,-72(s0)
 800a76e:	863a                	mv	a2,a4
 800a770:	fc043583          	ld	a1,-64(s0)
 800a774:	853e                	mv	a0,a5
 800a776:	2e6000ef          	jal	ra,800aa5c <softfloat_shortShiftRightJamM>
                size_words - wordDist,
                aPtr,
                innerDist,
                zPtr + indexMultiwordLoBut( size_words, wordDist )
            );
            if ( ! wordDist ) goto wordJam;
 800a77a:	fe842783          	lw	a5,-24(s0)
 800a77e:	2781                	sext.w	a5,a5
 800a780:	ebb9                	bnez	a5,800a7d6 <softfloat_shiftRightJamM+0x15c>
 800a782:	a869                	j	800a81c <softfloat_shiftRightJamM+0x1a2>
        } else {
            aPtr += indexWordLo( size_words - wordDist );
            ptr = zPtr + indexWordLo( size_words );
 800a784:	fb843783          	ld	a5,-72(s0)
 800a788:	fef43023          	sd	a5,-32(s0)
            for ( i = size_words - wordDist; i; --i ) {
 800a78c:	fe842783          	lw	a5,-24(s0)
 800a790:	0ff7f793          	andi	a5,a5,255
 800a794:	fcf44703          	lbu	a4,-49(s0)
 800a798:	40f707bb          	subw	a5,a4,a5
 800a79c:	fcf40fa3          	sb	a5,-33(s0)
 800a7a0:	a035                	j	800a7cc <softfloat_shiftRightJamM+0x152>
                *ptr = *aPtr;
 800a7a2:	fc043783          	ld	a5,-64(s0)
 800a7a6:	4398                	lw	a4,0(a5)
 800a7a8:	fe043783          	ld	a5,-32(s0)
 800a7ac:	c398                	sw	a4,0(a5)
                aPtr += wordIncr;
 800a7ae:	fc043783          	ld	a5,-64(s0)
 800a7b2:	0791                	addi	a5,a5,4
 800a7b4:	fcf43023          	sd	a5,-64(s0)
                ptr += wordIncr;
 800a7b8:	fe043783          	ld	a5,-32(s0)
 800a7bc:	0791                	addi	a5,a5,4
 800a7be:	fef43023          	sd	a5,-32(s0)
            for ( i = size_words - wordDist; i; --i ) {
 800a7c2:	fdf44783          	lbu	a5,-33(s0)
 800a7c6:	37fd                	addiw	a5,a5,-1
 800a7c8:	fcf40fa3          	sb	a5,-33(s0)
 800a7cc:	fdf44783          	lbu	a5,-33(s0)
 800a7d0:	0ff7f793          	andi	a5,a5,255
 800a7d4:	f7f9                	bnez	a5,800a7a2 <softfloat_shiftRightJamM+0x128>
            }
        }
        ptr = zPtr + indexMultiwordHi( size_words, wordDist );
 800a7d6:	fcf44783          	lbu	a5,-49(s0)
 800a7da:	0007871b          	sext.w	a4,a5
 800a7de:	fe842783          	lw	a5,-24(s0)
 800a7e2:	40f707bb          	subw	a5,a4,a5
 800a7e6:	2781                	sext.w	a5,a5
 800a7e8:	1782                	slli	a5,a5,0x20
 800a7ea:	9381                	srli	a5,a5,0x20
 800a7ec:	078a                	slli	a5,a5,0x2
 800a7ee:	fb843703          	ld	a4,-72(s0)
 800a7f2:	97ba                	add	a5,a5,a4
 800a7f4:	fef43023          	sd	a5,-32(s0)
    }
    do {
        *ptr++ = 0;
 800a7f8:	fe043783          	ld	a5,-32(s0)
 800a7fc:	00478713          	addi	a4,a5,4
 800a800:	fee43023          	sd	a4,-32(s0)
 800a804:	0007a023          	sw	zero,0(a5)
        --wordDist;
 800a808:	fe842783          	lw	a5,-24(s0)
 800a80c:	37fd                	addiw	a5,a5,-1
 800a80e:	fef42423          	sw	a5,-24(s0)
    } while ( wordDist );
 800a812:	fe842783          	lw	a5,-24(s0)
 800a816:	2781                	sext.w	a5,a5
 800a818:	f3e5                	bnez	a5,800a7f8 <softfloat_shiftRightJamM+0x17e>
 wordJam:
 800a81a:	0001                	nop
    if ( wordJam ) zPtr[indexWordLo( size_words )] |= 1;
 800a81c:	fec42783          	lw	a5,-20(s0)
 800a820:	2781                	sext.w	a5,a5
 800a822:	cb99                	beqz	a5,800a838 <softfloat_shiftRightJamM+0x1be>
 800a824:	fb843783          	ld	a5,-72(s0)
 800a828:	439c                	lw	a5,0(a5)
 800a82a:	0017e793          	ori	a5,a5,1
 800a82e:	0007871b          	sext.w	a4,a5
 800a832:	fb843783          	ld	a5,-72(s0)
 800a836:	c398                	sw	a4,0(a5)

}
 800a838:	0001                	nop
 800a83a:	60a6                	ld	ra,72(sp)
 800a83c:	6406                	ld	s0,64(sp)
 800a83e:	6161                	addi	sp,sp,80
 800a840:	8082                	ret

000000000800a842 <softfloat_shortShiftLeftM>:
     uint_fast8_t size_words,
     const uint32_t *aPtr,
     uint_fast8_t dist,
     uint32_t *zPtr
 )
{
 800a842:	715d                	addi	sp,sp,-80
 800a844:	e4a2                	sd	s0,72(sp)
 800a846:	0880                	addi	s0,sp,80
 800a848:	87aa                	mv	a5,a0
 800a84a:	fcb43023          	sd	a1,-64(s0)
 800a84e:	8732                	mv	a4,a2
 800a850:	fad43c23          	sd	a3,-72(s0)
 800a854:	fcf407a3          	sb	a5,-49(s0)
 800a858:	87ba                	mv	a5,a4
 800a85a:	fcf40723          	sb	a5,-50(s0)
    uint_fast8_t uNegDist;
    unsigned int index, lastIndex;
    uint32_t partWordZ, wordA;

    uNegDist = -dist;
 800a85e:	fce44783          	lbu	a5,-50(s0)
 800a862:	40f007b3          	neg	a5,a5
 800a866:	fef403a3          	sb	a5,-25(s0)
    index = indexWordHi( size_words );
 800a86a:	fcf44783          	lbu	a5,-49(s0)
 800a86e:	2781                	sext.w	a5,a5
 800a870:	37fd                	addiw	a5,a5,-1
 800a872:	2781                	sext.w	a5,a5
 800a874:	fef42623          	sw	a5,-20(s0)
    lastIndex = indexWordLo( size_words );
 800a878:	fe042023          	sw	zero,-32(s0)
    partWordZ = aPtr[index]<<dist;
 800a87c:	fec46783          	lwu	a5,-20(s0)
 800a880:	078a                	slli	a5,a5,0x2
 800a882:	fc043703          	ld	a4,-64(s0)
 800a886:	97ba                	add	a5,a5,a4
 800a888:	439c                	lw	a5,0(a5)
 800a88a:	fce44703          	lbu	a4,-50(s0)
 800a88e:	2701                	sext.w	a4,a4
 800a890:	00e797bb          	sllw	a5,a5,a4
 800a894:	fef42423          	sw	a5,-24(s0)
    while ( index != lastIndex ) {
 800a898:	a0a5                	j	800a900 <softfloat_shortShiftLeftM+0xbe>
        wordA = aPtr[index - wordIncr];
 800a89a:	fec42783          	lw	a5,-20(s0)
 800a89e:	37fd                	addiw	a5,a5,-1
 800a8a0:	2781                	sext.w	a5,a5
 800a8a2:	1782                	slli	a5,a5,0x20
 800a8a4:	9381                	srli	a5,a5,0x20
 800a8a6:	078a                	slli	a5,a5,0x2
 800a8a8:	fc043703          	ld	a4,-64(s0)
 800a8ac:	97ba                	add	a5,a5,a4
 800a8ae:	439c                	lw	a5,0(a5)
 800a8b0:	fcf42e23          	sw	a5,-36(s0)
        zPtr[index] = partWordZ | wordA>>(uNegDist & 31);
 800a8b4:	fe744783          	lbu	a5,-25(s0)
 800a8b8:	2781                	sext.w	a5,a5
 800a8ba:	8bfd                	andi	a5,a5,31
 800a8bc:	2781                	sext.w	a5,a5
 800a8be:	873e                	mv	a4,a5
 800a8c0:	fdc42783          	lw	a5,-36(s0)
 800a8c4:	00e7d7bb          	srlw	a5,a5,a4
 800a8c8:	0007869b          	sext.w	a3,a5
 800a8cc:	fec46783          	lwu	a5,-20(s0)
 800a8d0:	078a                	slli	a5,a5,0x2
 800a8d2:	fb843703          	ld	a4,-72(s0)
 800a8d6:	97ba                	add	a5,a5,a4
 800a8d8:	fe842703          	lw	a4,-24(s0)
 800a8dc:	8f55                	or	a4,a4,a3
 800a8de:	2701                	sext.w	a4,a4
 800a8e0:	c398                	sw	a4,0(a5)
        index -= wordIncr;
 800a8e2:	fec42783          	lw	a5,-20(s0)
 800a8e6:	37fd                	addiw	a5,a5,-1
 800a8e8:	fef42623          	sw	a5,-20(s0)
        partWordZ = wordA<<dist;
 800a8ec:	fce44783          	lbu	a5,-50(s0)
 800a8f0:	2781                	sext.w	a5,a5
 800a8f2:	873e                	mv	a4,a5
 800a8f4:	fdc42783          	lw	a5,-36(s0)
 800a8f8:	00e797bb          	sllw	a5,a5,a4
 800a8fc:	fef42423          	sw	a5,-24(s0)
    while ( index != lastIndex ) {
 800a900:	fec42703          	lw	a4,-20(s0)
 800a904:	fe042783          	lw	a5,-32(s0)
 800a908:	2701                	sext.w	a4,a4
 800a90a:	2781                	sext.w	a5,a5
 800a90c:	f8f717e3          	bne	a4,a5,800a89a <softfloat_shortShiftLeftM+0x58>
    }
    zPtr[index] = partWordZ;
 800a910:	fec46783          	lwu	a5,-20(s0)
 800a914:	078a                	slli	a5,a5,0x2
 800a916:	fb843703          	ld	a4,-72(s0)
 800a91a:	97ba                	add	a5,a5,a4
 800a91c:	fe842703          	lw	a4,-24(s0)
 800a920:	c398                	sw	a4,0(a5)

}
 800a922:	0001                	nop
 800a924:	6426                	ld	s0,72(sp)
 800a926:	6161                	addi	sp,sp,80
 800a928:	8082                	ret

000000000800a92a <softfloat_shortShiftRightM>:
     uint_fast8_t size_words,
     const uint32_t *aPtr,
     uint_fast8_t dist,
     uint32_t *zPtr
 )
{
 800a92a:	715d                	addi	sp,sp,-80
 800a92c:	e4a2                	sd	s0,72(sp)
 800a92e:	0880                	addi	s0,sp,80
 800a930:	87aa                	mv	a5,a0
 800a932:	fcb43023          	sd	a1,-64(s0)
 800a936:	8732                	mv	a4,a2
 800a938:	fad43c23          	sd	a3,-72(s0)
 800a93c:	fcf407a3          	sb	a5,-49(s0)
 800a940:	87ba                	mv	a5,a4
 800a942:	fcf40723          	sb	a5,-50(s0)
    uint_fast8_t uNegDist;
    unsigned int index, lastIndex;
    uint32_t partWordZ, wordA;

    uNegDist = -dist;
 800a946:	fce44783          	lbu	a5,-50(s0)
 800a94a:	40f007b3          	neg	a5,a5
 800a94e:	fef403a3          	sb	a5,-25(s0)
    index = indexWordLo( size_words );
 800a952:	fe042623          	sw	zero,-20(s0)
    lastIndex = indexWordHi( size_words );
 800a956:	fcf44783          	lbu	a5,-49(s0)
 800a95a:	2781                	sext.w	a5,a5
 800a95c:	37fd                	addiw	a5,a5,-1
 800a95e:	2781                	sext.w	a5,a5
 800a960:	fef42023          	sw	a5,-32(s0)
    partWordZ = aPtr[index]>>dist;
 800a964:	fec46783          	lwu	a5,-20(s0)
 800a968:	078a                	slli	a5,a5,0x2
 800a96a:	fc043703          	ld	a4,-64(s0)
 800a96e:	97ba                	add	a5,a5,a4
 800a970:	439c                	lw	a5,0(a5)
 800a972:	fce44703          	lbu	a4,-50(s0)
 800a976:	2701                	sext.w	a4,a4
 800a978:	00e7d7bb          	srlw	a5,a5,a4
 800a97c:	fef42423          	sw	a5,-24(s0)
    while ( index != lastIndex ) {
 800a980:	a0a5                	j	800a9e8 <softfloat_shortShiftRightM+0xbe>
        wordA = aPtr[index + wordIncr];
 800a982:	fec42783          	lw	a5,-20(s0)
 800a986:	2785                	addiw	a5,a5,1
 800a988:	2781                	sext.w	a5,a5
 800a98a:	1782                	slli	a5,a5,0x20
 800a98c:	9381                	srli	a5,a5,0x20
 800a98e:	078a                	slli	a5,a5,0x2
 800a990:	fc043703          	ld	a4,-64(s0)
 800a994:	97ba                	add	a5,a5,a4
 800a996:	439c                	lw	a5,0(a5)
 800a998:	fcf42e23          	sw	a5,-36(s0)
        zPtr[index] = wordA<<(uNegDist & 31) | partWordZ;
 800a99c:	fe744783          	lbu	a5,-25(s0)
 800a9a0:	2781                	sext.w	a5,a5
 800a9a2:	8bfd                	andi	a5,a5,31
 800a9a4:	2781                	sext.w	a5,a5
 800a9a6:	873e                	mv	a4,a5
 800a9a8:	fdc42783          	lw	a5,-36(s0)
 800a9ac:	00e797bb          	sllw	a5,a5,a4
 800a9b0:	0007869b          	sext.w	a3,a5
 800a9b4:	fec46783          	lwu	a5,-20(s0)
 800a9b8:	078a                	slli	a5,a5,0x2
 800a9ba:	fb843703          	ld	a4,-72(s0)
 800a9be:	97ba                	add	a5,a5,a4
 800a9c0:	fe842703          	lw	a4,-24(s0)
 800a9c4:	8f55                	or	a4,a4,a3
 800a9c6:	2701                	sext.w	a4,a4
 800a9c8:	c398                	sw	a4,0(a5)
        index += wordIncr;
 800a9ca:	fec42783          	lw	a5,-20(s0)
 800a9ce:	2785                	addiw	a5,a5,1
 800a9d0:	fef42623          	sw	a5,-20(s0)
        partWordZ = wordA>>dist;
 800a9d4:	fce44783          	lbu	a5,-50(s0)
 800a9d8:	2781                	sext.w	a5,a5
 800a9da:	873e                	mv	a4,a5
 800a9dc:	fdc42783          	lw	a5,-36(s0)
 800a9e0:	00e7d7bb          	srlw	a5,a5,a4
 800a9e4:	fef42423          	sw	a5,-24(s0)
    while ( index != lastIndex ) {
 800a9e8:	fec42703          	lw	a4,-20(s0)
 800a9ec:	fe042783          	lw	a5,-32(s0)
 800a9f0:	2701                	sext.w	a4,a4
 800a9f2:	2781                	sext.w	a5,a5
 800a9f4:	f8f717e3          	bne	a4,a5,800a982 <softfloat_shortShiftRightM+0x58>
    }
    zPtr[index] = partWordZ;
 800a9f8:	fec46783          	lwu	a5,-20(s0)
 800a9fc:	078a                	slli	a5,a5,0x2
 800a9fe:	fb843703          	ld	a4,-72(s0)
 800aa02:	97ba                	add	a5,a5,a4
 800aa04:	fe842703          	lw	a4,-24(s0)
 800aa08:	c398                	sw	a4,0(a5)

}
 800aa0a:	0001                	nop
 800aa0c:	6426                	ld	s0,72(sp)
 800aa0e:	6161                	addi	sp,sp,80
 800aa10:	8082                	ret

000000000800aa12 <softfloat_shortShiftRightJam64>:
#include "platform.h"

#ifndef softfloat_shortShiftRightJam64

uint64_t softfloat_shortShiftRightJam64( uint64_t a, uint_fast8_t dist )
{
 800aa12:	1101                	addi	sp,sp,-32
 800aa14:	ec22                	sd	s0,24(sp)
 800aa16:	1000                	addi	s0,sp,32
 800aa18:	fea43423          	sd	a0,-24(s0)
 800aa1c:	87ae                	mv	a5,a1
 800aa1e:	fef403a3          	sb	a5,-25(s0)

    return a>>dist | ((a & (((uint_fast64_t) 1<<dist) - 1)) != 0);
 800aa22:	fe744783          	lbu	a5,-25(s0)
 800aa26:	2781                	sext.w	a5,a5
 800aa28:	873e                	mv	a4,a5
 800aa2a:	fe843783          	ld	a5,-24(s0)
 800aa2e:	00e7d7b3          	srl	a5,a5,a4
 800aa32:	fe744703          	lbu	a4,-25(s0)
 800aa36:	2701                	sext.w	a4,a4
 800aa38:	86ba                	mv	a3,a4
 800aa3a:	577d                	li	a4,-1
 800aa3c:	00d71733          	sll	a4,a4,a3
 800aa40:	fff74693          	not	a3,a4
 800aa44:	fe843703          	ld	a4,-24(s0)
 800aa48:	8f75                	and	a4,a4,a3
 800aa4a:	00e03733          	snez	a4,a4
 800aa4e:	0ff77713          	andi	a4,a4,255
 800aa52:	8fd9                	or	a5,a5,a4

}
 800aa54:	853e                	mv	a0,a5
 800aa56:	6462                	ld	s0,24(sp)
 800aa58:	6105                	addi	sp,sp,32
 800aa5a:	8082                	ret

000000000800aa5c <softfloat_shortShiftRightJamM>:
     uint_fast8_t size_words,
     const uint32_t *aPtr,
     uint_fast8_t dist,
     uint32_t *zPtr
 )
{
 800aa5c:	715d                	addi	sp,sp,-80
 800aa5e:	e4a2                	sd	s0,72(sp)
 800aa60:	0880                	addi	s0,sp,80
 800aa62:	87aa                	mv	a5,a0
 800aa64:	fcb43023          	sd	a1,-64(s0)
 800aa68:	8732                	mv	a4,a2
 800aa6a:	fad43c23          	sd	a3,-72(s0)
 800aa6e:	fcf407a3          	sb	a5,-49(s0)
 800aa72:	87ba                	mv	a5,a4
 800aa74:	fcf40723          	sb	a5,-50(s0)
    uint_fast8_t uNegDist;
    unsigned int index, lastIndex;
    uint32_t partWordZ, wordA;

    uNegDist = -dist;
 800aa78:	fce44783          	lbu	a5,-50(s0)
 800aa7c:	40f007b3          	neg	a5,a5
 800aa80:	fef403a3          	sb	a5,-25(s0)
    index = indexWordLo( size_words );
 800aa84:	fe042623          	sw	zero,-20(s0)
    lastIndex = indexWordHi( size_words );
 800aa88:	fcf44783          	lbu	a5,-49(s0)
 800aa8c:	2781                	sext.w	a5,a5
 800aa8e:	37fd                	addiw	a5,a5,-1
 800aa90:	2781                	sext.w	a5,a5
 800aa92:	fef42023          	sw	a5,-32(s0)
    wordA = aPtr[index];
 800aa96:	fec46783          	lwu	a5,-20(s0)
 800aa9a:	078a                	slli	a5,a5,0x2
 800aa9c:	fc043703          	ld	a4,-64(s0)
 800aaa0:	97ba                	add	a5,a5,a4
 800aaa2:	439c                	lw	a5,0(a5)
 800aaa4:	fcf42e23          	sw	a5,-36(s0)
    partWordZ = wordA>>dist;
 800aaa8:	fce44783          	lbu	a5,-50(s0)
 800aaac:	2781                	sext.w	a5,a5
 800aaae:	873e                	mv	a4,a5
 800aab0:	fdc42783          	lw	a5,-36(s0)
 800aab4:	00e7d7bb          	srlw	a5,a5,a4
 800aab8:	fef42423          	sw	a5,-24(s0)
    if ( partWordZ<<dist != wordA ) partWordZ |= 1;
 800aabc:	fce44783          	lbu	a5,-50(s0)
 800aac0:	2781                	sext.w	a5,a5
 800aac2:	873e                	mv	a4,a5
 800aac4:	fe842783          	lw	a5,-24(s0)
 800aac8:	00e797bb          	sllw	a5,a5,a4
 800aacc:	0007871b          	sext.w	a4,a5
 800aad0:	fdc42783          	lw	a5,-36(s0)
 800aad4:	2781                	sext.w	a5,a5
 800aad6:	06e78c63          	beq	a5,a4,800ab4e <softfloat_shortShiftRightJamM+0xf2>
 800aada:	fe842783          	lw	a5,-24(s0)
 800aade:	0017e793          	ori	a5,a5,1
 800aae2:	fef42423          	sw	a5,-24(s0)
    while ( index != lastIndex ) {
 800aae6:	a0a5                	j	800ab4e <softfloat_shortShiftRightJamM+0xf2>
        wordA = aPtr[index + wordIncr];
 800aae8:	fec42783          	lw	a5,-20(s0)
 800aaec:	2785                	addiw	a5,a5,1
 800aaee:	2781                	sext.w	a5,a5
 800aaf0:	1782                	slli	a5,a5,0x20
 800aaf2:	9381                	srli	a5,a5,0x20
 800aaf4:	078a                	slli	a5,a5,0x2
 800aaf6:	fc043703          	ld	a4,-64(s0)
 800aafa:	97ba                	add	a5,a5,a4
 800aafc:	439c                	lw	a5,0(a5)
 800aafe:	fcf42e23          	sw	a5,-36(s0)
        zPtr[index] = wordA<<(uNegDist & 31) | partWordZ;
 800ab02:	fe744783          	lbu	a5,-25(s0)
 800ab06:	2781                	sext.w	a5,a5
 800ab08:	8bfd                	andi	a5,a5,31
 800ab0a:	2781                	sext.w	a5,a5
 800ab0c:	873e                	mv	a4,a5
 800ab0e:	fdc42783          	lw	a5,-36(s0)
 800ab12:	00e797bb          	sllw	a5,a5,a4
 800ab16:	0007869b          	sext.w	a3,a5
 800ab1a:	fec46783          	lwu	a5,-20(s0)
 800ab1e:	078a                	slli	a5,a5,0x2
 800ab20:	fb843703          	ld	a4,-72(s0)
 800ab24:	97ba                	add	a5,a5,a4
 800ab26:	fe842703          	lw	a4,-24(s0)
 800ab2a:	8f55                	or	a4,a4,a3
 800ab2c:	2701                	sext.w	a4,a4
 800ab2e:	c398                	sw	a4,0(a5)
        index += wordIncr;
 800ab30:	fec42783          	lw	a5,-20(s0)
 800ab34:	2785                	addiw	a5,a5,1
 800ab36:	fef42623          	sw	a5,-20(s0)
        partWordZ = wordA>>dist;
 800ab3a:	fce44783          	lbu	a5,-50(s0)
 800ab3e:	2781                	sext.w	a5,a5
 800ab40:	873e                	mv	a4,a5
 800ab42:	fdc42783          	lw	a5,-36(s0)
 800ab46:	00e7d7bb          	srlw	a5,a5,a4
 800ab4a:	fef42423          	sw	a5,-24(s0)
    while ( index != lastIndex ) {
 800ab4e:	fec42703          	lw	a4,-20(s0)
 800ab52:	fe042783          	lw	a5,-32(s0)
 800ab56:	2701                	sext.w	a4,a4
 800ab58:	2781                	sext.w	a5,a5
 800ab5a:	f8f717e3          	bne	a4,a5,800aae8 <softfloat_shortShiftRightJamM+0x8c>
    }
    zPtr[index] = partWordZ;
 800ab5e:	fec46783          	lwu	a5,-20(s0)
 800ab62:	078a                	slli	a5,a5,0x2
 800ab64:	fb843703          	ld	a4,-72(s0)
 800ab68:	97ba                	add	a5,a5,a4
 800ab6a:	fe842703          	lw	a4,-24(s0)
 800ab6e:	c398                	sw	a4,0(a5)

}
 800ab70:	0001                	nop
 800ab72:	6426                	ld	s0,72(sp)
 800ab74:	6161                	addi	sp,sp,80
 800ab76:	8082                	ret

000000000800ab78 <softfloat_subM>:
     uint_fast8_t size_words,
     const uint32_t *aPtr,
     const uint32_t *bPtr,
     uint32_t *zPtr
 )
{
 800ab78:	715d                	addi	sp,sp,-80
 800ab7a:	e4a2                	sd	s0,72(sp)
 800ab7c:	0880                	addi	s0,sp,80
 800ab7e:	87aa                	mv	a5,a0
 800ab80:	fcb43023          	sd	a1,-64(s0)
 800ab84:	fac43c23          	sd	a2,-72(s0)
 800ab88:	fad43823          	sd	a3,-80(s0)
 800ab8c:	fcf407a3          	sb	a5,-49(s0)
    unsigned int index, lastIndex;
    uint_fast8_t borrow;
    uint32_t wordA, wordB;

    index = indexWordLo( size_words );
 800ab90:	fe042623          	sw	zero,-20(s0)
    lastIndex = indexWordHi( size_words );
 800ab94:	fcf44783          	lbu	a5,-49(s0)
 800ab98:	2781                	sext.w	a5,a5
 800ab9a:	37fd                	addiw	a5,a5,-1
 800ab9c:	2781                	sext.w	a5,a5
 800ab9e:	fef42223          	sw	a5,-28(s0)
    borrow = 0;
 800aba2:	fe0405a3          	sb	zero,-21(s0)
    for (;;) {
        wordA = aPtr[index];
 800aba6:	fec46783          	lwu	a5,-20(s0)
 800abaa:	078a                	slli	a5,a5,0x2
 800abac:	fc043703          	ld	a4,-64(s0)
 800abb0:	97ba                	add	a5,a5,a4
 800abb2:	439c                	lw	a5,0(a5)
 800abb4:	fef42023          	sw	a5,-32(s0)
        wordB = bPtr[index];
 800abb8:	fec46783          	lwu	a5,-20(s0)
 800abbc:	078a                	slli	a5,a5,0x2
 800abbe:	fb843703          	ld	a4,-72(s0)
 800abc2:	97ba                	add	a5,a5,a4
 800abc4:	439c                	lw	a5,0(a5)
 800abc6:	fcf42e23          	sw	a5,-36(s0)
        zPtr[index] = wordA - wordB - borrow;
 800abca:	fe042703          	lw	a4,-32(s0)
 800abce:	fdc42783          	lw	a5,-36(s0)
 800abd2:	40f707bb          	subw	a5,a4,a5
 800abd6:	0007869b          	sext.w	a3,a5
 800abda:	feb44783          	lbu	a5,-21(s0)
 800abde:	0007871b          	sext.w	a4,a5
 800abe2:	fec46783          	lwu	a5,-20(s0)
 800abe6:	078a                	slli	a5,a5,0x2
 800abe8:	fb043603          	ld	a2,-80(s0)
 800abec:	97b2                	add	a5,a5,a2
 800abee:	40e6873b          	subw	a4,a3,a4
 800abf2:	2701                	sext.w	a4,a4
 800abf4:	c398                	sw	a4,0(a5)
        if ( index == lastIndex ) break;
 800abf6:	fec42703          	lw	a4,-20(s0)
 800abfa:	fe442783          	lw	a5,-28(s0)
 800abfe:	2701                	sext.w	a4,a4
 800ac00:	2781                	sext.w	a5,a5
 800ac02:	04f70663          	beq	a4,a5,800ac4e <softfloat_subM+0xd6>
        borrow = borrow ? (wordA <= wordB) : (wordA < wordB);
 800ac06:	feb44783          	lbu	a5,-21(s0)
 800ac0a:	0ff7f793          	andi	a5,a5,255
 800ac0e:	cf91                	beqz	a5,800ac2a <softfloat_subM+0xb2>
 800ac10:	fe042703          	lw	a4,-32(s0)
 800ac14:	fdc42783          	lw	a5,-36(s0)
 800ac18:	2701                	sext.w	a4,a4
 800ac1a:	2781                	sext.w	a5,a5
 800ac1c:	00e7b7b3          	sltu	a5,a5,a4
 800ac20:	0017c793          	xori	a5,a5,1
 800ac24:	0ff7f793          	andi	a5,a5,255
 800ac28:	a819                	j	800ac3e <softfloat_subM+0xc6>
 800ac2a:	fe042703          	lw	a4,-32(s0)
 800ac2e:	fdc42783          	lw	a5,-36(s0)
 800ac32:	2701                	sext.w	a4,a4
 800ac34:	2781                	sext.w	a5,a5
 800ac36:	00f737b3          	sltu	a5,a4,a5
 800ac3a:	0ff7f793          	andi	a5,a5,255
 800ac3e:	fef405a3          	sb	a5,-21(s0)
        index += wordIncr;
 800ac42:	fec42783          	lw	a5,-20(s0)
 800ac46:	2785                	addiw	a5,a5,1
 800ac48:	fef42623          	sw	a5,-20(s0)
        wordA = aPtr[index];
 800ac4c:	bfa9                	j	800aba6 <softfloat_subM+0x2e>
        if ( index == lastIndex ) break;
 800ac4e:	0001                	nop
    }

}
 800ac50:	0001                	nop
 800ac52:	6426                	ld	s0,72(sp)
 800ac54:	6161                	addi	sp,sp,80
 800ac56:	8082                	ret

000000000800ac58 <softfloat_subMagsF32>:
#include "internals.h"
#include "specialize.h"
#include "softfloat.h"

float32_t softfloat_subMagsF32( uint_fast32_t uiA, uint_fast32_t uiB )
{
 800ac58:	7175                	addi	sp,sp,-144
 800ac5a:	e506                	sd	ra,136(sp)
 800ac5c:	e122                	sd	s0,128(sp)
 800ac5e:	0900                	addi	s0,sp,144
 800ac60:	f6a43c23          	sd	a0,-136(s0)
 800ac64:	f6b43823          	sd	a1,-144(s0)
    uint_fast32_t sigX, sigY;
    union ui32_f32 uZ;

    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    expA = expF32UI( uiA );
 800ac68:	f7843783          	ld	a5,-136(s0)
 800ac6c:	83dd                	srli	a5,a5,0x17
 800ac6e:	0ff7f793          	andi	a5,a5,255
 800ac72:	fef43423          	sd	a5,-24(s0)
    sigA = fracF32UI( uiA );
 800ac76:	f7843703          	ld	a4,-136(s0)
 800ac7a:	008007b7          	lui	a5,0x800
 800ac7e:	17fd                	addi	a5,a5,-1
 800ac80:	8ff9                	and	a5,a5,a4
 800ac82:	faf43423          	sd	a5,-88(s0)
    expB = expF32UI( uiB );
 800ac86:	f7043783          	ld	a5,-144(s0)
 800ac8a:	83dd                	srli	a5,a5,0x17
 800ac8c:	0ff7f793          	andi	a5,a5,255
 800ac90:	faf43023          	sd	a5,-96(s0)
    sigB = fracF32UI( uiB );
 800ac94:	f7043703          	ld	a4,-144(s0)
 800ac98:	008007b7          	lui	a5,0x800
 800ac9c:	17fd                	addi	a5,a5,-1
 800ac9e:	8ff9                	and	a5,a5,a4
 800aca0:	f8f43c23          	sd	a5,-104(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    expDiff = expA - expB;
 800aca4:	fe843703          	ld	a4,-24(s0)
 800aca8:	fa043783          	ld	a5,-96(s0)
 800acac:	40f707b3          	sub	a5,a4,a5
 800acb0:	fef43023          	sd	a5,-32(s0)
    if ( ! expDiff ) {
 800acb4:	fe043783          	ld	a5,-32(s0)
 800acb8:	12079763          	bnez	a5,800ade6 <softfloat_subMagsF32+0x18e>
        /*--------------------------------------------------------------------
        *--------------------------------------------------------------------*/
        if ( expA == 0xFF ) {
 800acbc:	fe843703          	ld	a4,-24(s0)
 800acc0:	0ff00793          	li	a5,255
 800acc4:	02f71263          	bne	a4,a5,800ace8 <softfloat_subMagsF32+0x90>
            if ( sigA | sigB ) goto propagateNaN;
 800acc8:	fa843703          	ld	a4,-88(s0)
 800accc:	f9843783          	ld	a5,-104(s0)
 800acd0:	8fd9                	or	a5,a5,a4
 800acd2:	24079c63          	bnez	a5,800af2a <softfloat_subMagsF32+0x2d2>
            softfloat_raiseFlags( softfloat_flag_invalid );
 800acd6:	001867f3          	csrrsi	a5,fflags,16
 800acda:	f8f43823          	sd	a5,-112(s0)
            uiZ = defaultNaNF32UI;
 800acde:	7fc007b7          	lui	a5,0x7fc00
 800ace2:	fcf43c23          	sd	a5,-40(s0)
            goto uiZ;
 800ace6:	acb9                	j	800af44 <softfloat_subMagsF32+0x2ec>
        }
        sigDiff = sigA - sigB;
 800ace8:	fa843703          	ld	a4,-88(s0)
 800acec:	f9843783          	ld	a5,-104(s0)
 800acf0:	40f707b3          	sub	a5,a4,a5
 800acf4:	fcf43823          	sd	a5,-48(s0)
        if ( ! sigDiff ) {
 800acf8:	fd043783          	ld	a5,-48(s0)
 800acfc:	ef91                	bnez	a5,800ad18 <softfloat_subMagsF32+0xc0>
            uiZ =
                packToF32UI(
 800acfe:	8792                	mv	a5,tp
 800ad00:	2781                	sext.w	a5,a5
 800ad02:	873e                	mv	a4,a5
 800ad04:	4789                	li	a5,2
 800ad06:	00f71563          	bne	a4,a5,800ad10 <softfloat_subMagsF32+0xb8>
 800ad0a:	4785                	li	a5,1
 800ad0c:	07fe                	slli	a5,a5,0x1f
 800ad0e:	a011                	j	800ad12 <softfloat_subMagsF32+0xba>
 800ad10:	4781                	li	a5,0
            uiZ =
 800ad12:	fcf43c23          	sd	a5,-40(s0)
                    (softfloat_roundingMode == softfloat_round_min), 0, 0 );
            goto uiZ;
 800ad16:	a43d                	j	800af44 <softfloat_subMagsF32+0x2ec>
        }
        if ( expA ) --expA;
 800ad18:	fe843783          	ld	a5,-24(s0)
 800ad1c:	c791                	beqz	a5,800ad28 <softfloat_subMagsF32+0xd0>
 800ad1e:	fe843783          	ld	a5,-24(s0)
 800ad22:	17fd                	addi	a5,a5,-1
 800ad24:	fef43423          	sd	a5,-24(s0)
        signZ = signF32UI( uiA );
 800ad28:	f7843783          	ld	a5,-136(s0)
 800ad2c:	2781                	sext.w	a5,a5
 800ad2e:	01f7d79b          	srliw	a5,a5,0x1f
 800ad32:	fcf407a3          	sb	a5,-49(s0)
        if ( sigDiff < 0 ) {
 800ad36:	fd043783          	ld	a5,-48(s0)
 800ad3a:	0207db63          	bgez	a5,800ad70 <softfloat_subMagsF32+0x118>
            signZ = ! signZ;
 800ad3e:	fcf44783          	lbu	a5,-49(s0)
 800ad42:	2781                	sext.w	a5,a5
 800ad44:	00f037b3          	snez	a5,a5
 800ad48:	0ff7f793          	andi	a5,a5,255
 800ad4c:	0017c793          	xori	a5,a5,1
 800ad50:	0ff7f793          	andi	a5,a5,255
 800ad54:	2781                	sext.w	a5,a5
 800ad56:	fcf407a3          	sb	a5,-49(s0)
 800ad5a:	fcf44783          	lbu	a5,-49(s0)
 800ad5e:	8b85                	andi	a5,a5,1
 800ad60:	fcf407a3          	sb	a5,-49(s0)
            sigDiff = -sigDiff;
 800ad64:	fd043783          	ld	a5,-48(s0)
 800ad68:	40f007b3          	neg	a5,a5
 800ad6c:	fcf43823          	sd	a5,-48(s0)
        }
        shiftDist = softfloat_countLeadingZeros32( sigDiff ) - 8;
 800ad70:	fd043783          	ld	a5,-48(s0)
 800ad74:	2781                	sext.w	a5,a5
 800ad76:	853e                	mv	a0,a5
 800ad78:	6b8000ef          	jal	ra,800b430 <softfloat_countLeadingZeros32>
 800ad7c:	87aa                	mv	a5,a0
 800ad7e:	37e1                	addiw	a5,a5,-8
 800ad80:	0ff7f793          	andi	a5,a5,255
 800ad84:	fcf40723          	sb	a5,-50(s0)
        expZ = expA - shiftDist;
 800ad88:	fce40783          	lb	a5,-50(s0)
 800ad8c:	fe843703          	ld	a4,-24(s0)
 800ad90:	40f707b3          	sub	a5,a4,a5
 800ad94:	fcf43023          	sd	a5,-64(s0)
        if ( expZ < 0 ) {
 800ad98:	fc043783          	ld	a5,-64(s0)
 800ad9c:	0007d863          	bgez	a5,800adac <softfloat_subMagsF32+0x154>
            shiftDist = expA;
 800ada0:	fe843783          	ld	a5,-24(s0)
 800ada4:	fcf40723          	sb	a5,-50(s0)
            expZ = 0;
 800ada8:	fc043023          	sd	zero,-64(s0)
        }
        uiZ = packToF32UI( signZ, expZ, sigDiff<<shiftDist );
 800adac:	fcf44783          	lbu	a5,-49(s0)
 800adb0:	2781                	sext.w	a5,a5
 800adb2:	01f7979b          	slliw	a5,a5,0x1f
 800adb6:	0007871b          	sext.w	a4,a5
 800adba:	fc043783          	ld	a5,-64(s0)
 800adbe:	2781                	sext.w	a5,a5
 800adc0:	0177979b          	slliw	a5,a5,0x17
 800adc4:	2781                	sext.w	a5,a5
 800adc6:	9fb9                	addw	a5,a5,a4
 800adc8:	2781                	sext.w	a5,a5
 800adca:	02079713          	slli	a4,a5,0x20
 800adce:	9301                	srli	a4,a4,0x20
 800add0:	fce40783          	lb	a5,-50(s0)
 800add4:	2781                	sext.w	a5,a5
 800add6:	fd043683          	ld	a3,-48(s0)
 800adda:	00f697b3          	sll	a5,a3,a5
 800adde:	97ba                	add	a5,a5,a4
 800ade0:	fcf43c23          	sd	a5,-40(s0)
        goto uiZ;
 800ade4:	a285                	j	800af44 <softfloat_subMagsF32+0x2ec>
    } else {
        /*--------------------------------------------------------------------
        *--------------------------------------------------------------------*/
        signZ = signF32UI( uiA );
 800ade6:	f7843783          	ld	a5,-136(s0)
 800adea:	2781                	sext.w	a5,a5
 800adec:	01f7d79b          	srliw	a5,a5,0x1f
 800adf0:	fcf407a3          	sb	a5,-49(s0)
        sigA <<= 7;
 800adf4:	fa843783          	ld	a5,-88(s0)
 800adf8:	079e                	slli	a5,a5,0x7
 800adfa:	faf43423          	sd	a5,-88(s0)
        sigB <<= 7;
 800adfe:	f9843783          	ld	a5,-104(s0)
 800ae02:	079e                	slli	a5,a5,0x7
 800ae04:	f8f43c23          	sd	a5,-104(s0)
        if ( expDiff < 0 ) {
 800ae08:	fe043783          	ld	a5,-32(s0)
 800ae0c:	0807de63          	bgez	a5,800aea8 <softfloat_subMagsF32+0x250>
            /*----------------------------------------------------------------
            *----------------------------------------------------------------*/
            signZ = ! signZ;
 800ae10:	fcf44783          	lbu	a5,-49(s0)
 800ae14:	2781                	sext.w	a5,a5
 800ae16:	00f037b3          	snez	a5,a5
 800ae1a:	0ff7f793          	andi	a5,a5,255
 800ae1e:	0017c793          	xori	a5,a5,1
 800ae22:	0ff7f793          	andi	a5,a5,255
 800ae26:	2781                	sext.w	a5,a5
 800ae28:	fcf407a3          	sb	a5,-49(s0)
 800ae2c:	fcf44783          	lbu	a5,-49(s0)
 800ae30:	8b85                	andi	a5,a5,1
 800ae32:	fcf407a3          	sb	a5,-49(s0)
            if ( expB == 0xFF ) {
 800ae36:	fa043703          	ld	a4,-96(s0)
 800ae3a:	0ff00793          	li	a5,255
 800ae3e:	02f71563          	bne	a4,a5,800ae68 <softfloat_subMagsF32+0x210>
                if ( sigB ) goto propagateNaN;
 800ae42:	f9843783          	ld	a5,-104(s0)
 800ae46:	e7e5                	bnez	a5,800af2e <softfloat_subMagsF32+0x2d6>
                uiZ = packToF32UI( signZ, 0xFF, 0 );
 800ae48:	fcf44783          	lbu	a5,-49(s0)
 800ae4c:	2781                	sext.w	a5,a5
 800ae4e:	01f7979b          	slliw	a5,a5,0x1f
 800ae52:	0007871b          	sext.w	a4,a5
 800ae56:	7f8007b7          	lui	a5,0x7f800
 800ae5a:	9fb9                	addw	a5,a5,a4
 800ae5c:	2781                	sext.w	a5,a5
 800ae5e:	1782                	slli	a5,a5,0x20
 800ae60:	9381                	srli	a5,a5,0x20
 800ae62:	fcf43c23          	sd	a5,-40(s0)
                goto uiZ;
 800ae66:	a8f9                	j	800af44 <softfloat_subMagsF32+0x2ec>
            }
            expZ = expB - 1;
 800ae68:	fa043783          	ld	a5,-96(s0)
 800ae6c:	17fd                	addi	a5,a5,-1
 800ae6e:	fcf43023          	sd	a5,-64(s0)
            sigX = sigB | 0x40000000;
 800ae72:	f9843703          	ld	a4,-104(s0)
 800ae76:	400007b7          	lui	a5,0x40000
 800ae7a:	8fd9                	or	a5,a5,a4
 800ae7c:	faf43c23          	sd	a5,-72(s0)
            sigY = sigA + (expA ? 0x40000000 : sigA);
 800ae80:	fe843783          	ld	a5,-24(s0)
 800ae84:	e781                	bnez	a5,800ae8c <softfloat_subMagsF32+0x234>
 800ae86:	fa843783          	ld	a5,-88(s0)
 800ae8a:	a019                	j	800ae90 <softfloat_subMagsF32+0x238>
 800ae8c:	400007b7          	lui	a5,0x40000
 800ae90:	fa843703          	ld	a4,-88(s0)
 800ae94:	97ba                	add	a5,a5,a4
 800ae96:	faf43823          	sd	a5,-80(s0)
            expDiff = -expDiff;
 800ae9a:	fe043783          	ld	a5,-32(s0)
 800ae9e:	40f007b3          	neg	a5,a5
 800aea2:	fef43023          	sd	a5,-32(s0)
 800aea6:	a881                	j	800aef6 <softfloat_subMagsF32+0x29e>
        } else {
            /*----------------------------------------------------------------
            *----------------------------------------------------------------*/
            if ( expA == 0xFF ) {
 800aea8:	fe843703          	ld	a4,-24(s0)
 800aeac:	0ff00793          	li	a5,255
 800aeb0:	00f71a63          	bne	a4,a5,800aec4 <softfloat_subMagsF32+0x26c>
                if ( sigA ) goto propagateNaN;
 800aeb4:	fa843783          	ld	a5,-88(s0)
 800aeb8:	efad                	bnez	a5,800af32 <softfloat_subMagsF32+0x2da>
                uiZ = uiA;
 800aeba:	f7843783          	ld	a5,-136(s0)
 800aebe:	fcf43c23          	sd	a5,-40(s0)
                goto uiZ;
 800aec2:	a049                	j	800af44 <softfloat_subMagsF32+0x2ec>
            }
            expZ = expA - 1;
 800aec4:	fe843783          	ld	a5,-24(s0)
 800aec8:	17fd                	addi	a5,a5,-1
 800aeca:	fcf43023          	sd	a5,-64(s0)
            sigX = sigA | 0x40000000;
 800aece:	fa843703          	ld	a4,-88(s0)
 800aed2:	400007b7          	lui	a5,0x40000
 800aed6:	8fd9                	or	a5,a5,a4
 800aed8:	faf43c23          	sd	a5,-72(s0)
            sigY = sigB + (expB ? 0x40000000 : sigB);
 800aedc:	fa043783          	ld	a5,-96(s0)
 800aee0:	e781                	bnez	a5,800aee8 <softfloat_subMagsF32+0x290>
 800aee2:	f9843783          	ld	a5,-104(s0)
 800aee6:	a019                	j	800aeec <softfloat_subMagsF32+0x294>
 800aee8:	400007b7          	lui	a5,0x40000
 800aeec:	f9843703          	ld	a4,-104(s0)
 800aef0:	97ba                	add	a5,a5,a4
 800aef2:	faf43823          	sd	a5,-80(s0)
        }
        return
            softfloat_normRoundPackToF32(
                signZ, expZ, sigX - softfloat_shiftRightJam32( sigY, expDiff )
 800aef6:	fb043783          	ld	a5,-80(s0)
 800aefa:	2781                	sext.w	a5,a5
 800aefc:	fe043703          	ld	a4,-32(s0)
 800af00:	85ba                	mv	a1,a4
 800af02:	853e                	mv	a0,a5
 800af04:	e98ff0ef          	jal	ra,800a59c <softfloat_shiftRightJam32>
 800af08:	87aa                	mv	a5,a0
 800af0a:	2781                	sext.w	a5,a5
 800af0c:	1782                	slli	a5,a5,0x20
 800af0e:	9381                	srli	a5,a5,0x20
            softfloat_normRoundPackToF32(
 800af10:	fb843703          	ld	a4,-72(s0)
 800af14:	8f1d                	sub	a4,a4,a5
 800af16:	fcf44783          	lbu	a5,-49(s0)
 800af1a:	863a                	mv	a2,a4
 800af1c:	fc043583          	ld	a1,-64(s0)
 800af20:	853e                	mv	a0,a5
 800af22:	642000ef          	jal	ra,800b564 <softfloat_normRoundPackToF32>
 800af26:	87aa                	mv	a5,a0
 800af28:	a02d                	j	800af52 <softfloat_subMagsF32+0x2fa>
            if ( sigA | sigB ) goto propagateNaN;
 800af2a:	0001                	nop
 800af2c:	a021                	j	800af34 <softfloat_subMagsF32+0x2dc>
                if ( sigB ) goto propagateNaN;
 800af2e:	0001                	nop
 800af30:	a011                	j	800af34 <softfloat_subMagsF32+0x2dc>
                if ( sigA ) goto propagateNaN;
 800af32:	0001                	nop
            );
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 propagateNaN:
    uiZ = softfloat_propagateNaNF32UI( uiA, uiB );
 800af34:	f7043583          	ld	a1,-144(s0)
 800af38:	f7843503          	ld	a0,-136(s0)
 800af3c:	366000ef          	jal	ra,800b2a2 <softfloat_propagateNaNF32UI>
 800af40:	fca43c23          	sd	a0,-40(s0)
 uiZ:
    uZ.ui = uiZ;
 800af44:	fd843783          	ld	a5,-40(s0)
 800af48:	2781                	sext.w	a5,a5
 800af4a:	f8f42423          	sw	a5,-120(s0)
    return uZ.f;
 800af4e:	f8842783          	lw	a5,-120(s0)

}
 800af52:	853e                	mv	a0,a5
 800af54:	60aa                	ld	ra,136(sp)
 800af56:	640a                	ld	s0,128(sp)
 800af58:	6149                	addi	sp,sp,144
 800af5a:	8082                	ret

000000000800af5c <softfloat_subMagsF64>:
#include "specialize.h"
#include "softfloat.h"

float64_t
 softfloat_subMagsF64( uint_fast64_t uiA, uint_fast64_t uiB, bool signZ )
{
 800af5c:	7175                	addi	sp,sp,-144
 800af5e:	e506                	sd	ra,136(sp)
 800af60:	e122                	sd	s0,128(sp)
 800af62:	0900                	addi	s0,sp,144
 800af64:	f8a43423          	sd	a0,-120(s0)
 800af68:	f8b43023          	sd	a1,-128(s0)
 800af6c:	87b2                	mv	a5,a2
 800af6e:	f6f40fa3          	sb	a5,-129(s0)
    uint_fast64_t sigZ;
    union ui64_f64 uZ;

    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    expA = expF64UI( uiA );
 800af72:	f8843783          	ld	a5,-120(s0)
 800af76:	93d1                	srli	a5,a5,0x34
 800af78:	7ff7f793          	andi	a5,a5,2047
 800af7c:	fef43423          	sd	a5,-24(s0)
    sigA = fracF64UI( uiA );
 800af80:	f8843703          	ld	a4,-120(s0)
 800af84:	57fd                	li	a5,-1
 800af86:	83b1                	srli	a5,a5,0xc
 800af88:	8ff9                	and	a5,a5,a4
 800af8a:	faf43c23          	sd	a5,-72(s0)
    expB = expF64UI( uiB );
 800af8e:	f8043783          	ld	a5,-128(s0)
 800af92:	93d1                	srli	a5,a5,0x34
 800af94:	7ff7f793          	andi	a5,a5,2047
 800af98:	faf43823          	sd	a5,-80(s0)
    sigB = fracF64UI( uiB );
 800af9c:	f8043703          	ld	a4,-128(s0)
 800afa0:	57fd                	li	a5,-1
 800afa2:	83b1                	srli	a5,a5,0xc
 800afa4:	8ff9                	and	a5,a5,a4
 800afa6:	faf43423          	sd	a5,-88(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    expDiff = expA - expB;
 800afaa:	fe843703          	ld	a4,-24(s0)
 800afae:	fb043783          	ld	a5,-80(s0)
 800afb2:	40f707b3          	sub	a5,a4,a5
 800afb6:	faf43023          	sd	a5,-96(s0)
    if ( ! expDiff ) {
 800afba:	fa043783          	ld	a5,-96(s0)
 800afbe:	10079663          	bnez	a5,800b0ca <softfloat_subMagsF64+0x16e>
        /*--------------------------------------------------------------------
        *--------------------------------------------------------------------*/
        if ( expA == 0x7FF ) {
 800afc2:	fe843703          	ld	a4,-24(s0)
 800afc6:	7ff00793          	li	a5,2047
 800afca:	02f71363          	bne	a4,a5,800aff0 <softfloat_subMagsF64+0x94>
            if ( sigA | sigB ) goto propagateNaN;
 800afce:	fb843703          	ld	a4,-72(s0)
 800afd2:	fa843783          	ld	a5,-88(s0)
 800afd6:	8fd9                	or	a5,a5,a4
 800afd8:	24079063          	bnez	a5,800b218 <softfloat_subMagsF64+0x2bc>
            softfloat_raiseFlags( softfloat_flag_invalid );
 800afdc:	001867f3          	csrrsi	a5,fflags,16
 800afe0:	f8f43c23          	sd	a5,-104(s0)
            uiZ = defaultNaNF64UI;
 800afe4:	00fff7b7          	lui	a5,0xfff
 800afe8:	179e                	slli	a5,a5,0x27
 800afea:	fef43023          	sd	a5,-32(s0)
            goto uiZ;
 800afee:	a491                	j	800b232 <softfloat_subMagsF64+0x2d6>
        }
        sigDiff = sigA - sigB;
 800aff0:	fb843703          	ld	a4,-72(s0)
 800aff4:	fa843783          	ld	a5,-88(s0)
 800aff8:	40f707b3          	sub	a5,a4,a5
 800affc:	fcf43c23          	sd	a5,-40(s0)
        if ( ! sigDiff ) {
 800b000:	fd843783          	ld	a5,-40(s0)
 800b004:	ef91                	bnez	a5,800b020 <softfloat_subMagsF64+0xc4>
            uiZ =
                packToF64UI(
 800b006:	8792                	mv	a5,tp
 800b008:	2781                	sext.w	a5,a5
 800b00a:	873e                	mv	a4,a5
 800b00c:	4789                	li	a5,2
 800b00e:	00f71563          	bne	a4,a5,800b018 <softfloat_subMagsF64+0xbc>
 800b012:	57fd                	li	a5,-1
 800b014:	17fe                	slli	a5,a5,0x3f
 800b016:	a011                	j	800b01a <softfloat_subMagsF64+0xbe>
 800b018:	4781                	li	a5,0
            uiZ =
 800b01a:	fef43023          	sd	a5,-32(s0)
                    (softfloat_roundingMode == softfloat_round_min), 0, 0 );
            goto uiZ;
 800b01e:	ac11                	j	800b232 <softfloat_subMagsF64+0x2d6>
        }
        if ( expA ) --expA;
 800b020:	fe843783          	ld	a5,-24(s0)
 800b024:	c791                	beqz	a5,800b030 <softfloat_subMagsF64+0xd4>
 800b026:	fe843783          	ld	a5,-24(s0)
 800b02a:	17fd                	addi	a5,a5,-1
 800b02c:	fef43423          	sd	a5,-24(s0)
        if ( sigDiff < 0 ) {
 800b030:	fd843783          	ld	a5,-40(s0)
 800b034:	0207db63          	bgez	a5,800b06a <softfloat_subMagsF64+0x10e>
            signZ = ! signZ;
 800b038:	f7f44783          	lbu	a5,-129(s0)
 800b03c:	2781                	sext.w	a5,a5
 800b03e:	00f037b3          	snez	a5,a5
 800b042:	0ff7f793          	andi	a5,a5,255
 800b046:	0017c793          	xori	a5,a5,1
 800b04a:	0ff7f793          	andi	a5,a5,255
 800b04e:	2781                	sext.w	a5,a5
 800b050:	f6f40fa3          	sb	a5,-129(s0)
 800b054:	f7f44783          	lbu	a5,-129(s0)
 800b058:	8b85                	andi	a5,a5,1
 800b05a:	f6f40fa3          	sb	a5,-129(s0)
            sigDiff = -sigDiff;
 800b05e:	fd843783          	ld	a5,-40(s0)
 800b062:	40f007b3          	neg	a5,a5
 800b066:	fcf43c23          	sd	a5,-40(s0)
        }
        shiftDist = softfloat_countLeadingZeros64( sigDiff ) - 11;
 800b06a:	fd843783          	ld	a5,-40(s0)
 800b06e:	853e                	mv	a0,a5
 800b070:	448000ef          	jal	ra,800b4b8 <softfloat_countLeadingZeros64>
 800b074:	87aa                	mv	a5,a0
 800b076:	37d5                	addiw	a5,a5,-11
 800b078:	0ff7f793          	andi	a5,a5,255
 800b07c:	fcf40ba3          	sb	a5,-41(s0)
        expZ = expA - shiftDist;
 800b080:	fd740783          	lb	a5,-41(s0)
 800b084:	fe843703          	ld	a4,-24(s0)
 800b088:	40f707b3          	sub	a5,a4,a5
 800b08c:	fcf43423          	sd	a5,-56(s0)
        if ( expZ < 0 ) {
 800b090:	fc843783          	ld	a5,-56(s0)
 800b094:	0007d863          	bgez	a5,800b0a4 <softfloat_subMagsF64+0x148>
            shiftDist = expA;
 800b098:	fe843783          	ld	a5,-24(s0)
 800b09c:	fcf40ba3          	sb	a5,-41(s0)
            expZ = 0;
 800b0a0:	fc043423          	sd	zero,-56(s0)
        }
        uiZ = packToF64UI( signZ, expZ, sigDiff<<shiftDist );
 800b0a4:	f7f44783          	lbu	a5,-129(s0)
 800b0a8:	03f79713          	slli	a4,a5,0x3f
 800b0ac:	fc843783          	ld	a5,-56(s0)
 800b0b0:	17d2                	slli	a5,a5,0x34
 800b0b2:	97ba                	add	a5,a5,a4
 800b0b4:	fd740703          	lb	a4,-41(s0)
 800b0b8:	2701                	sext.w	a4,a4
 800b0ba:	fd843683          	ld	a3,-40(s0)
 800b0be:	00e69733          	sll	a4,a3,a4
 800b0c2:	97ba                	add	a5,a5,a4
 800b0c4:	fef43023          	sd	a5,-32(s0)
        goto uiZ;
 800b0c8:	a2ad                	j	800b232 <softfloat_subMagsF64+0x2d6>
    } else {
        /*--------------------------------------------------------------------
        *--------------------------------------------------------------------*/
        sigA <<= 10;
 800b0ca:	fb843783          	ld	a5,-72(s0)
 800b0ce:	07aa                	slli	a5,a5,0xa
 800b0d0:	faf43c23          	sd	a5,-72(s0)
        sigB <<= 10;
 800b0d4:	fa843783          	ld	a5,-88(s0)
 800b0d8:	07aa                	slli	a5,a5,0xa
 800b0da:	faf43423          	sd	a5,-88(s0)
        if ( expDiff < 0 ) {
 800b0de:	fa043783          	ld	a5,-96(s0)
 800b0e2:	0a07d663          	bgez	a5,800b18e <softfloat_subMagsF64+0x232>
            /*----------------------------------------------------------------
            *----------------------------------------------------------------*/
            signZ = ! signZ;
 800b0e6:	f7f44783          	lbu	a5,-129(s0)
 800b0ea:	2781                	sext.w	a5,a5
 800b0ec:	00f037b3          	snez	a5,a5
 800b0f0:	0ff7f793          	andi	a5,a5,255
 800b0f4:	0017c793          	xori	a5,a5,1
 800b0f8:	0ff7f793          	andi	a5,a5,255
 800b0fc:	2781                	sext.w	a5,a5
 800b0fe:	f6f40fa3          	sb	a5,-129(s0)
 800b102:	f7f44783          	lbu	a5,-129(s0)
 800b106:	8b85                	andi	a5,a5,1
 800b108:	f6f40fa3          	sb	a5,-129(s0)
            if ( expB == 0x7FF ) {
 800b10c:	fb043703          	ld	a4,-80(s0)
 800b110:	7ff00793          	li	a5,2047
 800b114:	02f71163          	bne	a4,a5,800b136 <softfloat_subMagsF64+0x1da>
                if ( sigB ) goto propagateNaN;
 800b118:	fa843783          	ld	a5,-88(s0)
 800b11c:	10079063          	bnez	a5,800b21c <softfloat_subMagsF64+0x2c0>
                uiZ = packToF64UI( signZ, 0x7FF, 0 );
 800b120:	f7f44783          	lbu	a5,-129(s0)
 800b124:	03f79713          	slli	a4,a5,0x3f
 800b128:	7ff00793          	li	a5,2047
 800b12c:	17d2                	slli	a5,a5,0x34
 800b12e:	97ba                	add	a5,a5,a4
 800b130:	fef43023          	sd	a5,-32(s0)
                goto uiZ;
 800b134:	a8fd                	j	800b232 <softfloat_subMagsF64+0x2d6>
            }
            sigA += expA ? UINT64_C( 0x4000000000000000 ) : sigA;
 800b136:	fe843783          	ld	a5,-24(s0)
 800b13a:	e781                	bnez	a5,800b142 <softfloat_subMagsF64+0x1e6>
 800b13c:	fb843783          	ld	a5,-72(s0)
 800b140:	a019                	j	800b146 <softfloat_subMagsF64+0x1ea>
 800b142:	4785                	li	a5,1
 800b144:	17fa                	slli	a5,a5,0x3e
 800b146:	fb843703          	ld	a4,-72(s0)
 800b14a:	97ba                	add	a5,a5,a4
 800b14c:	faf43c23          	sd	a5,-72(s0)
            sigA = softfloat_shiftRightJam64( sigA, -expDiff );
 800b150:	fa043783          	ld	a5,-96(s0)
 800b154:	40f007b3          	neg	a5,a5
 800b158:	85be                	mv	a1,a5
 800b15a:	fb843503          	ld	a0,-72(s0)
 800b15e:	cb4ff0ef          	jal	ra,800a612 <softfloat_shiftRightJam64>
 800b162:	faa43c23          	sd	a0,-72(s0)
            sigB |= UINT64_C( 0x4000000000000000 );
 800b166:	fa843703          	ld	a4,-88(s0)
 800b16a:	4785                	li	a5,1
 800b16c:	17fa                	slli	a5,a5,0x3e
 800b16e:	8fd9                	or	a5,a5,a4
 800b170:	faf43423          	sd	a5,-88(s0)
            expZ = expB;
 800b174:	fb043783          	ld	a5,-80(s0)
 800b178:	fcf43423          	sd	a5,-56(s0)
            sigZ = sigB - sigA;
 800b17c:	fa843703          	ld	a4,-88(s0)
 800b180:	fb843783          	ld	a5,-72(s0)
 800b184:	40f707b3          	sub	a5,a4,a5
 800b188:	fcf43023          	sd	a5,-64(s0)
 800b18c:	a885                	j	800b1fc <softfloat_subMagsF64+0x2a0>
        } else {
            /*----------------------------------------------------------------
            *----------------------------------------------------------------*/
            if ( expA == 0x7FF ) {
 800b18e:	fe843703          	ld	a4,-24(s0)
 800b192:	7ff00793          	li	a5,2047
 800b196:	00f71a63          	bne	a4,a5,800b1aa <softfloat_subMagsF64+0x24e>
                if ( sigA ) goto propagateNaN;
 800b19a:	fb843783          	ld	a5,-72(s0)
 800b19e:	e3c9                	bnez	a5,800b220 <softfloat_subMagsF64+0x2c4>
                uiZ = uiA;
 800b1a0:	f8843783          	ld	a5,-120(s0)
 800b1a4:	fef43023          	sd	a5,-32(s0)
                goto uiZ;
 800b1a8:	a069                	j	800b232 <softfloat_subMagsF64+0x2d6>
            }
            sigB += expB ? UINT64_C( 0x4000000000000000 ) : sigB;
 800b1aa:	fb043783          	ld	a5,-80(s0)
 800b1ae:	e781                	bnez	a5,800b1b6 <softfloat_subMagsF64+0x25a>
 800b1b0:	fa843783          	ld	a5,-88(s0)
 800b1b4:	a019                	j	800b1ba <softfloat_subMagsF64+0x25e>
 800b1b6:	4785                	li	a5,1
 800b1b8:	17fa                	slli	a5,a5,0x3e
 800b1ba:	fa843703          	ld	a4,-88(s0)
 800b1be:	97ba                	add	a5,a5,a4
 800b1c0:	faf43423          	sd	a5,-88(s0)
            sigB = softfloat_shiftRightJam64( sigB, expDiff );
 800b1c4:	fa043783          	ld	a5,-96(s0)
 800b1c8:	85be                	mv	a1,a5
 800b1ca:	fa843503          	ld	a0,-88(s0)
 800b1ce:	c44ff0ef          	jal	ra,800a612 <softfloat_shiftRightJam64>
 800b1d2:	faa43423          	sd	a0,-88(s0)
            sigA |= UINT64_C( 0x4000000000000000 );
 800b1d6:	fb843703          	ld	a4,-72(s0)
 800b1da:	4785                	li	a5,1
 800b1dc:	17fa                	slli	a5,a5,0x3e
 800b1de:	8fd9                	or	a5,a5,a4
 800b1e0:	faf43c23          	sd	a5,-72(s0)
            expZ = expA;
 800b1e4:	fe843783          	ld	a5,-24(s0)
 800b1e8:	fcf43423          	sd	a5,-56(s0)
            sigZ = sigA - sigB;
 800b1ec:	fb843703          	ld	a4,-72(s0)
 800b1f0:	fa843783          	ld	a5,-88(s0)
 800b1f4:	40f707b3          	sub	a5,a4,a5
 800b1f8:	fcf43023          	sd	a5,-64(s0)
        }
        return softfloat_normRoundPackToF64( signZ, expZ - 1, sigZ );
 800b1fc:	fc843783          	ld	a5,-56(s0)
 800b200:	fff78713          	addi	a4,a5,-1 # ffefff <MEM_START-0x7001001>
 800b204:	f7f44783          	lbu	a5,-129(s0)
 800b208:	fc043603          	ld	a2,-64(s0)
 800b20c:	85ba                	mv	a1,a4
 800b20e:	853e                	mv	a0,a5
 800b210:	42e000ef          	jal	ra,800b63e <softfloat_normRoundPackToF64>
 800b214:	87aa                	mv	a5,a0
 800b216:	a025                	j	800b23e <softfloat_subMagsF64+0x2e2>
            if ( sigA | sigB ) goto propagateNaN;
 800b218:	0001                	nop
 800b21a:	a021                	j	800b222 <softfloat_subMagsF64+0x2c6>
                if ( sigB ) goto propagateNaN;
 800b21c:	0001                	nop
 800b21e:	a011                	j	800b222 <softfloat_subMagsF64+0x2c6>
                if ( sigA ) goto propagateNaN;
 800b220:	0001                	nop
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 propagateNaN:
    uiZ = softfloat_propagateNaNF64UI( uiA, uiB );
 800b222:	f8043583          	ld	a1,-128(s0)
 800b226:	f8843503          	ld	a0,-120(s0)
 800b22a:	0da000ef          	jal	ra,800b304 <softfloat_propagateNaNF64UI>
 800b22e:	fea43023          	sd	a0,-32(s0)
 uiZ:
    uZ.ui = uiZ;
 800b232:	fe043783          	ld	a5,-32(s0)
 800b236:	f8f43823          	sd	a5,-112(s0)
    return uZ.f;
 800b23a:	f9043783          	ld	a5,-112(s0)

}
 800b23e:	853e                	mv	a0,a5
 800b240:	60aa                	ld	ra,136(sp)
 800b242:	640a                	ld	s0,128(sp)
 800b244:	6149                	addi	sp,sp,144
 800b246:	8082                	ret

000000000800b248 <ui64_to_f64>:
#include "platform.h"
#include "internals.h"
#include "softfloat.h"

float64_t ui64_to_f64( uint64_t a )
{
 800b248:	7179                	addi	sp,sp,-48
 800b24a:	f406                	sd	ra,40(sp)
 800b24c:	f022                	sd	s0,32(sp)
 800b24e:	1800                	addi	s0,sp,48
 800b250:	fca43c23          	sd	a0,-40(s0)
    union ui64_f64 uZ;

    if ( ! a ) {
 800b254:	fd843783          	ld	a5,-40(s0)
 800b258:	e791                	bnez	a5,800b264 <ui64_to_f64+0x1c>
        uZ.ui = 0;
 800b25a:	fe043423          	sd	zero,-24(s0)
        return uZ.f;
 800b25e:	fe843783          	ld	a5,-24(s0)
 800b262:	a81d                	j	800b298 <ui64_to_f64+0x50>
    }
    if ( a & UINT64_C( 0x8000000000000000 ) ) {
 800b264:	fd843783          	ld	a5,-40(s0)
 800b268:	0207d063          	bgez	a5,800b288 <ui64_to_f64+0x40>
        return
            softfloat_roundPackToF64(
 800b26c:	4585                	li	a1,1
 800b26e:	fd843503          	ld	a0,-40(s0)
 800b272:	fa0ff0ef          	jal	ra,800aa12 <softfloat_shortShiftRightJam64>
 800b276:	87aa                	mv	a5,a0
 800b278:	863e                	mv	a2,a5
 800b27a:	43d00593          	li	a1,1085
 800b27e:	4501                	li	a0,0
 800b280:	ffdfe0ef          	jal	ra,800a27c <softfloat_roundPackToF64>
 800b284:	87aa                	mv	a5,a0
 800b286:	a809                	j	800b298 <ui64_to_f64+0x50>
                0, 0x43D, softfloat_shortShiftRightJam64( a, 1 ) );
    } else {
        return softfloat_normRoundPackToF64( 0, 0x43C, a );
 800b288:	fd843603          	ld	a2,-40(s0)
 800b28c:	43c00593          	li	a1,1084
 800b290:	4501                	li	a0,0
 800b292:	3ac000ef          	jal	ra,800b63e <softfloat_normRoundPackToF64>
 800b296:	87aa                	mv	a5,a0
    }

}
 800b298:	853e                	mv	a0,a5
 800b29a:	70a2                	ld	ra,40(sp)
 800b29c:	7402                	ld	s0,32(sp)
 800b29e:	6145                	addi	sp,sp,48
 800b2a0:	8082                	ret

000000000800b2a2 <softfloat_propagateNaNF32UI>:
| the combined NaN result.  If either `uiA' or `uiB' has the pattern of a
| signaling NaN, the invalid exception is raised.
*----------------------------------------------------------------------------*/
uint_fast32_t
 softfloat_propagateNaNF32UI( uint_fast32_t uiA, uint_fast32_t uiB )
{
 800b2a2:	7179                	addi	sp,sp,-48
 800b2a4:	f422                	sd	s0,40(sp)
 800b2a6:	1800                	addi	s0,sp,48
 800b2a8:	fca43c23          	sd	a0,-40(s0)
 800b2ac:	fcb43823          	sd	a1,-48(s0)

    if ( softfloat_isSigNaNF32UI( uiA ) || softfloat_isSigNaNF32UI( uiB ) ) {
 800b2b0:	fd843703          	ld	a4,-40(s0)
 800b2b4:	7fc007b7          	lui	a5,0x7fc00
 800b2b8:	8f7d                	and	a4,a4,a5
 800b2ba:	7f8007b7          	lui	a5,0x7f800
 800b2be:	00f71963          	bne	a4,a5,800b2d0 <softfloat_propagateNaNF32UI+0x2e>
 800b2c2:	fd843703          	ld	a4,-40(s0)
 800b2c6:	004007b7          	lui	a5,0x400
 800b2ca:	17fd                	addi	a5,a5,-1
 800b2cc:	8ff9                	and	a5,a5,a4
 800b2ce:	e38d                	bnez	a5,800b2f0 <softfloat_propagateNaNF32UI+0x4e>
 800b2d0:	fd043703          	ld	a4,-48(s0)
 800b2d4:	7fc007b7          	lui	a5,0x7fc00
 800b2d8:	8f7d                	and	a4,a4,a5
 800b2da:	7f8007b7          	lui	a5,0x7f800
 800b2de:	00f71d63          	bne	a4,a5,800b2f8 <softfloat_propagateNaNF32UI+0x56>
 800b2e2:	fd043703          	ld	a4,-48(s0)
 800b2e6:	004007b7          	lui	a5,0x400
 800b2ea:	17fd                	addi	a5,a5,-1
 800b2ec:	8ff9                	and	a5,a5,a4
 800b2ee:	c789                	beqz	a5,800b2f8 <softfloat_propagateNaNF32UI+0x56>
        softfloat_raiseFlags( softfloat_flag_invalid );
 800b2f0:	001867f3          	csrrsi	a5,fflags,16
 800b2f4:	fef43423          	sd	a5,-24(s0)
    }
    return defaultNaNF32UI;
 800b2f8:	7fc007b7          	lui	a5,0x7fc00

}
 800b2fc:	853e                	mv	a0,a5
 800b2fe:	7422                	ld	s0,40(sp)
 800b300:	6145                	addi	sp,sp,48
 800b302:	8082                	ret

000000000800b304 <softfloat_propagateNaNF64UI>:
| the combined NaN result.  If either `uiA' or `uiB' has the pattern of a
| signaling NaN, the invalid exception is raised.
*----------------------------------------------------------------------------*/
uint_fast64_t
 softfloat_propagateNaNF64UI( uint_fast64_t uiA, uint_fast64_t uiB )
{
 800b304:	7179                	addi	sp,sp,-48
 800b306:	f422                	sd	s0,40(sp)
 800b308:	1800                	addi	s0,sp,48
 800b30a:	fca43c23          	sd	a0,-40(s0)
 800b30e:	fcb43823          	sd	a1,-48(s0)

    if ( softfloat_isSigNaNF64UI( uiA ) || softfloat_isSigNaNF64UI( uiB ) ) {
 800b312:	fd843703          	ld	a4,-40(s0)
 800b316:	00fff7b7          	lui	a5,0xfff
 800b31a:	179e                	slli	a5,a5,0x27
 800b31c:	8f7d                	and	a4,a4,a5
 800b31e:	7ff00793          	li	a5,2047
 800b322:	17d2                	slli	a5,a5,0x34
 800b324:	00f71863          	bne	a4,a5,800b334 <softfloat_propagateNaNF64UI+0x30>
 800b328:	fd843703          	ld	a4,-40(s0)
 800b32c:	57fd                	li	a5,-1
 800b32e:	83b5                	srli	a5,a5,0xd
 800b330:	8ff9                	and	a5,a5,a4
 800b332:	e395                	bnez	a5,800b356 <softfloat_propagateNaNF64UI+0x52>
 800b334:	fd043703          	ld	a4,-48(s0)
 800b338:	00fff7b7          	lui	a5,0xfff
 800b33c:	179e                	slli	a5,a5,0x27
 800b33e:	8f7d                	and	a4,a4,a5
 800b340:	7ff00793          	li	a5,2047
 800b344:	17d2                	slli	a5,a5,0x34
 800b346:	00f71c63          	bne	a4,a5,800b35e <softfloat_propagateNaNF64UI+0x5a>
 800b34a:	fd043703          	ld	a4,-48(s0)
 800b34e:	57fd                	li	a5,-1
 800b350:	83b5                	srli	a5,a5,0xd
 800b352:	8ff9                	and	a5,a5,a4
 800b354:	c789                	beqz	a5,800b35e <softfloat_propagateNaNF64UI+0x5a>
        softfloat_raiseFlags( softfloat_flag_invalid );
 800b356:	001867f3          	csrrsi	a5,fflags,16
 800b35a:	fef43423          	sd	a5,-24(s0)
    }
    return defaultNaNF64UI;
 800b35e:	00fff7b7          	lui	a5,0xfff
 800b362:	179e                	slli	a5,a5,0x27

}
 800b364:	853e                	mv	a0,a5
 800b366:	7422                	ld	s0,40(sp)
 800b368:	6145                	addi	sp,sp,48
 800b36a:	8082                	ret

000000000800b36c <softfloat_addM>:
     uint_fast8_t size_words,
     const uint32_t *aPtr,
     const uint32_t *bPtr,
     uint32_t *zPtr
 )
{
 800b36c:	715d                	addi	sp,sp,-80
 800b36e:	e4a2                	sd	s0,72(sp)
 800b370:	0880                	addi	s0,sp,80
 800b372:	87aa                	mv	a5,a0
 800b374:	fcb43023          	sd	a1,-64(s0)
 800b378:	fac43c23          	sd	a2,-72(s0)
 800b37c:	fad43823          	sd	a3,-80(s0)
 800b380:	fcf407a3          	sb	a5,-49(s0)
    unsigned int index, lastIndex;
    uint_fast8_t carry;
    uint32_t wordA, wordZ;

    index = indexWordLo( size_words );
 800b384:	fe042623          	sw	zero,-20(s0)
    lastIndex = indexWordHi( size_words );
 800b388:	fcf44783          	lbu	a5,-49(s0)
 800b38c:	2781                	sext.w	a5,a5
 800b38e:	37fd                	addiw	a5,a5,-1
 800b390:	2781                	sext.w	a5,a5
 800b392:	fef42223          	sw	a5,-28(s0)
    carry = 0;
 800b396:	fe0405a3          	sb	zero,-21(s0)
    for (;;) {
        wordA = aPtr[index];
 800b39a:	fec46783          	lwu	a5,-20(s0)
 800b39e:	078a                	slli	a5,a5,0x2
 800b3a0:	fc043703          	ld	a4,-64(s0)
 800b3a4:	97ba                	add	a5,a5,a4
 800b3a6:	439c                	lw	a5,0(a5)
 800b3a8:	fef42023          	sw	a5,-32(s0)
        wordZ = wordA + bPtr[index] + carry;
 800b3ac:	fec46783          	lwu	a5,-20(s0)
 800b3b0:	078a                	slli	a5,a5,0x2
 800b3b2:	fb843703          	ld	a4,-72(s0)
 800b3b6:	97ba                	add	a5,a5,a4
 800b3b8:	439c                	lw	a5,0(a5)
 800b3ba:	fe042703          	lw	a4,-32(s0)
 800b3be:	9fb9                	addw	a5,a5,a4
 800b3c0:	0007871b          	sext.w	a4,a5
 800b3c4:	feb44783          	lbu	a5,-21(s0)
 800b3c8:	2781                	sext.w	a5,a5
 800b3ca:	9fb9                	addw	a5,a5,a4
 800b3cc:	fcf42e23          	sw	a5,-36(s0)
        zPtr[index] = wordZ;
 800b3d0:	fec46783          	lwu	a5,-20(s0)
 800b3d4:	078a                	slli	a5,a5,0x2
 800b3d6:	fb043703          	ld	a4,-80(s0)
 800b3da:	97ba                	add	a5,a5,a4
 800b3dc:	fdc42703          	lw	a4,-36(s0)
 800b3e0:	c398                	sw	a4,0(a5)
        if ( index == lastIndex ) break;
 800b3e2:	fec42703          	lw	a4,-20(s0)
 800b3e6:	fe442783          	lw	a5,-28(s0)
 800b3ea:	2701                	sext.w	a4,a4
 800b3ec:	2781                	sext.w	a5,a5
 800b3ee:	02f70c63          	beq	a4,a5,800b426 <softfloat_addM+0xba>
        if ( wordZ != wordA ) carry = (wordZ < wordA);
 800b3f2:	fdc42703          	lw	a4,-36(s0)
 800b3f6:	fe042783          	lw	a5,-32(s0)
 800b3fa:	2701                	sext.w	a4,a4
 800b3fc:	2781                	sext.w	a5,a5
 800b3fe:	00f70e63          	beq	a4,a5,800b41a <softfloat_addM+0xae>
 800b402:	fdc42703          	lw	a4,-36(s0)
 800b406:	fe042783          	lw	a5,-32(s0)
 800b40a:	2701                	sext.w	a4,a4
 800b40c:	2781                	sext.w	a5,a5
 800b40e:	00f737b3          	sltu	a5,a4,a5
 800b412:	0ff7f793          	andi	a5,a5,255
 800b416:	fef405a3          	sb	a5,-21(s0)
        index += wordIncr;
 800b41a:	fec42783          	lw	a5,-20(s0)
 800b41e:	2785                	addiw	a5,a5,1
 800b420:	fef42623          	sw	a5,-20(s0)
        wordA = aPtr[index];
 800b424:	bf9d                	j	800b39a <softfloat_addM+0x2e>
        if ( index == lastIndex ) break;
 800b426:	0001                	nop
    }

}
 800b428:	0001                	nop
 800b42a:	6426                	ld	s0,72(sp)
 800b42c:	6161                	addi	sp,sp,80
 800b42e:	8082                	ret

000000000800b430 <softfloat_countLeadingZeros32>:

#define softfloat_countLeadingZeros32 softfloat_countLeadingZeros32
#include "primitives.h"

uint_fast8_t softfloat_countLeadingZeros32( uint32_t a )
{
 800b430:	7179                	addi	sp,sp,-48
 800b432:	f422                	sd	s0,40(sp)
 800b434:	1800                	addi	s0,sp,48
 800b436:	87aa                	mv	a5,a0
 800b438:	fcf42e23          	sw	a5,-36(s0)
    uint_fast8_t count;

    count = 0;
 800b43c:	fe0407a3          	sb	zero,-17(s0)
    if ( a < 0x10000 ) {
 800b440:	fdc42783          	lw	a5,-36(s0)
 800b444:	0007871b          	sext.w	a4,a5
 800b448:	67c1                	lui	a5,0x10
 800b44a:	00f77b63          	bleu	a5,a4,800b460 <softfloat_countLeadingZeros32+0x30>
        count = 16;
 800b44e:	47c1                	li	a5,16
 800b450:	fef407a3          	sb	a5,-17(s0)
        a <<= 16;
 800b454:	fdc42783          	lw	a5,-36(s0)
 800b458:	0107979b          	slliw	a5,a5,0x10
 800b45c:	fcf42e23          	sw	a5,-36(s0)
    }
    if ( a < 0x1000000 ) {
 800b460:	fdc42783          	lw	a5,-36(s0)
 800b464:	0007871b          	sext.w	a4,a5
 800b468:	010007b7          	lui	a5,0x1000
 800b46c:	00f77d63          	bleu	a5,a4,800b486 <softfloat_countLeadingZeros32+0x56>
        count += 8;
 800b470:	fef44783          	lbu	a5,-17(s0)
 800b474:	27a1                	addiw	a5,a5,8
 800b476:	fef407a3          	sb	a5,-17(s0)
        a <<= 8;
 800b47a:	fdc42783          	lw	a5,-36(s0)
 800b47e:	0087979b          	slliw	a5,a5,0x8
 800b482:	fcf42e23          	sw	a5,-36(s0)
    }
    count += softfloat_countLeadingZeros8[a>>24];
 800b486:	fdc42783          	lw	a5,-36(s0)
 800b48a:	0187d79b          	srliw	a5,a5,0x18
 800b48e:	2781                	sext.w	a5,a5
 800b490:	00001717          	auipc	a4,0x1
 800b494:	36870713          	addi	a4,a4,872 # 800c7f8 <softfloat_countLeadingZeros8>
 800b498:	1782                	slli	a5,a5,0x20
 800b49a:	9381                	srli	a5,a5,0x20
 800b49c:	97ba                	add	a5,a5,a4
 800b49e:	0007c783          	lbu	a5,0(a5) # 1000000 <MEM_START-0x7000000>
 800b4a2:	fef44703          	lbu	a4,-17(s0)
 800b4a6:	9fb9                	addw	a5,a5,a4
 800b4a8:	fef407a3          	sb	a5,-17(s0)
    return count;
 800b4ac:	fef44783          	lbu	a5,-17(s0)

}
 800b4b0:	853e                	mv	a0,a5
 800b4b2:	7422                	ld	s0,40(sp)
 800b4b4:	6145                	addi	sp,sp,48
 800b4b6:	8082                	ret

000000000800b4b8 <softfloat_countLeadingZeros64>:

#define softfloat_countLeadingZeros64 softfloat_countLeadingZeros64
#include "primitives.h"

uint_fast8_t softfloat_countLeadingZeros64( uint64_t a )
{
 800b4b8:	7179                	addi	sp,sp,-48
 800b4ba:	f422                	sd	s0,40(sp)
 800b4bc:	1800                	addi	s0,sp,48
 800b4be:	fca43c23          	sd	a0,-40(s0)
    uint_fast8_t count;
    uint32_t a32;

    count = 0;
 800b4c2:	fe0407a3          	sb	zero,-17(s0)
    a32 = a>>32;
 800b4c6:	fd843783          	ld	a5,-40(s0)
 800b4ca:	9381                	srli	a5,a5,0x20
 800b4cc:	fef42423          	sw	a5,-24(s0)
    if ( ! a32 ) {
 800b4d0:	fe842783          	lw	a5,-24(s0)
 800b4d4:	2781                	sext.w	a5,a5
 800b4d6:	eb89                	bnez	a5,800b4e8 <softfloat_countLeadingZeros64+0x30>
        count = 32;
 800b4d8:	02000793          	li	a5,32
 800b4dc:	fef407a3          	sb	a5,-17(s0)
        a32 = a;
 800b4e0:	fd843783          	ld	a5,-40(s0)
 800b4e4:	fef42423          	sw	a5,-24(s0)
    }
    /*------------------------------------------------------------------------
    | From here, result is current count + count leading zeros of `a32'.
    *------------------------------------------------------------------------*/
    if ( a32 < 0x10000 ) {
 800b4e8:	fe842783          	lw	a5,-24(s0)
 800b4ec:	0007871b          	sext.w	a4,a5
 800b4f0:	67c1                	lui	a5,0x10
 800b4f2:	00f77d63          	bleu	a5,a4,800b50c <softfloat_countLeadingZeros64+0x54>
        count += 16;
 800b4f6:	fef44783          	lbu	a5,-17(s0)
 800b4fa:	27c1                	addiw	a5,a5,16
 800b4fc:	fef407a3          	sb	a5,-17(s0)
        a32 <<= 16;
 800b500:	fe842783          	lw	a5,-24(s0)
 800b504:	0107979b          	slliw	a5,a5,0x10
 800b508:	fef42423          	sw	a5,-24(s0)
    }
    if ( a32 < 0x1000000 ) {
 800b50c:	fe842783          	lw	a5,-24(s0)
 800b510:	0007871b          	sext.w	a4,a5
 800b514:	010007b7          	lui	a5,0x1000
 800b518:	00f77d63          	bleu	a5,a4,800b532 <softfloat_countLeadingZeros64+0x7a>
        count += 8;
 800b51c:	fef44783          	lbu	a5,-17(s0)
 800b520:	27a1                	addiw	a5,a5,8
 800b522:	fef407a3          	sb	a5,-17(s0)
        a32 <<= 8;
 800b526:	fe842783          	lw	a5,-24(s0)
 800b52a:	0087979b          	slliw	a5,a5,0x8
 800b52e:	fef42423          	sw	a5,-24(s0)
    }
    count += softfloat_countLeadingZeros8[a32>>24];
 800b532:	fe842783          	lw	a5,-24(s0)
 800b536:	0187d79b          	srliw	a5,a5,0x18
 800b53a:	2781                	sext.w	a5,a5
 800b53c:	00001717          	auipc	a4,0x1
 800b540:	2bc70713          	addi	a4,a4,700 # 800c7f8 <softfloat_countLeadingZeros8>
 800b544:	1782                	slli	a5,a5,0x20
 800b546:	9381                	srli	a5,a5,0x20
 800b548:	97ba                	add	a5,a5,a4
 800b54a:	0007c783          	lbu	a5,0(a5) # 1000000 <MEM_START-0x7000000>
 800b54e:	fef44703          	lbu	a4,-17(s0)
 800b552:	9fb9                	addw	a5,a5,a4
 800b554:	fef407a3          	sb	a5,-17(s0)
    return count;
 800b558:	fef44783          	lbu	a5,-17(s0)

}
 800b55c:	853e                	mv	a0,a5
 800b55e:	7422                	ld	s0,40(sp)
 800b560:	6145                	addi	sp,sp,48
 800b562:	8082                	ret

000000000800b564 <softfloat_normRoundPackToF32>:
#include "platform.h"
#include "internals.h"

float32_t
 softfloat_normRoundPackToF32( bool sign, int_fast16_t exp, uint_fast32_t sig )
{
 800b564:	7139                	addi	sp,sp,-64
 800b566:	fc06                	sd	ra,56(sp)
 800b568:	f822                	sd	s0,48(sp)
 800b56a:	0080                	addi	s0,sp,64
 800b56c:	87aa                	mv	a5,a0
 800b56e:	fcb43823          	sd	a1,-48(s0)
 800b572:	fcc43423          	sd	a2,-56(s0)
 800b576:	fcf40fa3          	sb	a5,-33(s0)
    int_fast8_t shiftDist;
    union ui32_f32 uZ;

    shiftDist = softfloat_countLeadingZeros32( sig ) - 1;
 800b57a:	fc843783          	ld	a5,-56(s0)
 800b57e:	2781                	sext.w	a5,a5
 800b580:	853e                	mv	a0,a5
 800b582:	eafff0ef          	jal	ra,800b430 <softfloat_countLeadingZeros32>
 800b586:	87aa                	mv	a5,a0
 800b588:	37fd                	addiw	a5,a5,-1
 800b58a:	0ff7f793          	andi	a5,a5,255
 800b58e:	fef407a3          	sb	a5,-17(s0)
    exp -= shiftDist;
 800b592:	fef40783          	lb	a5,-17(s0)
 800b596:	fd043703          	ld	a4,-48(s0)
 800b59a:	40f707b3          	sub	a5,a4,a5
 800b59e:	fcf43823          	sd	a5,-48(s0)
    if ( (7 <= shiftDist) && ((unsigned int) exp < 0xFD) ) {
 800b5a2:	fef44783          	lbu	a5,-17(s0)
 800b5a6:	0187971b          	slliw	a4,a5,0x18
 800b5aa:	4187571b          	sraiw	a4,a4,0x18
 800b5ae:	4799                	li	a5,6
 800b5b0:	06e7d163          	ble	a4,a5,800b612 <softfloat_normRoundPackToF32+0xae>
 800b5b4:	fd043783          	ld	a5,-48(s0)
 800b5b8:	2781                	sext.w	a5,a5
 800b5ba:	873e                	mv	a4,a5
 800b5bc:	0fc00793          	li	a5,252
 800b5c0:	04e7e963          	bltu	a5,a4,800b612 <softfloat_normRoundPackToF32+0xae>
        uZ.ui = packToF32UI( sign, sig ? exp : 0, sig<<(shiftDist - 7) );
 800b5c4:	fdf44783          	lbu	a5,-33(s0)
 800b5c8:	2781                	sext.w	a5,a5
 800b5ca:	01f7979b          	slliw	a5,a5,0x1f
 800b5ce:	0007871b          	sext.w	a4,a5
 800b5d2:	fc843783          	ld	a5,-56(s0)
 800b5d6:	cb81                	beqz	a5,800b5e6 <softfloat_normRoundPackToF32+0x82>
 800b5d8:	fd043783          	ld	a5,-48(s0)
 800b5dc:	2781                	sext.w	a5,a5
 800b5de:	0177979b          	slliw	a5,a5,0x17
 800b5e2:	2781                	sext.w	a5,a5
 800b5e4:	a011                	j	800b5e8 <softfloat_normRoundPackToF32+0x84>
 800b5e6:	4781                	li	a5,0
 800b5e8:	9fb9                	addw	a5,a5,a4
 800b5ea:	0007871b          	sext.w	a4,a5
 800b5ee:	fef40783          	lb	a5,-17(s0)
 800b5f2:	2781                	sext.w	a5,a5
 800b5f4:	37e5                	addiw	a5,a5,-7
 800b5f6:	2781                	sext.w	a5,a5
 800b5f8:	86be                	mv	a3,a5
 800b5fa:	fc843783          	ld	a5,-56(s0)
 800b5fe:	00d797b3          	sll	a5,a5,a3
 800b602:	2781                	sext.w	a5,a5
 800b604:	9fb9                	addw	a5,a5,a4
 800b606:	2781                	sext.w	a5,a5
 800b608:	fef42423          	sw	a5,-24(s0)
        return uZ.f;
 800b60c:	fe842783          	lw	a5,-24(s0)
 800b610:	a015                	j	800b634 <softfloat_normRoundPackToF32+0xd0>
    } else {
        return softfloat_roundPackToF32( sign, exp, sig<<shiftDist );
 800b612:	fef40783          	lb	a5,-17(s0)
 800b616:	2781                	sext.w	a5,a5
 800b618:	873e                	mv	a4,a5
 800b61a:	fc843783          	ld	a5,-56(s0)
 800b61e:	00e79733          	sll	a4,a5,a4
 800b622:	fdf44783          	lbu	a5,-33(s0)
 800b626:	863a                	mv	a2,a4
 800b628:	fd043583          	ld	a1,-48(s0)
 800b62c:	853e                	mv	a0,a5
 800b62e:	a19fe0ef          	jal	ra,800a046 <softfloat_roundPackToF32>
 800b632:	87aa                	mv	a5,a0
    }

}
 800b634:	853e                	mv	a0,a5
 800b636:	70e2                	ld	ra,56(sp)
 800b638:	7442                	ld	s0,48(sp)
 800b63a:	6121                	addi	sp,sp,64
 800b63c:	8082                	ret

000000000800b63e <softfloat_normRoundPackToF64>:
#include "platform.h"
#include "internals.h"

float64_t
 softfloat_normRoundPackToF64( bool sign, int_fast16_t exp, uint_fast64_t sig )
{
 800b63e:	7139                	addi	sp,sp,-64
 800b640:	fc06                	sd	ra,56(sp)
 800b642:	f822                	sd	s0,48(sp)
 800b644:	0080                	addi	s0,sp,64
 800b646:	87aa                	mv	a5,a0
 800b648:	fcb43823          	sd	a1,-48(s0)
 800b64c:	fcc43423          	sd	a2,-56(s0)
 800b650:	fcf40fa3          	sb	a5,-33(s0)
    int_fast8_t shiftDist;
    union ui64_f64 uZ;

    shiftDist = softfloat_countLeadingZeros64( sig ) - 1;
 800b654:	fc843503          	ld	a0,-56(s0)
 800b658:	e61ff0ef          	jal	ra,800b4b8 <softfloat_countLeadingZeros64>
 800b65c:	87aa                	mv	a5,a0
 800b65e:	37fd                	addiw	a5,a5,-1
 800b660:	0ff7f793          	andi	a5,a5,255
 800b664:	fef407a3          	sb	a5,-17(s0)
    exp -= shiftDist;
 800b668:	fef40783          	lb	a5,-17(s0)
 800b66c:	fd043703          	ld	a4,-48(s0)
 800b670:	40f707b3          	sub	a5,a4,a5
 800b674:	fcf43823          	sd	a5,-48(s0)
    if ( (10 <= shiftDist) && ((unsigned int) exp < 0x7FD) ) {
 800b678:	fef44783          	lbu	a5,-17(s0)
 800b67c:	0187971b          	slliw	a4,a5,0x18
 800b680:	4187571b          	sraiw	a4,a4,0x18
 800b684:	47a5                	li	a5,9
 800b686:	04e7d763          	ble	a4,a5,800b6d4 <softfloat_normRoundPackToF64+0x96>
 800b68a:	fd043783          	ld	a5,-48(s0)
 800b68e:	2781                	sext.w	a5,a5
 800b690:	873e                	mv	a4,a5
 800b692:	7fc00793          	li	a5,2044
 800b696:	02e7ef63          	bltu	a5,a4,800b6d4 <softfloat_normRoundPackToF64+0x96>
        uZ.ui = packToF64UI( sign, sig ? exp : 0, sig<<(shiftDist - 10) );
 800b69a:	fdf44783          	lbu	a5,-33(s0)
 800b69e:	03f79713          	slli	a4,a5,0x3f
 800b6a2:	fc843783          	ld	a5,-56(s0)
 800b6a6:	c789                	beqz	a5,800b6b0 <softfloat_normRoundPackToF64+0x72>
 800b6a8:	fd043783          	ld	a5,-48(s0)
 800b6ac:	17d2                	slli	a5,a5,0x34
 800b6ae:	a011                	j	800b6b2 <softfloat_normRoundPackToF64+0x74>
 800b6b0:	4781                	li	a5,0
 800b6b2:	973e                	add	a4,a4,a5
 800b6b4:	fef40783          	lb	a5,-17(s0)
 800b6b8:	2781                	sext.w	a5,a5
 800b6ba:	37d9                	addiw	a5,a5,-10
 800b6bc:	2781                	sext.w	a5,a5
 800b6be:	86be                	mv	a3,a5
 800b6c0:	fc843783          	ld	a5,-56(s0)
 800b6c4:	00d797b3          	sll	a5,a5,a3
 800b6c8:	97ba                	add	a5,a5,a4
 800b6ca:	fef43023          	sd	a5,-32(s0)
        return uZ.f;
 800b6ce:	fe043783          	ld	a5,-32(s0)
 800b6d2:	a015                	j	800b6f6 <softfloat_normRoundPackToF64+0xb8>
    } else {
        return softfloat_roundPackToF64( sign, exp, sig<<shiftDist );
 800b6d4:	fef40783          	lb	a5,-17(s0)
 800b6d8:	2781                	sext.w	a5,a5
 800b6da:	873e                	mv	a4,a5
 800b6dc:	fc843783          	ld	a5,-56(s0)
 800b6e0:	00e79733          	sll	a4,a5,a4
 800b6e4:	fdf44783          	lbu	a5,-33(s0)
 800b6e8:	863a                	mv	a2,a4
 800b6ea:	fd043583          	ld	a1,-48(s0)
 800b6ee:	853e                	mv	a0,a5
 800b6f0:	b8dfe0ef          	jal	ra,800a27c <softfloat_roundPackToF64>
 800b6f4:	87aa                	mv	a5,a0
    }

}
 800b6f6:	853e                	mv	a0,a5
 800b6f8:	70e2                	ld	ra,56(sp)
 800b6fa:	7442                	ld	s0,48(sp)
 800b6fc:	6121                	addi	sp,sp,64
 800b6fe:	8082                	ret

000000000800b700 <vsnprintf>:
#include <string.h>
#include <stdarg.h>
#include <stdbool.h>

int vsnprintf(char* out, size_t n, const char* s, va_list vl)
{
 800b700:	7119                	addi	sp,sp,-128
 800b702:	fca2                	sd	s0,120(sp)
 800b704:	0100                	addi	s0,sp,128
 800b706:	f8a43c23          	sd	a0,-104(s0)
 800b70a:	f8b43823          	sd	a1,-112(s0)
 800b70e:	f8c43423          	sd	a2,-120(s0)
 800b712:	f8d43023          	sd	a3,-128(s0)
  bool format = false;
 800b716:	fe0407a3          	sb	zero,-17(s0)
  bool longarg = false;
 800b71a:	fe040723          	sb	zero,-18(s0)
  bool longlongarg = false;
 800b71e:	fe0406a3          	sb	zero,-19(s0)
  size_t pos = 0;
 800b722:	fe043023          	sd	zero,-32(s0)
  for( ; *s; s++)
 800b726:	a6cd                	j	800bb08 <vsnprintf+0x408>
  {
    if(format)
 800b728:	fef44783          	lbu	a5,-17(s0)
 800b72c:	0ff7f793          	andi	a5,a5,255
 800b730:	38078163          	beqz	a5,800bab2 <vsnprintf+0x3b2>
    {
      switch(*s)
 800b734:	f8843783          	ld	a5,-120(s0)
 800b738:	0007c783          	lbu	a5,0(a5)
 800b73c:	2781                	sext.w	a5,a5
 800b73e:	f9d7869b          	addiw	a3,a5,-99
 800b742:	0006871b          	sext.w	a4,a3
 800b746:	47d5                	li	a5,21
 800b748:	3ae7ea63          	bltu	a5,a4,800bafc <vsnprintf+0x3fc>
 800b74c:	02069793          	slli	a5,a3,0x20
 800b750:	9381                	srli	a5,a5,0x20
 800b752:	00279713          	slli	a4,a5,0x2
 800b756:	00001797          	auipc	a5,0x1
 800b75a:	1a278793          	addi	a5,a5,418 # 800c8f8 <softfloat_countLeadingZeros8+0x100>
 800b75e:	97ba                	add	a5,a5,a4
 800b760:	439c                	lw	a5,0(a5)
 800b762:	0007871b          	sext.w	a4,a5
 800b766:	00001797          	auipc	a5,0x1
 800b76a:	19278793          	addi	a5,a5,402 # 800c8f8 <softfloat_countLeadingZeros8+0x100>
 800b76e:	97ba                	add	a5,a5,a4
 800b770:	8782                	jr	a5
      {
        case 'l':
          if (s[1] == 'l') {
 800b772:	f8843783          	ld	a5,-120(s0)
 800b776:	0785                	addi	a5,a5,1
 800b778:	0007c783          	lbu	a5,0(a5)
 800b77c:	873e                	mv	a4,a5
 800b77e:	06c00793          	li	a5,108
 800b782:	00f71b63          	bne	a4,a5,800b798 <vsnprintf+0x98>
              longlongarg = true;
 800b786:	4785                	li	a5,1
 800b788:	fef406a3          	sb	a5,-19(s0)
              s++;
 800b78c:	f8843783          	ld	a5,-120(s0)
 800b790:	0785                	addi	a5,a5,1
 800b792:	f8f43423          	sd	a5,-120(s0)
          }
          else
              longarg = true;
          break;
 800b796:	a6a5                	j	800bafe <vsnprintf+0x3fe>
              longarg = true;
 800b798:	4785                	li	a5,1
 800b79a:	fef40723          	sb	a5,-18(s0)
          break;
 800b79e:	a685                	j	800bafe <vsnprintf+0x3fe>
        case 'p':
          longarg = true;
 800b7a0:	4785                	li	a5,1
 800b7a2:	fef40723          	sb	a5,-18(s0)
          if (++pos < n) out[pos-1] = '0';
 800b7a6:	fe043783          	ld	a5,-32(s0)
 800b7aa:	0785                	addi	a5,a5,1
 800b7ac:	fef43023          	sd	a5,-32(s0)
 800b7b0:	fe043703          	ld	a4,-32(s0)
 800b7b4:	f9043783          	ld	a5,-112(s0)
 800b7b8:	00f77c63          	bleu	a5,a4,800b7d0 <vsnprintf+0xd0>
 800b7bc:	fe043783          	ld	a5,-32(s0)
 800b7c0:	17fd                	addi	a5,a5,-1
 800b7c2:	f9843703          	ld	a4,-104(s0)
 800b7c6:	97ba                	add	a5,a5,a4
 800b7c8:	03000713          	li	a4,48
 800b7cc:	00e78023          	sb	a4,0(a5)
          if (++pos < n) out[pos-1] = 'x';
 800b7d0:	fe043783          	ld	a5,-32(s0)
 800b7d4:	0785                	addi	a5,a5,1
 800b7d6:	fef43023          	sd	a5,-32(s0)
 800b7da:	fe043703          	ld	a4,-32(s0)
 800b7de:	f9043783          	ld	a5,-112(s0)
 800b7e2:	00f77c63          	bleu	a5,a4,800b7fa <vsnprintf+0xfa>
 800b7e6:	fe043783          	ld	a5,-32(s0)
 800b7ea:	17fd                	addi	a5,a5,-1
 800b7ec:	f9843703          	ld	a4,-104(s0)
 800b7f0:	97ba                	add	a5,a5,a4
 800b7f2:	07800713          	li	a4,120
 800b7f6:	00e78023          	sb	a4,0(a5)
        case 'x':
        {
          long num = longarg ? va_arg(vl, long) : va_arg(vl, int);
 800b7fa:	fee44783          	lbu	a5,-18(s0)
 800b7fe:	0ff7f793          	andi	a5,a5,255
 800b802:	cb89                	beqz	a5,800b814 <vsnprintf+0x114>
 800b804:	f8043783          	ld	a5,-128(s0)
 800b808:	00878713          	addi	a4,a5,8
 800b80c:	f8e43023          	sd	a4,-128(s0)
 800b810:	639c                	ld	a5,0(a5)
 800b812:	a801                	j	800b822 <vsnprintf+0x122>
 800b814:	f8043783          	ld	a5,-128(s0)
 800b818:	00878713          	addi	a4,a5,8
 800b81c:	f8e43023          	sd	a4,-128(s0)
 800b820:	439c                	lw	a5,0(a5)
 800b822:	faf43423          	sd	a5,-88(s0)
          for(int i = 2*(longarg ? sizeof(long) : sizeof(int))-1; i >= 0; i--) {
 800b826:	fee44783          	lbu	a5,-18(s0)
 800b82a:	0ff7f793          	andi	a5,a5,255
 800b82e:	c399                	beqz	a5,800b834 <vsnprintf+0x134>
 800b830:	47bd                	li	a5,15
 800b832:	a011                	j	800b836 <vsnprintf+0x136>
 800b834:	479d                	li	a5,7
 800b836:	fcf42e23          	sw	a5,-36(s0)
 800b83a:	a8b5                	j	800b8b6 <vsnprintf+0x1b6>
            int d = (num >> (4*i)) & 0xF;
 800b83c:	fdc42783          	lw	a5,-36(s0)
 800b840:	0027979b          	slliw	a5,a5,0x2
 800b844:	2781                	sext.w	a5,a5
 800b846:	fa843703          	ld	a4,-88(s0)
 800b84a:	40f757b3          	sra	a5,a4,a5
 800b84e:	2781                	sext.w	a5,a5
 800b850:	8bbd                	andi	a5,a5,15
 800b852:	faf42223          	sw	a5,-92(s0)
            if (++pos < n) out[pos-1] = (d < 10 ? '0'+d : 'a'+d-10);
 800b856:	fe043783          	ld	a5,-32(s0)
 800b85a:	0785                	addi	a5,a5,1
 800b85c:	fef43023          	sd	a5,-32(s0)
 800b860:	fe043703          	ld	a4,-32(s0)
 800b864:	f9043783          	ld	a5,-112(s0)
 800b868:	04f77263          	bleu	a5,a4,800b8ac <vsnprintf+0x1ac>
 800b86c:	fa442783          	lw	a5,-92(s0)
 800b870:	0007871b          	sext.w	a4,a5
 800b874:	47a5                	li	a5,9
 800b876:	00e7cb63          	blt	a5,a4,800b88c <vsnprintf+0x18c>
 800b87a:	fa442783          	lw	a5,-92(s0)
 800b87e:	0ff7f793          	andi	a5,a5,255
 800b882:	0307879b          	addiw	a5,a5,48
 800b886:	0ff7f793          	andi	a5,a5,255
 800b88a:	a809                	j	800b89c <vsnprintf+0x19c>
 800b88c:	fa442783          	lw	a5,-92(s0)
 800b890:	0ff7f793          	andi	a5,a5,255
 800b894:	0577879b          	addiw	a5,a5,87
 800b898:	0ff7f793          	andi	a5,a5,255
 800b89c:	fe043703          	ld	a4,-32(s0)
 800b8a0:	177d                	addi	a4,a4,-1
 800b8a2:	f9843683          	ld	a3,-104(s0)
 800b8a6:	9736                	add	a4,a4,a3
 800b8a8:	00f70023          	sb	a5,0(a4)
          for(int i = 2*(longarg ? sizeof(long) : sizeof(int))-1; i >= 0; i--) {
 800b8ac:	fdc42783          	lw	a5,-36(s0)
 800b8b0:	37fd                	addiw	a5,a5,-1
 800b8b2:	fcf42e23          	sw	a5,-36(s0)
 800b8b6:	fdc42783          	lw	a5,-36(s0)
 800b8ba:	2781                	sext.w	a5,a5
 800b8bc:	f807d0e3          	bgez	a5,800b83c <vsnprintf+0x13c>
          }
          longarg = false;
 800b8c0:	fe040723          	sb	zero,-18(s0)
          format = false;
 800b8c4:	fe0407a3          	sb	zero,-17(s0)
          break;
 800b8c8:	ac1d                	j	800bafe <vsnprintf+0x3fe>
        }
        case 'd':
        {
          long long num;
          if (longarg)
 800b8ca:	fee44783          	lbu	a5,-18(s0)
 800b8ce:	0ff7f793          	andi	a5,a5,255
 800b8d2:	cb99                	beqz	a5,800b8e8 <vsnprintf+0x1e8>
              num = va_arg(vl, long);
 800b8d4:	f8043783          	ld	a5,-128(s0)
 800b8d8:	00878713          	addi	a4,a5,8
 800b8dc:	f8e43023          	sd	a4,-128(s0)
 800b8e0:	639c                	ld	a5,0(a5)
 800b8e2:	fcf43823          	sd	a5,-48(s0)
 800b8e6:	a80d                	j	800b918 <vsnprintf+0x218>
          else if (longlongarg)
 800b8e8:	fed44783          	lbu	a5,-19(s0)
 800b8ec:	0ff7f793          	andi	a5,a5,255
 800b8f0:	cb99                	beqz	a5,800b906 <vsnprintf+0x206>
              num = va_arg(vl, long long);
 800b8f2:	f8043783          	ld	a5,-128(s0)
 800b8f6:	00878713          	addi	a4,a5,8
 800b8fa:	f8e43023          	sd	a4,-128(s0)
 800b8fe:	639c                	ld	a5,0(a5)
 800b900:	fcf43823          	sd	a5,-48(s0)
 800b904:	a811                	j	800b918 <vsnprintf+0x218>
          else
              num = va_arg(vl, int);
 800b906:	f8043783          	ld	a5,-128(s0)
 800b90a:	00878713          	addi	a4,a5,8
 800b90e:	f8e43023          	sd	a4,-128(s0)
 800b912:	439c                	lw	a5,0(a5)
 800b914:	fcf43823          	sd	a5,-48(s0)
          if (num < 0) {
 800b918:	fd043783          	ld	a5,-48(s0)
 800b91c:	0207dd63          	bgez	a5,800b956 <vsnprintf+0x256>
            num = -num;
 800b920:	fd043783          	ld	a5,-48(s0)
 800b924:	40f007b3          	neg	a5,a5
 800b928:	fcf43823          	sd	a5,-48(s0)
            if (++pos < n) out[pos-1] = '-';
 800b92c:	fe043783          	ld	a5,-32(s0)
 800b930:	0785                	addi	a5,a5,1
 800b932:	fef43023          	sd	a5,-32(s0)
 800b936:	fe043703          	ld	a4,-32(s0)
 800b93a:	f9043783          	ld	a5,-112(s0)
 800b93e:	00f77c63          	bleu	a5,a4,800b956 <vsnprintf+0x256>
 800b942:	fe043783          	ld	a5,-32(s0)
 800b946:	17fd                	addi	a5,a5,-1
 800b948:	f9843703          	ld	a4,-104(s0)
 800b94c:	97ba                	add	a5,a5,a4
 800b94e:	02d00713          	li	a4,45
 800b952:	00e78023          	sb	a4,0(a5)
          }
          long digits = 1;
 800b956:	4785                	li	a5,1
 800b958:	fcf43423          	sd	a5,-56(s0)
          for (long long nn = num; nn /= 10; digits++)
 800b95c:	fd043783          	ld	a5,-48(s0)
 800b960:	fcf43023          	sd	a5,-64(s0)
 800b964:	a031                	j	800b970 <vsnprintf+0x270>
 800b966:	fc843783          	ld	a5,-56(s0)
 800b96a:	0785                	addi	a5,a5,1
 800b96c:	fcf43423          	sd	a5,-56(s0)
 800b970:	fc043703          	ld	a4,-64(s0)
 800b974:	47a9                	li	a5,10
 800b976:	02f747b3          	div	a5,a4,a5
 800b97a:	fcf43023          	sd	a5,-64(s0)
 800b97e:	fc043783          	ld	a5,-64(s0)
 800b982:	f3f5                	bnez	a5,800b966 <vsnprintf+0x266>
            ;
          for (int i = digits-1; i >= 0; i--) {
 800b984:	fc843783          	ld	a5,-56(s0)
 800b988:	2781                	sext.w	a5,a5
 800b98a:	37fd                	addiw	a5,a5,-1
 800b98c:	2781                	sext.w	a5,a5
 800b98e:	faf42e23          	sw	a5,-68(s0)
 800b992:	a8a1                	j	800b9ea <vsnprintf+0x2ea>
            if (pos + i + 1 < n) out[pos + i] = '0' + (num % 10);
 800b994:	fbc42703          	lw	a4,-68(s0)
 800b998:	fe043783          	ld	a5,-32(s0)
 800b99c:	97ba                	add	a5,a5,a4
 800b99e:	0785                	addi	a5,a5,1
 800b9a0:	f9043703          	ld	a4,-112(s0)
 800b9a4:	02e7f763          	bleu	a4,a5,800b9d2 <vsnprintf+0x2d2>
 800b9a8:	fd043703          	ld	a4,-48(s0)
 800b9ac:	47a9                	li	a5,10
 800b9ae:	02f767b3          	rem	a5,a4,a5
 800b9b2:	0ff7f713          	andi	a4,a5,255
 800b9b6:	fbc42683          	lw	a3,-68(s0)
 800b9ba:	fe043783          	ld	a5,-32(s0)
 800b9be:	97b6                	add	a5,a5,a3
 800b9c0:	f9843683          	ld	a3,-104(s0)
 800b9c4:	97b6                	add	a5,a5,a3
 800b9c6:	0307071b          	addiw	a4,a4,48
 800b9ca:	0ff77713          	andi	a4,a4,255
 800b9ce:	00e78023          	sb	a4,0(a5)
            num /= 10;
 800b9d2:	fd043703          	ld	a4,-48(s0)
 800b9d6:	47a9                	li	a5,10
 800b9d8:	02f747b3          	div	a5,a4,a5
 800b9dc:	fcf43823          	sd	a5,-48(s0)
          for (int i = digits-1; i >= 0; i--) {
 800b9e0:	fbc42783          	lw	a5,-68(s0)
 800b9e4:	37fd                	addiw	a5,a5,-1
 800b9e6:	faf42e23          	sw	a5,-68(s0)
 800b9ea:	fbc42783          	lw	a5,-68(s0)
 800b9ee:	2781                	sext.w	a5,a5
 800b9f0:	fa07d2e3          	bgez	a5,800b994 <vsnprintf+0x294>
          }
          pos += digits;
 800b9f4:	fc843783          	ld	a5,-56(s0)
 800b9f8:	fe043703          	ld	a4,-32(s0)
 800b9fc:	97ba                	add	a5,a5,a4
 800b9fe:	fef43023          	sd	a5,-32(s0)
          longarg = false;
 800ba02:	fe040723          	sb	zero,-18(s0)
          longlongarg = false;
 800ba06:	fe0406a3          	sb	zero,-19(s0)
          format = false;
 800ba0a:	fe0407a3          	sb	zero,-17(s0)
          break;
 800ba0e:	a8c5                	j	800bafe <vsnprintf+0x3fe>
        }
        case 's':
        {
          const char* s2 = va_arg(vl, const char*);
 800ba10:	f8043783          	ld	a5,-128(s0)
 800ba14:	00878713          	addi	a4,a5,8
 800ba18:	f8e43023          	sd	a4,-128(s0)
 800ba1c:	639c                	ld	a5,0(a5)
 800ba1e:	faf43823          	sd	a5,-80(s0)
          while (*s2) {
 800ba22:	a82d                	j	800ba5c <vsnprintf+0x35c>
            if (++pos < n)
 800ba24:	fe043783          	ld	a5,-32(s0)
 800ba28:	0785                	addi	a5,a5,1
 800ba2a:	fef43023          	sd	a5,-32(s0)
 800ba2e:	fe043703          	ld	a4,-32(s0)
 800ba32:	f9043783          	ld	a5,-112(s0)
 800ba36:	00f77e63          	bleu	a5,a4,800ba52 <vsnprintf+0x352>
              out[pos-1] = *s2;
 800ba3a:	fe043783          	ld	a5,-32(s0)
 800ba3e:	17fd                	addi	a5,a5,-1
 800ba40:	f9843703          	ld	a4,-104(s0)
 800ba44:	97ba                	add	a5,a5,a4
 800ba46:	fb043703          	ld	a4,-80(s0)
 800ba4a:	00074703          	lbu	a4,0(a4)
 800ba4e:	00e78023          	sb	a4,0(a5)
            s2++;
 800ba52:	fb043783          	ld	a5,-80(s0)
 800ba56:	0785                	addi	a5,a5,1
 800ba58:	faf43823          	sd	a5,-80(s0)
          while (*s2) {
 800ba5c:	fb043783          	ld	a5,-80(s0)
 800ba60:	0007c783          	lbu	a5,0(a5)
 800ba64:	f3e1                	bnez	a5,800ba24 <vsnprintf+0x324>
          }
          longarg = false;
 800ba66:	fe040723          	sb	zero,-18(s0)
          format = false;
 800ba6a:	fe0407a3          	sb	zero,-17(s0)
          break;
 800ba6e:	a841                	j	800bafe <vsnprintf+0x3fe>
        }
        case 'c':
        {
          if (++pos < n) out[pos-1] = (char)va_arg(vl,int);
 800ba70:	fe043783          	ld	a5,-32(s0)
 800ba74:	0785                	addi	a5,a5,1
 800ba76:	fef43023          	sd	a5,-32(s0)
 800ba7a:	fe043703          	ld	a4,-32(s0)
 800ba7e:	f9043783          	ld	a5,-112(s0)
 800ba82:	02f77363          	bleu	a5,a4,800baa8 <vsnprintf+0x3a8>
 800ba86:	f8043783          	ld	a5,-128(s0)
 800ba8a:	00878713          	addi	a4,a5,8
 800ba8e:	f8e43023          	sd	a4,-128(s0)
 800ba92:	4394                	lw	a3,0(a5)
 800ba94:	fe043783          	ld	a5,-32(s0)
 800ba98:	17fd                	addi	a5,a5,-1
 800ba9a:	f9843703          	ld	a4,-104(s0)
 800ba9e:	97ba                	add	a5,a5,a4
 800baa0:	0ff6f713          	andi	a4,a3,255
 800baa4:	00e78023          	sb	a4,0(a5)
          longarg = false;
 800baa8:	fe040723          	sb	zero,-18(s0)
          format = false;
 800baac:	fe0407a3          	sb	zero,-17(s0)
          break;
 800bab0:	a0b9                	j	800bafe <vsnprintf+0x3fe>
        }
        default:
          break;
      }
    }
    else if(*s == '%')
 800bab2:	f8843783          	ld	a5,-120(s0)
 800bab6:	0007c783          	lbu	a5,0(a5)
 800baba:	873e                	mv	a4,a5
 800babc:	02500793          	li	a5,37
 800bac0:	00f71663          	bne	a4,a5,800bacc <vsnprintf+0x3cc>
      format = true;
 800bac4:	4785                	li	a5,1
 800bac6:	fef407a3          	sb	a5,-17(s0)
 800baca:	a815                	j	800bafe <vsnprintf+0x3fe>
    else
      if (++pos < n) out[pos-1] = *s;
 800bacc:	fe043783          	ld	a5,-32(s0)
 800bad0:	0785                	addi	a5,a5,1
 800bad2:	fef43023          	sd	a5,-32(s0)
 800bad6:	fe043703          	ld	a4,-32(s0)
 800bada:	f9043783          	ld	a5,-112(s0)
 800bade:	02f77063          	bleu	a5,a4,800bafe <vsnprintf+0x3fe>
 800bae2:	fe043783          	ld	a5,-32(s0)
 800bae6:	17fd                	addi	a5,a5,-1
 800bae8:	f9843703          	ld	a4,-104(s0)
 800baec:	97ba                	add	a5,a5,a4
 800baee:	f8843703          	ld	a4,-120(s0)
 800baf2:	00074703          	lbu	a4,0(a4)
 800baf6:	00e78023          	sb	a4,0(a5)
 800bafa:	a011                	j	800bafe <vsnprintf+0x3fe>
          break;
 800bafc:	0001                	nop
  for( ; *s; s++)
 800bafe:	f8843783          	ld	a5,-120(s0)
 800bb02:	0785                	addi	a5,a5,1
 800bb04:	f8f43423          	sd	a5,-120(s0)
 800bb08:	f8843783          	ld	a5,-120(s0)
 800bb0c:	0007c783          	lbu	a5,0(a5)
 800bb10:	c0079ce3          	bnez	a5,800b728 <vsnprintf+0x28>
  }
  if (pos < n)
 800bb14:	fe043703          	ld	a4,-32(s0)
 800bb18:	f9043783          	ld	a5,-112(s0)
 800bb1c:	00f77a63          	bleu	a5,a4,800bb30 <vsnprintf+0x430>
    out[pos] = 0;
 800bb20:	f9843703          	ld	a4,-104(s0)
 800bb24:	fe043783          	ld	a5,-32(s0)
 800bb28:	97ba                	add	a5,a5,a4
 800bb2a:	00078023          	sb	zero,0(a5)
 800bb2e:	a821                	j	800bb46 <vsnprintf+0x446>
  else if (n)
 800bb30:	f9043783          	ld	a5,-112(s0)
 800bb34:	cb89                	beqz	a5,800bb46 <vsnprintf+0x446>
    out[n-1] = 0;
 800bb36:	f9043783          	ld	a5,-112(s0)
 800bb3a:	17fd                	addi	a5,a5,-1
 800bb3c:	f9843703          	ld	a4,-104(s0)
 800bb40:	97ba                	add	a5,a5,a4
 800bb42:	00078023          	sb	zero,0(a5)
  return pos;
 800bb46:	fe043783          	ld	a5,-32(s0)
 800bb4a:	2781                	sext.w	a5,a5
}
 800bb4c:	853e                	mv	a0,a5
 800bb4e:	7466                	ld	s0,120(sp)
 800bb50:	6109                	addi	sp,sp,128
 800bb52:	8082                	ret

000000000800bb54 <snprintf>:

int snprintf(char* out, size_t n, const char* s, ...)
{
 800bb54:	7159                	addi	sp,sp,-112
 800bb56:	fc06                	sd	ra,56(sp)
 800bb58:	f822                	sd	s0,48(sp)
 800bb5a:	0080                	addi	s0,sp,64
 800bb5c:	fca43c23          	sd	a0,-40(s0)
 800bb60:	fcb43823          	sd	a1,-48(s0)
 800bb64:	fcc43423          	sd	a2,-56(s0)
 800bb68:	e414                	sd	a3,8(s0)
 800bb6a:	e818                	sd	a4,16(s0)
 800bb6c:	ec1c                	sd	a5,24(s0)
 800bb6e:	03043023          	sd	a6,32(s0)
 800bb72:	03143423          	sd	a7,40(s0)
  va_list vl;
  va_start(vl, s);
 800bb76:	03040793          	addi	a5,s0,48
 800bb7a:	fd878793          	addi	a5,a5,-40
 800bb7e:	fef43023          	sd	a5,-32(s0)
  int res = vsnprintf(out, n, s, vl);
 800bb82:	fe043783          	ld	a5,-32(s0)
 800bb86:	86be                	mv	a3,a5
 800bb88:	fc843603          	ld	a2,-56(s0)
 800bb8c:	fd043583          	ld	a1,-48(s0)
 800bb90:	fd843503          	ld	a0,-40(s0)
 800bb94:	b6dff0ef          	jal	ra,800b700 <vsnprintf>
 800bb98:	87aa                	mv	a5,a0
 800bb9a:	fef42623          	sw	a5,-20(s0)
  va_end(vl);
  return res;
 800bb9e:	fec42783          	lw	a5,-20(s0)
}
 800bba2:	853e                	mv	a0,a5
 800bba4:	70e2                	ld	ra,56(sp)
 800bba6:	7442                	ld	s0,48(sp)
 800bba8:	6165                	addi	sp,sp,112
 800bbaa:	8082                	ret

000000000800bbac <memcpy>:
// Don't let GCC pattern-match these functions' bodies into self-calls
#pragma GCC optimize ("no-tree-loop-distribute-patterns")
#endif

void* memcpy(void* dest, const void* src, size_t len)
{
 800bbac:	7139                	addi	sp,sp,-64
 800bbae:	fc22                	sd	s0,56(sp)
 800bbb0:	0080                	addi	s0,sp,64
 800bbb2:	fca43c23          	sd	a0,-40(s0)
 800bbb6:	fcb43823          	sd	a1,-48(s0)
 800bbba:	fcc43423          	sd	a2,-56(s0)
  const char* s = src;
 800bbbe:	fd043783          	ld	a5,-48(s0)
 800bbc2:	fef43423          	sd	a5,-24(s0)
  char *d = dest;
 800bbc6:	fd843783          	ld	a5,-40(s0)
 800bbca:	fef43023          	sd	a5,-32(s0)

  if ((((uintptr_t)dest | (uintptr_t)src) & (sizeof(uintptr_t)-1)) == 0) {
 800bbce:	fd843703          	ld	a4,-40(s0)
 800bbd2:	fd043783          	ld	a5,-48(s0)
 800bbd6:	8fd9                	or	a5,a5,a4
 800bbd8:	8b9d                	andi	a5,a5,7
 800bbda:	efa9                	bnez	a5,800bc34 <memcpy+0x88>
    while ((void*)d < (dest + len - (sizeof(uintptr_t)-1))) {
 800bbdc:	a00d                	j	800bbfe <memcpy+0x52>
      *(uintptr_t*)d = *(const uintptr_t*)s;
 800bbde:	fe843783          	ld	a5,-24(s0)
 800bbe2:	6398                	ld	a4,0(a5)
 800bbe4:	fe043783          	ld	a5,-32(s0)
 800bbe8:	e398                	sd	a4,0(a5)
      d += sizeof(uintptr_t);
 800bbea:	fe043783          	ld	a5,-32(s0)
 800bbee:	07a1                	addi	a5,a5,8
 800bbf0:	fef43023          	sd	a5,-32(s0)
      s += sizeof(uintptr_t);
 800bbf4:	fe843783          	ld	a5,-24(s0)
 800bbf8:	07a1                	addi	a5,a5,8
 800bbfa:	fef43423          	sd	a5,-24(s0)
    while ((void*)d < (dest + len - (sizeof(uintptr_t)-1))) {
 800bbfe:	fc843783          	ld	a5,-56(s0)
 800bc02:	17e5                	addi	a5,a5,-7
 800bc04:	fd843703          	ld	a4,-40(s0)
 800bc08:	97ba                	add	a5,a5,a4
 800bc0a:	fe043703          	ld	a4,-32(s0)
 800bc0e:	fcf768e3          	bltu	a4,a5,800bbde <memcpy+0x32>
    }
  }

  while (d < (char*)(dest + len))
 800bc12:	a00d                	j	800bc34 <memcpy+0x88>
    *d++ = *s++;
 800bc14:	fe843703          	ld	a4,-24(s0)
 800bc18:	00170793          	addi	a5,a4,1
 800bc1c:	fef43423          	sd	a5,-24(s0)
 800bc20:	fe043783          	ld	a5,-32(s0)
 800bc24:	00178693          	addi	a3,a5,1
 800bc28:	fed43023          	sd	a3,-32(s0)
 800bc2c:	00074703          	lbu	a4,0(a4)
 800bc30:	00e78023          	sb	a4,0(a5)
  while (d < (char*)(dest + len))
 800bc34:	fd843703          	ld	a4,-40(s0)
 800bc38:	fc843783          	ld	a5,-56(s0)
 800bc3c:	97ba                	add	a5,a5,a4
 800bc3e:	fe043703          	ld	a4,-32(s0)
 800bc42:	fcf769e3          	bltu	a4,a5,800bc14 <memcpy+0x68>

  return dest;
 800bc46:	fd843783          	ld	a5,-40(s0)
}
 800bc4a:	853e                	mv	a0,a5
 800bc4c:	7462                	ld	s0,56(sp)
 800bc4e:	6121                	addi	sp,sp,64
 800bc50:	8082                	ret

000000000800bc52 <memset>:

void* memset(void* dest, int byte, size_t len)
{
 800bc52:	715d                	addi	sp,sp,-80
 800bc54:	e4a2                	sd	s0,72(sp)
 800bc56:	0880                	addi	s0,sp,80
 800bc58:	fca43423          	sd	a0,-56(s0)
 800bc5c:	87ae                	mv	a5,a1
 800bc5e:	fac43c23          	sd	a2,-72(s0)
 800bc62:	fcf42223          	sw	a5,-60(s0)
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
 800bc66:	fc843703          	ld	a4,-56(s0)
 800bc6a:	fb843783          	ld	a5,-72(s0)
 800bc6e:	8fd9                	or	a5,a5,a4
 800bc70:	8b9d                	andi	a5,a5,7
 800bc72:	e7bd                	bnez	a5,800bce0 <memset+0x8e>
    uintptr_t word = byte & 0xFF;
 800bc74:	fc442783          	lw	a5,-60(s0)
 800bc78:	0ff7f793          	andi	a5,a5,255
 800bc7c:	fcf43c23          	sd	a5,-40(s0)
    word |= word << 8;
 800bc80:	fd843783          	ld	a5,-40(s0)
 800bc84:	07a2                	slli	a5,a5,0x8
 800bc86:	fd843703          	ld	a4,-40(s0)
 800bc8a:	8fd9                	or	a5,a5,a4
 800bc8c:	fcf43c23          	sd	a5,-40(s0)
    word |= word << 16;
 800bc90:	fd843783          	ld	a5,-40(s0)
 800bc94:	07c2                	slli	a5,a5,0x10
 800bc96:	fd843703          	ld	a4,-40(s0)
 800bc9a:	8fd9                	or	a5,a5,a4
 800bc9c:	fcf43c23          	sd	a5,-40(s0)
    word |= word << 16 << 16;
 800bca0:	fd843783          	ld	a5,-40(s0)
 800bca4:	1782                	slli	a5,a5,0x20
 800bca6:	fd843703          	ld	a4,-40(s0)
 800bcaa:	8fd9                	or	a5,a5,a4
 800bcac:	fcf43c23          	sd	a5,-40(s0)

    uintptr_t *d = dest;
 800bcb0:	fc843783          	ld	a5,-56(s0)
 800bcb4:	fef43423          	sd	a5,-24(s0)
    while (d < (uintptr_t*)(dest + len))
 800bcb8:	a811                	j	800bccc <memset+0x7a>
      *d++ = word;
 800bcba:	fe843783          	ld	a5,-24(s0)
 800bcbe:	00878713          	addi	a4,a5,8
 800bcc2:	fee43423          	sd	a4,-24(s0)
 800bcc6:	fd843703          	ld	a4,-40(s0)
 800bcca:	e398                	sd	a4,0(a5)
    while (d < (uintptr_t*)(dest + len))
 800bccc:	fc843703          	ld	a4,-56(s0)
 800bcd0:	fb843783          	ld	a5,-72(s0)
 800bcd4:	97ba                	add	a5,a5,a4
 800bcd6:	fe843703          	ld	a4,-24(s0)
 800bcda:	fef760e3          	bltu	a4,a5,800bcba <memset+0x68>
 800bcde:	a81d                	j	800bd14 <memset+0xc2>
  } else {
    char *d = dest;
 800bce0:	fc843783          	ld	a5,-56(s0)
 800bce4:	fef43023          	sd	a5,-32(s0)
    while (d < (char*)(dest + len))
 800bce8:	a829                	j	800bd02 <memset+0xb0>
      *d++ = byte;
 800bcea:	fe043783          	ld	a5,-32(s0)
 800bcee:	00178713          	addi	a4,a5,1
 800bcf2:	fee43023          	sd	a4,-32(s0)
 800bcf6:	fc442703          	lw	a4,-60(s0)
 800bcfa:	0ff77713          	andi	a4,a4,255
 800bcfe:	00e78023          	sb	a4,0(a5)
    while (d < (char*)(dest + len))
 800bd02:	fc843703          	ld	a4,-56(s0)
 800bd06:	fb843783          	ld	a5,-72(s0)
 800bd0a:	97ba                	add	a5,a5,a4
 800bd0c:	fe043703          	ld	a4,-32(s0)
 800bd10:	fcf76de3          	bltu	a4,a5,800bcea <memset+0x98>
  }
  return dest;
 800bd14:	fc843783          	ld	a5,-56(s0)
}
 800bd18:	853e                	mv	a0,a5
 800bd1a:	6426                	ld	s0,72(sp)
 800bd1c:	6161                	addi	sp,sp,80
 800bd1e:	8082                	ret

000000000800bd20 <strlen>:

size_t strlen(const char *s)
{
 800bd20:	7179                	addi	sp,sp,-48
 800bd22:	f422                	sd	s0,40(sp)
 800bd24:	1800                	addi	s0,sp,48
 800bd26:	fca43c23          	sd	a0,-40(s0)
  const char *p = s;
 800bd2a:	fd843783          	ld	a5,-40(s0)
 800bd2e:	fef43423          	sd	a5,-24(s0)
  while (*p)
 800bd32:	a031                	j	800bd3e <strlen+0x1e>
    p++;
 800bd34:	fe843783          	ld	a5,-24(s0)
 800bd38:	0785                	addi	a5,a5,1
 800bd3a:	fef43423          	sd	a5,-24(s0)
  while (*p)
 800bd3e:	fe843783          	ld	a5,-24(s0)
 800bd42:	0007c783          	lbu	a5,0(a5)
 800bd46:	f7fd                	bnez	a5,800bd34 <strlen+0x14>
  return p - s;
 800bd48:	fe843703          	ld	a4,-24(s0)
 800bd4c:	fd843783          	ld	a5,-40(s0)
 800bd50:	40f707b3          	sub	a5,a4,a5
}
 800bd54:	853e                	mv	a0,a5
 800bd56:	7422                	ld	s0,40(sp)
 800bd58:	6145                	addi	sp,sp,48
 800bd5a:	8082                	ret

000000000800bd5c <strcmp>:

int strcmp(const char* s1, const char* s2)
{
 800bd5c:	7179                	addi	sp,sp,-48
 800bd5e:	f422                	sd	s0,40(sp)
 800bd60:	1800                	addi	s0,sp,48
 800bd62:	fca43c23          	sd	a0,-40(s0)
 800bd66:	fcb43823          	sd	a1,-48(s0)
  unsigned char c1, c2;

  do {
    c1 = *s1++;
 800bd6a:	fd843783          	ld	a5,-40(s0)
 800bd6e:	00178713          	addi	a4,a5,1
 800bd72:	fce43c23          	sd	a4,-40(s0)
 800bd76:	0007c783          	lbu	a5,0(a5)
 800bd7a:	fef407a3          	sb	a5,-17(s0)
    c2 = *s2++;
 800bd7e:	fd043783          	ld	a5,-48(s0)
 800bd82:	00178713          	addi	a4,a5,1
 800bd86:	fce43823          	sd	a4,-48(s0)
 800bd8a:	0007c783          	lbu	a5,0(a5)
 800bd8e:	fef40723          	sb	a5,-18(s0)
  } while (c1 != 0 && c1 == c2);
 800bd92:	fef44783          	lbu	a5,-17(s0)
 800bd96:	0ff7f793          	andi	a5,a5,255
 800bd9a:	cb99                	beqz	a5,800bdb0 <strcmp+0x54>
 800bd9c:	fef44703          	lbu	a4,-17(s0)
 800bda0:	fee44783          	lbu	a5,-18(s0)
 800bda4:	0ff77713          	andi	a4,a4,255
 800bda8:	0ff7f793          	andi	a5,a5,255
 800bdac:	faf70fe3          	beq	a4,a5,800bd6a <strcmp+0xe>

  return c1 - c2;
 800bdb0:	fef44783          	lbu	a5,-17(s0)
 800bdb4:	0007871b          	sext.w	a4,a5
 800bdb8:	fee44783          	lbu	a5,-18(s0)
 800bdbc:	2781                	sext.w	a5,a5
 800bdbe:	40f707bb          	subw	a5,a4,a5
 800bdc2:	2781                	sext.w	a5,a5
}
 800bdc4:	853e                	mv	a0,a5
 800bdc6:	7422                	ld	s0,40(sp)
 800bdc8:	6145                	addi	sp,sp,48
 800bdca:	8082                	ret

000000000800bdcc <strcpy>:

char* strcpy(char* dest, const char* src)
{
 800bdcc:	7179                	addi	sp,sp,-48
 800bdce:	f422                	sd	s0,40(sp)
 800bdd0:	1800                	addi	s0,sp,48
 800bdd2:	fca43c23          	sd	a0,-40(s0)
 800bdd6:	fcb43823          	sd	a1,-48(s0)
  char* d = dest;
 800bdda:	fd843783          	ld	a5,-40(s0)
 800bdde:	fef43423          	sd	a5,-24(s0)
  while ((*d++ = *src++))
 800bde2:	0001                	nop
 800bde4:	fd043703          	ld	a4,-48(s0)
 800bde8:	00170793          	addi	a5,a4,1
 800bdec:	fcf43823          	sd	a5,-48(s0)
 800bdf0:	fe843783          	ld	a5,-24(s0)
 800bdf4:	00178693          	addi	a3,a5,1
 800bdf8:	fed43423          	sd	a3,-24(s0)
 800bdfc:	00074703          	lbu	a4,0(a4)
 800be00:	00e78023          	sb	a4,0(a5)
 800be04:	0007c783          	lbu	a5,0(a5)
 800be08:	fff1                	bnez	a5,800bde4 <strcpy+0x18>
    ;
  return dest;
 800be0a:	fd843783          	ld	a5,-40(s0)
}
 800be0e:	853e                	mv	a0,a5
 800be10:	7422                	ld	s0,40(sp)
 800be12:	6145                	addi	sp,sp,48
 800be14:	8082                	ret

000000000800be16 <atol>:

long atol(const char* str)
{
 800be16:	7179                	addi	sp,sp,-48
 800be18:	f422                	sd	s0,40(sp)
 800be1a:	1800                	addi	s0,sp,48
 800be1c:	fca43c23          	sd	a0,-40(s0)
  long res = 0;
 800be20:	fe043423          	sd	zero,-24(s0)
  int sign = 0;
 800be24:	fe042223          	sw	zero,-28(s0)

  while (*str == ' ')
 800be28:	a031                	j	800be34 <atol+0x1e>
    str++;
 800be2a:	fd843783          	ld	a5,-40(s0)
 800be2e:	0785                	addi	a5,a5,1
 800be30:	fcf43c23          	sd	a5,-40(s0)
  while (*str == ' ')
 800be34:	fd843783          	ld	a5,-40(s0)
 800be38:	0007c783          	lbu	a5,0(a5)
 800be3c:	873e                	mv	a4,a5
 800be3e:	02000793          	li	a5,32
 800be42:	fef704e3          	beq	a4,a5,800be2a <atol+0x14>

  if (*str == '-' || *str == '+') {
 800be46:	fd843783          	ld	a5,-40(s0)
 800be4a:	0007c783          	lbu	a5,0(a5)
 800be4e:	873e                	mv	a4,a5
 800be50:	02d00793          	li	a5,45
 800be54:	00f70b63          	beq	a4,a5,800be6a <atol+0x54>
 800be58:	fd843783          	ld	a5,-40(s0)
 800be5c:	0007c783          	lbu	a5,0(a5)
 800be60:	873e                	mv	a4,a5
 800be62:	02b00793          	li	a5,43
 800be66:	06f71263          	bne	a4,a5,800beca <atol+0xb4>
    sign = *str == '-';
 800be6a:	fd843783          	ld	a5,-40(s0)
 800be6e:	0007c783          	lbu	a5,0(a5)
 800be72:	0007871b          	sext.w	a4,a5
 800be76:	02d00793          	li	a5,45
 800be7a:	40f707b3          	sub	a5,a4,a5
 800be7e:	0017b793          	seqz	a5,a5
 800be82:	0ff7f793          	andi	a5,a5,255
 800be86:	fef42223          	sw	a5,-28(s0)
    str++;
 800be8a:	fd843783          	ld	a5,-40(s0)
 800be8e:	0785                	addi	a5,a5,1
 800be90:	fcf43c23          	sd	a5,-40(s0)
  }

  while (*str) {
 800be94:	a81d                	j	800beca <atol+0xb4>
    res *= 10;
 800be96:	fe843703          	ld	a4,-24(s0)
 800be9a:	87ba                	mv	a5,a4
 800be9c:	078a                	slli	a5,a5,0x2
 800be9e:	97ba                	add	a5,a5,a4
 800bea0:	0786                	slli	a5,a5,0x1
 800bea2:	fef43423          	sd	a5,-24(s0)
    res += *str++ - '0';
 800bea6:	fd843783          	ld	a5,-40(s0)
 800beaa:	00178713          	addi	a4,a5,1
 800beae:	fce43c23          	sd	a4,-40(s0)
 800beb2:	0007c783          	lbu	a5,0(a5)
 800beb6:	2781                	sext.w	a5,a5
 800beb8:	fd07879b          	addiw	a5,a5,-48
 800bebc:	2781                	sext.w	a5,a5
 800bebe:	873e                	mv	a4,a5
 800bec0:	fe843783          	ld	a5,-24(s0)
 800bec4:	97ba                	add	a5,a5,a4
 800bec6:	fef43423          	sd	a5,-24(s0)
  while (*str) {
 800beca:	fd843783          	ld	a5,-40(s0)
 800bece:	0007c783          	lbu	a5,0(a5)
 800bed2:	f3f1                	bnez	a5,800be96 <atol+0x80>
  }

  return sign ? -res : res;
 800bed4:	fe442783          	lw	a5,-28(s0)
 800bed8:	2781                	sext.w	a5,a5
 800beda:	c791                	beqz	a5,800bee6 <atol+0xd0>
 800bedc:	fe843783          	ld	a5,-24(s0)
 800bee0:	40f007b3          	neg	a5,a5
 800bee4:	a019                	j	800beea <atol+0xd4>
 800bee6:	fe843783          	ld	a5,-24(s0)
}
 800beea:	853e                	mv	a0,a5
 800beec:	7422                	ld	s0,40(sp)
 800beee:	6145                	addi	sp,sp,48
 800bef0:	8082                	ret
