
bbl-q:     file format elf64-littleriscv


Disassembly of section .text:

0000000080000000 <_ftext>:

  .option norvc
  .section .text.init,"ax",@progbits
  .globl reset_vector
reset_vector:
  j do_reset
    80000000:	1f80006f          	j	800001f8 <do_reset>

0000000080000004 <trap_vector>:

trap_vector:
  csrrw sp, mscratch, sp
    80000004:	34011173          	csrrw	sp,mscratch,sp
  beqz sp, .Ltrap_from_machine_mode
    80000008:	1a010863          	beqz	sp,800001b8 <restore_regs+0x80>

  STORE a0, 10*REGBYTES(sp)
    8000000c:	04a13823          	sd	a0,80(sp)
  STORE a1, 11*REGBYTES(sp)
    80000010:	04b13c23          	sd	a1,88(sp)

  csrr a1, mcause
    80000014:	342025f3          	csrr	a1,mcause
  bgez a1, .Lhandle_trap_in_machine_mode
    80000018:	0805d263          	bgez	a1,8000009c <trap_vector+0x98>

  # This is an interrupt.  Discard the mcause MSB and decode the rest.
  sll a1, a1, 1
    8000001c:	00159593          	slli	a1,a1,0x1

  # Is it a machine timer interrupt?
  li a0, IRQ_M_TIMER * 2
    80000020:	00e00513          	li	a0,14
  bne a0, a1, 1f
    80000024:	02b51263          	bne	a0,a1,80000048 <trap_vector+0x44>

  # Yes.  Simply clear MTIE and raise STIP.
  li a0, MIP_MTIP
    80000028:	08000513          	li	a0,128
  csrc mie, a0
    8000002c:	30453073          	csrc	mie,a0
  li a0, MIP_STIP
    80000030:	02000513          	li	a0,32
  csrs mip, a0
    80000034:	34452073          	csrs	mip,a0

.Lmret:
  # Go back whence we came.
  LOAD a0, 10*REGBYTES(sp)
    80000038:	05013503          	ld	a0,80(sp)
  LOAD a1, 11*REGBYTES(sp)
    8000003c:	05813583          	ld	a1,88(sp)
  csrrw sp, mscratch, sp
    80000040:	34011173          	csrrw	sp,mscratch,sp
  mret
    80000044:	30200073          	mret

1:
  # Is it an IPI?
  li a0, IRQ_M_SOFT * 2
    80000048:	00600513          	li	a0,6
  bne a0, a1, .Lbad_trap
    8000004c:	18b51263          	bne	a0,a1,800001d0 <restore_regs+0x98>

  # Yes.  First, clear the MIPI bit.
  LOAD a0, MENTRY_IPI_OFFSET(sp)
    80000050:	10013503          	ld	a0,256(sp)
  sw x0, (a0)
    80000054:	00052023          	sw	zero,0(a0)
  fence
    80000058:	0ff0000f          	fence

  # Now, decode the cause(s).
#ifdef __riscv_atomic
  addi a0, sp, MENTRY_IPI_PENDING_OFFSET
    8000005c:	10810513          	addi	a0,sp,264
  amoswap.w a0, x0, (a0)
    80000060:	0805252f          	amoswap.w	a0,zero,(a0)
#else
  lw a0, MENTRY_IPI_PENDING_OFFSET(sp)
  sw x0, MENTRY_IPI_PENDING_OFFSET(sp)
#endif
  and a1, a0, IPI_SOFT
    80000064:	00157593          	andi	a1,a0,1
  beqz a1, 1f
    80000068:	00058463          	beqz	a1,80000070 <trap_vector+0x6c>
  csrs mip, MIP_SSIP
    8000006c:	34416073          	csrsi	mip,2
1:
  andi a1, a0, IPI_FENCE_I
    80000070:	00257593          	andi	a1,a0,2
  beqz a1, 1f
    80000074:	00058463          	beqz	a1,8000007c <trap_vector+0x78>
  fence.i
    80000078:	0000100f          	fence.i
1:
  andi a1, a0, IPI_SFENCE_VMA
    8000007c:	00457593          	andi	a1,a0,4
  beqz a1, 1f
    80000080:	00058463          	beqz	a1,80000088 <trap_vector+0x84>
  sfence.vma
    80000084:	12000073          	sfence.vma
1:
  andi a1, a0, IPI_HALT
    80000088:	00857593          	andi	a1,a0,8
  beqz a1, 1f
    8000008c:	00058663          	beqz	a1,80000098 <trap_vector+0x94>
  wfi
    80000090:	10500073          	wfi
  j 1b
    80000094:	ff5ff06f          	j	80000088 <trap_vector+0x84>
1:
  j .Lmret
    80000098:	fa1ff06f          	j	80000038 <trap_vector+0x34>


.Lhandle_trap_in_machine_mode:
  # Preserve the registers.  Compute the address of the trap handler.
  STORE ra, 1*REGBYTES(sp)
    8000009c:	00113423          	sd	ra,8(sp)
  STORE gp, 3*REGBYTES(sp)
    800000a0:	00313c23          	sd	gp,24(sp)
  STORE tp, 4*REGBYTES(sp)
    800000a4:	02413023          	sd	tp,32(sp)
  STORE t0, 5*REGBYTES(sp)
    800000a8:	02513423          	sd	t0,40(sp)
1:auipc t0, %pcrel_hi(trap_table)  # t0 <- %hi(trap_table)
    800000ac:	0000f297          	auipc	t0,0xf
  STORE t1, 6*REGBYTES(sp)
    800000b0:	02613823          	sd	t1,48(sp)
  sll t1, a1, LOG_REGBYTES         # t1 <- mcause * ptr size
    800000b4:	00359313          	slli	t1,a1,0x3
  STORE t2, 7*REGBYTES(sp)
    800000b8:	02713c23          	sd	t2,56(sp)
  add t1, t0, t1                   # t1 <- %hi(trap_table)[mcause]
    800000bc:	00628333          	add	t1,t0,t1
  STORE s0, 8*REGBYTES(sp)
    800000c0:	04813023          	sd	s0,64(sp)
  LOAD t1, %pcrel_lo(1b)(t1)       # t1 <- trap_table[mcause]
    800000c4:	f5433303          	ld	t1,-172(t1)
  STORE s1, 9*REGBYTES(sp)
    800000c8:	04913423          	sd	s1,72(sp)
  mv a0, sp                        # a0 <- regs
    800000cc:	00010513          	mv	a0,sp
  STORE a2,12*REGBYTES(sp)
    800000d0:	06c13023          	sd	a2,96(sp)
  csrr a2, mepc                    # a2 <- mepc
    800000d4:	34102673          	csrr	a2,mepc
  STORE a3,13*REGBYTES(sp)
    800000d8:	06d13423          	sd	a3,104(sp)
  csrrw t0, mscratch, x0           # t0 <- user sp
    800000dc:	340012f3          	csrrw	t0,mscratch,zero
  STORE a4,14*REGBYTES(sp)
    800000e0:	06e13823          	sd	a4,112(sp)
  STORE a5,15*REGBYTES(sp)
    800000e4:	06f13c23          	sd	a5,120(sp)
  STORE a6,16*REGBYTES(sp)
    800000e8:	09013023          	sd	a6,128(sp)
  STORE a7,17*REGBYTES(sp)
    800000ec:	09113423          	sd	a7,136(sp)
  STORE s2,18*REGBYTES(sp)
    800000f0:	09213823          	sd	s2,144(sp)
  STORE s3,19*REGBYTES(sp)
    800000f4:	09313c23          	sd	s3,152(sp)
  STORE s4,20*REGBYTES(sp)
    800000f8:	0b413023          	sd	s4,160(sp)
  STORE s5,21*REGBYTES(sp)
    800000fc:	0b513423          	sd	s5,168(sp)
  STORE s6,22*REGBYTES(sp)
    80000100:	0b613823          	sd	s6,176(sp)
  STORE s7,23*REGBYTES(sp)
    80000104:	0b713c23          	sd	s7,184(sp)
  STORE s8,24*REGBYTES(sp)
    80000108:	0d813023          	sd	s8,192(sp)
  STORE s9,25*REGBYTES(sp)
    8000010c:	0d913423          	sd	s9,200(sp)
  STORE s10,26*REGBYTES(sp)
    80000110:	0da13823          	sd	s10,208(sp)
  STORE s11,27*REGBYTES(sp)
    80000114:	0db13c23          	sd	s11,216(sp)
  STORE t3,28*REGBYTES(sp)
    80000118:	0fc13023          	sd	t3,224(sp)
  STORE t4,29*REGBYTES(sp)
    8000011c:	0fd13423          	sd	t4,232(sp)
  STORE t5,30*REGBYTES(sp)
    80000120:	0fe13823          	sd	t5,240(sp)
  STORE t6,31*REGBYTES(sp)
    80000124:	0ff13c23          	sd	t6,248(sp)
  STORE t0, 2*REGBYTES(sp)         # sp
    80000128:	00513823          	sd	t0,16(sp)

#ifndef __riscv_flen
  lw tp, (sp) # Move the emulated FCSR from x0's save slot into tp.
#endif
  STORE x0, (sp) # Zero x0's save slot.
    8000012c:	00013023          	sd	zero,0(sp)

  # Invoke the handler.
  jalr t1
    80000130:	000300e7          	jalr	t1

0000000080000134 <restore_mscratch>:
  sw tp, (sp) # Move the emulated FCSR from tp into x0's save slot.
#endif

restore_mscratch:
  # Restore mscratch, so future traps will know they didn't come from M-mode.
  csrw mscratch, sp
    80000134:	34011073          	csrw	mscratch,sp

0000000080000138 <restore_regs>:

restore_regs:
  # Restore all of the registers.
  LOAD ra, 1*REGBYTES(sp)
    80000138:	00813083          	ld	ra,8(sp)
  LOAD gp, 3*REGBYTES(sp)
    8000013c:	01813183          	ld	gp,24(sp)
  LOAD tp, 4*REGBYTES(sp)
    80000140:	02013203          	ld	tp,32(sp)
  LOAD t0, 5*REGBYTES(sp)
    80000144:	02813283          	ld	t0,40(sp)
  LOAD t1, 6*REGBYTES(sp)
    80000148:	03013303          	ld	t1,48(sp)
  LOAD t2, 7*REGBYTES(sp)
    8000014c:	03813383          	ld	t2,56(sp)
  LOAD s0, 8*REGBYTES(sp)
    80000150:	04013403          	ld	s0,64(sp)
  LOAD s1, 9*REGBYTES(sp)
    80000154:	04813483          	ld	s1,72(sp)
  LOAD a0,10*REGBYTES(sp)
    80000158:	05013503          	ld	a0,80(sp)
  LOAD a1,11*REGBYTES(sp)
    8000015c:	05813583          	ld	a1,88(sp)
  LOAD a2,12*REGBYTES(sp)
    80000160:	06013603          	ld	a2,96(sp)
  LOAD a3,13*REGBYTES(sp)
    80000164:	06813683          	ld	a3,104(sp)
  LOAD a4,14*REGBYTES(sp)
    80000168:	07013703          	ld	a4,112(sp)
  LOAD a5,15*REGBYTES(sp)
    8000016c:	07813783          	ld	a5,120(sp)
  LOAD a6,16*REGBYTES(sp)
    80000170:	08013803          	ld	a6,128(sp)
  LOAD a7,17*REGBYTES(sp)
    80000174:	08813883          	ld	a7,136(sp)
  LOAD s2,18*REGBYTES(sp)
    80000178:	09013903          	ld	s2,144(sp)
  LOAD s3,19*REGBYTES(sp)
    8000017c:	09813983          	ld	s3,152(sp)
  LOAD s4,20*REGBYTES(sp)
    80000180:	0a013a03          	ld	s4,160(sp)
  LOAD s5,21*REGBYTES(sp)
    80000184:	0a813a83          	ld	s5,168(sp)
  LOAD s6,22*REGBYTES(sp)
    80000188:	0b013b03          	ld	s6,176(sp)
  LOAD s7,23*REGBYTES(sp)
    8000018c:	0b813b83          	ld	s7,184(sp)
  LOAD s8,24*REGBYTES(sp)
    80000190:	0c013c03          	ld	s8,192(sp)
  LOAD s9,25*REGBYTES(sp)
    80000194:	0c813c83          	ld	s9,200(sp)
  LOAD s10,26*REGBYTES(sp)
    80000198:	0d013d03          	ld	s10,208(sp)
  LOAD s11,27*REGBYTES(sp)
    8000019c:	0d813d83          	ld	s11,216(sp)
  LOAD t3,28*REGBYTES(sp)
    800001a0:	0e013e03          	ld	t3,224(sp)
  LOAD t4,29*REGBYTES(sp)
    800001a4:	0e813e83          	ld	t4,232(sp)
  LOAD t5,30*REGBYTES(sp)
    800001a8:	0f013f03          	ld	t5,240(sp)
  LOAD t6,31*REGBYTES(sp)
    800001ac:	0f813f83          	ld	t6,248(sp)
  LOAD sp, 2*REGBYTES(sp)
    800001b0:	01013103          	ld	sp,16(sp)
  mret
    800001b4:	30200073          	mret

.Ltrap_from_machine_mode:
  csrr sp, mscratch
    800001b8:	34002173          	csrr	sp,mscratch
  addi sp, sp, -INTEGER_CONTEXT_SIZE
    800001bc:	f0010113          	addi	sp,sp,-256
  STORE a0,10*REGBYTES(sp)
    800001c0:	04a13823          	sd	a0,80(sp)
  STORE a1,11*REGBYTES(sp)
    800001c4:	04b13c23          	sd	a1,88(sp)
  li a1, TRAP_FROM_MACHINE_MODE_VECTOR
    800001c8:	00d00593          	li	a1,13
  j .Lhandle_trap_in_machine_mode
    800001cc:	ed1ff06f          	j	8000009c <trap_vector+0x98>

.Lbad_trap:
  li a1, BAD_TRAP_VECTOR
    800001d0:	00000593          	li	a1,0
  j .Lhandle_trap_in_machine_mode
    800001d4:	ec9ff06f          	j	8000009c <trap_vector+0x98>

00000000800001d8 <__redirect_trap>:

  .globl __redirect_trap
__redirect_trap:
  # reset sp to top of M-mode stack
  li t0, MACHINE_STACK_SIZE
    800001d8:	000012b7          	lui	t0,0x1
  add sp, sp, t0
    800001dc:	00510133          	add	sp,sp,t0
  neg t0, t0
    800001e0:	405002b3          	neg	t0,t0
  and sp, sp, t0
    800001e4:	00517133          	and	sp,sp,t0
  addi sp, sp, -MENTRY_FRAME_SIZE
    800001e8:	ec010113          	addi	sp,sp,-320
  j restore_mscratch
    800001ec:	f49ff06f          	j	80000134 <restore_mscratch>

00000000800001f0 <__trap_from_machine_mode>:

__trap_from_machine_mode:
  jal trap_from_machine_mode
    800001f0:	40b020ef          	jal	ra,80002dfa <trap_from_machine_mode>
  j restore_regs
    800001f4:	f45ff06f          	j	80000138 <restore_regs>

00000000800001f8 <do_reset>:

do_reset:
  li x1, 0
    800001f8:	00000093          	li	ra,0
  li x2, 0
    800001fc:	00000113          	li	sp,0
  li x3, 0
    80000200:	00000193          	li	gp,0
  li x4, 0
    80000204:	00000213          	li	tp,0
  li x5, 0
    80000208:	00000293          	li	t0,0
  li x6, 0
    8000020c:	00000313          	li	t1,0
  li x7, 0
    80000210:	00000393          	li	t2,0
  li x8, 0
    80000214:	00000413          	li	s0,0
  li x9, 0
    80000218:	00000493          	li	s1,0
// save a0 and a1; arguments from previous boot loader stage:
//  li x10, 0
//  li x11, 0
  li x12, 0
    8000021c:	00000613          	li	a2,0
  li x13, 0
    80000220:	00000693          	li	a3,0
  li x14, 0
    80000224:	00000713          	li	a4,0
  li x15, 0
    80000228:	00000793          	li	a5,0
  li x16, 0
    8000022c:	00000813          	li	a6,0
  li x17, 0
    80000230:	00000893          	li	a7,0
  li x18, 0
    80000234:	00000913          	li	s2,0
  li x19, 0
    80000238:	00000993          	li	s3,0
  li x20, 0
    8000023c:	00000a13          	li	s4,0
  li x21, 0
    80000240:	00000a93          	li	s5,0
  li x22, 0
    80000244:	00000b13          	li	s6,0
  li x23, 0
    80000248:	00000b93          	li	s7,0
  li x24, 0
    8000024c:	00000c13          	li	s8,0
  li x25, 0
    80000250:	00000c93          	li	s9,0
  li x26, 0
    80000254:	00000d13          	li	s10,0
  li x27, 0
    80000258:	00000d93          	li	s11,0
  li x28, 0
    8000025c:	00000e13          	li	t3,0
  li x29, 0
    80000260:	00000e93          	li	t4,0
  li x30, 0
    80000264:	00000f13          	li	t5,0
  li x31, 0
    80000268:	00000f93          	li	t6,0
  csrw mscratch, x0
    8000026c:	34001073          	csrw	mscratch,zero
  csrs CSR_MSTATUS, t0
#endif
#endif

  # write mtvec and make sure it sticks
  la t0, trap_vector
    80000270:	00000297          	auipc	t0,0x0
    80000274:	d9428293          	addi	t0,t0,-620 # 80000004 <trap_vector>
  csrw mtvec, t0
    80000278:	30529073          	csrw	mtvec,t0
  csrr t1, mtvec
    8000027c:	30502373          	csrr	t1,mtvec
1:bne t0, t1, 1b
    80000280:	00629063          	bne	t0,t1,80000280 <do_reset+0x88>

  la sp, stacks + RISCV_PGSIZE - MENTRY_FRAME_SIZE
    80000284:	00012117          	auipc	sp,0x12
    80000288:	c3c10113          	addi	sp,sp,-964 # 80011ec0 <stacks+0xec0>

  csrr a3, mhartid
    8000028c:	f14026f3          	csrr	a3,mhartid
  slli a2, a3, RISCV_PGSHIFT
    80000290:	00c69613          	slli	a2,a3,0xc
  add sp, sp, a2
    80000294:	00c10133          	add	sp,sp,a2

  bnez a3, .LmultiHartInit
    80000298:	00069463          	bnez	a3,800002a0 <do_reset+0xa8>
  # Boot on the first hart
#ifdef CUSTOM_DTS
  csrr a0, mhartid
  la a1, dtb_start
#endif
  j init_first_hart
    8000029c:	2460306f          	j	800034e2 <init_first_hart>

.LmultiHartInit:
  # set MSIE bit to receive IPI
  li a2, MIP_MSIP
    800002a0:	00800613          	li	a2,8
  csrw mie, a2
    800002a4:	30461073          	csrw	mie,a2

.LmultiHart:
#if MAX_HARTS > 1
  # wait for an IPI to signal that it's safe to boot
  wfi
    800002a8:	10500073          	wfi

  # masked harts never start
  la a4, disabled_hart_mask
    800002ac:	00019717          	auipc	a4,0x19
    800002b0:	d5470713          	addi	a4,a4,-684 # 80019000 <disabled_hart_mask>
  LOAD a4, 0(a4)
    800002b4:	00073703          	ld	a4,0(a4)
  srl a4, a4, a3
    800002b8:	00d75733          	srl	a4,a4,a3
  andi a4, a4, 1
    800002bc:	00177713          	andi	a4,a4,1
  bnez a4, .LmultiHart
    800002c0:	fe0714e3          	bnez	a4,800002a8 <do_reset+0xb0>

  # only start if mip is set
  csrr a2, mip
    800002c4:	34402673          	csrr	a2,mip
  andi a2, a2, MIP_MSIP
    800002c8:	00867613          	andi	a2,a2,8
  beqz a2, .LmultiHart
    800002cc:	fc060ee3          	beqz	a2,800002a8 <do_reset+0xb0>

  # make sure our hart id is within a valid range
  fence
    800002d0:	0ff0000f          	fence
  li a2, MAX_HARTS
    800002d4:	00800613          	li	a2,8
  bgeu a3, a2, .Lcont
    800002d8:	00c6f463          	bleu	a2,a3,800002e0 <do_reset+0xe8>
  j init_other_hart
    800002dc:	29e0306f          	j	8000357a <init_other_hart>
.Lcont:
#endif
  wfi
    800002e0:	10500073          	wfi
  j .LmultiHart
    800002e4:	fc5ff06f          	j	800002a8 <do_reset+0xb0>

00000000800002e8 <dtb_output>:
#endif
static const void* entry_point;
long disabled_hart_mask;

static uintptr_t dtb_output()
{
    800002e8:	1101                	addi	sp,sp,-32
    800002ea:	ec22                	sd	s0,24(sp)
    800002ec:	1000                	addi	s0,sp,32
   *
   * Note: linux kernel calls __va(dtb) to get the device-tree virtual
   * address. The kernel's virtual mapping begins at its load address,
   * thus mandating device-tree is in physical memory after the kernel.
   */
  uintptr_t end = kernel_end ? ROUNDUP((uintptr_t)kernel_end, MEGAPAGE_SIZE)
    800002ee:	00019797          	auipc	a5,0x19
    800002f2:	d3a78793          	addi	a5,a5,-710 # 80019028 <kernel_end>
    800002f6:	639c                	ld	a5,0(a5)
                             : (uintptr_t)PAYLOAD_END;
    800002f8:	cf99                	beqz	a5,80000316 <dtb_output+0x2e>
  uintptr_t end = kernel_end ? ROUNDUP((uintptr_t)kernel_end, MEGAPAGE_SIZE)
    800002fa:	00019797          	auipc	a5,0x19
    800002fe:	d2e78793          	addi	a5,a5,-722 # 80019028 <kernel_end>
    80000302:	639c                	ld	a5,0(a5)
    80000304:	fff78713          	addi	a4,a5,-1
    80000308:	ffe007b7          	lui	a5,0xffe00
    8000030c:	8f7d                	and	a4,a4,a5
                             : (uintptr_t)PAYLOAD_END;
    8000030e:	002007b7          	lui	a5,0x200
    80000312:	97ba                	add	a5,a5,a4
    80000314:	a829                	j	8000032e <dtb_output+0x46>
    80000316:	007ea797          	auipc	a5,0x7ea
    8000031a:	caa78793          	addi	a5,a5,-854 # 807e9fc0 <_payload_end>
    8000031e:	fff78713          	addi	a4,a5,-1
    80000322:	ffe007b7          	lui	a5,0xffe00
    80000326:	8f7d                	and	a4,a4,a5
    80000328:	002007b7          	lui	a5,0x200
    8000032c:	97ba                	add	a5,a5,a4
  uintptr_t end = kernel_end ? ROUNDUP((uintptr_t)kernel_end, MEGAPAGE_SIZE)
    8000032e:	fef43423          	sd	a5,-24(s0)
  return end;
    80000332:	fe843783          	ld	a5,-24(s0)
}
    80000336:	853e                	mv	a0,a5
    80000338:	6462                	ld	s0,24(sp)
    8000033a:	6105                	addi	sp,sp,32
    8000033c:	8082                	ret

000000008000033e <filter_dtb>:

static void filter_dtb(uintptr_t source)
{
    8000033e:	7179                	addi	sp,sp,-48
    80000340:	f406                	sd	ra,40(sp)
    80000342:	f022                	sd	s0,32(sp)
    80000344:	1800                	addi	s0,sp,48
    80000346:	fca43c23          	sd	a0,-40(s0)
  uintptr_t dest = dtb_output();
    8000034a:	f9fff0ef          	jal	ra,800002e8 <dtb_output>
    8000034e:	fea43423          	sd	a0,-24(s0)
  uint32_t size = fdt_size(source);
    80000352:	fd843503          	ld	a0,-40(s0)
    80000356:	71c000ef          	jal	ra,80000a72 <fdt_size>
    8000035a:	87aa                	mv	a5,a0
    8000035c:	fef42223          	sw	a5,-28(s0)
  memcpy((void*)dest, (void*)source, size);
    80000360:	fe843783          	ld	a5,-24(s0)
    80000364:	fd843703          	ld	a4,-40(s0)
    80000368:	fe446683          	lwu	a3,-28(s0)
    8000036c:	8636                	mv	a2,a3
    8000036e:	85ba                	mv	a1,a4
    80000370:	853e                	mv	a0,a5
    80000372:	4e30b0ef          	jal	ra,8000c054 <memcpy>

#ifndef CUSTOM_DTS
  // Remove information from the chained FDT
  filter_harts(dest, &disabled_hart_mask);
    80000376:	00019597          	auipc	a1,0x19
    8000037a:	c8a58593          	addi	a1,a1,-886 # 80019000 <disabled_hart_mask>
    8000037e:	fe843503          	ld	a0,-24(s0)
    80000382:	715010ef          	jal	ra,80002296 <filter_harts>
  filter_plic(dest);
    80000386:	fe843503          	ld	a0,-24(s0)
    8000038a:	0a7010ef          	jal	ra,80001c30 <filter_plic>
  filter_compat(dest, "riscv,clint0");
    8000038e:	0000c597          	auipc	a1,0xc
    80000392:	01258593          	addi	a1,a1,18 # 8000c3a0 <atol+0xe2>
    80000396:	fe843503          	ld	a0,-24(s0)
    8000039a:	1e5010ef          	jal	ra,80001d7e <filter_compat>
  filter_compat(dest, "riscv,debug-013");
    8000039e:	0000c597          	auipc	a1,0xc
    800003a2:	01258593          	addi	a1,a1,18 # 8000c3b0 <atol+0xf2>
    800003a6:	fe843503          	ld	a0,-24(s0)
    800003aa:	1d5010ef          	jal	ra,80001d7e <filter_compat>
#endif
}
    800003ae:	0001                	nop
    800003b0:	70a2                	ld	ra,40(sp)
    800003b2:	7402                	ld	s0,32(sp)
    800003b4:	6145                	addi	sp,sp,48
    800003b6:	8082                	ret

00000000800003b8 <protect_memory>:

static void protect_memory(void)
{
    800003b8:	7139                	addi	sp,sp,-64
    800003ba:	fc06                	sd	ra,56(sp)
    800003bc:	f822                	sd	s0,48(sp)
    800003be:	0080                	addi	s0,sp,64
  // Check to see if up to four PMP registers are implemented.
  // Ignore the illegal-instruction trap if PMPs aren't supported.
  uintptr_t a0 = 0, a1 = 0, a2 = 0, a3 = 0, tmp, cfg;
    800003c0:	fe043423          	sd	zero,-24(s0)
    800003c4:	fe043023          	sd	zero,-32(s0)
    800003c8:	fc043c23          	sd	zero,-40(s0)
    800003cc:	fc043823          	sd	zero,-48(s0)
  asm volatile ("la %[tmp], 1f\n\t"
    800003d0:	55fd                	li	a1,-1
    800003d2:	fe843603          	ld	a2,-24(s0)
    800003d6:	fe043683          	ld	a3,-32(s0)
    800003da:	fd843703          	ld	a4,-40(s0)
    800003de:	fd043783          	ld	a5,-48(s0)
    800003e2:	00000517          	auipc	a0,0x0
    800003e6:	02e50513          	addi	a0,a0,46 # 80000410 <protect_memory+0x58>
    800003ea:	30551573          	csrrw	a0,mtvec,a0
    800003ee:	3b059073          	csrw	pmpaddr0,a1
    800003f2:	3b002673          	csrr	a2,pmpaddr0
    800003f6:	3b159073          	csrw	pmpaddr1,a1
    800003fa:	3b1026f3          	csrr	a3,pmpaddr1
    800003fe:	3b259073          	csrw	pmpaddr2,a1
    80000402:	3b202773          	csrr	a4,pmpaddr2
    80000406:	3b359073          	csrw	pmpaddr3,a1
    8000040a:	3b3027f3          	csrr	a5,pmpaddr3
    8000040e:	0001                	nop
    80000410:	30551073          	csrw	mtvec,a0
    80000414:	fca43423          	sd	a0,-56(s0)
    80000418:	fec43423          	sd	a2,-24(s0)
    8000041c:	fed43023          	sd	a3,-32(s0)
    80000420:	fce43c23          	sd	a4,-40(s0)
    80000424:	fcf43823          	sd	a5,-48(s0)
                : [tmp] "=&r" (tmp),
                  [a0] "+r" (a0), [a1] "+r" (a1), [a2] "+r" (a2), [a3] "+r" (a3)
                : [m1] "r" (-1UL));

  // We need at least four PMP registers to protect M-mode from S-mode.
  if (!(a0 & a1 & a2 & a3))
    80000428:	fe843703          	ld	a4,-24(s0)
    8000042c:	fe043783          	ld	a5,-32(s0)
    80000430:	8f7d                	and	a4,a4,a5
    80000432:	fd843783          	ld	a5,-40(s0)
    80000436:	8f7d                	and	a4,a4,a5
    80000438:	fd043783          	ld	a5,-48(s0)
    8000043c:	8ff9                	and	a5,a5,a4
    8000043e:	e781                	bnez	a5,80000446 <protect_memory+0x8e>
    return setup_pmp();
    80000440:	164030ef          	jal	ra,800035a4 <setup_pmp>
    80000444:	a0a5                	j	800004ac <protect_memory+0xf4>

  // Prevent S-mode access to our part of memory.
  extern char _ftext, _end;
  a0 = (uintptr_t)&_ftext >> PMP_SHIFT;
    80000446:	00000797          	auipc	a5,0x0
    8000044a:	bba78793          	addi	a5,a5,-1094 # 80000000 <_ftext>
    8000044e:	8389                	srli	a5,a5,0x2
    80000450:	fef43423          	sd	a5,-24(s0)
  a1 = (uintptr_t)&_end >> PMP_SHIFT;
    80000454:	0001a797          	auipc	a5,0x1a
    80000458:	bac78793          	addi	a5,a5,-1108 # 8001a000 <_end>
    8000045c:	8389                	srli	a5,a5,0x2
    8000045e:	fef43023          	sd	a5,-32(s0)
  cfg = PMP_TOR << 8;
    80000462:	6785                	lui	a5,0x1
    80000464:	80078793          	addi	a5,a5,-2048 # 800 <MEM_START-0x7ffff800>
    80000468:	fcf43023          	sd	a5,-64(s0)
  // Give S-mode free rein of everything else.
  a2 = -1;
    8000046c:	57fd                	li	a5,-1
    8000046e:	fcf43c23          	sd	a5,-40(s0)
  cfg |= (PMP_NAPOT | PMP_R | PMP_W | PMP_X) << 16;
    80000472:	fc043703          	ld	a4,-64(s0)
    80000476:	001f07b7          	lui	a5,0x1f0
    8000047a:	8fd9                	or	a5,a5,a4
    8000047c:	fcf43023          	sd	a5,-64(s0)
  // No use for PMP 3 just yet.
  a3 = 0;
    80000480:	fc043823          	sd	zero,-48(s0)

  // Plug it all in.
  asm volatile ("csrw pmpaddr0, %[a0]\n\t"
    80000484:	fe843783          	ld	a5,-24(s0)
    80000488:	fe043703          	ld	a4,-32(s0)
    8000048c:	fd843683          	ld	a3,-40(s0)
    80000490:	fd043603          	ld	a2,-48(s0)
    80000494:	fc043583          	ld	a1,-64(s0)
    80000498:	3b079073          	csrw	pmpaddr0,a5
    8000049c:	3b171073          	csrw	pmpaddr1,a4
    800004a0:	3b269073          	csrw	pmpaddr2,a3
    800004a4:	3b361073          	csrw	pmpaddr3,a2
    800004a8:	3a059073          	csrw	pmpcfg0,a1
                "csrw pmpaddr2, %[a2]\n\t"
                "csrw pmpaddr3, %[a3]\n\t"
                "csrw pmpcfg0, %[cfg]"
                :: [a0] "r" (a0), [a1] "r" (a1), [a2] "r" (a2), [a3] "r" (a3),
                   [cfg] "r" (cfg));
}
    800004ac:	70e2                	ld	ra,56(sp)
    800004ae:	7442                	ld	s0,48(sp)
    800004b0:	6121                	addi	sp,sp,64
    800004b2:	8082                	ret

00000000800004b4 <boot_other_hart>:

void boot_other_hart(uintptr_t unused __attribute__((unused)))
{
    800004b4:	715d                	addi	sp,sp,-80
    800004b6:	e486                	sd	ra,72(sp)
    800004b8:	e0a2                	sd	s0,64(sp)
    800004ba:	fc26                	sd	s1,56(sp)
    800004bc:	f84a                	sd	s2,48(sp)
    800004be:	0880                	addi	s0,sp,80
    800004c0:	faa43c23          	sd	a0,-72(s0)
  const void* entry;
  do {
    entry = entry_point;
    800004c4:	00010797          	auipc	a5,0x10
    800004c8:	b3c78793          	addi	a5,a5,-1220 # 80010000 <entry_point>
    800004cc:	639c                	ld	a5,0(a5)
    800004ce:	fcf43c23          	sd	a5,-40(s0)
    mb();
    800004d2:	0ff0000f          	fence
  } while (!entry);
    800004d6:	fd843783          	ld	a5,-40(s0)
    800004da:	d7ed                	beqz	a5,800004c4 <boot_other_hart+0x10>

  long hartid = read_csr(mhartid);
    800004dc:	f14027f3          	csrr	a5,mhartid
    800004e0:	fcf43823          	sd	a5,-48(s0)
    800004e4:	fd043783          	ld	a5,-48(s0)
    800004e8:	fcf43423          	sd	a5,-56(s0)
  if ((1 << hartid) & disabled_hart_mask) {
    800004ec:	fc843783          	ld	a5,-56(s0)
    800004f0:	2781                	sext.w	a5,a5
    800004f2:	4705                	li	a4,1
    800004f4:	00f717bb          	sllw	a5,a4,a5
    800004f8:	2781                	sext.w	a5,a5
    800004fa:	873e                	mv	a4,a5
    800004fc:	00019797          	auipc	a5,0x19
    80000500:	b0478793          	addi	a5,a5,-1276 # 80019000 <disabled_hart_mask>
    80000504:	639c                	ld	a5,0(a5)
    80000506:	8ff9                	and	a5,a5,a4
    80000508:	c791                	beqz	a5,80000514 <boot_other_hart+0x60>
    while (1) {
      __asm__ volatile("wfi");
    8000050a:	10500073          	wfi
#ifdef __riscv_div
      __asm__ volatile("div x0, x0, x0");
    8000050e:	02004033          	div	zero,zero,zero
      __asm__ volatile("wfi");
    80000512:	bfe5                	j	8000050a <boot_other_hart+0x56>
  }

#ifdef BBL_BOOT_MACHINE
  enter_machine_mode(entry, hartid, dtb_output());
#else /* Run bbl in supervisor mode */
  protect_memory();
    80000514:	ea5ff0ef          	jal	ra,800003b8 <protect_memory>
  enter_supervisor_mode(entry, hartid, dtb_output());
    80000518:	fd843483          	ld	s1,-40(s0)
    8000051c:	fc843903          	ld	s2,-56(s0)
    80000520:	dc9ff0ef          	jal	ra,800002e8 <dtb_output>
    80000524:	87aa                	mv	a5,a0
    80000526:	863e                	mv	a2,a5
    80000528:	85ca                	mv	a1,s2
    8000052a:	8526                	mv	a0,s1
    8000052c:	0ac030ef          	jal	ra,800035d8 <enter_supervisor_mode>

0000000080000530 <boot_loader>:
#endif
}

void boot_loader(uintptr_t dtb)
{
    80000530:	1101                	addi	sp,sp,-32
    80000532:	ec06                	sd	ra,24(sp)
    80000534:	e822                	sd	s0,16(sp)
    80000536:	1000                	addi	s0,sp,32
    80000538:	fea43423          	sd	a0,-24(s0)
  filter_dtb(dtb);
    8000053c:	fe843503          	ld	a0,-24(s0)
    80000540:	dffff0ef          	jal	ra,8000033e <filter_dtb>
#ifdef PK_ENABLE_LOGO
  print_logo();
    80000544:	050000ef          	jal	ra,80000594 <print_logo>
#endif
#ifdef PK_PRINT_DEVICE_TREE
  fdt_print(dtb_output());
    80000548:	da1ff0ef          	jal	ra,800002e8 <dtb_output>
    8000054c:	87aa                	mv	a5,a0
    8000054e:	853e                	mv	a0,a5
    80000550:	0de020ef          	jal	ra,8000262e <fdt_print>
#endif
  mb();
    80000554:	0ff0000f          	fence
  /* Use optional FDT preloaded external payload if present */
  entry_point = kernel_start ? kernel_start : PAYLOAD_START;
    80000558:	00019797          	auipc	a5,0x19
    8000055c:	ae078793          	addi	a5,a5,-1312 # 80019038 <kernel_start>
    80000560:	639c                	ld	a5,0(a5)
    80000562:	c799                	beqz	a5,80000570 <boot_loader+0x40>
    80000564:	00019797          	auipc	a5,0x19
    80000568:	ad478793          	addi	a5,a5,-1324 # 80019038 <kernel_start>
    8000056c:	639c                	ld	a5,0(a5)
    8000056e:	a029                	j	80000578 <boot_loader+0x48>
    80000570:	00200797          	auipc	a5,0x200
    80000574:	a9078793          	addi	a5,a5,-1392 # 80200000 <_payload_start>
    80000578:	00010717          	auipc	a4,0x10
    8000057c:	a8870713          	addi	a4,a4,-1400 # 80010000 <entry_point>
    80000580:	e31c                	sd	a5,0(a4)
  boot_other_hart(0);
    80000582:	4501                	li	a0,0
    80000584:	f31ff0ef          	jal	ra,800004b4 <boot_other_hart>
}
    80000588:	0001                	nop
    8000058a:	60e2                	ld	ra,24(sp)
    8000058c:	6442                	ld	s0,16(sp)
    8000058e:	6105                	addi	sp,sp,32
    80000590:	8082                	ret
	...

0000000080000594 <print_logo>:
#include "mtrap.h"

extern const char logo[];

void print_logo()
{
    80000594:	1141                	addi	sp,sp,-16
    80000596:	e406                	sd	ra,8(sp)
    80000598:	e022                	sd	s0,0(sp)
    8000059a:	0800                	addi	s0,sp,16
  putstring(logo);
    8000059c:	0000c517          	auipc	a0,0xc
    800005a0:	e2450513          	addi	a0,a0,-476 # 8000c3c0 <logo>
    800005a4:	216020ef          	jal	ra,800027ba <putstring>
}
    800005a8:	0001                	nop
    800005aa:	60a2                	ld	ra,8(sp)
    800005ac:	6402                	ld	s0,0(sp)
    800005ae:	0141                	addi	sp,sp,16
    800005b0:	8082                	ret

00000000800005b2 <bswap>:
#include "config.h"
#include "fdt.h"
#include "mtrap.h"

static inline uint32_t bswap(uint32_t x)
{
    800005b2:	7179                	addi	sp,sp,-48
    800005b4:	f422                	sd	s0,40(sp)
    800005b6:	1800                	addi	s0,sp,48
    800005b8:	87aa                	mv	a5,a0
    800005ba:	fcf42e23          	sw	a5,-36(s0)
#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
  uint32_t y = (x & 0x00FF00FF) <<  8 | (x & 0xFF00FF00) >>  8;
    800005be:	fdc42783          	lw	a5,-36(s0)
    800005c2:	0087979b          	slliw	a5,a5,0x8
    800005c6:	2781                	sext.w	a5,a5
    800005c8:	873e                	mv	a4,a5
    800005ca:	ff0107b7          	lui	a5,0xff010
    800005ce:	f0078793          	addi	a5,a5,-256 # ffffffffff00ff00 <_payload_end+0xffffffff7e825f40>
    800005d2:	8ff9                	and	a5,a5,a4
    800005d4:	0007871b          	sext.w	a4,a5
    800005d8:	fdc42783          	lw	a5,-36(s0)
    800005dc:	0087d79b          	srliw	a5,a5,0x8
    800005e0:	2781                	sext.w	a5,a5
    800005e2:	86be                	mv	a3,a5
    800005e4:	00ff07b7          	lui	a5,0xff0
    800005e8:	0ff78793          	addi	a5,a5,255 # ff00ff <MEM_START-0x7f00ff01>
    800005ec:	8ff5                	and	a5,a5,a3
    800005ee:	2781                	sext.w	a5,a5
    800005f0:	8fd9                	or	a5,a5,a4
    800005f2:	fef42623          	sw	a5,-20(s0)
  uint32_t z = (y & 0x0000FFFF) << 16 | (y & 0xFFFF0000) >> 16;
    800005f6:	fec42783          	lw	a5,-20(s0)
    800005fa:	0107971b          	slliw	a4,a5,0x10
    800005fe:	0107d79b          	srliw	a5,a5,0x10
    80000602:	8fd9                	or	a5,a5,a4
    80000604:	fef42423          	sw	a5,-24(s0)
  return z;
    80000608:	fe842783          	lw	a5,-24(s0)
#else
  /* No need to swap on big endian */
  return x;
#endif
}
    8000060c:	853e                	mv	a0,a5
    8000060e:	7422                	ld	s0,40(sp)
    80000610:	6145                	addi	sp,sp,48
    80000612:	8082                	ret

0000000080000614 <isstring>:

static inline int isstring(char c)
{
    80000614:	1101                	addi	sp,sp,-32
    80000616:	ec22                	sd	s0,24(sp)
    80000618:	1000                	addi	s0,sp,32
    8000061a:	87aa                	mv	a5,a0
    8000061c:	fef407a3          	sb	a5,-17(s0)
  if (c >= 'A' && c <= 'Z')
    80000620:	fef44783          	lbu	a5,-17(s0)
    80000624:	0ff7f713          	andi	a4,a5,255
    80000628:	04000793          	li	a5,64
    8000062c:	00e7fc63          	bleu	a4,a5,80000644 <isstring+0x30>
    80000630:	fef44783          	lbu	a5,-17(s0)
    80000634:	0ff7f713          	andi	a4,a5,255
    80000638:	05a00793          	li	a5,90
    8000063c:	00e7e463          	bltu	a5,a4,80000644 <isstring+0x30>
    return 1;
    80000640:	4785                	li	a5,1
    80000642:	a069                	j	800006cc <isstring+0xb8>
  if (c >= 'a' && c <= 'z')
    80000644:	fef44783          	lbu	a5,-17(s0)
    80000648:	0ff7f713          	andi	a4,a5,255
    8000064c:	06000793          	li	a5,96
    80000650:	00e7fc63          	bleu	a4,a5,80000668 <isstring+0x54>
    80000654:	fef44783          	lbu	a5,-17(s0)
    80000658:	0ff7f713          	andi	a4,a5,255
    8000065c:	07a00793          	li	a5,122
    80000660:	00e7e463          	bltu	a5,a4,80000668 <isstring+0x54>
    return 1;
    80000664:	4785                	li	a5,1
    80000666:	a09d                	j	800006cc <isstring+0xb8>
  if (c >= '0' && c <= '9')
    80000668:	fef44783          	lbu	a5,-17(s0)
    8000066c:	0ff7f713          	andi	a4,a5,255
    80000670:	02f00793          	li	a5,47
    80000674:	00e7fc63          	bleu	a4,a5,8000068c <isstring+0x78>
    80000678:	fef44783          	lbu	a5,-17(s0)
    8000067c:	0ff7f713          	andi	a4,a5,255
    80000680:	03900793          	li	a5,57
    80000684:	00e7e463          	bltu	a5,a4,8000068c <isstring+0x78>
    return 1;
    80000688:	4785                	li	a5,1
    8000068a:	a089                	j	800006cc <isstring+0xb8>
  if (c == '\0' || c == ' ' || c == ',' || c == '-')
    8000068c:	fef44783          	lbu	a5,-17(s0)
    80000690:	0ff7f793          	andi	a5,a5,255
    80000694:	cb8d                	beqz	a5,800006c6 <isstring+0xb2>
    80000696:	fef44783          	lbu	a5,-17(s0)
    8000069a:	0ff7f713          	andi	a4,a5,255
    8000069e:	02000793          	li	a5,32
    800006a2:	02f70263          	beq	a4,a5,800006c6 <isstring+0xb2>
    800006a6:	fef44783          	lbu	a5,-17(s0)
    800006aa:	0ff7f713          	andi	a4,a5,255
    800006ae:	02c00793          	li	a5,44
    800006b2:	00f70a63          	beq	a4,a5,800006c6 <isstring+0xb2>
    800006b6:	fef44783          	lbu	a5,-17(s0)
    800006ba:	0ff7f713          	andi	a4,a5,255
    800006be:	02d00793          	li	a5,45
    800006c2:	00f71463          	bne	a4,a5,800006ca <isstring+0xb6>
    return 1;
    800006c6:	4785                	li	a5,1
    800006c8:	a011                	j	800006cc <isstring+0xb8>
  return 0;
    800006ca:	4781                	li	a5,0
}
    800006cc:	853e                	mv	a0,a5
    800006ce:	6462                	ld	s0,24(sp)
    800006d0:	6105                	addi	sp,sp,32
    800006d2:	8082                	ret

00000000800006d4 <fdt_scan_helper>:
static uint32_t *fdt_scan_helper(
  uint32_t *lex,
  const char *strings,
  struct fdt_scan_node *node,
  const struct fdt_cb *cb)
{
    800006d4:	7175                	addi	sp,sp,-144
    800006d6:	e506                	sd	ra,136(sp)
    800006d8:	e122                	sd	s0,128(sp)
    800006da:	fca6                	sd	s1,120(sp)
    800006dc:	0900                	addi	s0,sp,144
    800006de:	f8a43423          	sd	a0,-120(s0)
    800006e2:	f8b43023          	sd	a1,-128(s0)
    800006e6:	f6c43c23          	sd	a2,-136(s0)
    800006ea:	f6d43823          	sd	a3,-144(s0)
  struct fdt_scan_node child;
  struct fdt_scan_prop prop;
  int last = 0;
    800006ee:	fc042e23          	sw	zero,-36(s0)

  child.parent = node;
    800006f2:	f7843783          	ld	a5,-136(s0)
    800006f6:	faf43c23          	sd	a5,-72(s0)
  // these are the default cell counts, as per the FDT spec
  child.address_cells = 2;
    800006fa:	4789                	li	a5,2
    800006fc:	fcf42423          	sw	a5,-56(s0)
  child.size_cells = 1;
    80000700:	4785                	li	a5,1
    80000702:	fcf42623          	sw	a5,-52(s0)
  prop.node = node;
    80000706:	f7843783          	ld	a5,-136(s0)
    8000070a:	f8f43c23          	sd	a5,-104(s0)

  while (1) {
    switch (bswap(lex[0])) {
    8000070e:	f8843783          	ld	a5,-120(s0)
    80000712:	439c                	lw	a5,0(a5)
    80000714:	853e                	mv	a0,a5
    80000716:	e9dff0ef          	jal	ra,800005b2 <bswap>
    8000071a:	87aa                	mv	a5,a0
    8000071c:	2781                	sext.w	a5,a5
    8000071e:	86be                	mv	a3,a5
    80000720:	4709                	li	a4,2
    80000722:	22e68a63          	beq	a3,a4,80000956 <fdt_scan_helper+0x282>
    80000726:	86be                	mv	a3,a5
    80000728:	4709                	li	a4,2
    8000072a:	00d76763          	bltu	a4,a3,80000738 <fdt_scan_helper+0x64>
    8000072e:	873e                	mv	a4,a5
    80000730:	4785                	li	a5,1
    80000732:	14f70363          	beq	a4,a5,80000878 <fdt_scan_helper+0x1a4>
    80000736:	ac89                	j	80000988 <fdt_scan_helper+0x2b4>
    80000738:	86be                	mv	a3,a5
    8000073a:	470d                	li	a4,3
    8000073c:	00e68c63          	beq	a3,a4,80000754 <fdt_scan_helper+0x80>
    80000740:	873e                	mv	a4,a5
    80000742:	4791                	li	a5,4
    80000744:	24f71263          	bne	a4,a5,80000988 <fdt_scan_helper+0x2b4>
      case FDT_NOP: {
        lex += 1;
    80000748:	f8843783          	ld	a5,-120(s0)
    8000074c:	0791                	addi	a5,a5,4
    8000074e:	f8f43423          	sd	a5,-120(s0)
        break;
    80000752:	a49d                	j	800009b8 <fdt_scan_helper+0x2e4>
      }
      case FDT_PROP: {
        assert (!last);
    80000754:	fdc42783          	lw	a5,-36(s0)
    80000758:	2781                	sext.w	a5,a5
    8000075a:	c795                	beqz	a5,80000786 <fdt_scan_helper+0xb2>
    8000075c:	0000c697          	auipc	a3,0xc
    80000760:	08468693          	addi	a3,a3,132 # 8000c7e0 <logo+0x420>
    80000764:	03a00613          	li	a2,58
    80000768:	0000c597          	auipc	a1,0xc
    8000076c:	08058593          	addi	a1,a1,128 # 8000c7e8 <logo+0x428>
    80000770:	0000c517          	auipc	a0,0xc
    80000774:	09050513          	addi	a0,a0,144 # 8000c800 <logo+0x440>
    80000778:	0b4020ef          	jal	ra,8000282c <printm>
    8000077c:	67c1                	lui	a5,0x10
    8000077e:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7fff0001>
    80000782:	6f4020ef          	jal	ra,80002e76 <poweroff>
        prop.name  = strings + bswap(lex[2]);
    80000786:	f8843783          	ld	a5,-120(s0)
    8000078a:	07a1                	addi	a5,a5,8
    8000078c:	439c                	lw	a5,0(a5)
    8000078e:	853e                	mv	a0,a5
    80000790:	e23ff0ef          	jal	ra,800005b2 <bswap>
    80000794:	87aa                	mv	a5,a0
    80000796:	2781                	sext.w	a5,a5
    80000798:	1782                	slli	a5,a5,0x20
    8000079a:	9381                	srli	a5,a5,0x20
    8000079c:	f8043703          	ld	a4,-128(s0)
    800007a0:	97ba                	add	a5,a5,a4
    800007a2:	faf43023          	sd	a5,-96(s0)
        prop.len   = bswap(lex[1]);
    800007a6:	f8843783          	ld	a5,-120(s0)
    800007aa:	0791                	addi	a5,a5,4
    800007ac:	439c                	lw	a5,0(a5)
    800007ae:	853e                	mv	a0,a5
    800007b0:	e03ff0ef          	jal	ra,800005b2 <bswap>
    800007b4:	87aa                	mv	a5,a0
    800007b6:	2781                	sext.w	a5,a5
    800007b8:	2781                	sext.w	a5,a5
    800007ba:	faf42823          	sw	a5,-80(s0)
        prop.value = lex + 3;
    800007be:	f8843783          	ld	a5,-120(s0)
    800007c2:	07b1                	addi	a5,a5,12
    800007c4:	faf43423          	sd	a5,-88(s0)
        if (node && !strcmp(prop.name, "#address-cells")) { node->address_cells = bswap(lex[3]); }
    800007c8:	f7843783          	ld	a5,-136(s0)
    800007cc:	cb95                	beqz	a5,80000800 <fdt_scan_helper+0x12c>
    800007ce:	fa043783          	ld	a5,-96(s0)
    800007d2:	0000c597          	auipc	a1,0xc
    800007d6:	04e58593          	addi	a1,a1,78 # 8000c820 <logo+0x460>
    800007da:	853e                	mv	a0,a5
    800007dc:	2290b0ef          	jal	ra,8000c204 <strcmp>
    800007e0:	87aa                	mv	a5,a0
    800007e2:	ef99                	bnez	a5,80000800 <fdt_scan_helper+0x12c>
    800007e4:	f8843783          	ld	a5,-120(s0)
    800007e8:	07b1                	addi	a5,a5,12
    800007ea:	439c                	lw	a5,0(a5)
    800007ec:	853e                	mv	a0,a5
    800007ee:	dc5ff0ef          	jal	ra,800005b2 <bswap>
    800007f2:	87aa                	mv	a5,a0
    800007f4:	2781                	sext.w	a5,a5
    800007f6:	0007871b          	sext.w	a4,a5
    800007fa:	f7843783          	ld	a5,-136(s0)
    800007fe:	cb98                	sw	a4,16(a5)
        if (node && !strcmp(prop.name, "#size-cells"))    { node->size_cells    = bswap(lex[3]); }
    80000800:	f7843783          	ld	a5,-136(s0)
    80000804:	cb95                	beqz	a5,80000838 <fdt_scan_helper+0x164>
    80000806:	fa043783          	ld	a5,-96(s0)
    8000080a:	0000c597          	auipc	a1,0xc
    8000080e:	02658593          	addi	a1,a1,38 # 8000c830 <logo+0x470>
    80000812:	853e                	mv	a0,a5
    80000814:	1f10b0ef          	jal	ra,8000c204 <strcmp>
    80000818:	87aa                	mv	a5,a0
    8000081a:	ef99                	bnez	a5,80000838 <fdt_scan_helper+0x164>
    8000081c:	f8843783          	ld	a5,-120(s0)
    80000820:	07b1                	addi	a5,a5,12
    80000822:	439c                	lw	a5,0(a5)
    80000824:	853e                	mv	a0,a5
    80000826:	d8dff0ef          	jal	ra,800005b2 <bswap>
    8000082a:	87aa                	mv	a5,a0
    8000082c:	2781                	sext.w	a5,a5
    8000082e:	0007871b          	sext.w	a4,a5
    80000832:	f7843783          	ld	a5,-136(s0)
    80000836:	cbd8                	sw	a4,20(a5)
        lex += 3 + (prop.len+3)/4;
    80000838:	fb042783          	lw	a5,-80(s0)
    8000083c:	278d                	addiw	a5,a5,3
    8000083e:	2781                	sext.w	a5,a5
    80000840:	41f7d71b          	sraiw	a4,a5,0x1f
    80000844:	01e7571b          	srliw	a4,a4,0x1e
    80000848:	9fb9                	addw	a5,a5,a4
    8000084a:	4027d79b          	sraiw	a5,a5,0x2
    8000084e:	2781                	sext.w	a5,a5
    80000850:	278d                	addiw	a5,a5,3
    80000852:	2781                	sext.w	a5,a5
    80000854:	078a                	slli	a5,a5,0x2
    80000856:	f8843703          	ld	a4,-120(s0)
    8000085a:	97ba                	add	a5,a5,a4
    8000085c:	f8f43423          	sd	a5,-120(s0)
        cb->prop(&prop, cb->extra);
    80000860:	f7043783          	ld	a5,-144(s0)
    80000864:	6794                	ld	a3,8(a5)
    80000866:	f7043783          	ld	a5,-144(s0)
    8000086a:	7398                	ld	a4,32(a5)
    8000086c:	f9840793          	addi	a5,s0,-104
    80000870:	85ba                	mv	a1,a4
    80000872:	853e                	mv	a0,a5
    80000874:	9682                	jalr	a3
        break;
    80000876:	a289                	j	800009b8 <fdt_scan_helper+0x2e4>
      }
      case FDT_BEGIN_NODE: {
        uint32_t *lex_next;
        if (!last && node && cb->done) cb->done(node, cb->extra);
    80000878:	fdc42783          	lw	a5,-36(s0)
    8000087c:	2781                	sext.w	a5,a5
    8000087e:	e395                	bnez	a5,800008a2 <fdt_scan_helper+0x1ce>
    80000880:	f7843783          	ld	a5,-136(s0)
    80000884:	cf99                	beqz	a5,800008a2 <fdt_scan_helper+0x1ce>
    80000886:	f7043783          	ld	a5,-144(s0)
    8000088a:	6b9c                	ld	a5,16(a5)
    8000088c:	cb99                	beqz	a5,800008a2 <fdt_scan_helper+0x1ce>
    8000088e:	f7043783          	ld	a5,-144(s0)
    80000892:	6b98                	ld	a4,16(a5)
    80000894:	f7043783          	ld	a5,-144(s0)
    80000898:	739c                	ld	a5,32(a5)
    8000089a:	85be                	mv	a1,a5
    8000089c:	f7843503          	ld	a0,-136(s0)
    800008a0:	9702                	jalr	a4
        last = 1;
    800008a2:	4785                	li	a5,1
    800008a4:	fcf42e23          	sw	a5,-36(s0)
        child.name = (const char *)(lex+1);
    800008a8:	f8843783          	ld	a5,-120(s0)
    800008ac:	0791                	addi	a5,a5,4
    800008ae:	fcf43023          	sd	a5,-64(s0)
        if (cb->open) cb->open(&child, cb->extra);
    800008b2:	f7043783          	ld	a5,-144(s0)
    800008b6:	639c                	ld	a5,0(a5)
    800008b8:	cf81                	beqz	a5,800008d0 <fdt_scan_helper+0x1fc>
    800008ba:	f7043783          	ld	a5,-144(s0)
    800008be:	6394                	ld	a3,0(a5)
    800008c0:	f7043783          	ld	a5,-144(s0)
    800008c4:	7398                	ld	a4,32(a5)
    800008c6:	fb840793          	addi	a5,s0,-72
    800008ca:	85ba                	mv	a1,a4
    800008cc:	853e                	mv	a0,a5
    800008ce:	9682                	jalr	a3
        lex_next = fdt_scan_helper(
          lex + 2 + strlen(child.name)/4,
    800008d0:	fc043783          	ld	a5,-64(s0)
    800008d4:	853e                	mv	a0,a5
    800008d6:	0f30b0ef          	jal	ra,8000c1c8 <strlen>
    800008da:	87aa                	mv	a5,a0
    800008dc:	9bf1                	andi	a5,a5,-4
    800008de:	07a1                	addi	a5,a5,8
        lex_next = fdt_scan_helper(
    800008e0:	f8843703          	ld	a4,-120(s0)
    800008e4:	97ba                	add	a5,a5,a4
    800008e6:	fb840713          	addi	a4,s0,-72
    800008ea:	f7043683          	ld	a3,-144(s0)
    800008ee:	863a                	mv	a2,a4
    800008f0:	f8043583          	ld	a1,-128(s0)
    800008f4:	853e                	mv	a0,a5
    800008f6:	ddfff0ef          	jal	ra,800006d4 <fdt_scan_helper>
    800008fa:	fca43823          	sd	a0,-48(s0)
          strings, &child, cb);
        if (cb->close && cb->close(&child, cb->extra) == -1)
    800008fe:	f7043783          	ld	a5,-144(s0)
    80000902:	6f9c                	ld	a5,24(a5)
    80000904:	c7a1                	beqz	a5,8000094c <fdt_scan_helper+0x278>
    80000906:	f7043783          	ld	a5,-144(s0)
    8000090a:	6f94                	ld	a3,24(a5)
    8000090c:	f7043783          	ld	a5,-144(s0)
    80000910:	7398                	ld	a4,32(a5)
    80000912:	fb840793          	addi	a5,s0,-72
    80000916:	85ba                	mv	a1,a4
    80000918:	853e                	mv	a0,a5
    8000091a:	9682                	jalr	a3
    8000091c:	87aa                	mv	a5,a0
    8000091e:	873e                	mv	a4,a5
    80000920:	57fd                	li	a5,-1
    80000922:	02f71563          	bne	a4,a5,8000094c <fdt_scan_helper+0x278>
          while (lex != lex_next) *lex++ = bswap(FDT_NOP);
    80000926:	a829                	j	80000940 <fdt_scan_helper+0x26c>
    80000928:	f8843483          	ld	s1,-120(s0)
    8000092c:	00448793          	addi	a5,s1,4
    80000930:	f8f43423          	sd	a5,-120(s0)
    80000934:	4511                	li	a0,4
    80000936:	c7dff0ef          	jal	ra,800005b2 <bswap>
    8000093a:	87aa                	mv	a5,a0
    8000093c:	2781                	sext.w	a5,a5
    8000093e:	c09c                	sw	a5,0(s1)
    80000940:	f8843703          	ld	a4,-120(s0)
    80000944:	fd043783          	ld	a5,-48(s0)
    80000948:	fef710e3          	bne	a4,a5,80000928 <fdt_scan_helper+0x254>
        lex = lex_next;
    8000094c:	fd043783          	ld	a5,-48(s0)
    80000950:	f8f43423          	sd	a5,-120(s0)
        break;
    80000954:	a095                	j	800009b8 <fdt_scan_helper+0x2e4>
      }
      case FDT_END_NODE: {
        if (!last && node && cb->done) cb->done(node, cb->extra);
    80000956:	fdc42783          	lw	a5,-36(s0)
    8000095a:	2781                	sext.w	a5,a5
    8000095c:	e395                	bnez	a5,80000980 <fdt_scan_helper+0x2ac>
    8000095e:	f7843783          	ld	a5,-136(s0)
    80000962:	cf99                	beqz	a5,80000980 <fdt_scan_helper+0x2ac>
    80000964:	f7043783          	ld	a5,-144(s0)
    80000968:	6b9c                	ld	a5,16(a5)
    8000096a:	cb99                	beqz	a5,80000980 <fdt_scan_helper+0x2ac>
    8000096c:	f7043783          	ld	a5,-144(s0)
    80000970:	6b98                	ld	a4,16(a5)
    80000972:	f7043783          	ld	a5,-144(s0)
    80000976:	739c                	ld	a5,32(a5)
    80000978:	85be                	mv	a1,a5
    8000097a:	f7843503          	ld	a0,-136(s0)
    8000097e:	9702                	jalr	a4
        return lex + 1;
    80000980:	f8843783          	ld	a5,-120(s0)
    80000984:	0791                	addi	a5,a5,4
    80000986:	a815                	j	800009ba <fdt_scan_helper+0x2e6>
      }
      default: { // FDT_END
        if (!last && node && cb->done) cb->done(node, cb->extra);
    80000988:	fdc42783          	lw	a5,-36(s0)
    8000098c:	2781                	sext.w	a5,a5
    8000098e:	e395                	bnez	a5,800009b2 <fdt_scan_helper+0x2de>
    80000990:	f7843783          	ld	a5,-136(s0)
    80000994:	cf99                	beqz	a5,800009b2 <fdt_scan_helper+0x2de>
    80000996:	f7043783          	ld	a5,-144(s0)
    8000099a:	6b9c                	ld	a5,16(a5)
    8000099c:	cb99                	beqz	a5,800009b2 <fdt_scan_helper+0x2de>
    8000099e:	f7043783          	ld	a5,-144(s0)
    800009a2:	6b98                	ld	a4,16(a5)
    800009a4:	f7043783          	ld	a5,-144(s0)
    800009a8:	739c                	ld	a5,32(a5)
    800009aa:	85be                	mv	a1,a5
    800009ac:	f7843503          	ld	a0,-136(s0)
    800009b0:	9702                	jalr	a4
        return lex;
    800009b2:	f8843783          	ld	a5,-120(s0)
    800009b6:	a011                	j	800009ba <fdt_scan_helper+0x2e6>
    switch (bswap(lex[0])) {
    800009b8:	bb99                	j	8000070e <fdt_scan_helper+0x3a>
      }
    }
  }
}
    800009ba:	853e                	mv	a0,a5
    800009bc:	60aa                	ld	ra,136(sp)
    800009be:	640a                	ld	s0,128(sp)
    800009c0:	74e6                	ld	s1,120(sp)
    800009c2:	6149                	addi	sp,sp,144
    800009c4:	8082                	ret

00000000800009c6 <fdt_scan>:

void fdt_scan(uintptr_t fdt, const struct fdt_cb *cb)
{
    800009c6:	7139                	addi	sp,sp,-64
    800009c8:	fc06                	sd	ra,56(sp)
    800009ca:	f822                	sd	s0,48(sp)
    800009cc:	0080                	addi	s0,sp,64
    800009ce:	fca43423          	sd	a0,-56(s0)
    800009d2:	fcb43023          	sd	a1,-64(s0)
  struct fdt_header *header = (struct fdt_header *)fdt;
    800009d6:	fc843783          	ld	a5,-56(s0)
    800009da:	fef43423          	sd	a5,-24(s0)

  // Only process FDT that we understand
  if (bswap(header->magic) != FDT_MAGIC ||
    800009de:	fe843783          	ld	a5,-24(s0)
    800009e2:	439c                	lw	a5,0(a5)
    800009e4:	853e                	mv	a0,a5
    800009e6:	bcdff0ef          	jal	ra,800005b2 <bswap>
    800009ea:	87aa                	mv	a5,a0
    800009ec:	2781                	sext.w	a5,a5
    800009ee:	873e                	mv	a4,a5
    800009f0:	d00e07b7          	lui	a5,0xd00e0
    800009f4:	eed78793          	addi	a5,a5,-275 # ffffffffd00dfeed <_payload_end+0xffffffff4f8f5f2d>
    800009f8:	06f71863          	bne	a4,a5,80000a68 <fdt_scan+0xa2>
      bswap(header->last_comp_version) > FDT_VERSION) return;
    800009fc:	fe843783          	ld	a5,-24(s0)
    80000a00:	4f9c                	lw	a5,24(a5)
    80000a02:	853e                	mv	a0,a5
    80000a04:	bafff0ef          	jal	ra,800005b2 <bswap>
    80000a08:	87aa                	mv	a5,a0
    80000a0a:	2781                	sext.w	a5,a5
  if (bswap(header->magic) != FDT_MAGIC ||
    80000a0c:	873e                	mv	a4,a5
    80000a0e:	47c5                	li	a5,17
    80000a10:	04e7ec63          	bltu	a5,a4,80000a68 <fdt_scan+0xa2>

  const char *strings = (const char *)(fdt + bswap(header->off_dt_strings));
    80000a14:	fe843783          	ld	a5,-24(s0)
    80000a18:	47dc                	lw	a5,12(a5)
    80000a1a:	853e                	mv	a0,a5
    80000a1c:	b97ff0ef          	jal	ra,800005b2 <bswap>
    80000a20:	87aa                	mv	a5,a0
    80000a22:	2781                	sext.w	a5,a5
    80000a24:	02079713          	slli	a4,a5,0x20
    80000a28:	9301                	srli	a4,a4,0x20
    80000a2a:	fc843783          	ld	a5,-56(s0)
    80000a2e:	97ba                	add	a5,a5,a4
    80000a30:	fef43023          	sd	a5,-32(s0)
  uint32_t *lex = (uint32_t *)(fdt + bswap(header->off_dt_struct));
    80000a34:	fe843783          	ld	a5,-24(s0)
    80000a38:	479c                	lw	a5,8(a5)
    80000a3a:	853e                	mv	a0,a5
    80000a3c:	b77ff0ef          	jal	ra,800005b2 <bswap>
    80000a40:	87aa                	mv	a5,a0
    80000a42:	2781                	sext.w	a5,a5
    80000a44:	02079713          	slli	a4,a5,0x20
    80000a48:	9301                	srli	a4,a4,0x20
    80000a4a:	fc843783          	ld	a5,-56(s0)
    80000a4e:	97ba                	add	a5,a5,a4
    80000a50:	fcf43c23          	sd	a5,-40(s0)

  fdt_scan_helper(lex, strings, 0, cb);
    80000a54:	fc043683          	ld	a3,-64(s0)
    80000a58:	4601                	li	a2,0
    80000a5a:	fe043583          	ld	a1,-32(s0)
    80000a5e:	fd843503          	ld	a0,-40(s0)
    80000a62:	c73ff0ef          	jal	ra,800006d4 <fdt_scan_helper>
    80000a66:	a011                	j	80000a6a <fdt_scan+0xa4>
      bswap(header->last_comp_version) > FDT_VERSION) return;
    80000a68:	0001                	nop
}
    80000a6a:	70e2                	ld	ra,56(sp)
    80000a6c:	7442                	ld	s0,48(sp)
    80000a6e:	6121                	addi	sp,sp,64
    80000a70:	8082                	ret

0000000080000a72 <fdt_size>:

uint32_t fdt_size(uintptr_t fdt)
{
    80000a72:	7179                	addi	sp,sp,-48
    80000a74:	f406                	sd	ra,40(sp)
    80000a76:	f022                	sd	s0,32(sp)
    80000a78:	1800                	addi	s0,sp,48
    80000a7a:	fca43c23          	sd	a0,-40(s0)
  struct fdt_header *header = (struct fdt_header *)fdt;
    80000a7e:	fd843783          	ld	a5,-40(s0)
    80000a82:	fef43423          	sd	a5,-24(s0)

  // Only process FDT that we understand
  if (bswap(header->magic) != FDT_MAGIC ||
    80000a86:	fe843783          	ld	a5,-24(s0)
    80000a8a:	439c                	lw	a5,0(a5)
    80000a8c:	853e                	mv	a0,a5
    80000a8e:	b25ff0ef          	jal	ra,800005b2 <bswap>
    80000a92:	87aa                	mv	a5,a0
    80000a94:	2781                	sext.w	a5,a5
    80000a96:	873e                	mv	a4,a5
    80000a98:	d00e07b7          	lui	a5,0xd00e0
    80000a9c:	eed78793          	addi	a5,a5,-275 # ffffffffd00dfeed <_payload_end+0xffffffff4f8f5f2d>
    80000aa0:	00f71e63          	bne	a4,a5,80000abc <fdt_size+0x4a>
      bswap(header->last_comp_version) > FDT_VERSION) return 0;
    80000aa4:	fe843783          	ld	a5,-24(s0)
    80000aa8:	4f9c                	lw	a5,24(a5)
    80000aaa:	853e                	mv	a0,a5
    80000aac:	b07ff0ef          	jal	ra,800005b2 <bswap>
    80000ab0:	87aa                	mv	a5,a0
    80000ab2:	2781                	sext.w	a5,a5
  if (bswap(header->magic) != FDT_MAGIC ||
    80000ab4:	873e                	mv	a4,a5
    80000ab6:	47c5                	li	a5,17
    80000ab8:	00e7f463          	bleu	a4,a5,80000ac0 <fdt_size+0x4e>
      bswap(header->last_comp_version) > FDT_VERSION) return 0;
    80000abc:	4781                	li	a5,0
    80000abe:	a809                	j	80000ad0 <fdt_size+0x5e>
  return bswap(header->totalsize);
    80000ac0:	fe843783          	ld	a5,-24(s0)
    80000ac4:	43dc                	lw	a5,4(a5)
    80000ac6:	853e                	mv	a0,a5
    80000ac8:	aebff0ef          	jal	ra,800005b2 <bswap>
    80000acc:	87aa                	mv	a5,a0
    80000ace:	2781                	sext.w	a5,a5
}
    80000ad0:	853e                	mv	a0,a5
    80000ad2:	70a2                	ld	ra,40(sp)
    80000ad4:	7402                	ld	s0,32(sp)
    80000ad6:	6145                	addi	sp,sp,48
    80000ad8:	8082                	ret

0000000080000ada <fdt_get_address>:

const uint32_t *fdt_get_address(const struct fdt_scan_node *node, const uint32_t *value, uint64_t *result)
{
    80000ada:	715d                	addi	sp,sp,-80
    80000adc:	e486                	sd	ra,72(sp)
    80000ade:	e0a2                	sd	s0,64(sp)
    80000ae0:	fc26                	sd	s1,56(sp)
    80000ae2:	0880                	addi	s0,sp,80
    80000ae4:	fca43423          	sd	a0,-56(s0)
    80000ae8:	fcb43023          	sd	a1,-64(s0)
    80000aec:	fac43c23          	sd	a2,-72(s0)
  *result = 0;
    80000af0:	fb843783          	ld	a5,-72(s0)
    80000af4:	0007b023          	sd	zero,0(a5)
  for (int cells = node->address_cells; cells > 0; --cells)
    80000af8:	fc843783          	ld	a5,-56(s0)
    80000afc:	4b9c                	lw	a5,16(a5)
    80000afe:	fcf42e23          	sw	a5,-36(s0)
    80000b02:	a835                	j	80000b3e <fdt_get_address+0x64>
    *result = (*result << 32) + bswap(*value++);
    80000b04:	fb843783          	ld	a5,-72(s0)
    80000b08:	639c                	ld	a5,0(a5)
    80000b0a:	02079493          	slli	s1,a5,0x20
    80000b0e:	fc043783          	ld	a5,-64(s0)
    80000b12:	00478713          	addi	a4,a5,4
    80000b16:	fce43023          	sd	a4,-64(s0)
    80000b1a:	439c                	lw	a5,0(a5)
    80000b1c:	853e                	mv	a0,a5
    80000b1e:	a95ff0ef          	jal	ra,800005b2 <bswap>
    80000b22:	87aa                	mv	a5,a0
    80000b24:	2781                	sext.w	a5,a5
    80000b26:	1782                	slli	a5,a5,0x20
    80000b28:	9381                	srli	a5,a5,0x20
    80000b2a:	00f48733          	add	a4,s1,a5
    80000b2e:	fb843783          	ld	a5,-72(s0)
    80000b32:	e398                	sd	a4,0(a5)
  for (int cells = node->address_cells; cells > 0; --cells)
    80000b34:	fdc42783          	lw	a5,-36(s0)
    80000b38:	37fd                	addiw	a5,a5,-1
    80000b3a:	fcf42e23          	sw	a5,-36(s0)
    80000b3e:	fdc42783          	lw	a5,-36(s0)
    80000b42:	2781                	sext.w	a5,a5
    80000b44:	fcf040e3          	bgtz	a5,80000b04 <fdt_get_address+0x2a>
  return value;
    80000b48:	fc043783          	ld	a5,-64(s0)
}
    80000b4c:	853e                	mv	a0,a5
    80000b4e:	60a6                	ld	ra,72(sp)
    80000b50:	6406                	ld	s0,64(sp)
    80000b52:	74e2                	ld	s1,56(sp)
    80000b54:	6161                	addi	sp,sp,80
    80000b56:	8082                	ret

0000000080000b58 <fdt_get_size>:

const uint32_t *fdt_get_size(const struct fdt_scan_node *node, const uint32_t *value, uint64_t *result)
{
    80000b58:	715d                	addi	sp,sp,-80
    80000b5a:	e486                	sd	ra,72(sp)
    80000b5c:	e0a2                	sd	s0,64(sp)
    80000b5e:	fc26                	sd	s1,56(sp)
    80000b60:	0880                	addi	s0,sp,80
    80000b62:	fca43423          	sd	a0,-56(s0)
    80000b66:	fcb43023          	sd	a1,-64(s0)
    80000b6a:	fac43c23          	sd	a2,-72(s0)
  *result = 0;
    80000b6e:	fb843783          	ld	a5,-72(s0)
    80000b72:	0007b023          	sd	zero,0(a5)
  for (int cells = node->size_cells; cells > 0; --cells)
    80000b76:	fc843783          	ld	a5,-56(s0)
    80000b7a:	4bdc                	lw	a5,20(a5)
    80000b7c:	fcf42e23          	sw	a5,-36(s0)
    80000b80:	a835                	j	80000bbc <fdt_get_size+0x64>
    *result = (*result << 32) + bswap(*value++);
    80000b82:	fb843783          	ld	a5,-72(s0)
    80000b86:	639c                	ld	a5,0(a5)
    80000b88:	02079493          	slli	s1,a5,0x20
    80000b8c:	fc043783          	ld	a5,-64(s0)
    80000b90:	00478713          	addi	a4,a5,4
    80000b94:	fce43023          	sd	a4,-64(s0)
    80000b98:	439c                	lw	a5,0(a5)
    80000b9a:	853e                	mv	a0,a5
    80000b9c:	a17ff0ef          	jal	ra,800005b2 <bswap>
    80000ba0:	87aa                	mv	a5,a0
    80000ba2:	2781                	sext.w	a5,a5
    80000ba4:	1782                	slli	a5,a5,0x20
    80000ba6:	9381                	srli	a5,a5,0x20
    80000ba8:	00f48733          	add	a4,s1,a5
    80000bac:	fb843783          	ld	a5,-72(s0)
    80000bb0:	e398                	sd	a4,0(a5)
  for (int cells = node->size_cells; cells > 0; --cells)
    80000bb2:	fdc42783          	lw	a5,-36(s0)
    80000bb6:	37fd                	addiw	a5,a5,-1
    80000bb8:	fcf42e23          	sw	a5,-36(s0)
    80000bbc:	fdc42783          	lw	a5,-36(s0)
    80000bc0:	2781                	sext.w	a5,a5
    80000bc2:	fcf040e3          	bgtz	a5,80000b82 <fdt_get_size+0x2a>
  return value;
    80000bc6:	fc043783          	ld	a5,-64(s0)
}
    80000bca:	853e                	mv	a0,a5
    80000bcc:	60a6                	ld	ra,72(sp)
    80000bce:	6406                	ld	s0,64(sp)
    80000bd0:	74e2                	ld	s1,56(sp)
    80000bd2:	6161                	addi	sp,sp,80
    80000bd4:	8082                	ret

0000000080000bd6 <fdt_get_value>:

uint32_t fdt_get_value(const struct fdt_scan_prop *prop, uint32_t index)
{
    80000bd6:	1101                	addi	sp,sp,-32
    80000bd8:	ec06                	sd	ra,24(sp)
    80000bda:	e822                	sd	s0,16(sp)
    80000bdc:	1000                	addi	s0,sp,32
    80000bde:	fea43423          	sd	a0,-24(s0)
    80000be2:	87ae                	mv	a5,a1
    80000be4:	fef42223          	sw	a5,-28(s0)
  return bswap(prop->value[index]);
    80000be8:	fe843783          	ld	a5,-24(s0)
    80000bec:	6b98                	ld	a4,16(a5)
    80000bee:	fe446783          	lwu	a5,-28(s0)
    80000bf2:	078a                	slli	a5,a5,0x2
    80000bf4:	97ba                	add	a5,a5,a4
    80000bf6:	439c                	lw	a5,0(a5)
    80000bf8:	853e                	mv	a0,a5
    80000bfa:	9b9ff0ef          	jal	ra,800005b2 <bswap>
    80000bfe:	87aa                	mv	a5,a0
    80000c00:	2781                	sext.w	a5,a5
}
    80000c02:	853e                	mv	a0,a5
    80000c04:	60e2                	ld	ra,24(sp)
    80000c06:	6442                	ld	s0,16(sp)
    80000c08:	6105                	addi	sp,sp,32
    80000c0a:	8082                	ret

0000000080000c0c <fdt_string_list_index>:

int fdt_string_list_index(const struct fdt_scan_prop *prop, const char *str)
{
    80000c0c:	7139                	addi	sp,sp,-64
    80000c0e:	fc06                	sd	ra,56(sp)
    80000c10:	f822                	sd	s0,48(sp)
    80000c12:	0080                	addi	s0,sp,64
    80000c14:	fca43423          	sd	a0,-56(s0)
    80000c18:	fcb43023          	sd	a1,-64(s0)
  const char *list = (const char *)prop->value;
    80000c1c:	fc843783          	ld	a5,-56(s0)
    80000c20:	6b9c                	ld	a5,16(a5)
    80000c22:	fef43423          	sd	a5,-24(s0)
  const char *end = list + prop->len;
    80000c26:	fc843783          	ld	a5,-56(s0)
    80000c2a:	4f9c                	lw	a5,24(a5)
    80000c2c:	873e                	mv	a4,a5
    80000c2e:	fe843783          	ld	a5,-24(s0)
    80000c32:	97ba                	add	a5,a5,a4
    80000c34:	fcf43c23          	sd	a5,-40(s0)
  int index = 0;
    80000c38:	fe042223          	sw	zero,-28(s0)
  while (end - list > 0) {
    80000c3c:	a825                	j	80000c74 <fdt_string_list_index+0x68>
    if (!strcmp(list, str)) return index;
    80000c3e:	fc043583          	ld	a1,-64(s0)
    80000c42:	fe843503          	ld	a0,-24(s0)
    80000c46:	5be0b0ef          	jal	ra,8000c204 <strcmp>
    80000c4a:	87aa                	mv	a5,a0
    80000c4c:	e781                	bnez	a5,80000c54 <fdt_string_list_index+0x48>
    80000c4e:	fe442783          	lw	a5,-28(s0)
    80000c52:	a815                	j	80000c86 <fdt_string_list_index+0x7a>
    ++index;
    80000c54:	fe442783          	lw	a5,-28(s0)
    80000c58:	2785                	addiw	a5,a5,1
    80000c5a:	fef42223          	sw	a5,-28(s0)
    list += strlen(list) + 1;
    80000c5e:	fe843503          	ld	a0,-24(s0)
    80000c62:	5660b0ef          	jal	ra,8000c1c8 <strlen>
    80000c66:	87aa                	mv	a5,a0
    80000c68:	0785                	addi	a5,a5,1
    80000c6a:	fe843703          	ld	a4,-24(s0)
    80000c6e:	97ba                	add	a5,a5,a4
    80000c70:	fef43423          	sd	a5,-24(s0)
  while (end - list > 0) {
    80000c74:	fd843703          	ld	a4,-40(s0)
    80000c78:	fe843783          	ld	a5,-24(s0)
    80000c7c:	40f707b3          	sub	a5,a4,a5
    80000c80:	faf04fe3          	bgtz	a5,80000c3e <fdt_string_list_index+0x32>
  }
  return -1;
    80000c84:	57fd                	li	a5,-1
}
    80000c86:	853e                	mv	a0,a5
    80000c88:	70e2                	ld	ra,56(sp)
    80000c8a:	7442                	ld	s0,48(sp)
    80000c8c:	6121                	addi	sp,sp,64
    80000c8e:	8082                	ret

0000000080000c90 <mem_open>:
  const uint32_t *reg_value;
  int reg_len;
};

static void mem_open(const struct fdt_scan_node *node, void *extra)
{
    80000c90:	7179                	addi	sp,sp,-48
    80000c92:	f406                	sd	ra,40(sp)
    80000c94:	f022                	sd	s0,32(sp)
    80000c96:	1800                	addi	s0,sp,48
    80000c98:	fca43c23          	sd	a0,-40(s0)
    80000c9c:	fcb43823          	sd	a1,-48(s0)
  struct mem_scan *scan = (struct mem_scan *)extra;
    80000ca0:	fd043783          	ld	a5,-48(s0)
    80000ca4:	fef43423          	sd	a5,-24(s0)
  memset(scan, 0, sizeof(*scan));
    80000ca8:	4661                	li	a2,24
    80000caa:	4581                	li	a1,0
    80000cac:	fe843503          	ld	a0,-24(s0)
    80000cb0:	44a0b0ef          	jal	ra,8000c0fa <memset>
}
    80000cb4:	0001                	nop
    80000cb6:	70a2                	ld	ra,40(sp)
    80000cb8:	7402                	ld	s0,32(sp)
    80000cba:	6145                	addi	sp,sp,48
    80000cbc:	8082                	ret

0000000080000cbe <mem_prop>:

static void mem_prop(const struct fdt_scan_prop *prop, void *extra)
{
    80000cbe:	7179                	addi	sp,sp,-48
    80000cc0:	f406                	sd	ra,40(sp)
    80000cc2:	f022                	sd	s0,32(sp)
    80000cc4:	1800                	addi	s0,sp,48
    80000cc6:	fca43c23          	sd	a0,-40(s0)
    80000cca:	fcb43823          	sd	a1,-48(s0)
  struct mem_scan *scan = (struct mem_scan *)extra;
    80000cce:	fd043783          	ld	a5,-48(s0)
    80000cd2:	fef43423          	sd	a5,-24(s0)
  if (!strcmp(prop->name, "device_type") && !strcmp((const char*)prop->value, "memory")) {
    80000cd6:	fd843783          	ld	a5,-40(s0)
    80000cda:	679c                	ld	a5,8(a5)
    80000cdc:	0000c597          	auipc	a1,0xc
    80000ce0:	b6458593          	addi	a1,a1,-1180 # 8000c840 <logo+0x480>
    80000ce4:	853e                	mv	a0,a5
    80000ce6:	51e0b0ef          	jal	ra,8000c204 <strcmp>
    80000cea:	87aa                	mv	a5,a0
    80000cec:	e395                	bnez	a5,80000d10 <mem_prop+0x52>
    80000cee:	fd843783          	ld	a5,-40(s0)
    80000cf2:	6b9c                	ld	a5,16(a5)
    80000cf4:	0000c597          	auipc	a1,0xc
    80000cf8:	b5c58593          	addi	a1,a1,-1188 # 8000c850 <logo+0x490>
    80000cfc:	853e                	mv	a0,a5
    80000cfe:	5060b0ef          	jal	ra,8000c204 <strcmp>
    80000d02:	87aa                	mv	a5,a0
    80000d04:	e791                	bnez	a5,80000d10 <mem_prop+0x52>
    scan->memory = 1;
    80000d06:	fe843783          	ld	a5,-24(s0)
    80000d0a:	4705                	li	a4,1
    80000d0c:	c398                	sw	a4,0(a5)
  } else if (!strcmp(prop->name, "reg")) {
    scan->reg_value = prop->value;
    scan->reg_len = prop->len;
  }
}
    80000d0e:	a80d                	j	80000d40 <mem_prop+0x82>
  } else if (!strcmp(prop->name, "reg")) {
    80000d10:	fd843783          	ld	a5,-40(s0)
    80000d14:	679c                	ld	a5,8(a5)
    80000d16:	0000c597          	auipc	a1,0xc
    80000d1a:	b4258593          	addi	a1,a1,-1214 # 8000c858 <logo+0x498>
    80000d1e:	853e                	mv	a0,a5
    80000d20:	4e40b0ef          	jal	ra,8000c204 <strcmp>
    80000d24:	87aa                	mv	a5,a0
    80000d26:	ef89                	bnez	a5,80000d40 <mem_prop+0x82>
    scan->reg_value = prop->value;
    80000d28:	fd843783          	ld	a5,-40(s0)
    80000d2c:	6b98                	ld	a4,16(a5)
    80000d2e:	fe843783          	ld	a5,-24(s0)
    80000d32:	e798                	sd	a4,8(a5)
    scan->reg_len = prop->len;
    80000d34:	fd843783          	ld	a5,-40(s0)
    80000d38:	4f98                	lw	a4,24(a5)
    80000d3a:	fe843783          	ld	a5,-24(s0)
    80000d3e:	cb98                	sw	a4,16(a5)
}
    80000d40:	0001                	nop
    80000d42:	70a2                	ld	ra,40(sp)
    80000d44:	7402                	ld	s0,32(sp)
    80000d46:	6145                	addi	sp,sp,48
    80000d48:	8082                	ret

0000000080000d4a <mem_done>:

static void mem_done(const struct fdt_scan_node *node, void *extra)
{
    80000d4a:	715d                	addi	sp,sp,-80
    80000d4c:	e486                	sd	ra,72(sp)
    80000d4e:	e0a2                	sd	s0,64(sp)
    80000d50:	0880                	addi	s0,sp,80
    80000d52:	faa43c23          	sd	a0,-72(s0)
    80000d56:	fab43823          	sd	a1,-80(s0)
  struct mem_scan *scan = (struct mem_scan *)extra;
    80000d5a:	fb043783          	ld	a5,-80(s0)
    80000d5e:	fef43023          	sd	a5,-32(s0)
  const uint32_t *value = scan->reg_value;
    80000d62:	fe043783          	ld	a5,-32(s0)
    80000d66:	679c                	ld	a5,8(a5)
    80000d68:	fef43423          	sd	a5,-24(s0)
  const uint32_t *end = value + scan->reg_len/4;
    80000d6c:	fe043783          	ld	a5,-32(s0)
    80000d70:	4b9c                	lw	a5,16(a5)
    80000d72:	41f7d71b          	sraiw	a4,a5,0x1f
    80000d76:	01e7571b          	srliw	a4,a4,0x1e
    80000d7a:	9fb9                	addw	a5,a5,a4
    80000d7c:	4027d79b          	sraiw	a5,a5,0x2
    80000d80:	2781                	sext.w	a5,a5
    80000d82:	078a                	slli	a5,a5,0x2
    80000d84:	fe843703          	ld	a4,-24(s0)
    80000d88:	97ba                	add	a5,a5,a4
    80000d8a:	fcf43c23          	sd	a5,-40(s0)
  uintptr_t self = (uintptr_t)mem_done;
    80000d8e:	00000797          	auipc	a5,0x0
    80000d92:	fbc78793          	addi	a5,a5,-68 # 80000d4a <mem_done>
    80000d96:	fcf43823          	sd	a5,-48(s0)

  if (!scan->memory) return;
    80000d9a:	fe043783          	ld	a5,-32(s0)
    80000d9e:	439c                	lw	a5,0(a5)
    80000da0:	0e078563          	beqz	a5,80000e8a <mem_done+0x140>
  assert (scan->reg_value && scan->reg_len % 4 == 0);
    80000da4:	fe043783          	ld	a5,-32(s0)
    80000da8:	679c                	ld	a5,8(a5)
    80000daa:	cb81                	beqz	a5,80000dba <mem_done+0x70>
    80000dac:	fe043783          	ld	a5,-32(s0)
    80000db0:	4b9c                	lw	a5,16(a5)
    80000db2:	2781                	sext.w	a5,a5
    80000db4:	8b8d                	andi	a5,a5,3
    80000db6:	2781                	sext.w	a5,a5
    80000db8:	c7d1                	beqz	a5,80000e44 <mem_done+0xfa>
    80000dba:	0000c697          	auipc	a3,0xc
    80000dbe:	aa668693          	addi	a3,a3,-1370 # 8000c860 <logo+0x4a0>
    80000dc2:	0b900613          	li	a2,185
    80000dc6:	0000c597          	auipc	a1,0xc
    80000dca:	a2258593          	addi	a1,a1,-1502 # 8000c7e8 <logo+0x428>
    80000dce:	0000c517          	auipc	a0,0xc
    80000dd2:	a3250513          	addi	a0,a0,-1486 # 8000c800 <logo+0x440>
    80000dd6:	257010ef          	jal	ra,8000282c <printm>
    80000dda:	67c1                	lui	a5,0x10
    80000ddc:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7fff0001>
    80000de0:	096020ef          	jal	ra,80002e76 <poweroff>

  while (end - value > 0) {
    uint64_t base, size;
    value = fdt_get_address(node->parent, value, &base);
    80000de4:	fb843783          	ld	a5,-72(s0)
    80000de8:	639c                	ld	a5,0(a5)
    80000dea:	fc840713          	addi	a4,s0,-56
    80000dee:	863a                	mv	a2,a4
    80000df0:	fe843583          	ld	a1,-24(s0)
    80000df4:	853e                	mv	a0,a5
    80000df6:	ce5ff0ef          	jal	ra,80000ada <fdt_get_address>
    80000dfa:	fea43423          	sd	a0,-24(s0)
    value = fdt_get_size   (node->parent, value, &size);
    80000dfe:	fb843783          	ld	a5,-72(s0)
    80000e02:	639c                	ld	a5,0(a5)
    80000e04:	fc040713          	addi	a4,s0,-64
    80000e08:	863a                	mv	a2,a4
    80000e0a:	fe843583          	ld	a1,-24(s0)
    80000e0e:	853e                	mv	a0,a5
    80000e10:	d49ff0ef          	jal	ra,80000b58 <fdt_get_size>
    80000e14:	fea43423          	sd	a0,-24(s0)
    if (base <= self && self <= base + size) { mem_size = size; }
    80000e18:	fc843783          	ld	a5,-56(s0)
    80000e1c:	fd043703          	ld	a4,-48(s0)
    80000e20:	02f76263          	bltu	a4,a5,80000e44 <mem_done+0xfa>
    80000e24:	fc843703          	ld	a4,-56(s0)
    80000e28:	fc043783          	ld	a5,-64(s0)
    80000e2c:	97ba                	add	a5,a5,a4
    80000e2e:	fd043703          	ld	a4,-48(s0)
    80000e32:	00e7e963          	bltu	a5,a4,80000e44 <mem_done+0xfa>
    80000e36:	fc043703          	ld	a4,-64(s0)
    80000e3a:	00018797          	auipc	a5,0x18
    80000e3e:	1e678793          	addi	a5,a5,486 # 80019020 <mem_size>
    80000e42:	e398                	sd	a4,0(a5)
  while (end - value > 0) {
    80000e44:	fd843703          	ld	a4,-40(s0)
    80000e48:	fe843783          	ld	a5,-24(s0)
    80000e4c:	40f707b3          	sub	a5,a4,a5
    80000e50:	f8f04ae3          	bgtz	a5,80000de4 <mem_done+0x9a>
  }
  assert (end == value);
    80000e54:	fd843703          	ld	a4,-40(s0)
    80000e58:	fe843783          	ld	a5,-24(s0)
    80000e5c:	02f70863          	beq	a4,a5,80000e8c <mem_done+0x142>
    80000e60:	0000c697          	auipc	a3,0xc
    80000e64:	a3068693          	addi	a3,a3,-1488 # 8000c890 <logo+0x4d0>
    80000e68:	0c100613          	li	a2,193
    80000e6c:	0000c597          	auipc	a1,0xc
    80000e70:	97c58593          	addi	a1,a1,-1668 # 8000c7e8 <logo+0x428>
    80000e74:	0000c517          	auipc	a0,0xc
    80000e78:	98c50513          	addi	a0,a0,-1652 # 8000c800 <logo+0x440>
    80000e7c:	1b1010ef          	jal	ra,8000282c <printm>
    80000e80:	67c1                	lui	a5,0x10
    80000e82:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7fff0001>
    80000e86:	7f1010ef          	jal	ra,80002e76 <poweroff>
  if (!scan->memory) return;
    80000e8a:	0001                	nop
}
    80000e8c:	60a6                	ld	ra,72(sp)
    80000e8e:	6406                	ld	s0,64(sp)
    80000e90:	6161                	addi	sp,sp,80
    80000e92:	8082                	ret

0000000080000e94 <query_mem>:

void query_mem(uintptr_t fdt)
{
    80000e94:	711d                	addi	sp,sp,-96
    80000e96:	ec86                	sd	ra,88(sp)
    80000e98:	e8a2                	sd	s0,80(sp)
    80000e9a:	1080                	addi	s0,sp,96
    80000e9c:	faa43423          	sd	a0,-88(s0)
  struct fdt_cb cb;
  struct mem_scan scan;

  memset(&cb, 0, sizeof(cb));
    80000ea0:	fc840793          	addi	a5,s0,-56
    80000ea4:	02800613          	li	a2,40
    80000ea8:	4581                	li	a1,0
    80000eaa:	853e                	mv	a0,a5
    80000eac:	24e0b0ef          	jal	ra,8000c0fa <memset>
  cb.open = mem_open;
    80000eb0:	00000797          	auipc	a5,0x0
    80000eb4:	de078793          	addi	a5,a5,-544 # 80000c90 <mem_open>
    80000eb8:	fcf43423          	sd	a5,-56(s0)
  cb.prop = mem_prop;
    80000ebc:	00000797          	auipc	a5,0x0
    80000ec0:	e0278793          	addi	a5,a5,-510 # 80000cbe <mem_prop>
    80000ec4:	fcf43823          	sd	a5,-48(s0)
  cb.done = mem_done;
    80000ec8:	00000797          	auipc	a5,0x0
    80000ecc:	e8278793          	addi	a5,a5,-382 # 80000d4a <mem_done>
    80000ed0:	fcf43c23          	sd	a5,-40(s0)
  cb.extra = &scan;
    80000ed4:	fb040793          	addi	a5,s0,-80
    80000ed8:	fef43423          	sd	a5,-24(s0)

  mem_size = 0;
    80000edc:	00018797          	auipc	a5,0x18
    80000ee0:	14478793          	addi	a5,a5,324 # 80019020 <mem_size>
    80000ee4:	0007b023          	sd	zero,0(a5)
  fdt_scan(fdt, &cb);
    80000ee8:	fc840793          	addi	a5,s0,-56
    80000eec:	85be                	mv	a1,a5
    80000eee:	fa843503          	ld	a0,-88(s0)
    80000ef2:	ad5ff0ef          	jal	ra,800009c6 <fdt_scan>
  assert (mem_size > 0);
    80000ef6:	00018797          	auipc	a5,0x18
    80000efa:	12a78793          	addi	a5,a5,298 # 80019020 <mem_size>
    80000efe:	639c                	ld	a5,0(a5)
    80000f00:	e795                	bnez	a5,80000f2c <query_mem+0x98>
    80000f02:	0000c697          	auipc	a3,0xc
    80000f06:	99e68693          	addi	a3,a3,-1634 # 8000c8a0 <logo+0x4e0>
    80000f0a:	0d100613          	li	a2,209
    80000f0e:	0000c597          	auipc	a1,0xc
    80000f12:	8da58593          	addi	a1,a1,-1830 # 8000c7e8 <logo+0x428>
    80000f16:	0000c517          	auipc	a0,0xc
    80000f1a:	8ea50513          	addi	a0,a0,-1814 # 8000c800 <logo+0x440>
    80000f1e:	10f010ef          	jal	ra,8000282c <printm>
    80000f22:	67c1                	lui	a5,0x10
    80000f24:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7fff0001>
    80000f28:	74f010ef          	jal	ra,80002e76 <poweroff>
}
    80000f2c:	0001                	nop
    80000f2e:	60e6                	ld	ra,88(sp)
    80000f30:	6446                	ld	s0,80(sp)
    80000f32:	6125                	addi	sp,sp,96
    80000f34:	8082                	ret

0000000080000f36 <hart_open>:
  int cells;
  uint32_t phandle;
};

static void hart_open(const struct fdt_scan_node *node, void *extra)
{
    80000f36:	7179                	addi	sp,sp,-48
    80000f38:	f422                	sd	s0,40(sp)
    80000f3a:	1800                	addi	s0,sp,48
    80000f3c:	fca43c23          	sd	a0,-40(s0)
    80000f40:	fcb43823          	sd	a1,-48(s0)
  struct hart_scan *scan = (struct hart_scan *)extra;
    80000f44:	fd043783          	ld	a5,-48(s0)
    80000f48:	fef43423          	sd	a5,-24(s0)
  if (!scan->cpu) {
    80000f4c:	fe843783          	ld	a5,-24(s0)
    80000f50:	639c                	ld	a5,0(a5)
    80000f52:	e789                	bnez	a5,80000f5c <hart_open+0x26>
    scan->hart = -1;
    80000f54:	fe843783          	ld	a5,-24(s0)
    80000f58:	577d                	li	a4,-1
    80000f5a:	c798                	sw	a4,8(a5)
  }
  if (!scan->controller) {
    80000f5c:	fe843783          	ld	a5,-24(s0)
    80000f60:	6b9c                	ld	a5,16(a5)
    80000f62:	eb89                	bnez	a5,80000f74 <hart_open+0x3e>
    scan->cells = 0;
    80000f64:	fe843783          	ld	a5,-24(s0)
    80000f68:	0007ac23          	sw	zero,24(a5)
    scan->phandle = 0;
    80000f6c:	fe843783          	ld	a5,-24(s0)
    80000f70:	0007ae23          	sw	zero,28(a5)
  }
}
    80000f74:	0001                	nop
    80000f76:	7422                	ld	s0,40(sp)
    80000f78:	6145                	addi	sp,sp,48
    80000f7a:	8082                	ret

0000000080000f7c <hart_prop>:

static void hart_prop(const struct fdt_scan_prop *prop, void *extra)
{
    80000f7c:	7179                	addi	sp,sp,-48
    80000f7e:	f406                	sd	ra,40(sp)
    80000f80:	f022                	sd	s0,32(sp)
    80000f82:	1800                	addi	s0,sp,48
    80000f84:	fca43c23          	sd	a0,-40(s0)
    80000f88:	fcb43823          	sd	a1,-48(s0)
  struct hart_scan *scan = (struct hart_scan *)extra;
    80000f8c:	fd043783          	ld	a5,-48(s0)
    80000f90:	fef43423          	sd	a5,-24(s0)
  if (!strcmp(prop->name, "device_type") && !strcmp((const char*)prop->value, "cpu")) {
    80000f94:	fd843783          	ld	a5,-40(s0)
    80000f98:	679c                	ld	a5,8(a5)
    80000f9a:	0000c597          	auipc	a1,0xc
    80000f9e:	8a658593          	addi	a1,a1,-1882 # 8000c840 <logo+0x480>
    80000fa2:	853e                	mv	a0,a5
    80000fa4:	2600b0ef          	jal	ra,8000c204 <strcmp>
    80000fa8:	87aa                	mv	a5,a0
    80000faa:	efa9                	bnez	a5,80001004 <hart_prop+0x88>
    80000fac:	fd843783          	ld	a5,-40(s0)
    80000fb0:	6b9c                	ld	a5,16(a5)
    80000fb2:	0000c597          	auipc	a1,0xc
    80000fb6:	8fe58593          	addi	a1,a1,-1794 # 8000c8b0 <logo+0x4f0>
    80000fba:	853e                	mv	a0,a5
    80000fbc:	2480b0ef          	jal	ra,8000c204 <strcmp>
    80000fc0:	87aa                	mv	a5,a0
    80000fc2:	e3a9                	bnez	a5,80001004 <hart_prop+0x88>
    assert (!scan->cpu);
    80000fc4:	fe843783          	ld	a5,-24(s0)
    80000fc8:	639c                	ld	a5,0(a5)
    80000fca:	c795                	beqz	a5,80000ff6 <hart_prop+0x7a>
    80000fcc:	0000c697          	auipc	a3,0xc
    80000fd0:	8ec68693          	addi	a3,a3,-1812 # 8000c8b8 <logo+0x4f8>
    80000fd4:	0f100613          	li	a2,241
    80000fd8:	0000c597          	auipc	a1,0xc
    80000fdc:	81058593          	addi	a1,a1,-2032 # 8000c7e8 <logo+0x428>
    80000fe0:	0000c517          	auipc	a0,0xc
    80000fe4:	82050513          	addi	a0,a0,-2016 # 8000c800 <logo+0x440>
    80000fe8:	045010ef          	jal	ra,8000282c <printm>
    80000fec:	67c1                	lui	a5,0x10
    80000fee:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7fff0001>
    80000ff2:	685010ef          	jal	ra,80002e76 <poweroff>
    scan->cpu = prop->node;
    80000ff6:	fd843783          	ld	a5,-40(s0)
    80000ffa:	6398                	ld	a4,0(a5)
    80000ffc:	fe843783          	ld	a5,-24(s0)
    80001000:	e398                	sd	a4,0(a5)
  } else if (!strcmp(prop->name, "reg")) {
    uint64_t reg;
    fdt_get_address(prop->node->parent, prop->value, &reg);
    scan->hart = reg;
  }
}
    80001002:	a219                	j	80001108 <hart_prop+0x18c>
  } else if (!strcmp(prop->name, "interrupt-controller")) {
    80001004:	fd843783          	ld	a5,-40(s0)
    80001008:	679c                	ld	a5,8(a5)
    8000100a:	0000c597          	auipc	a1,0xc
    8000100e:	8be58593          	addi	a1,a1,-1858 # 8000c8c8 <logo+0x508>
    80001012:	853e                	mv	a0,a5
    80001014:	1f00b0ef          	jal	ra,8000c204 <strcmp>
    80001018:	87aa                	mv	a5,a0
    8000101a:	e3a9                	bnez	a5,8000105c <hart_prop+0xe0>
    assert (!scan->controller);
    8000101c:	fe843783          	ld	a5,-24(s0)
    80001020:	6b9c                	ld	a5,16(a5)
    80001022:	c795                	beqz	a5,8000104e <hart_prop+0xd2>
    80001024:	0000c697          	auipc	a3,0xc
    80001028:	8bc68693          	addi	a3,a3,-1860 # 8000c8e0 <logo+0x520>
    8000102c:	0f400613          	li	a2,244
    80001030:	0000b597          	auipc	a1,0xb
    80001034:	7b858593          	addi	a1,a1,1976 # 8000c7e8 <logo+0x428>
    80001038:	0000b517          	auipc	a0,0xb
    8000103c:	7c850513          	addi	a0,a0,1992 # 8000c800 <logo+0x440>
    80001040:	7ec010ef          	jal	ra,8000282c <printm>
    80001044:	67c1                	lui	a5,0x10
    80001046:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7fff0001>
    8000104a:	62d010ef          	jal	ra,80002e76 <poweroff>
    scan->controller = prop->node;
    8000104e:	fd843783          	ld	a5,-40(s0)
    80001052:	6398                	ld	a4,0(a5)
    80001054:	fe843783          	ld	a5,-24(s0)
    80001058:	eb98                	sd	a4,16(a5)
}
    8000105a:	a07d                	j	80001108 <hart_prop+0x18c>
  } else if (!strcmp(prop->name, "#interrupt-cells")) {
    8000105c:	fd843783          	ld	a5,-40(s0)
    80001060:	679c                	ld	a5,8(a5)
    80001062:	0000c597          	auipc	a1,0xc
    80001066:	89658593          	addi	a1,a1,-1898 # 8000c8f8 <logo+0x538>
    8000106a:	853e                	mv	a0,a5
    8000106c:	1980b0ef          	jal	ra,8000c204 <strcmp>
    80001070:	87aa                	mv	a5,a0
    80001072:	e385                	bnez	a5,80001092 <hart_prop+0x116>
    scan->cells = bswap(prop->value[0]);
    80001074:	fd843783          	ld	a5,-40(s0)
    80001078:	6b9c                	ld	a5,16(a5)
    8000107a:	439c                	lw	a5,0(a5)
    8000107c:	853e                	mv	a0,a5
    8000107e:	d34ff0ef          	jal	ra,800005b2 <bswap>
    80001082:	87aa                	mv	a5,a0
    80001084:	2781                	sext.w	a5,a5
    80001086:	0007871b          	sext.w	a4,a5
    8000108a:	fe843783          	ld	a5,-24(s0)
    8000108e:	cf98                	sw	a4,24(a5)
}
    80001090:	a8a5                	j	80001108 <hart_prop+0x18c>
  } else if (!strcmp(prop->name, "phandle")) {
    80001092:	fd843783          	ld	a5,-40(s0)
    80001096:	679c                	ld	a5,8(a5)
    80001098:	0000c597          	auipc	a1,0xc
    8000109c:	87858593          	addi	a1,a1,-1928 # 8000c910 <logo+0x550>
    800010a0:	853e                	mv	a0,a5
    800010a2:	1620b0ef          	jal	ra,8000c204 <strcmp>
    800010a6:	87aa                	mv	a5,a0
    800010a8:	ef99                	bnez	a5,800010c6 <hart_prop+0x14a>
    scan->phandle = bswap(prop->value[0]);
    800010aa:	fd843783          	ld	a5,-40(s0)
    800010ae:	6b9c                	ld	a5,16(a5)
    800010b0:	439c                	lw	a5,0(a5)
    800010b2:	853e                	mv	a0,a5
    800010b4:	cfeff0ef          	jal	ra,800005b2 <bswap>
    800010b8:	87aa                	mv	a5,a0
    800010ba:	0007871b          	sext.w	a4,a5
    800010be:	fe843783          	ld	a5,-24(s0)
    800010c2:	cfd8                	sw	a4,28(a5)
}
    800010c4:	a091                	j	80001108 <hart_prop+0x18c>
  } else if (!strcmp(prop->name, "reg")) {
    800010c6:	fd843783          	ld	a5,-40(s0)
    800010ca:	679c                	ld	a5,8(a5)
    800010cc:	0000b597          	auipc	a1,0xb
    800010d0:	78c58593          	addi	a1,a1,1932 # 8000c858 <logo+0x498>
    800010d4:	853e                	mv	a0,a5
    800010d6:	12e0b0ef          	jal	ra,8000c204 <strcmp>
    800010da:	87aa                	mv	a5,a0
    800010dc:	e795                	bnez	a5,80001108 <hart_prop+0x18c>
    fdt_get_address(prop->node->parent, prop->value, &reg);
    800010de:	fd843783          	ld	a5,-40(s0)
    800010e2:	639c                	ld	a5,0(a5)
    800010e4:	6398                	ld	a4,0(a5)
    800010e6:	fd843783          	ld	a5,-40(s0)
    800010ea:	6b9c                	ld	a5,16(a5)
    800010ec:	fe040693          	addi	a3,s0,-32
    800010f0:	8636                	mv	a2,a3
    800010f2:	85be                	mv	a1,a5
    800010f4:	853a                	mv	a0,a4
    800010f6:	9e5ff0ef          	jal	ra,80000ada <fdt_get_address>
    scan->hart = reg;
    800010fa:	fe043783          	ld	a5,-32(s0)
    800010fe:	0007871b          	sext.w	a4,a5
    80001102:	fe843783          	ld	a5,-24(s0)
    80001106:	c798                	sw	a4,8(a5)
}
    80001108:	0001                	nop
    8000110a:	70a2                	ld	ra,40(sp)
    8000110c:	7402                	ld	s0,32(sp)
    8000110e:	6145                	addi	sp,sp,48
    80001110:	8082                	ret

0000000080001112 <hart_done>:

static void hart_done(const struct fdt_scan_node *node, void *extra)
{
    80001112:	7179                	addi	sp,sp,-48
    80001114:	f406                	sd	ra,40(sp)
    80001116:	f022                	sd	s0,32(sp)
    80001118:	1800                	addi	s0,sp,48
    8000111a:	fca43c23          	sd	a0,-40(s0)
    8000111e:	fcb43823          	sd	a1,-48(s0)
  struct hart_scan *scan = (struct hart_scan *)extra;
    80001122:	fd043783          	ld	a5,-48(s0)
    80001126:	fef43423          	sd	a5,-24(s0)

  if (scan->cpu == node) {
    8000112a:	fe843783          	ld	a5,-24(s0)
    8000112e:	639c                	ld	a5,0(a5)
    80001130:	fd843703          	ld	a4,-40(s0)
    80001134:	02f71c63          	bne	a4,a5,8000116c <hart_done+0x5a>
    assert (scan->hart >= 0);
    80001138:	fe843783          	ld	a5,-24(s0)
    8000113c:	479c                	lw	a5,8(a5)
    8000113e:	0207d763          	bgez	a5,8000116c <hart_done+0x5a>
    80001142:	0000b697          	auipc	a3,0xb
    80001146:	7d668693          	addi	a3,a3,2006 # 8000c918 <logo+0x558>
    8000114a:	10600613          	li	a2,262
    8000114e:	0000b597          	auipc	a1,0xb
    80001152:	69a58593          	addi	a1,a1,1690 # 8000c7e8 <logo+0x428>
    80001156:	0000b517          	auipc	a0,0xb
    8000115a:	6aa50513          	addi	a0,a0,1706 # 8000c800 <logo+0x440>
    8000115e:	6ce010ef          	jal	ra,8000282c <printm>
    80001162:	67c1                	lui	a5,0x10
    80001164:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7fff0001>
    80001168:	50f010ef          	jal	ra,80002e76 <poweroff>
  }

  if (scan->controller == node && scan->cpu) {
    8000116c:	fe843783          	ld	a5,-24(s0)
    80001170:	6b9c                	ld	a5,16(a5)
    80001172:	fd843703          	ld	a4,-40(s0)
    80001176:	0cf71863          	bne	a4,a5,80001246 <hart_done+0x134>
    8000117a:	fe843783          	ld	a5,-24(s0)
    8000117e:	639c                	ld	a5,0(a5)
    80001180:	c3f9                	beqz	a5,80001246 <hart_done+0x134>
    assert (scan->phandle > 0);
    80001182:	fe843783          	ld	a5,-24(s0)
    80001186:	4fdc                	lw	a5,28(a5)
    80001188:	e795                	bnez	a5,800011b4 <hart_done+0xa2>
    8000118a:	0000b697          	auipc	a3,0xb
    8000118e:	79e68693          	addi	a3,a3,1950 # 8000c928 <logo+0x568>
    80001192:	10a00613          	li	a2,266
    80001196:	0000b597          	auipc	a1,0xb
    8000119a:	65258593          	addi	a1,a1,1618 # 8000c7e8 <logo+0x428>
    8000119e:	0000b517          	auipc	a0,0xb
    800011a2:	66250513          	addi	a0,a0,1634 # 8000c800 <logo+0x440>
    800011a6:	686010ef          	jal	ra,8000282c <printm>
    800011aa:	67c1                	lui	a5,0x10
    800011ac:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7fff0001>
    800011b0:	4c7010ef          	jal	ra,80002e76 <poweroff>
    assert (scan->cells == 1);
    800011b4:	fe843783          	ld	a5,-24(s0)
    800011b8:	4f9c                	lw	a5,24(a5)
    800011ba:	873e                	mv	a4,a5
    800011bc:	4785                	li	a5,1
    800011be:	02f70763          	beq	a4,a5,800011ec <hart_done+0xda>
    800011c2:	0000b697          	auipc	a3,0xb
    800011c6:	77e68693          	addi	a3,a3,1918 # 8000c940 <logo+0x580>
    800011ca:	10b00613          	li	a2,267
    800011ce:	0000b597          	auipc	a1,0xb
    800011d2:	61a58593          	addi	a1,a1,1562 # 8000c7e8 <logo+0x428>
    800011d6:	0000b517          	auipc	a0,0xb
    800011da:	62a50513          	addi	a0,a0,1578 # 8000c800 <logo+0x440>
    800011de:	64e010ef          	jal	ra,8000282c <printm>
    800011e2:	67c1                	lui	a5,0x10
    800011e4:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7fff0001>
    800011e8:	48f010ef          	jal	ra,80002e76 <poweroff>

    if (scan->hart < MAX_HARTS) {
    800011ec:	fe843783          	ld	a5,-24(s0)
    800011f0:	479c                	lw	a5,8(a5)
    800011f2:	873e                	mv	a4,a5
    800011f4:	479d                	li	a5,7
    800011f6:	04e7c863          	blt	a5,a4,80001246 <hart_done+0x134>
      hart_phandles[scan->hart] = scan->phandle;
    800011fa:	fe843783          	ld	a5,-24(s0)
    800011fe:	479c                	lw	a5,8(a5)
    80001200:	fe843703          	ld	a4,-24(s0)
    80001204:	4f58                	lw	a4,28(a4)
    80001206:	0000f697          	auipc	a3,0xf
    8000120a:	e0268693          	addi	a3,a3,-510 # 80010008 <hart_phandles>
    8000120e:	078a                	slli	a5,a5,0x2
    80001210:	97b6                	add	a5,a5,a3
    80001212:	c398                	sw	a4,0(a5)
      hart_mask |= 1 << scan->hart;
    80001214:	fe843783          	ld	a5,-24(s0)
    80001218:	479c                	lw	a5,8(a5)
    8000121a:	4705                	li	a4,1
    8000121c:	00f717bb          	sllw	a5,a4,a5
    80001220:	2781                	sext.w	a5,a5
    80001222:	873e                	mv	a4,a5
    80001224:	00018797          	auipc	a5,0x18
    80001228:	de478793          	addi	a5,a5,-540 # 80019008 <hart_mask>
    8000122c:	639c                	ld	a5,0(a5)
    8000122e:	8f5d                	or	a4,a4,a5
    80001230:	00018797          	auipc	a5,0x18
    80001234:	dd878793          	addi	a5,a5,-552 # 80019008 <hart_mask>
    80001238:	e398                	sd	a4,0(a5)
      hls_init(scan->hart);
    8000123a:	fe843783          	ld	a5,-24(s0)
    8000123e:	479c                	lw	a5,8(a5)
    80001240:	853e                	mv	a0,a5
    80001242:	6a5010ef          	jal	ra,800030e6 <hls_init>
    }
  }
}
    80001246:	0001                	nop
    80001248:	70a2                	ld	ra,40(sp)
    8000124a:	7402                	ld	s0,32(sp)
    8000124c:	6145                	addi	sp,sp,48
    8000124e:	8082                	ret

0000000080001250 <hart_close>:

static int hart_close(const struct fdt_scan_node *node, void *extra)
{
    80001250:	7179                	addi	sp,sp,-48
    80001252:	f422                	sd	s0,40(sp)
    80001254:	1800                	addi	s0,sp,48
    80001256:	fca43c23          	sd	a0,-40(s0)
    8000125a:	fcb43823          	sd	a1,-48(s0)
  struct hart_scan *scan = (struct hart_scan *)extra;
    8000125e:	fd043783          	ld	a5,-48(s0)
    80001262:	fef43423          	sd	a5,-24(s0)
  if (scan->cpu == node) scan->cpu = 0;
    80001266:	fe843783          	ld	a5,-24(s0)
    8000126a:	639c                	ld	a5,0(a5)
    8000126c:	fd843703          	ld	a4,-40(s0)
    80001270:	00f71663          	bne	a4,a5,8000127c <hart_close+0x2c>
    80001274:	fe843783          	ld	a5,-24(s0)
    80001278:	0007b023          	sd	zero,0(a5)
  if (scan->controller == node) scan->controller = 0;
    8000127c:	fe843783          	ld	a5,-24(s0)
    80001280:	6b9c                	ld	a5,16(a5)
    80001282:	fd843703          	ld	a4,-40(s0)
    80001286:	00f71663          	bne	a4,a5,80001292 <hart_close+0x42>
    8000128a:	fe843783          	ld	a5,-24(s0)
    8000128e:	0007b823          	sd	zero,16(a5)
  return 0;
    80001292:	4781                	li	a5,0
}
    80001294:	853e                	mv	a0,a5
    80001296:	7422                	ld	s0,40(sp)
    80001298:	6145                	addi	sp,sp,48
    8000129a:	8082                	ret

000000008000129c <query_harts>:

void query_harts(uintptr_t fdt)
{
    8000129c:	7159                	addi	sp,sp,-112
    8000129e:	f486                	sd	ra,104(sp)
    800012a0:	f0a2                	sd	s0,96(sp)
    800012a2:	1880                	addi	s0,sp,112
    800012a4:	f8a43c23          	sd	a0,-104(s0)
  struct fdt_cb cb;
  struct hart_scan scan;

  memset(&cb, 0, sizeof(cb));
    800012a8:	fc040793          	addi	a5,s0,-64
    800012ac:	02800613          	li	a2,40
    800012b0:	4581                	li	a1,0
    800012b2:	853e                	mv	a0,a5
    800012b4:	6470a0ef          	jal	ra,8000c0fa <memset>
  memset(&scan, 0, sizeof(scan));
    800012b8:	fa040793          	addi	a5,s0,-96
    800012bc:	02000613          	li	a2,32
    800012c0:	4581                	li	a1,0
    800012c2:	853e                	mv	a0,a5
    800012c4:	6370a0ef          	jal	ra,8000c0fa <memset>
  cb.open = hart_open;
    800012c8:	00000797          	auipc	a5,0x0
    800012cc:	c6e78793          	addi	a5,a5,-914 # 80000f36 <hart_open>
    800012d0:	fcf43023          	sd	a5,-64(s0)
  cb.prop = hart_prop;
    800012d4:	00000797          	auipc	a5,0x0
    800012d8:	ca878793          	addi	a5,a5,-856 # 80000f7c <hart_prop>
    800012dc:	fcf43423          	sd	a5,-56(s0)
  cb.done = hart_done;
    800012e0:	00000797          	auipc	a5,0x0
    800012e4:	e3278793          	addi	a5,a5,-462 # 80001112 <hart_done>
    800012e8:	fcf43823          	sd	a5,-48(s0)
  cb.close= hart_close;
    800012ec:	00000797          	auipc	a5,0x0
    800012f0:	f6478793          	addi	a5,a5,-156 # 80001250 <hart_close>
    800012f4:	fcf43c23          	sd	a5,-40(s0)
  cb.extra = &scan;
    800012f8:	fa040793          	addi	a5,s0,-96
    800012fc:	fef43023          	sd	a5,-32(s0)

  fdt_scan(fdt, &cb);
    80001300:	fc040793          	addi	a5,s0,-64
    80001304:	85be                	mv	a1,a5
    80001306:	f9843503          	ld	a0,-104(s0)
    8000130a:	ebcff0ef          	jal	ra,800009c6 <fdt_scan>

  // The current hart should have been detected
  assert ((hart_mask >> read_csr(mhartid)) != 0);
    8000130e:	00018797          	auipc	a5,0x18
    80001312:	cfa78793          	addi	a5,a5,-774 # 80019008 <hart_mask>
    80001316:	639c                	ld	a5,0(a5)
    80001318:	f1402773          	csrr	a4,mhartid
    8000131c:	fee43423          	sd	a4,-24(s0)
    80001320:	fe843703          	ld	a4,-24(s0)
    80001324:	2701                	sext.w	a4,a4
    80001326:	00e7d7b3          	srl	a5,a5,a4
    8000132a:	e795                	bnez	a5,80001356 <query_harts+0xba>
    8000132c:	0000b697          	auipc	a3,0xb
    80001330:	62c68693          	addi	a3,a3,1580 # 8000c958 <logo+0x598>
    80001334:	12d00613          	li	a2,301
    80001338:	0000b597          	auipc	a1,0xb
    8000133c:	4b058593          	addi	a1,a1,1200 # 8000c7e8 <logo+0x428>
    80001340:	0000b517          	auipc	a0,0xb
    80001344:	4c050513          	addi	a0,a0,1216 # 8000c800 <logo+0x440>
    80001348:	4e4010ef          	jal	ra,8000282c <printm>
    8000134c:	67c1                	lui	a5,0x10
    8000134e:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7fff0001>
    80001352:	325010ef          	jal	ra,80002e76 <poweroff>
}
    80001356:	0001                	nop
    80001358:	70a6                	ld	ra,104(sp)
    8000135a:	7406                	ld	s0,96(sp)
    8000135c:	6165                	addi	sp,sp,112
    8000135e:	8082                	ret

0000000080001360 <clint_open>:
  int int_len;
  int done;
};

static void clint_open(const struct fdt_scan_node *node, void *extra)
{
    80001360:	7179                	addi	sp,sp,-48
    80001362:	f422                	sd	s0,40(sp)
    80001364:	1800                	addi	s0,sp,48
    80001366:	fca43c23          	sd	a0,-40(s0)
    8000136a:	fcb43823          	sd	a1,-48(s0)
  struct clint_scan *scan = (struct clint_scan *)extra;
    8000136e:	fd043783          	ld	a5,-48(s0)
    80001372:	fef43423          	sd	a5,-24(s0)
  scan->compat = 0;
    80001376:	fe843783          	ld	a5,-24(s0)
    8000137a:	0007a023          	sw	zero,0(a5)
  scan->reg = 0;
    8000137e:	fe843783          	ld	a5,-24(s0)
    80001382:	0007b423          	sd	zero,8(a5)
  scan->int_value = 0;
    80001386:	fe843783          	ld	a5,-24(s0)
    8000138a:	0007b823          	sd	zero,16(a5)
}
    8000138e:	0001                	nop
    80001390:	7422                	ld	s0,40(sp)
    80001392:	6145                	addi	sp,sp,48
    80001394:	8082                	ret

0000000080001396 <clint_prop>:

static void clint_prop(const struct fdt_scan_prop *prop, void *extra)
{
    80001396:	7179                	addi	sp,sp,-48
    80001398:	f406                	sd	ra,40(sp)
    8000139a:	f022                	sd	s0,32(sp)
    8000139c:	1800                	addi	s0,sp,48
    8000139e:	fca43c23          	sd	a0,-40(s0)
    800013a2:	fcb43823          	sd	a1,-48(s0)
  struct clint_scan *scan = (struct clint_scan *)extra;
    800013a6:	fd043783          	ld	a5,-48(s0)
    800013aa:	fef43423          	sd	a5,-24(s0)
  if (!strcmp(prop->name, "compatible") && fdt_string_list_index(prop, "riscv,clint0") >= 0) {
    800013ae:	fd843783          	ld	a5,-40(s0)
    800013b2:	679c                	ld	a5,8(a5)
    800013b4:	0000b597          	auipc	a1,0xb
    800013b8:	5cc58593          	addi	a1,a1,1484 # 8000c980 <logo+0x5c0>
    800013bc:	853e                	mv	a0,a5
    800013be:	6470a0ef          	jal	ra,8000c204 <strcmp>
    800013c2:	87aa                	mv	a5,a0
    800013c4:	e38d                	bnez	a5,800013e6 <clint_prop+0x50>
    800013c6:	0000b597          	auipc	a1,0xb
    800013ca:	5ca58593          	addi	a1,a1,1482 # 8000c990 <logo+0x5d0>
    800013ce:	fd843503          	ld	a0,-40(s0)
    800013d2:	83bff0ef          	jal	ra,80000c0c <fdt_string_list_index>
    800013d6:	87aa                	mv	a5,a0
    800013d8:	0007c763          	bltz	a5,800013e6 <clint_prop+0x50>
    scan->compat = 1;
    800013dc:	fe843783          	ld	a5,-24(s0)
    800013e0:	4705                	li	a4,1
    800013e2:	c398                	sw	a4,0(a5)
    fdt_get_address(prop->node->parent, prop->value, &scan->reg);
  } else if (!strcmp(prop->name, "interrupts-extended")) {
    scan->int_value = prop->value;
    scan->int_len = prop->len;
  }
}
    800013e4:	a0ad                	j	8000144e <clint_prop+0xb8>
  } else if (!strcmp(prop->name, "reg")) {
    800013e6:	fd843783          	ld	a5,-40(s0)
    800013ea:	679c                	ld	a5,8(a5)
    800013ec:	0000b597          	auipc	a1,0xb
    800013f0:	46c58593          	addi	a1,a1,1132 # 8000c858 <logo+0x498>
    800013f4:	853e                	mv	a0,a5
    800013f6:	60f0a0ef          	jal	ra,8000c204 <strcmp>
    800013fa:	87aa                	mv	a5,a0
    800013fc:	e38d                	bnez	a5,8000141e <clint_prop+0x88>
    fdt_get_address(prop->node->parent, prop->value, &scan->reg);
    800013fe:	fd843783          	ld	a5,-40(s0)
    80001402:	639c                	ld	a5,0(a5)
    80001404:	6398                	ld	a4,0(a5)
    80001406:	fd843783          	ld	a5,-40(s0)
    8000140a:	6b94                	ld	a3,16(a5)
    8000140c:	fe843783          	ld	a5,-24(s0)
    80001410:	07a1                	addi	a5,a5,8
    80001412:	863e                	mv	a2,a5
    80001414:	85b6                	mv	a1,a3
    80001416:	853a                	mv	a0,a4
    80001418:	ec2ff0ef          	jal	ra,80000ada <fdt_get_address>
}
    8000141c:	a80d                	j	8000144e <clint_prop+0xb8>
  } else if (!strcmp(prop->name, "interrupts-extended")) {
    8000141e:	fd843783          	ld	a5,-40(s0)
    80001422:	679c                	ld	a5,8(a5)
    80001424:	0000b597          	auipc	a1,0xb
    80001428:	57c58593          	addi	a1,a1,1404 # 8000c9a0 <logo+0x5e0>
    8000142c:	853e                	mv	a0,a5
    8000142e:	5d70a0ef          	jal	ra,8000c204 <strcmp>
    80001432:	87aa                	mv	a5,a0
    80001434:	ef89                	bnez	a5,8000144e <clint_prop+0xb8>
    scan->int_value = prop->value;
    80001436:	fd843783          	ld	a5,-40(s0)
    8000143a:	6b98                	ld	a4,16(a5)
    8000143c:	fe843783          	ld	a5,-24(s0)
    80001440:	eb98                	sd	a4,16(a5)
    scan->int_len = prop->len;
    80001442:	fd843783          	ld	a5,-40(s0)
    80001446:	4f98                	lw	a4,24(a5)
    80001448:	fe843783          	ld	a5,-24(s0)
    8000144c:	cf98                	sw	a4,24(a5)
}
    8000144e:	0001                	nop
    80001450:	70a2                	ld	ra,40(sp)
    80001452:	7402                	ld	s0,32(sp)
    80001454:	6145                	addi	sp,sp,48
    80001456:	8082                	ret

0000000080001458 <clint_done>:

static void clint_done(const struct fdt_scan_node *node, void *extra)
{
    80001458:	711d                	addi	sp,sp,-96
    8000145a:	ec86                	sd	ra,88(sp)
    8000145c:	e8a2                	sd	s0,80(sp)
    8000145e:	1080                	addi	s0,sp,96
    80001460:	faa43423          	sd	a0,-88(s0)
    80001464:	fab43023          	sd	a1,-96(s0)
  struct clint_scan *scan = (struct clint_scan *)extra;
    80001468:	fa043783          	ld	a5,-96(s0)
    8000146c:	fcf43c23          	sd	a5,-40(s0)
  const uint32_t *value = scan->int_value;
    80001470:	fd843783          	ld	a5,-40(s0)
    80001474:	6b9c                	ld	a5,16(a5)
    80001476:	fef43423          	sd	a5,-24(s0)
  const uint32_t *end = value + scan->int_len/4;
    8000147a:	fd843783          	ld	a5,-40(s0)
    8000147e:	4f9c                	lw	a5,24(a5)
    80001480:	41f7d71b          	sraiw	a4,a5,0x1f
    80001484:	01e7571b          	srliw	a4,a4,0x1e
    80001488:	9fb9                	addw	a5,a5,a4
    8000148a:	4027d79b          	sraiw	a5,a5,0x2
    8000148e:	2781                	sext.w	a5,a5
    80001490:	078a                	slli	a5,a5,0x2
    80001492:	fe843703          	ld	a4,-24(s0)
    80001496:	97ba                	add	a5,a5,a4
    80001498:	fcf43823          	sd	a5,-48(s0)

  if (!scan->compat) return;
    8000149c:	fd843783          	ld	a5,-40(s0)
    800014a0:	439c                	lw	a5,0(a5)
    800014a2:	1a078f63          	beqz	a5,80001660 <clint_done+0x208>
  assert (scan->reg != 0);
    800014a6:	fd843783          	ld	a5,-40(s0)
    800014aa:	679c                	ld	a5,8(a5)
    800014ac:	e795                	bnez	a5,800014d8 <clint_done+0x80>
    800014ae:	0000b697          	auipc	a3,0xb
    800014b2:	50a68693          	addi	a3,a3,1290 # 8000c9b8 <logo+0x5f8>
    800014b6:	15700613          	li	a2,343
    800014ba:	0000b597          	auipc	a1,0xb
    800014be:	32e58593          	addi	a1,a1,814 # 8000c7e8 <logo+0x428>
    800014c2:	0000b517          	auipc	a0,0xb
    800014c6:	33e50513          	addi	a0,a0,830 # 8000c800 <logo+0x440>
    800014ca:	362010ef          	jal	ra,8000282c <printm>
    800014ce:	67c1                	lui	a5,0x10
    800014d0:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7fff0001>
    800014d4:	1a3010ef          	jal	ra,80002e76 <poweroff>
  assert (scan->int_value && scan->int_len % 16 == 0);
    800014d8:	fd843783          	ld	a5,-40(s0)
    800014dc:	6b9c                	ld	a5,16(a5)
    800014de:	cb81                	beqz	a5,800014ee <clint_done+0x96>
    800014e0:	fd843783          	ld	a5,-40(s0)
    800014e4:	4f9c                	lw	a5,24(a5)
    800014e6:	2781                	sext.w	a5,a5
    800014e8:	8bbd                	andi	a5,a5,15
    800014ea:	2781                	sext.w	a5,a5
    800014ec:	c795                	beqz	a5,80001518 <clint_done+0xc0>
    800014ee:	0000b697          	auipc	a3,0xb
    800014f2:	4da68693          	addi	a3,a3,1242 # 8000c9c8 <logo+0x608>
    800014f6:	15800613          	li	a2,344
    800014fa:	0000b597          	auipc	a1,0xb
    800014fe:	2ee58593          	addi	a1,a1,750 # 8000c7e8 <logo+0x428>
    80001502:	0000b517          	auipc	a0,0xb
    80001506:	2fe50513          	addi	a0,a0,766 # 8000c800 <logo+0x440>
    8000150a:	322010ef          	jal	ra,8000282c <printm>
    8000150e:	67c1                	lui	a5,0x10
    80001510:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7fff0001>
    80001514:	163010ef          	jal	ra,80002e76 <poweroff>
  assert (!scan->done); // only one clint
    80001518:	fd843783          	ld	a5,-40(s0)
    8000151c:	4fdc                	lw	a5,28(a5)
    8000151e:	c795                	beqz	a5,8000154a <clint_done+0xf2>
    80001520:	0000b697          	auipc	a3,0xb
    80001524:	4d868693          	addi	a3,a3,1240 # 8000c9f8 <logo+0x638>
    80001528:	15900613          	li	a2,345
    8000152c:	0000b597          	auipc	a1,0xb
    80001530:	2bc58593          	addi	a1,a1,700 # 8000c7e8 <logo+0x428>
    80001534:	0000b517          	auipc	a0,0xb
    80001538:	2cc50513          	addi	a0,a0,716 # 8000c800 <logo+0x440>
    8000153c:	2f0010ef          	jal	ra,8000282c <printm>
    80001540:	67c1                	lui	a5,0x10
    80001542:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7fff0001>
    80001546:	131010ef          	jal	ra,80002e76 <poweroff>

  scan->done = 1;
    8000154a:	fd843783          	ld	a5,-40(s0)
    8000154e:	4705                	li	a4,1
    80001550:	cfd8                	sw	a4,28(a5)
  mtime = (void*)((uintptr_t)scan->reg + 0xbff8);
    80001552:	fd843783          	ld	a5,-40(s0)
    80001556:	6798                	ld	a4,8(a5)
    80001558:	67b1                	lui	a5,0xc
    8000155a:	17e1                	addi	a5,a5,-8
    8000155c:	97ba                	add	a5,a5,a4
    8000155e:	873e                	mv	a4,a5
    80001560:	00018797          	auipc	a5,0x18
    80001564:	ad078793          	addi	a5,a5,-1328 # 80019030 <mtime>
    80001568:	e398                	sd	a4,0(a5)

  for (int index = 0; end - value > 0; ++index) {
    8000156a:	fe042223          	sw	zero,-28(s0)
    8000156e:	a0c5                	j	8000164e <clint_done+0x1f6>
    uint32_t phandle = bswap(value[0]);
    80001570:	fe843783          	ld	a5,-24(s0)
    80001574:	439c                	lw	a5,0(a5)
    80001576:	853e                	mv	a0,a5
    80001578:	83aff0ef          	jal	ra,800005b2 <bswap>
    8000157c:	87aa                	mv	a5,a0
    8000157e:	fcf42623          	sw	a5,-52(s0)
    int hart;
    for (hart = 0; hart < MAX_HARTS; ++hart)
    80001582:	fe042023          	sw	zero,-32(s0)
    80001586:	a025                	j	800015ae <clint_done+0x156>
      if (hart_phandles[hart] == phandle)
    80001588:	0000f717          	auipc	a4,0xf
    8000158c:	a8070713          	addi	a4,a4,-1408 # 80010008 <hart_phandles>
    80001590:	fe042783          	lw	a5,-32(s0)
    80001594:	078a                	slli	a5,a5,0x2
    80001596:	97ba                	add	a5,a5,a4
    80001598:	4398                	lw	a4,0(a5)
    8000159a:	fcc42783          	lw	a5,-52(s0)
    8000159e:	2781                	sext.w	a5,a5
    800015a0:	00e78f63          	beq	a5,a4,800015be <clint_done+0x166>
    for (hart = 0; hart < MAX_HARTS; ++hart)
    800015a4:	fe042783          	lw	a5,-32(s0)
    800015a8:	2785                	addiw	a5,a5,1
    800015aa:	fef42023          	sw	a5,-32(s0)
    800015ae:	fe042783          	lw	a5,-32(s0)
    800015b2:	0007871b          	sext.w	a4,a5
    800015b6:	479d                	li	a5,7
    800015b8:	fce7d8e3          	ble	a4,a5,80001588 <clint_done+0x130>
    800015bc:	a011                	j	800015c0 <clint_done+0x168>
        break;
    800015be:	0001                	nop
    if (hart < MAX_HARTS) {
    800015c0:	fe042783          	lw	a5,-32(s0)
    800015c4:	0007871b          	sext.w	a4,a5
    800015c8:	479d                	li	a5,7
    800015ca:	06e7c863          	blt	a5,a4,8000163a <clint_done+0x1e2>
      hls_t *hls = OTHER_HLS(hart);
    800015ce:	87a2                	mv	a5,s0
    800015d0:	fcf43023          	sd	a5,-64(s0)
    800015d4:	fc043703          	ld	a4,-64(s0)
    800015d8:	6785                	lui	a5,0x1
    800015da:	973e                	add	a4,a4,a5
    800015dc:	77fd                	lui	a5,0xfffff
    800015de:	8ff9                	and	a5,a5,a4
    800015e0:	86be                	mv	a3,a5
    800015e2:	fe042703          	lw	a4,-32(s0)
    800015e6:	f14027f3          	csrr	a5,mhartid
    800015ea:	faf43c23          	sd	a5,-72(s0)
    800015ee:	fb843783          	ld	a5,-72(s0)
    800015f2:	40f707b3          	sub	a5,a4,a5
    800015f6:	07b2                	slli	a5,a5,0xc
    800015f8:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xffffffff7f815000>
    800015fc:	97b6                	add	a5,a5,a3
    800015fe:	faf43823          	sd	a5,-80(s0)
      hls->ipi = (void*)((uintptr_t)scan->reg + index * 4);
    80001602:	fd843783          	ld	a5,-40(s0)
    80001606:	679c                	ld	a5,8(a5)
    80001608:	fe442703          	lw	a4,-28(s0)
    8000160c:	0027171b          	slliw	a4,a4,0x2
    80001610:	2701                	sext.w	a4,a4
    80001612:	97ba                	add	a5,a5,a4
    80001614:	873e                	mv	a4,a5
    80001616:	fb043783          	ld	a5,-80(s0)
    8000161a:	e398                	sd	a4,0(a5)
      hls->timecmp = (void*)((uintptr_t)scan->reg + 0x4000 + (index * 8));
    8000161c:	fd843783          	ld	a5,-40(s0)
    80001620:	679c                	ld	a5,8(a5)
    80001622:	fe442703          	lw	a4,-28(s0)
    80001626:	0037171b          	slliw	a4,a4,0x3
    8000162a:	2701                	sext.w	a4,a4
    8000162c:	973e                	add	a4,a4,a5
    8000162e:	6791                	lui	a5,0x4
    80001630:	97ba                	add	a5,a5,a4
    80001632:	873e                	mv	a4,a5
    80001634:	fb043783          	ld	a5,-80(s0)
    80001638:	eb98                	sd	a4,16(a5)
    }
    value += 4;
    8000163a:	fe843783          	ld	a5,-24(s0)
    8000163e:	07c1                	addi	a5,a5,16
    80001640:	fef43423          	sd	a5,-24(s0)
  for (int index = 0; end - value > 0; ++index) {
    80001644:	fe442783          	lw	a5,-28(s0)
    80001648:	2785                	addiw	a5,a5,1
    8000164a:	fef42223          	sw	a5,-28(s0)
    8000164e:	fd043703          	ld	a4,-48(s0)
    80001652:	fe843783          	ld	a5,-24(s0)
    80001656:	40f707b3          	sub	a5,a4,a5
    8000165a:	f0f04be3          	bgtz	a5,80001570 <clint_done+0x118>
    8000165e:	a011                	j	80001662 <clint_done+0x20a>
  if (!scan->compat) return;
    80001660:	0001                	nop
  }
}
    80001662:	60e6                	ld	ra,88(sp)
    80001664:	6446                	ld	s0,80(sp)
    80001666:	6125                	addi	sp,sp,96
    80001668:	8082                	ret

000000008000166a <query_clint>:

void query_clint(uintptr_t fdt)
{
    8000166a:	7159                	addi	sp,sp,-112
    8000166c:	f486                	sd	ra,104(sp)
    8000166e:	f0a2                	sd	s0,96(sp)
    80001670:	1880                	addi	s0,sp,112
    80001672:	f8a43c23          	sd	a0,-104(s0)
  struct fdt_cb cb;
  struct clint_scan scan;

  memset(&cb, 0, sizeof(cb));
    80001676:	fc840793          	addi	a5,s0,-56
    8000167a:	02800613          	li	a2,40
    8000167e:	4581                	li	a1,0
    80001680:	853e                	mv	a0,a5
    80001682:	2790a0ef          	jal	ra,8000c0fa <memset>
  cb.open = clint_open;
    80001686:	00000797          	auipc	a5,0x0
    8000168a:	cda78793          	addi	a5,a5,-806 # 80001360 <clint_open>
    8000168e:	fcf43423          	sd	a5,-56(s0)
  cb.prop = clint_prop;
    80001692:	00000797          	auipc	a5,0x0
    80001696:	d0478793          	addi	a5,a5,-764 # 80001396 <clint_prop>
    8000169a:	fcf43823          	sd	a5,-48(s0)
  cb.done = clint_done;
    8000169e:	00000797          	auipc	a5,0x0
    800016a2:	dba78793          	addi	a5,a5,-582 # 80001458 <clint_done>
    800016a6:	fcf43c23          	sd	a5,-40(s0)
  cb.extra = &scan;
    800016aa:	fa840793          	addi	a5,s0,-88
    800016ae:	fef43423          	sd	a5,-24(s0)

  scan.done = 0;
    800016b2:	fc042223          	sw	zero,-60(s0)
  fdt_scan(fdt, &cb);
    800016b6:	fc840793          	addi	a5,s0,-56
    800016ba:	85be                	mv	a1,a5
    800016bc:	f9843503          	ld	a0,-104(s0)
    800016c0:	b06ff0ef          	jal	ra,800009c6 <fdt_scan>
  assert (scan.done);
    800016c4:	fc442783          	lw	a5,-60(s0)
    800016c8:	e795                	bnez	a5,800016f4 <query_clint+0x8a>
    800016ca:	0000b697          	auipc	a3,0xb
    800016ce:	33e68693          	addi	a3,a3,830 # 8000ca08 <logo+0x648>
    800016d2:	17a00613          	li	a2,378
    800016d6:	0000b597          	auipc	a1,0xb
    800016da:	11258593          	addi	a1,a1,274 # 8000c7e8 <logo+0x428>
    800016de:	0000b517          	auipc	a0,0xb
    800016e2:	12250513          	addi	a0,a0,290 # 8000c800 <logo+0x440>
    800016e6:	146010ef          	jal	ra,8000282c <printm>
    800016ea:	67c1                	lui	a5,0x10
    800016ec:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7fff0001>
    800016f0:	786010ef          	jal	ra,80002e76 <poweroff>
}
    800016f4:	0001                	nop
    800016f6:	70a6                	ld	ra,104(sp)
    800016f8:	7406                	ld	s0,96(sp)
    800016fa:	6165                	addi	sp,sp,112
    800016fc:	8082                	ret

00000000800016fe <plic_open>:
  int done;
  int ndev;
};

static void plic_open(const struct fdt_scan_node *node, void *extra)
{
    800016fe:	7179                	addi	sp,sp,-48
    80001700:	f422                	sd	s0,40(sp)
    80001702:	1800                	addi	s0,sp,48
    80001704:	fca43c23          	sd	a0,-40(s0)
    80001708:	fcb43823          	sd	a1,-48(s0)
  struct plic_scan *scan = (struct plic_scan *)extra;
    8000170c:	fd043783          	ld	a5,-48(s0)
    80001710:	fef43423          	sd	a5,-24(s0)
  scan->compat = 0;
    80001714:	fe843783          	ld	a5,-24(s0)
    80001718:	0007a023          	sw	zero,0(a5)
  scan->reg = 0;
    8000171c:	fe843783          	ld	a5,-24(s0)
    80001720:	0007b423          	sd	zero,8(a5)
  scan->int_value = 0;
    80001724:	fe843783          	ld	a5,-24(s0)
    80001728:	0007b823          	sd	zero,16(a5)
}
    8000172c:	0001                	nop
    8000172e:	7422                	ld	s0,40(sp)
    80001730:	6145                	addi	sp,sp,48
    80001732:	8082                	ret

0000000080001734 <plic_prop>:

static void plic_prop(const struct fdt_scan_prop *prop, void *extra)
{
    80001734:	7179                	addi	sp,sp,-48
    80001736:	f406                	sd	ra,40(sp)
    80001738:	f022                	sd	s0,32(sp)
    8000173a:	1800                	addi	s0,sp,48
    8000173c:	fca43c23          	sd	a0,-40(s0)
    80001740:	fcb43823          	sd	a1,-48(s0)
  struct plic_scan *scan = (struct plic_scan *)extra;
    80001744:	fd043783          	ld	a5,-48(s0)
    80001748:	fef43423          	sd	a5,-24(s0)
  if (!strcmp(prop->name, "compatible") && fdt_string_list_index(prop, "riscv,plic0") >= 0) {
    8000174c:	fd843783          	ld	a5,-40(s0)
    80001750:	679c                	ld	a5,8(a5)
    80001752:	0000b597          	auipc	a1,0xb
    80001756:	22e58593          	addi	a1,a1,558 # 8000c980 <logo+0x5c0>
    8000175a:	853e                	mv	a0,a5
    8000175c:	2a90a0ef          	jal	ra,8000c204 <strcmp>
    80001760:	87aa                	mv	a5,a0
    80001762:	e38d                	bnez	a5,80001784 <plic_prop+0x50>
    80001764:	0000b597          	auipc	a1,0xb
    80001768:	2b458593          	addi	a1,a1,692 # 8000ca18 <logo+0x658>
    8000176c:	fd843503          	ld	a0,-40(s0)
    80001770:	c9cff0ef          	jal	ra,80000c0c <fdt_string_list_index>
    80001774:	87aa                	mv	a5,a0
    80001776:	0007c763          	bltz	a5,80001784 <plic_prop+0x50>
    scan->compat = 1;
    8000177a:	fe843783          	ld	a5,-24(s0)
    8000177e:	4705                	li	a4,1
    80001780:	c398                	sw	a4,0(a5)
    scan->int_value = prop->value;
    scan->int_len = prop->len;
  } else if (!strcmp(prop->name, "riscv,ndev")) {
    scan->ndev = bswap(prop->value[0]);
  }
}
    80001782:	a045                	j	80001822 <plic_prop+0xee>
  } else if (!strcmp(prop->name, "reg")) {
    80001784:	fd843783          	ld	a5,-40(s0)
    80001788:	679c                	ld	a5,8(a5)
    8000178a:	0000b597          	auipc	a1,0xb
    8000178e:	0ce58593          	addi	a1,a1,206 # 8000c858 <logo+0x498>
    80001792:	853e                	mv	a0,a5
    80001794:	2710a0ef          	jal	ra,8000c204 <strcmp>
    80001798:	87aa                	mv	a5,a0
    8000179a:	e38d                	bnez	a5,800017bc <plic_prop+0x88>
    fdt_get_address(prop->node->parent, prop->value, &scan->reg);
    8000179c:	fd843783          	ld	a5,-40(s0)
    800017a0:	639c                	ld	a5,0(a5)
    800017a2:	6398                	ld	a4,0(a5)
    800017a4:	fd843783          	ld	a5,-40(s0)
    800017a8:	6b94                	ld	a3,16(a5)
    800017aa:	fe843783          	ld	a5,-24(s0)
    800017ae:	07a1                	addi	a5,a5,8
    800017b0:	863e                	mv	a2,a5
    800017b2:	85b6                	mv	a1,a3
    800017b4:	853a                	mv	a0,a4
    800017b6:	b24ff0ef          	jal	ra,80000ada <fdt_get_address>
}
    800017ba:	a0a5                	j	80001822 <plic_prop+0xee>
  } else if (!strcmp(prop->name, "interrupts-extended")) {
    800017bc:	fd843783          	ld	a5,-40(s0)
    800017c0:	679c                	ld	a5,8(a5)
    800017c2:	0000b597          	auipc	a1,0xb
    800017c6:	1de58593          	addi	a1,a1,478 # 8000c9a0 <logo+0x5e0>
    800017ca:	853e                	mv	a0,a5
    800017cc:	2390a0ef          	jal	ra,8000c204 <strcmp>
    800017d0:	87aa                	mv	a5,a0
    800017d2:	ef91                	bnez	a5,800017ee <plic_prop+0xba>
    scan->int_value = prop->value;
    800017d4:	fd843783          	ld	a5,-40(s0)
    800017d8:	6b98                	ld	a4,16(a5)
    800017da:	fe843783          	ld	a5,-24(s0)
    800017de:	eb98                	sd	a4,16(a5)
    scan->int_len = prop->len;
    800017e0:	fd843783          	ld	a5,-40(s0)
    800017e4:	4f98                	lw	a4,24(a5)
    800017e6:	fe843783          	ld	a5,-24(s0)
    800017ea:	cf98                	sw	a4,24(a5)
}
    800017ec:	a81d                	j	80001822 <plic_prop+0xee>
  } else if (!strcmp(prop->name, "riscv,ndev")) {
    800017ee:	fd843783          	ld	a5,-40(s0)
    800017f2:	679c                	ld	a5,8(a5)
    800017f4:	0000b597          	auipc	a1,0xb
    800017f8:	23458593          	addi	a1,a1,564 # 8000ca28 <logo+0x668>
    800017fc:	853e                	mv	a0,a5
    800017fe:	2070a0ef          	jal	ra,8000c204 <strcmp>
    80001802:	87aa                	mv	a5,a0
    80001804:	ef99                	bnez	a5,80001822 <plic_prop+0xee>
    scan->ndev = bswap(prop->value[0]);
    80001806:	fd843783          	ld	a5,-40(s0)
    8000180a:	6b9c                	ld	a5,16(a5)
    8000180c:	439c                	lw	a5,0(a5)
    8000180e:	853e                	mv	a0,a5
    80001810:	da3fe0ef          	jal	ra,800005b2 <bswap>
    80001814:	87aa                	mv	a5,a0
    80001816:	2781                	sext.w	a5,a5
    80001818:	0007871b          	sext.w	a4,a5
    8000181c:	fe843783          	ld	a5,-24(s0)
    80001820:	d398                	sw	a4,32(a5)
}
    80001822:	0001                	nop
    80001824:	70a2                	ld	ra,40(sp)
    80001826:	7402                	ld	s0,32(sp)
    80001828:	6145                	addi	sp,sp,48
    8000182a:	8082                	ret

000000008000182c <plic_done>:
#define HART_SIZE	0x1000
#define ENABLE_BASE	0x2000
#define ENABLE_SIZE	0x80

static void plic_done(const struct fdt_scan_node *node, void *extra)
{
    8000182c:	711d                	addi	sp,sp,-96
    8000182e:	ec86                	sd	ra,88(sp)
    80001830:	e8a2                	sd	s0,80(sp)
    80001832:	1080                	addi	s0,sp,96
    80001834:	faa43423          	sd	a0,-88(s0)
    80001838:	fab43023          	sd	a1,-96(s0)
  struct plic_scan *scan = (struct plic_scan *)extra;
    8000183c:	fa043783          	ld	a5,-96(s0)
    80001840:	fcf43c23          	sd	a5,-40(s0)
  const uint32_t *value = scan->int_value;
    80001844:	fd843783          	ld	a5,-40(s0)
    80001848:	6b9c                	ld	a5,16(a5)
    8000184a:	fef43423          	sd	a5,-24(s0)
  const uint32_t *end = value + scan->int_len/4;
    8000184e:	fd843783          	ld	a5,-40(s0)
    80001852:	4f9c                	lw	a5,24(a5)
    80001854:	41f7d71b          	sraiw	a4,a5,0x1f
    80001858:	01e7571b          	srliw	a4,a4,0x1e
    8000185c:	9fb9                	addw	a5,a5,a4
    8000185e:	4027d79b          	sraiw	a5,a5,0x2
    80001862:	2781                	sext.w	a5,a5
    80001864:	078a                	slli	a5,a5,0x2
    80001866:	fe843703          	ld	a4,-24(s0)
    8000186a:	97ba                	add	a5,a5,a4
    8000186c:	fcf43823          	sd	a5,-48(s0)

  if (!scan->compat) return;
    80001870:	fd843783          	ld	a5,-40(s0)
    80001874:	439c                	lw	a5,0(a5)
    80001876:	28078f63          	beqz	a5,80001b14 <plic_done+0x2e8>
  assert (scan->reg != 0);
    8000187a:	fd843783          	ld	a5,-40(s0)
    8000187e:	679c                	ld	a5,8(a5)
    80001880:	e795                	bnez	a5,800018ac <plic_done+0x80>
    80001882:	0000b697          	auipc	a3,0xb
    80001886:	13668693          	addi	a3,a3,310 # 8000c9b8 <logo+0x5f8>
    8000188a:	1ac00613          	li	a2,428
    8000188e:	0000b597          	auipc	a1,0xb
    80001892:	f5a58593          	addi	a1,a1,-166 # 8000c7e8 <logo+0x428>
    80001896:	0000b517          	auipc	a0,0xb
    8000189a:	f6a50513          	addi	a0,a0,-150 # 8000c800 <logo+0x440>
    8000189e:	78f000ef          	jal	ra,8000282c <printm>
    800018a2:	67c1                	lui	a5,0x10
    800018a4:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7fff0001>
    800018a8:	5ce010ef          	jal	ra,80002e76 <poweroff>
  assert (scan->int_value && scan->int_len % 8 == 0);
    800018ac:	fd843783          	ld	a5,-40(s0)
    800018b0:	6b9c                	ld	a5,16(a5)
    800018b2:	cb81                	beqz	a5,800018c2 <plic_done+0x96>
    800018b4:	fd843783          	ld	a5,-40(s0)
    800018b8:	4f9c                	lw	a5,24(a5)
    800018ba:	2781                	sext.w	a5,a5
    800018bc:	8b9d                	andi	a5,a5,7
    800018be:	2781                	sext.w	a5,a5
    800018c0:	c795                	beqz	a5,800018ec <plic_done+0xc0>
    800018c2:	0000b697          	auipc	a3,0xb
    800018c6:	17668693          	addi	a3,a3,374 # 8000ca38 <logo+0x678>
    800018ca:	1ad00613          	li	a2,429
    800018ce:	0000b597          	auipc	a1,0xb
    800018d2:	f1a58593          	addi	a1,a1,-230 # 8000c7e8 <logo+0x428>
    800018d6:	0000b517          	auipc	a0,0xb
    800018da:	f2a50513          	addi	a0,a0,-214 # 8000c800 <logo+0x440>
    800018de:	74f000ef          	jal	ra,8000282c <printm>
    800018e2:	67c1                	lui	a5,0x10
    800018e4:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7fff0001>
    800018e8:	58e010ef          	jal	ra,80002e76 <poweroff>
  assert (scan->ndev >= 0 && scan->ndev < 1024);
    800018ec:	fd843783          	ld	a5,-40(s0)
    800018f0:	539c                	lw	a5,32(a5)
    800018f2:	0007ca63          	bltz	a5,80001906 <plic_done+0xda>
    800018f6:	fd843783          	ld	a5,-40(s0)
    800018fa:	539c                	lw	a5,32(a5)
    800018fc:	873e                	mv	a4,a5
    800018fe:	3ff00793          	li	a5,1023
    80001902:	02e7d763          	ble	a4,a5,80001930 <plic_done+0x104>
    80001906:	0000b697          	auipc	a3,0xb
    8000190a:	16268693          	addi	a3,a3,354 # 8000ca68 <logo+0x6a8>
    8000190e:	1ae00613          	li	a2,430
    80001912:	0000b597          	auipc	a1,0xb
    80001916:	ed658593          	addi	a1,a1,-298 # 8000c7e8 <logo+0x428>
    8000191a:	0000b517          	auipc	a0,0xb
    8000191e:	ee650513          	addi	a0,a0,-282 # 8000c800 <logo+0x440>
    80001922:	70b000ef          	jal	ra,8000282c <printm>
    80001926:	67c1                	lui	a5,0x10
    80001928:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7fff0001>
    8000192c:	54a010ef          	jal	ra,80002e76 <poweroff>
  assert (!scan->done); // only one plic
    80001930:	fd843783          	ld	a5,-40(s0)
    80001934:	4fdc                	lw	a5,28(a5)
    80001936:	c795                	beqz	a5,80001962 <plic_done+0x136>
    80001938:	0000b697          	auipc	a3,0xb
    8000193c:	0c068693          	addi	a3,a3,192 # 8000c9f8 <logo+0x638>
    80001940:	1af00613          	li	a2,431
    80001944:	0000b597          	auipc	a1,0xb
    80001948:	ea458593          	addi	a1,a1,-348 # 8000c7e8 <logo+0x428>
    8000194c:	0000b517          	auipc	a0,0xb
    80001950:	eb450513          	addi	a0,a0,-332 # 8000c800 <logo+0x440>
    80001954:	6d9000ef          	jal	ra,8000282c <printm>
    80001958:	67c1                	lui	a5,0x10
    8000195a:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7fff0001>
    8000195e:	518010ef          	jal	ra,80002e76 <poweroff>

  scan->done = 1;
    80001962:	fd843783          	ld	a5,-40(s0)
    80001966:	4705                	li	a4,1
    80001968:	cfd8                	sw	a4,28(a5)
  plic_priorities = (uint32_t*)(uintptr_t)scan->reg;
    8000196a:	fd843783          	ld	a5,-40(s0)
    8000196e:	679c                	ld	a5,8(a5)
    80001970:	873e                	mv	a4,a5
    80001972:	00017797          	auipc	a5,0x17
    80001976:	6a678793          	addi	a5,a5,1702 # 80019018 <plic_priorities>
    8000197a:	e398                	sd	a4,0(a5)
  plic_ndevs = scan->ndev;
    8000197c:	fd843783          	ld	a5,-40(s0)
    80001980:	539c                	lw	a5,32(a5)
    80001982:	873e                	mv	a4,a5
    80001984:	00017797          	auipc	a5,0x17
    80001988:	68c78793          	addi	a5,a5,1676 # 80019010 <plic_ndevs>
    8000198c:	e398                	sd	a4,0(a5)

  for (int index = 0; end - value > 0; ++index) {
    8000198e:	fe042223          	sw	zero,-28(s0)
    80001992:	aa85                	j	80001b02 <plic_done+0x2d6>
    uint32_t phandle = bswap(value[0]);
    80001994:	fe843783          	ld	a5,-24(s0)
    80001998:	439c                	lw	a5,0(a5)
    8000199a:	853e                	mv	a0,a5
    8000199c:	c17fe0ef          	jal	ra,800005b2 <bswap>
    800019a0:	87aa                	mv	a5,a0
    800019a2:	fcf42623          	sw	a5,-52(s0)
    uint32_t cpu_int = bswap(value[1]);
    800019a6:	fe843783          	ld	a5,-24(s0)
    800019aa:	0791                	addi	a5,a5,4
    800019ac:	439c                	lw	a5,0(a5)
    800019ae:	853e                	mv	a0,a5
    800019b0:	c03fe0ef          	jal	ra,800005b2 <bswap>
    800019b4:	87aa                	mv	a5,a0
    800019b6:	fcf42423          	sw	a5,-56(s0)
    int hart;
    for (hart = 0; hart < MAX_HARTS; ++hart)
    800019ba:	fe042023          	sw	zero,-32(s0)
    800019be:	a025                	j	800019e6 <plic_done+0x1ba>
      if (hart_phandles[hart] == phandle)
    800019c0:	0000e717          	auipc	a4,0xe
    800019c4:	64870713          	addi	a4,a4,1608 # 80010008 <hart_phandles>
    800019c8:	fe042783          	lw	a5,-32(s0)
    800019cc:	078a                	slli	a5,a5,0x2
    800019ce:	97ba                	add	a5,a5,a4
    800019d0:	4398                	lw	a4,0(a5)
    800019d2:	fcc42783          	lw	a5,-52(s0)
    800019d6:	2781                	sext.w	a5,a5
    800019d8:	00e78f63          	beq	a5,a4,800019f6 <plic_done+0x1ca>
    for (hart = 0; hart < MAX_HARTS; ++hart)
    800019dc:	fe042783          	lw	a5,-32(s0)
    800019e0:	2785                	addiw	a5,a5,1
    800019e2:	fef42023          	sw	a5,-32(s0)
    800019e6:	fe042783          	lw	a5,-32(s0)
    800019ea:	0007871b          	sext.w	a4,a5
    800019ee:	479d                	li	a5,7
    800019f0:	fce7d8e3          	ble	a4,a5,800019c0 <plic_done+0x194>
    800019f4:	a011                	j	800019f8 <plic_done+0x1cc>
        break;
    800019f6:	0001                	nop
    if (hart < MAX_HARTS) {
    800019f8:	fe042783          	lw	a5,-32(s0)
    800019fc:	0007871b          	sext.w	a4,a5
    80001a00:	479d                	li	a5,7
    80001a02:	0ee7c663          	blt	a5,a4,80001aee <plic_done+0x2c2>
      hls_t *hls = OTHER_HLS(hart);
    80001a06:	87a2                	mv	a5,s0
    80001a08:	fcf43023          	sd	a5,-64(s0)
    80001a0c:	fc043703          	ld	a4,-64(s0)
    80001a10:	6785                	lui	a5,0x1
    80001a12:	973e                	add	a4,a4,a5
    80001a14:	77fd                	lui	a5,0xfffff
    80001a16:	8ff9                	and	a5,a5,a4
    80001a18:	86be                	mv	a3,a5
    80001a1a:	fe042703          	lw	a4,-32(s0)
    80001a1e:	f14027f3          	csrr	a5,mhartid
    80001a22:	faf43c23          	sd	a5,-72(s0)
    80001a26:	fb843783          	ld	a5,-72(s0)
    80001a2a:	40f707b3          	sub	a5,a4,a5
    80001a2e:	07b2                	slli	a5,a5,0xc
    80001a30:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xffffffff7f815000>
    80001a34:	97b6                	add	a5,a5,a3
    80001a36:	faf43823          	sd	a5,-80(s0)
      if (cpu_int == IRQ_M_EXT) {
    80001a3a:	fc842783          	lw	a5,-56(s0)
    80001a3e:	0007871b          	sext.w	a4,a5
    80001a42:	47ad                	li	a5,11
    80001a44:	04f71263          	bne	a4,a5,80001a88 <plic_done+0x25c>
        hls->plic_m_ie     = (uint32_t*)((uintptr_t)scan->reg + ENABLE_BASE + ENABLE_SIZE * index);
    80001a48:	fd843783          	ld	a5,-40(s0)
    80001a4c:	679c                	ld	a5,8(a5)
    80001a4e:	fe442703          	lw	a4,-28(s0)
    80001a52:	0077171b          	slliw	a4,a4,0x7
    80001a56:	2701                	sext.w	a4,a4
    80001a58:	973e                	add	a4,a4,a5
    80001a5a:	6789                	lui	a5,0x2
    80001a5c:	97ba                	add	a5,a5,a4
    80001a5e:	873e                	mv	a4,a5
    80001a60:	fb043783          	ld	a5,-80(s0)
    80001a64:	f398                	sd	a4,32(a5)
        hls->plic_m_thresh = (uint32_t*) ((uintptr_t)scan->reg + HART_BASE   + HART_SIZE   * index);
    80001a66:	fd843783          	ld	a5,-40(s0)
    80001a6a:	679c                	ld	a5,8(a5)
    80001a6c:	fe442703          	lw	a4,-28(s0)
    80001a70:	00c7171b          	slliw	a4,a4,0xc
    80001a74:	2701                	sext.w	a4,a4
    80001a76:	973e                	add	a4,a4,a5
    80001a78:	002007b7          	lui	a5,0x200
    80001a7c:	97ba                	add	a5,a5,a4
    80001a7e:	873e                	mv	a4,a5
    80001a80:	fb043783          	ld	a5,-80(s0)
    80001a84:	ef98                	sd	a4,24(a5)
    80001a86:	a0a5                	j	80001aee <plic_done+0x2c2>
      } else if (cpu_int == IRQ_S_EXT) {
    80001a88:	fc842783          	lw	a5,-56(s0)
    80001a8c:	0007871b          	sext.w	a4,a5
    80001a90:	47a5                	li	a5,9
    80001a92:	04f71263          	bne	a4,a5,80001ad6 <plic_done+0x2aa>
        hls->plic_s_ie     = (uint32_t*)((uintptr_t)scan->reg + ENABLE_BASE + ENABLE_SIZE * index);
    80001a96:	fd843783          	ld	a5,-40(s0)
    80001a9a:	679c                	ld	a5,8(a5)
    80001a9c:	fe442703          	lw	a4,-28(s0)
    80001aa0:	0077171b          	slliw	a4,a4,0x7
    80001aa4:	2701                	sext.w	a4,a4
    80001aa6:	973e                	add	a4,a4,a5
    80001aa8:	6789                	lui	a5,0x2
    80001aaa:	97ba                	add	a5,a5,a4
    80001aac:	873e                	mv	a4,a5
    80001aae:	fb043783          	ld	a5,-80(s0)
    80001ab2:	fb98                	sd	a4,48(a5)
        hls->plic_s_thresh = (uint32_t*) ((uintptr_t)scan->reg + HART_BASE   + HART_SIZE   * index);
    80001ab4:	fd843783          	ld	a5,-40(s0)
    80001ab8:	679c                	ld	a5,8(a5)
    80001aba:	fe442703          	lw	a4,-28(s0)
    80001abe:	00c7171b          	slliw	a4,a4,0xc
    80001ac2:	2701                	sext.w	a4,a4
    80001ac4:	973e                	add	a4,a4,a5
    80001ac6:	002007b7          	lui	a5,0x200
    80001aca:	97ba                	add	a5,a5,a4
    80001acc:	873e                	mv	a4,a5
    80001ace:	fb043783          	ld	a5,-80(s0)
    80001ad2:	f798                	sd	a4,40(a5)
    80001ad4:	a829                	j	80001aee <plic_done+0x2c2>
      } else {
        printm("PLIC wired hart %d to wrong interrupt %d", hart, cpu_int);
    80001ad6:	fc842703          	lw	a4,-56(s0)
    80001ada:	fe042783          	lw	a5,-32(s0)
    80001ade:	863a                	mv	a2,a4
    80001ae0:	85be                	mv	a1,a5
    80001ae2:	0000b517          	auipc	a0,0xb
    80001ae6:	fae50513          	addi	a0,a0,-82 # 8000ca90 <logo+0x6d0>
    80001aea:	543000ef          	jal	ra,8000282c <printm>
      }
    }
    value += 2;
    80001aee:	fe843783          	ld	a5,-24(s0)
    80001af2:	07a1                	addi	a5,a5,8
    80001af4:	fef43423          	sd	a5,-24(s0)
  for (int index = 0; end - value > 0; ++index) {
    80001af8:	fe442783          	lw	a5,-28(s0)
    80001afc:	2785                	addiw	a5,a5,1
    80001afe:	fef42223          	sw	a5,-28(s0)
    80001b02:	fd043703          	ld	a4,-48(s0)
    80001b06:	fe843783          	ld	a5,-24(s0)
    80001b0a:	40f707b3          	sub	a5,a4,a5
    80001b0e:	e8f043e3          	bgtz	a5,80001994 <plic_done+0x168>
    80001b12:	a011                	j	80001b16 <plic_done+0x2ea>
  if (!scan->compat) return;
    80001b14:	0001                	nop
  for (int i = 0; i < MAX_HARTS; ++i) {
    hls_t *hls = OTHER_HLS(i);
    printm("CPU %d: %x %x %x %x\r\n", i, (uint32_t)(uintptr_t)hls->plic_m_ie, (uint32_t)(uintptr_t)hls->plic_m_thresh, (uint32_t)(uintptr_t)hls->plic_s_ie, (uint32_t)(uintptr_t)hls->plic_s_thresh);
  }
#endif
}
    80001b16:	60e6                	ld	ra,88(sp)
    80001b18:	6446                	ld	s0,80(sp)
    80001b1a:	6125                	addi	sp,sp,96
    80001b1c:	8082                	ret

0000000080001b1e <query_plic>:

void query_plic(uintptr_t fdt)
{
    80001b1e:	7159                	addi	sp,sp,-112
    80001b20:	f486                	sd	ra,104(sp)
    80001b22:	f0a2                	sd	s0,96(sp)
    80001b24:	1880                	addi	s0,sp,112
    80001b26:	f8a43c23          	sd	a0,-104(s0)
  struct fdt_cb cb;
  struct plic_scan scan;

  memset(&cb, 0, sizeof(cb));
    80001b2a:	fc840793          	addi	a5,s0,-56
    80001b2e:	02800613          	li	a2,40
    80001b32:	4581                	li	a1,0
    80001b34:	853e                	mv	a0,a5
    80001b36:	5c40a0ef          	jal	ra,8000c0fa <memset>
  cb.open = plic_open;
    80001b3a:	00000797          	auipc	a5,0x0
    80001b3e:	bc478793          	addi	a5,a5,-1084 # 800016fe <plic_open>
    80001b42:	fcf43423          	sd	a5,-56(s0)
  cb.prop = plic_prop;
    80001b46:	00000797          	auipc	a5,0x0
    80001b4a:	bee78793          	addi	a5,a5,-1042 # 80001734 <plic_prop>
    80001b4e:	fcf43823          	sd	a5,-48(s0)
  cb.done = plic_done;
    80001b52:	00000797          	auipc	a5,0x0
    80001b56:	cda78793          	addi	a5,a5,-806 # 8000182c <plic_done>
    80001b5a:	fcf43c23          	sd	a5,-40(s0)
  cb.extra = &scan;
    80001b5e:	fa040793          	addi	a5,s0,-96
    80001b62:	fef43423          	sd	a5,-24(s0)

  scan.done = 0;
    80001b66:	fa042e23          	sw	zero,-68(s0)
  fdt_scan(fdt, &cb);
    80001b6a:	fc840793          	addi	a5,s0,-56
    80001b6e:	85be                	mv	a1,a5
    80001b70:	f9843503          	ld	a0,-104(s0)
    80001b74:	e53fe0ef          	jal	ra,800009c6 <fdt_scan>
}
    80001b78:	0001                	nop
    80001b7a:	70a6                	ld	ra,104(sp)
    80001b7c:	7406                	ld	s0,96(sp)
    80001b7e:	6165                	addi	sp,sp,112
    80001b80:	8082                	ret

0000000080001b82 <plic_redact>:

static void plic_redact(const struct fdt_scan_node *node, void *extra)
{
    80001b82:	715d                	addi	sp,sp,-80
    80001b84:	e486                	sd	ra,72(sp)
    80001b86:	e0a2                	sd	s0,64(sp)
    80001b88:	fc26                	sd	s1,56(sp)
    80001b8a:	0880                	addi	s0,sp,80
    80001b8c:	faa43c23          	sd	a0,-72(s0)
    80001b90:	fab43823          	sd	a1,-80(s0)
  struct plic_scan *scan = (struct plic_scan *)extra;
    80001b94:	fb043783          	ld	a5,-80(s0)
    80001b98:	fcf43823          	sd	a5,-48(s0)
  uint32_t *value = scan->int_value;
    80001b9c:	fd043783          	ld	a5,-48(s0)
    80001ba0:	6b9c                	ld	a5,16(a5)
    80001ba2:	fcf43c23          	sd	a5,-40(s0)
  uint32_t *end = value + scan->int_len/4;
    80001ba6:	fd043783          	ld	a5,-48(s0)
    80001baa:	4f9c                	lw	a5,24(a5)
    80001bac:	41f7d71b          	sraiw	a4,a5,0x1f
    80001bb0:	01e7571b          	srliw	a4,a4,0x1e
    80001bb4:	9fb9                	addw	a5,a5,a4
    80001bb6:	4027d79b          	sraiw	a5,a5,0x2
    80001bba:	2781                	sext.w	a5,a5
    80001bbc:	078a                	slli	a5,a5,0x2
    80001bbe:	fd843703          	ld	a4,-40(s0)
    80001bc2:	97ba                	add	a5,a5,a4
    80001bc4:	fcf43423          	sd	a5,-56(s0)

  if (!scan->compat) return;
    80001bc8:	fd043783          	ld	a5,-48(s0)
    80001bcc:	439c                	lw	a5,0(a5)
    80001bce:	cbb9                	beqz	a5,80001c24 <plic_redact+0xa2>
  scan->done = 1;
    80001bd0:	fd043783          	ld	a5,-48(s0)
    80001bd4:	4705                	li	a4,1
    80001bd6:	cfd8                	sw	a4,28(a5)

  while (end - value > 0) {
    80001bd8:	a82d                	j	80001c12 <plic_redact+0x90>
    if (bswap(value[1]) == IRQ_M_EXT) value[1] = bswap(-1);
    80001bda:	fd843783          	ld	a5,-40(s0)
    80001bde:	0791                	addi	a5,a5,4
    80001be0:	439c                	lw	a5,0(a5)
    80001be2:	853e                	mv	a0,a5
    80001be4:	9cffe0ef          	jal	ra,800005b2 <bswap>
    80001be8:	87aa                	mv	a5,a0
    80001bea:	2781                	sext.w	a5,a5
    80001bec:	873e                	mv	a4,a5
    80001bee:	47ad                	li	a5,11
    80001bf0:	00f71c63          	bne	a4,a5,80001c08 <plic_redact+0x86>
    80001bf4:	fd843783          	ld	a5,-40(s0)
    80001bf8:	00478493          	addi	s1,a5,4
    80001bfc:	557d                	li	a0,-1
    80001bfe:	9b5fe0ef          	jal	ra,800005b2 <bswap>
    80001c02:	87aa                	mv	a5,a0
    80001c04:	2781                	sext.w	a5,a5
    80001c06:	c09c                	sw	a5,0(s1)
    value += 2;
    80001c08:	fd843783          	ld	a5,-40(s0)
    80001c0c:	07a1                	addi	a5,a5,8
    80001c0e:	fcf43c23          	sd	a5,-40(s0)
  while (end - value > 0) {
    80001c12:	fc843703          	ld	a4,-56(s0)
    80001c16:	fd843783          	ld	a5,-40(s0)
    80001c1a:	40f707b3          	sub	a5,a4,a5
    80001c1e:	faf04ee3          	bgtz	a5,80001bda <plic_redact+0x58>
    80001c22:	a011                	j	80001c26 <plic_redact+0xa4>
  if (!scan->compat) return;
    80001c24:	0001                	nop
  }
}
    80001c26:	60a6                	ld	ra,72(sp)
    80001c28:	6406                	ld	s0,64(sp)
    80001c2a:	74e2                	ld	s1,56(sp)
    80001c2c:	6161                	addi	sp,sp,80
    80001c2e:	8082                	ret

0000000080001c30 <filter_plic>:

void filter_plic(uintptr_t fdt)
{
    80001c30:	7159                	addi	sp,sp,-112
    80001c32:	f486                	sd	ra,104(sp)
    80001c34:	f0a2                	sd	s0,96(sp)
    80001c36:	1880                	addi	s0,sp,112
    80001c38:	f8a43c23          	sd	a0,-104(s0)
  struct fdt_cb cb;
  struct plic_scan scan;

  memset(&cb, 0, sizeof(cb));
    80001c3c:	fc840793          	addi	a5,s0,-56
    80001c40:	02800613          	li	a2,40
    80001c44:	4581                	li	a1,0
    80001c46:	853e                	mv	a0,a5
    80001c48:	4b20a0ef          	jal	ra,8000c0fa <memset>
  cb.open = plic_open;
    80001c4c:	00000797          	auipc	a5,0x0
    80001c50:	ab278793          	addi	a5,a5,-1358 # 800016fe <plic_open>
    80001c54:	fcf43423          	sd	a5,-56(s0)
  cb.prop = plic_prop;
    80001c58:	00000797          	auipc	a5,0x0
    80001c5c:	adc78793          	addi	a5,a5,-1316 # 80001734 <plic_prop>
    80001c60:	fcf43823          	sd	a5,-48(s0)
  cb.done = plic_redact;
    80001c64:	00000797          	auipc	a5,0x0
    80001c68:	f1e78793          	addi	a5,a5,-226 # 80001b82 <plic_redact>
    80001c6c:	fcf43c23          	sd	a5,-40(s0)
  cb.extra = &scan;
    80001c70:	fa040793          	addi	a5,s0,-96
    80001c74:	fef43423          	sd	a5,-24(s0)

  scan.done = 0;
    80001c78:	fa042e23          	sw	zero,-68(s0)
  fdt_scan(fdt, &cb);
    80001c7c:	fc840793          	addi	a5,s0,-56
    80001c80:	85be                	mv	a1,a5
    80001c82:	f9843503          	ld	a0,-104(s0)
    80001c86:	d41fe0ef          	jal	ra,800009c6 <fdt_scan>
}
    80001c8a:	0001                	nop
    80001c8c:	70a6                	ld	ra,104(sp)
    80001c8e:	7406                	ld	s0,96(sp)
    80001c90:	6165                	addi	sp,sp,112
    80001c92:	8082                	ret

0000000080001c94 <compat_open>:
  int depth;
  int kill;
};

static void compat_open(const struct fdt_scan_node *node, void *extra)
{
    80001c94:	7179                	addi	sp,sp,-48
    80001c96:	f422                	sd	s0,40(sp)
    80001c98:	1800                	addi	s0,sp,48
    80001c9a:	fca43c23          	sd	a0,-40(s0)
    80001c9e:	fcb43823          	sd	a1,-48(s0)
  struct compat_scan *scan = (struct compat_scan *)extra;
    80001ca2:	fd043783          	ld	a5,-48(s0)
    80001ca6:	fef43423          	sd	a5,-24(s0)
  ++scan->depth;
    80001caa:	fe843783          	ld	a5,-24(s0)
    80001cae:	479c                	lw	a5,8(a5)
    80001cb0:	2785                	addiw	a5,a5,1
    80001cb2:	0007871b          	sext.w	a4,a5
    80001cb6:	fe843783          	ld	a5,-24(s0)
    80001cba:	c798                	sw	a4,8(a5)
}
    80001cbc:	0001                	nop
    80001cbe:	7422                	ld	s0,40(sp)
    80001cc0:	6145                	addi	sp,sp,48
    80001cc2:	8082                	ret

0000000080001cc4 <compat_prop>:

static void compat_prop(const struct fdt_scan_prop *prop, void *extra)
{
    80001cc4:	7179                	addi	sp,sp,-48
    80001cc6:	f406                	sd	ra,40(sp)
    80001cc8:	f022                	sd	s0,32(sp)
    80001cca:	1800                	addi	s0,sp,48
    80001ccc:	fca43c23          	sd	a0,-40(s0)
    80001cd0:	fcb43823          	sd	a1,-48(s0)
  struct compat_scan *scan = (struct compat_scan *)extra;
    80001cd4:	fd043783          	ld	a5,-48(s0)
    80001cd8:	fef43423          	sd	a5,-24(s0)
  if (!strcmp(prop->name, "compatible") && fdt_string_list_index(prop, scan->compat) >= 0)
    80001cdc:	fd843783          	ld	a5,-40(s0)
    80001ce0:	679c                	ld	a5,8(a5)
    80001ce2:	0000b597          	auipc	a1,0xb
    80001ce6:	c9e58593          	addi	a1,a1,-866 # 8000c980 <logo+0x5c0>
    80001cea:	853e                	mv	a0,a5
    80001cec:	5180a0ef          	jal	ra,8000c204 <strcmp>
    80001cf0:	87aa                	mv	a5,a0
    80001cf2:	eb95                	bnez	a5,80001d26 <compat_prop+0x62>
    80001cf4:	fe843783          	ld	a5,-24(s0)
    80001cf8:	639c                	ld	a5,0(a5)
    80001cfa:	85be                	mv	a1,a5
    80001cfc:	fd843503          	ld	a0,-40(s0)
    80001d00:	f0dfe0ef          	jal	ra,80000c0c <fdt_string_list_index>
    80001d04:	87aa                	mv	a5,a0
    80001d06:	0207c063          	bltz	a5,80001d26 <compat_prop+0x62>
    if (scan->depth < scan->kill)
    80001d0a:	fe843783          	ld	a5,-24(s0)
    80001d0e:	4798                	lw	a4,8(a5)
    80001d10:	fe843783          	ld	a5,-24(s0)
    80001d14:	47dc                	lw	a5,12(a5)
    80001d16:	00f75863          	ble	a5,a4,80001d26 <compat_prop+0x62>
      scan->kill = scan->depth;
    80001d1a:	fe843783          	ld	a5,-24(s0)
    80001d1e:	4798                	lw	a4,8(a5)
    80001d20:	fe843783          	ld	a5,-24(s0)
    80001d24:	c7d8                	sw	a4,12(a5)
}
    80001d26:	0001                	nop
    80001d28:	70a2                	ld	ra,40(sp)
    80001d2a:	7402                	ld	s0,32(sp)
    80001d2c:	6145                	addi	sp,sp,48
    80001d2e:	8082                	ret

0000000080001d30 <compat_close>:

static int compat_close(const struct fdt_scan_node *node, void *extra)
{
    80001d30:	7179                	addi	sp,sp,-48
    80001d32:	f422                	sd	s0,40(sp)
    80001d34:	1800                	addi	s0,sp,48
    80001d36:	fca43c23          	sd	a0,-40(s0)
    80001d3a:	fcb43823          	sd	a1,-48(s0)
  struct compat_scan *scan = (struct compat_scan *)extra;
    80001d3e:	fd043783          	ld	a5,-48(s0)
    80001d42:	fef43423          	sd	a5,-24(s0)
  if (scan->kill == scan->depth--) {
    80001d46:	fe843783          	ld	a5,-24(s0)
    80001d4a:	47d0                	lw	a2,12(a5)
    80001d4c:	fe843783          	ld	a5,-24(s0)
    80001d50:	479c                	lw	a5,8(a5)
    80001d52:	fff7871b          	addiw	a4,a5,-1
    80001d56:	0007069b          	sext.w	a3,a4
    80001d5a:	fe843703          	ld	a4,-24(s0)
    80001d5e:	c714                	sw	a3,8(a4)
    80001d60:	8732                	mv	a4,a2
    80001d62:	00f71963          	bne	a4,a5,80001d74 <compat_close+0x44>
    scan->kill = 999;
    80001d66:	fe843783          	ld	a5,-24(s0)
    80001d6a:	3e700713          	li	a4,999
    80001d6e:	c7d8                	sw	a4,12(a5)
    return -1;
    80001d70:	57fd                	li	a5,-1
    80001d72:	a011                	j	80001d76 <compat_close+0x46>
  } else {
    return 0;
    80001d74:	4781                	li	a5,0
  }
}
    80001d76:	853e                	mv	a0,a5
    80001d78:	7422                	ld	s0,40(sp)
    80001d7a:	6145                	addi	sp,sp,48
    80001d7c:	8082                	ret

0000000080001d7e <filter_compat>:

void filter_compat(uintptr_t fdt, const char *compat)
{
    80001d7e:	711d                	addi	sp,sp,-96
    80001d80:	ec86                	sd	ra,88(sp)
    80001d82:	e8a2                	sd	s0,80(sp)
    80001d84:	1080                	addi	s0,sp,96
    80001d86:	faa43423          	sd	a0,-88(s0)
    80001d8a:	fab43023          	sd	a1,-96(s0)
  struct fdt_cb cb;
  struct compat_scan scan;

  memset(&cb, 0, sizeof(cb));
    80001d8e:	fc840793          	addi	a5,s0,-56
    80001d92:	02800613          	li	a2,40
    80001d96:	4581                	li	a1,0
    80001d98:	853e                	mv	a0,a5
    80001d9a:	3600a0ef          	jal	ra,8000c0fa <memset>
  cb.open = compat_open;
    80001d9e:	00000797          	auipc	a5,0x0
    80001da2:	ef678793          	addi	a5,a5,-266 # 80001c94 <compat_open>
    80001da6:	fcf43423          	sd	a5,-56(s0)
  cb.prop = compat_prop;
    80001daa:	00000797          	auipc	a5,0x0
    80001dae:	f1a78793          	addi	a5,a5,-230 # 80001cc4 <compat_prop>
    80001db2:	fcf43823          	sd	a5,-48(s0)
  cb.close = compat_close;
    80001db6:	00000797          	auipc	a5,0x0
    80001dba:	f7a78793          	addi	a5,a5,-134 # 80001d30 <compat_close>
    80001dbe:	fef43023          	sd	a5,-32(s0)
  cb.extra = &scan;
    80001dc2:	fb840793          	addi	a5,s0,-72
    80001dc6:	fef43423          	sd	a5,-24(s0)

  scan.compat = compat;
    80001dca:	fa043783          	ld	a5,-96(s0)
    80001dce:	faf43c23          	sd	a5,-72(s0)
  scan.depth = 0;
    80001dd2:	fc042023          	sw	zero,-64(s0)
  scan.kill = 999;
    80001dd6:	3e700793          	li	a5,999
    80001dda:	fcf42223          	sw	a5,-60(s0)
  fdt_scan(fdt, &cb);
    80001dde:	fc840793          	addi	a5,s0,-56
    80001de2:	85be                	mv	a1,a5
    80001de4:	fa843503          	ld	a0,-88(s0)
    80001de8:	bdffe0ef          	jal	ra,800009c6 <fdt_scan>
}
    80001dec:	0001                	nop
    80001dee:	60e6                	ld	ra,88(sp)
    80001df0:	6446                	ld	s0,80(sp)
    80001df2:	6125                	addi	sp,sp,96
    80001df4:	8082                	ret

0000000080001df6 <chosen_open>:
  void* kernel_start;
  void* kernel_end;
};

static void chosen_open(const struct fdt_scan_node *node, void *extra)
{
    80001df6:	7179                	addi	sp,sp,-48
    80001df8:	f406                	sd	ra,40(sp)
    80001dfa:	f022                	sd	s0,32(sp)
    80001dfc:	1800                	addi	s0,sp,48
    80001dfe:	fca43c23          	sd	a0,-40(s0)
    80001e02:	fcb43823          	sd	a1,-48(s0)
  struct chosen_scan *scan = (struct chosen_scan *)extra;
    80001e06:	fd043783          	ld	a5,-48(s0)
    80001e0a:	fef43423          	sd	a5,-24(s0)
  if (!strcmp(node->name, "chosen")) {
    80001e0e:	fd843783          	ld	a5,-40(s0)
    80001e12:	679c                	ld	a5,8(a5)
    80001e14:	0000b597          	auipc	a1,0xb
    80001e18:	cac58593          	addi	a1,a1,-852 # 8000cac0 <logo+0x700>
    80001e1c:	853e                	mv	a0,a5
    80001e1e:	3e60a0ef          	jal	ra,8000c204 <strcmp>
    80001e22:	87aa                	mv	a5,a0
    80001e24:	e791                	bnez	a5,80001e30 <chosen_open+0x3a>
    scan->chosen = node;
    80001e26:	fe843783          	ld	a5,-24(s0)
    80001e2a:	fd843703          	ld	a4,-40(s0)
    80001e2e:	e398                	sd	a4,0(a5)
  }
}
    80001e30:	0001                	nop
    80001e32:	70a2                	ld	ra,40(sp)
    80001e34:	7402                	ld	s0,32(sp)
    80001e36:	6145                	addi	sp,sp,48
    80001e38:	8082                	ret

0000000080001e3a <chosen_close>:

static int chosen_close(const struct fdt_scan_node *node, void *extra)
{
    80001e3a:	7179                	addi	sp,sp,-48
    80001e3c:	f422                	sd	s0,40(sp)
    80001e3e:	1800                	addi	s0,sp,48
    80001e40:	fca43c23          	sd	a0,-40(s0)
    80001e44:	fcb43823          	sd	a1,-48(s0)
  struct chosen_scan *scan = (struct chosen_scan *)extra;
    80001e48:	fd043783          	ld	a5,-48(s0)
    80001e4c:	fef43423          	sd	a5,-24(s0)
  if (scan->chosen && scan->chosen == node) {
    80001e50:	fe843783          	ld	a5,-24(s0)
    80001e54:	639c                	ld	a5,0(a5)
    80001e56:	cf81                	beqz	a5,80001e6e <chosen_close+0x34>
    80001e58:	fe843783          	ld	a5,-24(s0)
    80001e5c:	639c                	ld	a5,0(a5)
    80001e5e:	fd843703          	ld	a4,-40(s0)
    80001e62:	00f71663          	bne	a4,a5,80001e6e <chosen_close+0x34>
    scan->chosen = NULL;
    80001e66:	fe843783          	ld	a5,-24(s0)
    80001e6a:	0007b023          	sd	zero,0(a5)
  }
  return 0;
    80001e6e:	4781                	li	a5,0
}
    80001e70:	853e                	mv	a0,a5
    80001e72:	7422                	ld	s0,40(sp)
    80001e74:	6145                	addi	sp,sp,48
    80001e76:	8082                	ret

0000000080001e78 <chosen_prop>:

static void chosen_prop(const struct fdt_scan_prop *prop, void *extra)
{
    80001e78:	7179                	addi	sp,sp,-48
    80001e7a:	f406                	sd	ra,40(sp)
    80001e7c:	f022                	sd	s0,32(sp)
    80001e7e:	1800                	addi	s0,sp,48
    80001e80:	fca43c23          	sd	a0,-40(s0)
    80001e84:	fcb43823          	sd	a1,-48(s0)
  struct chosen_scan *scan = (struct chosen_scan *)extra;
    80001e88:	fd043783          	ld	a5,-48(s0)
    80001e8c:	fef43423          	sd	a5,-24(s0)
  uint64_t val;
  if (!scan->chosen) return;
    80001e90:	fe843783          	ld	a5,-24(s0)
    80001e94:	639c                	ld	a5,0(a5)
    80001e96:	c3d9                	beqz	a5,80001f1c <chosen_prop+0xa4>
  if (!strcmp(prop->name, "riscv,kernel-start")) {
    80001e98:	fd843783          	ld	a5,-40(s0)
    80001e9c:	679c                	ld	a5,8(a5)
    80001e9e:	0000b597          	auipc	a1,0xb
    80001ea2:	c2a58593          	addi	a1,a1,-982 # 8000cac8 <logo+0x708>
    80001ea6:	853e                	mv	a0,a5
    80001ea8:	35c0a0ef          	jal	ra,8000c204 <strcmp>
    80001eac:	87aa                	mv	a5,a0
    80001eae:	e795                	bnez	a5,80001eda <chosen_prop+0x62>
    fdt_get_address(prop->node->parent, prop->value, &val);
    80001eb0:	fd843783          	ld	a5,-40(s0)
    80001eb4:	639c                	ld	a5,0(a5)
    80001eb6:	6398                	ld	a4,0(a5)
    80001eb8:	fd843783          	ld	a5,-40(s0)
    80001ebc:	6b9c                	ld	a5,16(a5)
    80001ebe:	fe040693          	addi	a3,s0,-32
    80001ec2:	8636                	mv	a2,a3
    80001ec4:	85be                	mv	a1,a5
    80001ec6:	853a                	mv	a0,a4
    80001ec8:	c13fe0ef          	jal	ra,80000ada <fdt_get_address>
    scan->kernel_start = (void*)(uintptr_t)val;
    80001ecc:	fe043783          	ld	a5,-32(s0)
    80001ed0:	873e                	mv	a4,a5
    80001ed2:	fe843783          	ld	a5,-24(s0)
    80001ed6:	e798                	sd	a4,8(a5)
    80001ed8:	a099                	j	80001f1e <chosen_prop+0xa6>
  } else if (!strcmp(prop->name, "riscv,kernel-end")) {
    80001eda:	fd843783          	ld	a5,-40(s0)
    80001ede:	679c                	ld	a5,8(a5)
    80001ee0:	0000b597          	auipc	a1,0xb
    80001ee4:	c0058593          	addi	a1,a1,-1024 # 8000cae0 <logo+0x720>
    80001ee8:	853e                	mv	a0,a5
    80001eea:	31a0a0ef          	jal	ra,8000c204 <strcmp>
    80001eee:	87aa                	mv	a5,a0
    80001ef0:	e79d                	bnez	a5,80001f1e <chosen_prop+0xa6>
    fdt_get_address(prop->node->parent, prop->value, &val);
    80001ef2:	fd843783          	ld	a5,-40(s0)
    80001ef6:	639c                	ld	a5,0(a5)
    80001ef8:	6398                	ld	a4,0(a5)
    80001efa:	fd843783          	ld	a5,-40(s0)
    80001efe:	6b9c                	ld	a5,16(a5)
    80001f00:	fe040693          	addi	a3,s0,-32
    80001f04:	8636                	mv	a2,a3
    80001f06:	85be                	mv	a1,a5
    80001f08:	853a                	mv	a0,a4
    80001f0a:	bd1fe0ef          	jal	ra,80000ada <fdt_get_address>
    scan->kernel_end = (void*)(uintptr_t)val;
    80001f0e:	fe043783          	ld	a5,-32(s0)
    80001f12:	873e                	mv	a4,a5
    80001f14:	fe843783          	ld	a5,-24(s0)
    80001f18:	eb98                	sd	a4,16(a5)
    80001f1a:	a011                	j	80001f1e <chosen_prop+0xa6>
  if (!scan->chosen) return;
    80001f1c:	0001                	nop
  }
}
    80001f1e:	70a2                	ld	ra,40(sp)
    80001f20:	7402                	ld	s0,32(sp)
    80001f22:	6145                	addi	sp,sp,48
    80001f24:	8082                	ret

0000000080001f26 <query_chosen>:

void query_chosen(uintptr_t fdt)
{
    80001f26:	711d                	addi	sp,sp,-96
    80001f28:	ec86                	sd	ra,88(sp)
    80001f2a:	e8a2                	sd	s0,80(sp)
    80001f2c:	1080                	addi	s0,sp,96
    80001f2e:	faa43423          	sd	a0,-88(s0)
  struct fdt_cb cb;
  struct chosen_scan chosen;

  memset(&cb, 0, sizeof(cb));
    80001f32:	fc840793          	addi	a5,s0,-56
    80001f36:	02800613          	li	a2,40
    80001f3a:	4581                	li	a1,0
    80001f3c:	853e                	mv	a0,a5
    80001f3e:	1bc0a0ef          	jal	ra,8000c0fa <memset>
  cb.open = chosen_open;
    80001f42:	00000797          	auipc	a5,0x0
    80001f46:	eb478793          	addi	a5,a5,-332 # 80001df6 <chosen_open>
    80001f4a:	fcf43423          	sd	a5,-56(s0)
  cb.close = chosen_close;
    80001f4e:	00000797          	auipc	a5,0x0
    80001f52:	eec78793          	addi	a5,a5,-276 # 80001e3a <chosen_close>
    80001f56:	fef43023          	sd	a5,-32(s0)
  cb.prop = chosen_prop;
    80001f5a:	00000797          	auipc	a5,0x0
    80001f5e:	f1e78793          	addi	a5,a5,-226 # 80001e78 <chosen_prop>
    80001f62:	fcf43823          	sd	a5,-48(s0)

  memset(&chosen, 0, sizeof(chosen));
    80001f66:	fb040793          	addi	a5,s0,-80
    80001f6a:	4661                	li	a2,24
    80001f6c:	4581                	li	a1,0
    80001f6e:	853e                	mv	a0,a5
    80001f70:	18a0a0ef          	jal	ra,8000c0fa <memset>
  cb.extra = &chosen;
    80001f74:	fb040793          	addi	a5,s0,-80
    80001f78:	fef43423          	sd	a5,-24(s0)

  fdt_scan(fdt, &cb);
    80001f7c:	fc840793          	addi	a5,s0,-56
    80001f80:	85be                	mv	a1,a5
    80001f82:	fa843503          	ld	a0,-88(s0)
    80001f86:	a41fe0ef          	jal	ra,800009c6 <fdt_scan>
  kernel_start = chosen.kernel_start;
    80001f8a:	fb843703          	ld	a4,-72(s0)
    80001f8e:	00017797          	auipc	a5,0x17
    80001f92:	0aa78793          	addi	a5,a5,170 # 80019038 <kernel_start>
    80001f96:	e398                	sd	a4,0(a5)
  kernel_end = chosen.kernel_end;
    80001f98:	fc043703          	ld	a4,-64(s0)
    80001f9c:	00017797          	auipc	a5,0x17
    80001fa0:	08c78793          	addi	a5,a5,140 # 80019028 <kernel_end>
    80001fa4:	e398                	sd	a4,0(a5)
}
    80001fa6:	0001                	nop
    80001fa8:	60e6                	ld	ra,88(sp)
    80001faa:	6446                	ld	s0,80(sp)
    80001fac:	6125                	addi	sp,sp,96
    80001fae:	8082                	ret

0000000080001fb0 <hart_filter_open>:
  char *mmu_type;
  long *disabled_hart_mask;
};

static void hart_filter_open(const struct fdt_scan_node *node, void *extra)
{
    80001fb0:	7179                	addi	sp,sp,-48
    80001fb2:	f422                	sd	s0,40(sp)
    80001fb4:	1800                	addi	s0,sp,48
    80001fb6:	fca43c23          	sd	a0,-40(s0)
    80001fba:	fcb43823          	sd	a1,-48(s0)
  struct hart_filter *filter = (struct hart_filter *)extra;
    80001fbe:	fd043783          	ld	a5,-48(s0)
    80001fc2:	fef43423          	sd	a5,-24(s0)
  filter->status = NULL;
    80001fc6:	fe843783          	ld	a5,-24(s0)
    80001fca:	0007b423          	sd	zero,8(a5)
  filter->mmu_type = NULL;
    80001fce:	fe843783          	ld	a5,-24(s0)
    80001fd2:	0007b823          	sd	zero,16(a5)
  filter->compat = 0;
    80001fd6:	fe843783          	ld	a5,-24(s0)
    80001fda:	0007a023          	sw	zero,0(a5)
  filter->hart = -1;
    80001fde:	fe843783          	ld	a5,-24(s0)
    80001fe2:	577d                	li	a4,-1
    80001fe4:	c3d8                	sw	a4,4(a5)
}
    80001fe6:	0001                	nop
    80001fe8:	7422                	ld	s0,40(sp)
    80001fea:	6145                	addi	sp,sp,48
    80001fec:	8082                	ret

0000000080001fee <hart_filter_prop>:

static void hart_filter_prop(const struct fdt_scan_prop *prop, void *extra)
{
    80001fee:	7179                	addi	sp,sp,-48
    80001ff0:	f406                	sd	ra,40(sp)
    80001ff2:	f022                	sd	s0,32(sp)
    80001ff4:	1800                	addi	s0,sp,48
    80001ff6:	fca43c23          	sd	a0,-40(s0)
    80001ffa:	fcb43823          	sd	a1,-48(s0)
  struct hart_filter *filter = (struct hart_filter *)extra;
    80001ffe:	fd043783          	ld	a5,-48(s0)
    80002002:	fef43423          	sd	a5,-24(s0)
  if (!strcmp(prop->name, "device_type") && !strcmp((const char*)prop->value, "cpu")) {
    80002006:	fd843783          	ld	a5,-40(s0)
    8000200a:	679c                	ld	a5,8(a5)
    8000200c:	0000b597          	auipc	a1,0xb
    80002010:	83458593          	addi	a1,a1,-1996 # 8000c840 <logo+0x480>
    80002014:	853e                	mv	a0,a5
    80002016:	1ee0a0ef          	jal	ra,8000c204 <strcmp>
    8000201a:	87aa                	mv	a5,a0
    8000201c:	e395                	bnez	a5,80002040 <hart_filter_prop+0x52>
    8000201e:	fd843783          	ld	a5,-40(s0)
    80002022:	6b9c                	ld	a5,16(a5)
    80002024:	0000b597          	auipc	a1,0xb
    80002028:	88c58593          	addi	a1,a1,-1908 # 8000c8b0 <logo+0x4f0>
    8000202c:	853e                	mv	a0,a5
    8000202e:	1d60a0ef          	jal	ra,8000c204 <strcmp>
    80002032:	87aa                	mv	a5,a0
    80002034:	e791                	bnez	a5,80002040 <hart_filter_prop+0x52>
    filter->compat = 1;
    80002036:	fe843783          	ld	a5,-24(s0)
    8000203a:	4705                	li	a4,1
    8000203c:	c398                	sw	a4,0(a5)
  } else if (!strcmp(prop->name, "status")) {
    filter->status = (char*)prop->value;
  } else if (!strcmp(prop->name, "mmu-type")) {
    filter->mmu_type = (char*)prop->value;
  }
}
    8000203e:	a841                	j	800020ce <hart_filter_prop+0xe0>
  } else if (!strcmp(prop->name, "reg")) {
    80002040:	fd843783          	ld	a5,-40(s0)
    80002044:	679c                	ld	a5,8(a5)
    80002046:	0000b597          	auipc	a1,0xb
    8000204a:	81258593          	addi	a1,a1,-2030 # 8000c858 <logo+0x498>
    8000204e:	853e                	mv	a0,a5
    80002050:	1b40a0ef          	jal	ra,8000c204 <strcmp>
    80002054:	87aa                	mv	a5,a0
    80002056:	e79d                	bnez	a5,80002084 <hart_filter_prop+0x96>
    fdt_get_address(prop->node->parent, prop->value, &reg);
    80002058:	fd843783          	ld	a5,-40(s0)
    8000205c:	639c                	ld	a5,0(a5)
    8000205e:	6398                	ld	a4,0(a5)
    80002060:	fd843783          	ld	a5,-40(s0)
    80002064:	6b9c                	ld	a5,16(a5)
    80002066:	fe040693          	addi	a3,s0,-32
    8000206a:	8636                	mv	a2,a3
    8000206c:	85be                	mv	a1,a5
    8000206e:	853a                	mv	a0,a4
    80002070:	a6bfe0ef          	jal	ra,80000ada <fdt_get_address>
    filter->hart = reg;
    80002074:	fe043783          	ld	a5,-32(s0)
    80002078:	0007871b          	sext.w	a4,a5
    8000207c:	fe843783          	ld	a5,-24(s0)
    80002080:	c3d8                	sw	a4,4(a5)
}
    80002082:	a0b1                	j	800020ce <hart_filter_prop+0xe0>
  } else if (!strcmp(prop->name, "status")) {
    80002084:	fd843783          	ld	a5,-40(s0)
    80002088:	679c                	ld	a5,8(a5)
    8000208a:	0000b597          	auipc	a1,0xb
    8000208e:	a6e58593          	addi	a1,a1,-1426 # 8000caf8 <logo+0x738>
    80002092:	853e                	mv	a0,a5
    80002094:	1700a0ef          	jal	ra,8000c204 <strcmp>
    80002098:	87aa                	mv	a5,a0
    8000209a:	eb81                	bnez	a5,800020aa <hart_filter_prop+0xbc>
    filter->status = (char*)prop->value;
    8000209c:	fd843783          	ld	a5,-40(s0)
    800020a0:	6b98                	ld	a4,16(a5)
    800020a2:	fe843783          	ld	a5,-24(s0)
    800020a6:	e798                	sd	a4,8(a5)
}
    800020a8:	a01d                	j	800020ce <hart_filter_prop+0xe0>
  } else if (!strcmp(prop->name, "mmu-type")) {
    800020aa:	fd843783          	ld	a5,-40(s0)
    800020ae:	679c                	ld	a5,8(a5)
    800020b0:	0000b597          	auipc	a1,0xb
    800020b4:	a5058593          	addi	a1,a1,-1456 # 8000cb00 <logo+0x740>
    800020b8:	853e                	mv	a0,a5
    800020ba:	14a0a0ef          	jal	ra,8000c204 <strcmp>
    800020be:	87aa                	mv	a5,a0
    800020c0:	e799                	bnez	a5,800020ce <hart_filter_prop+0xe0>
    filter->mmu_type = (char*)prop->value;
    800020c2:	fd843783          	ld	a5,-40(s0)
    800020c6:	6b98                	ld	a4,16(a5)
    800020c8:	fe843783          	ld	a5,-24(s0)
    800020cc:	eb98                	sd	a4,16(a5)
}
    800020ce:	0001                	nop
    800020d0:	70a2                	ld	ra,40(sp)
    800020d2:	7402                	ld	s0,32(sp)
    800020d4:	6145                	addi	sp,sp,48
    800020d6:	8082                	ret

00000000800020d8 <hart_filter_mask>:

static bool hart_filter_mask(const struct hart_filter *filter)
{
    800020d8:	1101                	addi	sp,sp,-32
    800020da:	ec06                	sd	ra,24(sp)
    800020dc:	e822                	sd	s0,16(sp)
    800020de:	1000                	addi	s0,sp,32
    800020e0:	fea43423          	sd	a0,-24(s0)
  if (filter->mmu_type == NULL) return true;
    800020e4:	fe843783          	ld	a5,-24(s0)
    800020e8:	6b9c                	ld	a5,16(a5)
    800020ea:	e399                	bnez	a5,800020f0 <hart_filter_mask+0x18>
    800020ec:	4785                	li	a5,1
    800020ee:	a895                	j	80002162 <hart_filter_mask+0x8a>
  if (strcmp(filter->status, "okay")) return true;
    800020f0:	fe843783          	ld	a5,-24(s0)
    800020f4:	679c                	ld	a5,8(a5)
    800020f6:	0000b597          	auipc	a1,0xb
    800020fa:	a1a58593          	addi	a1,a1,-1510 # 8000cb10 <logo+0x750>
    800020fe:	853e                	mv	a0,a5
    80002100:	1040a0ef          	jal	ra,8000c204 <strcmp>
    80002104:	87aa                	mv	a5,a0
    80002106:	c399                	beqz	a5,8000210c <hart_filter_mask+0x34>
    80002108:	4785                	li	a5,1
    8000210a:	a8a1                	j	80002162 <hart_filter_mask+0x8a>
#if __riscv_xlen == 32
  if (!strcmp(filter->mmu_type, "riscv,sv32")) return false;
#else
  if (!strcmp(filter->mmu_type, "riscv,sv39")) return false;
    8000210c:	fe843783          	ld	a5,-24(s0)
    80002110:	6b9c                	ld	a5,16(a5)
    80002112:	0000b597          	auipc	a1,0xb
    80002116:	a0658593          	addi	a1,a1,-1530 # 8000cb18 <logo+0x758>
    8000211a:	853e                	mv	a0,a5
    8000211c:	0e80a0ef          	jal	ra,8000c204 <strcmp>
    80002120:	87aa                	mv	a5,a0
    80002122:	e399                	bnez	a5,80002128 <hart_filter_mask+0x50>
    80002124:	4781                	li	a5,0
    80002126:	a835                	j	80002162 <hart_filter_mask+0x8a>
  if (!strcmp(filter->mmu_type, "riscv,sv48")) return false;
    80002128:	fe843783          	ld	a5,-24(s0)
    8000212c:	6b9c                	ld	a5,16(a5)
    8000212e:	0000b597          	auipc	a1,0xb
    80002132:	9fa58593          	addi	a1,a1,-1542 # 8000cb28 <logo+0x768>
    80002136:	853e                	mv	a0,a5
    80002138:	0cc0a0ef          	jal	ra,8000c204 <strcmp>
    8000213c:	87aa                	mv	a5,a0
    8000213e:	e399                	bnez	a5,80002144 <hart_filter_mask+0x6c>
    80002140:	4781                	li	a5,0
    80002142:	a005                	j	80002162 <hart_filter_mask+0x8a>
#endif
  printm("hart_filter_mask saw unknown hart type: status=\"%s\", mmu_type=\"%s\"\n",
    80002144:	fe843783          	ld	a5,-24(s0)
    80002148:	6798                	ld	a4,8(a5)
    8000214a:	fe843783          	ld	a5,-24(s0)
    8000214e:	6b9c                	ld	a5,16(a5)
    80002150:	863e                	mv	a2,a5
    80002152:	85ba                	mv	a1,a4
    80002154:	0000b517          	auipc	a0,0xb
    80002158:	9e450513          	addi	a0,a0,-1564 # 8000cb38 <logo+0x778>
    8000215c:	6d0000ef          	jal	ra,8000282c <printm>
         filter->status, filter->mmu_type);
  return true;
    80002160:	4785                	li	a5,1
}
    80002162:	853e                	mv	a0,a5
    80002164:	60e2                	ld	ra,24(sp)
    80002166:	6442                	ld	s0,16(sp)
    80002168:	6105                	addi	sp,sp,32
    8000216a:	8082                	ret

000000008000216c <hart_filter_done>:

static void hart_filter_done(const struct fdt_scan_node *node, void *extra)
{
    8000216c:	7139                	addi	sp,sp,-64
    8000216e:	fc06                	sd	ra,56(sp)
    80002170:	f822                	sd	s0,48(sp)
    80002172:	f426                	sd	s1,40(sp)
    80002174:	0080                	addi	s0,sp,64
    80002176:	fca43423          	sd	a0,-56(s0)
    8000217a:	fcb43023          	sd	a1,-64(s0)
  struct hart_filter *filter = (struct hart_filter *)extra;
    8000217e:	fc043783          	ld	a5,-64(s0)
    80002182:	fcf43c23          	sd	a5,-40(s0)

  if (!filter->compat) return;
    80002186:	fd843783          	ld	a5,-40(s0)
    8000218a:	439c                	lw	a5,0(a5)
    8000218c:	0e078f63          	beqz	a5,8000228a <hart_filter_done+0x11e>
  assert (filter->status);
    80002190:	fd843783          	ld	a5,-40(s0)
    80002194:	679c                	ld	a5,8(a5)
    80002196:	e795                	bnez	a5,800021c2 <hart_filter_done+0x56>
    80002198:	0000b697          	auipc	a3,0xb
    8000219c:	9e868693          	addi	a3,a3,-1560 # 8000cb80 <logo+0x7c0>
    800021a0:	2a300613          	li	a2,675
    800021a4:	0000a597          	auipc	a1,0xa
    800021a8:	64458593          	addi	a1,a1,1604 # 8000c7e8 <logo+0x428>
    800021ac:	0000a517          	auipc	a0,0xa
    800021b0:	65450513          	addi	a0,a0,1620 # 8000c800 <logo+0x440>
    800021b4:	678000ef          	jal	ra,8000282c <printm>
    800021b8:	67c1                	lui	a5,0x10
    800021ba:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7fff0001>
    800021be:	4b9000ef          	jal	ra,80002e76 <poweroff>
  assert (filter->hart >= 0);
    800021c2:	fd843783          	ld	a5,-40(s0)
    800021c6:	43dc                	lw	a5,4(a5)
    800021c8:	0207d763          	bgez	a5,800021f6 <hart_filter_done+0x8a>
    800021cc:	0000b697          	auipc	a3,0xb
    800021d0:	9c468693          	addi	a3,a3,-1596 # 8000cb90 <logo+0x7d0>
    800021d4:	2a400613          	li	a2,676
    800021d8:	0000a597          	auipc	a1,0xa
    800021dc:	61058593          	addi	a1,a1,1552 # 8000c7e8 <logo+0x428>
    800021e0:	0000a517          	auipc	a0,0xa
    800021e4:	62050513          	addi	a0,a0,1568 # 8000c800 <logo+0x440>
    800021e8:	644000ef          	jal	ra,8000282c <printm>
    800021ec:	67c1                	lui	a5,0x10
    800021ee:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7fff0001>
    800021f2:	485000ef          	jal	ra,80002e76 <poweroff>

  if (hart_filter_mask(filter)) {
    800021f6:	fd843503          	ld	a0,-40(s0)
    800021fa:	edfff0ef          	jal	ra,800020d8 <hart_filter_mask>
    800021fe:	87aa                	mv	a5,a0
    80002200:	c7d1                	beqz	a5,8000228c <hart_filter_done+0x120>
    strcpy(filter->status, "masked");
    80002202:	fd843783          	ld	a5,-40(s0)
    80002206:	679c                	ld	a5,8(a5)
    80002208:	0000b717          	auipc	a4,0xb
    8000220c:	9a070713          	addi	a4,a4,-1632 # 8000cba8 <logo+0x7e8>
    80002210:	00074883          	lbu	a7,0(a4)
    80002214:	00174803          	lbu	a6,1(a4)
    80002218:	00274503          	lbu	a0,2(a4)
    8000221c:	00374583          	lbu	a1,3(a4)
    80002220:	00474603          	lbu	a2,4(a4)
    80002224:	00574683          	lbu	a3,5(a4)
    80002228:	00674703          	lbu	a4,6(a4)
    8000222c:	01178023          	sb	a7,0(a5)
    80002230:	010780a3          	sb	a6,1(a5)
    80002234:	00a78123          	sb	a0,2(a5)
    80002238:	00b781a3          	sb	a1,3(a5)
    8000223c:	00c78223          	sb	a2,4(a5)
    80002240:	00d782a3          	sb	a3,5(a5)
    80002244:	00e78323          	sb	a4,6(a5)
    uint32_t *len = (uint32_t*)filter->status;
    80002248:	fd843783          	ld	a5,-40(s0)
    8000224c:	679c                	ld	a5,8(a5)
    8000224e:	fcf43823          	sd	a5,-48(s0)
    len[-2] = bswap(strlen("masked")+1);
    80002252:	fd043783          	ld	a5,-48(s0)
    80002256:	ff878493          	addi	s1,a5,-8
    8000225a:	451d                	li	a0,7
    8000225c:	b56fe0ef          	jal	ra,800005b2 <bswap>
    80002260:	87aa                	mv	a5,a0
    80002262:	2781                	sext.w	a5,a5
    80002264:	c09c                	sw	a5,0(s1)
    *filter->disabled_hart_mask |= (1 << filter->hart);
    80002266:	fd843783          	ld	a5,-40(s0)
    8000226a:	6f9c                	ld	a5,24(a5)
    8000226c:	6398                	ld	a4,0(a5)
    8000226e:	fd843783          	ld	a5,-40(s0)
    80002272:	43dc                	lw	a5,4(a5)
    80002274:	4685                	li	a3,1
    80002276:	00f697bb          	sllw	a5,a3,a5
    8000227a:	2781                	sext.w	a5,a5
    8000227c:	86be                	mv	a3,a5
    8000227e:	fd843783          	ld	a5,-40(s0)
    80002282:	6f9c                	ld	a5,24(a5)
    80002284:	8f55                	or	a4,a4,a3
    80002286:	e398                	sd	a4,0(a5)
    80002288:	a011                	j	8000228c <hart_filter_done+0x120>
  if (!filter->compat) return;
    8000228a:	0001                	nop
  }
}
    8000228c:	70e2                	ld	ra,56(sp)
    8000228e:	7442                	ld	s0,48(sp)
    80002290:	74a2                	ld	s1,40(sp)
    80002292:	6121                	addi	sp,sp,64
    80002294:	8082                	ret

0000000080002296 <filter_harts>:

void filter_harts(uintptr_t fdt, long *disabled_hart_mask)
{
    80002296:	7159                	addi	sp,sp,-112
    80002298:	f486                	sd	ra,104(sp)
    8000229a:	f0a2                	sd	s0,96(sp)
    8000229c:	1880                	addi	s0,sp,112
    8000229e:	f8a43c23          	sd	a0,-104(s0)
    800022a2:	f8b43823          	sd	a1,-112(s0)
  struct fdt_cb cb;
  struct hart_filter filter;

  memset(&cb, 0, sizeof(cb));
    800022a6:	fc840793          	addi	a5,s0,-56
    800022aa:	02800613          	li	a2,40
    800022ae:	4581                	li	a1,0
    800022b0:	853e                	mv	a0,a5
    800022b2:	649090ef          	jal	ra,8000c0fa <memset>
  cb.open = hart_filter_open;
    800022b6:	00000797          	auipc	a5,0x0
    800022ba:	cfa78793          	addi	a5,a5,-774 # 80001fb0 <hart_filter_open>
    800022be:	fcf43423          	sd	a5,-56(s0)
  cb.prop = hart_filter_prop;
    800022c2:	00000797          	auipc	a5,0x0
    800022c6:	d2c78793          	addi	a5,a5,-724 # 80001fee <hart_filter_prop>
    800022ca:	fcf43823          	sd	a5,-48(s0)
  cb.done = hart_filter_done;
    800022ce:	00000797          	auipc	a5,0x0
    800022d2:	e9e78793          	addi	a5,a5,-354 # 8000216c <hart_filter_done>
    800022d6:	fcf43c23          	sd	a5,-40(s0)
  cb.extra = &filter;
    800022da:	fa840793          	addi	a5,s0,-88
    800022de:	fef43423          	sd	a5,-24(s0)

  filter.disabled_hart_mask = disabled_hart_mask;
    800022e2:	f9043783          	ld	a5,-112(s0)
    800022e6:	fcf43023          	sd	a5,-64(s0)
  *disabled_hart_mask = 0;
    800022ea:	f9043783          	ld	a5,-112(s0)
    800022ee:	0007b023          	sd	zero,0(a5)
  fdt_scan(fdt, &cb);
    800022f2:	fc840793          	addi	a5,s0,-56
    800022f6:	85be                	mv	a1,a5
    800022f8:	f9843503          	ld	a0,-104(s0)
    800022fc:	ecafe0ef          	jal	ra,800009c6 <fdt_scan>
}
    80002300:	0001                	nop
    80002302:	70a6                	ld	ra,104(sp)
    80002304:	7406                	ld	s0,96(sp)
    80002306:	6165                	addi	sp,sp,112
    80002308:	8082                	ret

000000008000230a <fdt_print_printm>:
  int depth;
  const struct fdt_scan_node *stack[FDT_PRINT_MAX_DEPTH];
};

void fdt_print_printm(struct fdt_print_info *info, const char *format, ...)
{
    8000230a:	711d                	addi	sp,sp,-96
    8000230c:	f406                	sd	ra,40(sp)
    8000230e:	f022                	sd	s0,32(sp)
    80002310:	1800                	addi	s0,sp,48
    80002312:	fca43c23          	sd	a0,-40(s0)
    80002316:	fcb43823          	sd	a1,-48(s0)
    8000231a:	e010                	sd	a2,0(s0)
    8000231c:	e414                	sd	a3,8(s0)
    8000231e:	e818                	sd	a4,16(s0)
    80002320:	ec1c                	sd	a5,24(s0)
    80002322:	03043023          	sd	a6,32(s0)
    80002326:	03143423          	sd	a7,40(s0)
  va_list vl;

  for (int i = 0; i < info->depth; ++i)
    8000232a:	fe042623          	sw	zero,-20(s0)
    8000232e:	a821                	j	80002346 <fdt_print_printm+0x3c>
    printm("  ");
    80002330:	0000b517          	auipc	a0,0xb
    80002334:	88050513          	addi	a0,a0,-1920 # 8000cbb0 <logo+0x7f0>
    80002338:	4f4000ef          	jal	ra,8000282c <printm>
  for (int i = 0; i < info->depth; ++i)
    8000233c:	fec42783          	lw	a5,-20(s0)
    80002340:	2785                	addiw	a5,a5,1
    80002342:	fef42623          	sw	a5,-20(s0)
    80002346:	fd843783          	ld	a5,-40(s0)
    8000234a:	4398                	lw	a4,0(a5)
    8000234c:	fec42783          	lw	a5,-20(s0)
    80002350:	2781                	sext.w	a5,a5
    80002352:	fce7cfe3          	blt	a5,a4,80002330 <fdt_print_printm+0x26>

  va_start(vl, format);
    80002356:	03040793          	addi	a5,s0,48
    8000235a:	fd078793          	addi	a5,a5,-48
    8000235e:	fef43023          	sd	a5,-32(s0)
  vprintm(format, vl);
    80002362:	fe043783          	ld	a5,-32(s0)
    80002366:	85be                	mv	a1,a5
    80002368:	fd043503          	ld	a0,-48(s0)
    8000236c:	486000ef          	jal	ra,800027f2 <vprintm>
  va_end(vl);
}
    80002370:	0001                	nop
    80002372:	70a2                	ld	ra,40(sp)
    80002374:	7402                	ld	s0,32(sp)
    80002376:	6125                	addi	sp,sp,96
    80002378:	8082                	ret

000000008000237a <fdt_print_open>:

static void fdt_print_open(const struct fdt_scan_node *node, void *extra)
{
    8000237a:	7179                	addi	sp,sp,-48
    8000237c:	f406                	sd	ra,40(sp)
    8000237e:	f022                	sd	s0,32(sp)
    80002380:	1800                	addi	s0,sp,48
    80002382:	fca43c23          	sd	a0,-40(s0)
    80002386:	fcb43823          	sd	a1,-48(s0)
  struct fdt_print_info *info = (struct fdt_print_info *)extra;
    8000238a:	fd043783          	ld	a5,-48(s0)
    8000238e:	fef43423          	sd	a5,-24(s0)

  while (node->parent != NULL && info->stack[info->depth-1] != node->parent) {
    80002392:	a015                	j	800023b6 <fdt_print_open+0x3c>
    info->depth--;
    80002394:	fe843783          	ld	a5,-24(s0)
    80002398:	439c                	lw	a5,0(a5)
    8000239a:	37fd                	addiw	a5,a5,-1
    8000239c:	0007871b          	sext.w	a4,a5
    800023a0:	fe843783          	ld	a5,-24(s0)
    800023a4:	c398                	sw	a4,0(a5)
    fdt_print_printm(info, "}\r\n");
    800023a6:	0000b597          	auipc	a1,0xb
    800023aa:	81258593          	addi	a1,a1,-2030 # 8000cbb8 <logo+0x7f8>
    800023ae:	fe843503          	ld	a0,-24(s0)
    800023b2:	f59ff0ef          	jal	ra,8000230a <fdt_print_printm>
  while (node->parent != NULL && info->stack[info->depth-1] != node->parent) {
    800023b6:	fd843783          	ld	a5,-40(s0)
    800023ba:	639c                	ld	a5,0(a5)
    800023bc:	c385                	beqz	a5,800023dc <fdt_print_open+0x62>
    800023be:	fe843783          	ld	a5,-24(s0)
    800023c2:	439c                	lw	a5,0(a5)
    800023c4:	37fd                	addiw	a5,a5,-1
    800023c6:	2781                	sext.w	a5,a5
    800023c8:	fe843703          	ld	a4,-24(s0)
    800023cc:	078e                	slli	a5,a5,0x3
    800023ce:	97ba                	add	a5,a5,a4
    800023d0:	6798                	ld	a4,8(a5)
    800023d2:	fd843783          	ld	a5,-40(s0)
    800023d6:	639c                	ld	a5,0(a5)
    800023d8:	faf71ee3          	bne	a4,a5,80002394 <fdt_print_open+0x1a>
  }

  fdt_print_printm(info, "%s {\r\n", node->name);
    800023dc:	fd843783          	ld	a5,-40(s0)
    800023e0:	679c                	ld	a5,8(a5)
    800023e2:	863e                	mv	a2,a5
    800023e4:	0000a597          	auipc	a1,0xa
    800023e8:	7dc58593          	addi	a1,a1,2012 # 8000cbc0 <logo+0x800>
    800023ec:	fe843503          	ld	a0,-24(s0)
    800023f0:	f1bff0ef          	jal	ra,8000230a <fdt_print_printm>
  info->stack[info->depth] = node;
    800023f4:	fe843783          	ld	a5,-24(s0)
    800023f8:	439c                	lw	a5,0(a5)
    800023fa:	fe843703          	ld	a4,-24(s0)
    800023fe:	078e                	slli	a5,a5,0x3
    80002400:	97ba                	add	a5,a5,a4
    80002402:	fd843703          	ld	a4,-40(s0)
    80002406:	e798                	sd	a4,8(a5)
  info->depth++;
    80002408:	fe843783          	ld	a5,-24(s0)
    8000240c:	439c                	lw	a5,0(a5)
    8000240e:	2785                	addiw	a5,a5,1
    80002410:	0007871b          	sext.w	a4,a5
    80002414:	fe843783          	ld	a5,-24(s0)
    80002418:	c398                	sw	a4,0(a5)
}
    8000241a:	0001                	nop
    8000241c:	70a2                	ld	ra,40(sp)
    8000241e:	7402                	ld	s0,32(sp)
    80002420:	6145                	addi	sp,sp,48
    80002422:	8082                	ret

0000000080002424 <fdt_print_prop>:

static void fdt_print_prop(const struct fdt_scan_prop *prop, void *extra)
{
    80002424:	715d                	addi	sp,sp,-80
    80002426:	e486                	sd	ra,72(sp)
    80002428:	e0a2                	sd	s0,64(sp)
    8000242a:	0880                	addi	s0,sp,80
    8000242c:	faa43c23          	sd	a0,-72(s0)
    80002430:	fab43823          	sd	a1,-80(s0)
  struct fdt_print_info *info = (struct fdt_print_info *)extra;
    80002434:	fb043783          	ld	a5,-80(s0)
    80002438:	fcf43823          	sd	a5,-48(s0)
  int asstring = 1;
    8000243c:	4785                	li	a5,1
    8000243e:	fef42623          	sw	a5,-20(s0)
  char *char_data = (char *)(prop->value);
    80002442:	fb843783          	ld	a5,-72(s0)
    80002446:	6b9c                	ld	a5,16(a5)
    80002448:	fcf43423          	sd	a5,-56(s0)

  fdt_print_printm(info, "%s", prop->name);
    8000244c:	fb843783          	ld	a5,-72(s0)
    80002450:	679c                	ld	a5,8(a5)
    80002452:	863e                	mv	a2,a5
    80002454:	0000a597          	auipc	a1,0xa
    80002458:	77458593          	addi	a1,a1,1908 # 8000cbc8 <logo+0x808>
    8000245c:	fd043503          	ld	a0,-48(s0)
    80002460:	eabff0ef          	jal	ra,8000230a <fdt_print_printm>

  if (prop->len == 0) {
    80002464:	fb843783          	ld	a5,-72(s0)
    80002468:	4f9c                	lw	a5,24(a5)
    8000246a:	eb81                	bnez	a5,8000247a <fdt_print_prop+0x56>
    printm(";\r\n");
    8000246c:	0000a517          	auipc	a0,0xa
    80002470:	76450513          	addi	a0,a0,1892 # 8000cbd0 <logo+0x810>
    80002474:	3b8000ef          	jal	ra,8000282c <printm>
    return;
    80002478:	aa85                	j	800025e8 <fdt_print_prop+0x1c4>
  } else {
    printm(" = ");
    8000247a:	0000a517          	auipc	a0,0xa
    8000247e:	75e50513          	addi	a0,a0,1886 # 8000cbd8 <logo+0x818>
    80002482:	3aa000ef          	jal	ra,8000282c <printm>
  }

  /* It appears that dtc uses a hueristic to detect strings so I'm using a
   * similar one here. */
  for (int i = 0; i < prop->len; ++i) {
    80002486:	fe042423          	sw	zero,-24(s0)
    8000248a:	a8a1                	j	800024e2 <fdt_print_prop+0xbe>
    if (!isstring(char_data[i]))
    8000248c:	fe842783          	lw	a5,-24(s0)
    80002490:	fc843703          	ld	a4,-56(s0)
    80002494:	97ba                	add	a5,a5,a4
    80002496:	0007c783          	lbu	a5,0(a5)
    8000249a:	853e                	mv	a0,a5
    8000249c:	978fe0ef          	jal	ra,80000614 <isstring>
    800024a0:	87aa                	mv	a5,a0
    800024a2:	e399                	bnez	a5,800024a8 <fdt_print_prop+0x84>
      asstring = 0;
    800024a4:	fe042623          	sw	zero,-20(s0)
    if (i > 0 && char_data[i] == '\0' && char_data[i-1] == '\0')
    800024a8:	fe842783          	lw	a5,-24(s0)
    800024ac:	2781                	sext.w	a5,a5
    800024ae:	02f05563          	blez	a5,800024d8 <fdt_print_prop+0xb4>
    800024b2:	fe842783          	lw	a5,-24(s0)
    800024b6:	fc843703          	ld	a4,-56(s0)
    800024ba:	97ba                	add	a5,a5,a4
    800024bc:	0007c783          	lbu	a5,0(a5)
    800024c0:	ef81                	bnez	a5,800024d8 <fdt_print_prop+0xb4>
    800024c2:	fe842783          	lw	a5,-24(s0)
    800024c6:	17fd                	addi	a5,a5,-1
    800024c8:	fc843703          	ld	a4,-56(s0)
    800024cc:	97ba                	add	a5,a5,a4
    800024ce:	0007c783          	lbu	a5,0(a5)
    800024d2:	e399                	bnez	a5,800024d8 <fdt_print_prop+0xb4>
      asstring = 0;
    800024d4:	fe042623          	sw	zero,-20(s0)
  for (int i = 0; i < prop->len; ++i) {
    800024d8:	fe842783          	lw	a5,-24(s0)
    800024dc:	2785                	addiw	a5,a5,1
    800024de:	fef42423          	sw	a5,-24(s0)
    800024e2:	fb843783          	ld	a5,-72(s0)
    800024e6:	4f98                	lw	a4,24(a5)
    800024e8:	fe842783          	lw	a5,-24(s0)
    800024ec:	2781                	sext.w	a5,a5
    800024ee:	f8e7cfe3          	blt	a5,a4,8000248c <fdt_print_prop+0x68>
  }

  if (asstring) {
    800024f2:	fec42783          	lw	a5,-20(s0)
    800024f6:	2781                	sext.w	a5,a5
    800024f8:	c3ad                	beqz	a5,8000255a <fdt_print_prop+0x136>
    for (size_t i = 0; i < prop->len; i += strlen(char_data + i) + 1) {
    800024fa:	fe043023          	sd	zero,-32(s0)
    800024fe:	a0a9                	j	80002548 <fdt_print_prop+0x124>
      if (i != 0)
    80002500:	fe043783          	ld	a5,-32(s0)
    80002504:	c799                	beqz	a5,80002512 <fdt_print_prop+0xee>
        printm(", ");
    80002506:	0000a517          	auipc	a0,0xa
    8000250a:	6da50513          	addi	a0,a0,1754 # 8000cbe0 <logo+0x820>
    8000250e:	31e000ef          	jal	ra,8000282c <printm>
      printm("\"%s\"", char_data + i);
    80002512:	fc843703          	ld	a4,-56(s0)
    80002516:	fe043783          	ld	a5,-32(s0)
    8000251a:	97ba                	add	a5,a5,a4
    8000251c:	85be                	mv	a1,a5
    8000251e:	0000a517          	auipc	a0,0xa
    80002522:	6ca50513          	addi	a0,a0,1738 # 8000cbe8 <logo+0x828>
    80002526:	306000ef          	jal	ra,8000282c <printm>
    for (size_t i = 0; i < prop->len; i += strlen(char_data + i) + 1) {
    8000252a:	fc843703          	ld	a4,-56(s0)
    8000252e:	fe043783          	ld	a5,-32(s0)
    80002532:	97ba                	add	a5,a5,a4
    80002534:	853e                	mv	a0,a5
    80002536:	493090ef          	jal	ra,8000c1c8 <strlen>
    8000253a:	872a                	mv	a4,a0
    8000253c:	fe043783          	ld	a5,-32(s0)
    80002540:	97ba                	add	a5,a5,a4
    80002542:	0785                	addi	a5,a5,1
    80002544:	fef43023          	sd	a5,-32(s0)
    80002548:	fb843783          	ld	a5,-72(s0)
    8000254c:	4f9c                	lw	a5,24(a5)
    8000254e:	873e                	mv	a4,a5
    80002550:	fe043783          	ld	a5,-32(s0)
    80002554:	fae7e6e3          	bltu	a5,a4,80002500 <fdt_print_prop+0xdc>
    80002558:	a051                	j	800025dc <fdt_print_prop+0x1b8>
    }
  } else {
    printm("<");
    8000255a:	0000a517          	auipc	a0,0xa
    8000255e:	69650513          	addi	a0,a0,1686 # 8000cbf0 <logo+0x830>
    80002562:	2ca000ef          	jal	ra,8000282c <printm>
    for (size_t i = 0; i < prop->len/4; ++i) {
    80002566:	fc043c23          	sd	zero,-40(s0)
    8000256a:	a099                	j	800025b0 <fdt_print_prop+0x18c>
      if (i != 0)
    8000256c:	fd843783          	ld	a5,-40(s0)
    80002570:	c799                	beqz	a5,8000257e <fdt_print_prop+0x15a>
        printm(" ");
    80002572:	0000a517          	auipc	a0,0xa
    80002576:	68650513          	addi	a0,a0,1670 # 8000cbf8 <logo+0x838>
    8000257a:	2b2000ef          	jal	ra,8000282c <printm>
      printm("0x%08x", bswap(prop->value[i]));
    8000257e:	fb843783          	ld	a5,-72(s0)
    80002582:	6b98                	ld	a4,16(a5)
    80002584:	fd843783          	ld	a5,-40(s0)
    80002588:	078a                	slli	a5,a5,0x2
    8000258a:	97ba                	add	a5,a5,a4
    8000258c:	439c                	lw	a5,0(a5)
    8000258e:	853e                	mv	a0,a5
    80002590:	822fe0ef          	jal	ra,800005b2 <bswap>
    80002594:	87aa                	mv	a5,a0
    80002596:	2781                	sext.w	a5,a5
    80002598:	85be                	mv	a1,a5
    8000259a:	0000a517          	auipc	a0,0xa
    8000259e:	66650513          	addi	a0,a0,1638 # 8000cc00 <logo+0x840>
    800025a2:	28a000ef          	jal	ra,8000282c <printm>
    for (size_t i = 0; i < prop->len/4; ++i) {
    800025a6:	fd843783          	ld	a5,-40(s0)
    800025aa:	0785                	addi	a5,a5,1
    800025ac:	fcf43c23          	sd	a5,-40(s0)
    800025b0:	fb843783          	ld	a5,-72(s0)
    800025b4:	4f9c                	lw	a5,24(a5)
    800025b6:	41f7d71b          	sraiw	a4,a5,0x1f
    800025ba:	01e7571b          	srliw	a4,a4,0x1e
    800025be:	9fb9                	addw	a5,a5,a4
    800025c0:	4027d79b          	sraiw	a5,a5,0x2
    800025c4:	2781                	sext.w	a5,a5
    800025c6:	873e                	mv	a4,a5
    800025c8:	fd843783          	ld	a5,-40(s0)
    800025cc:	fae7e0e3          	bltu	a5,a4,8000256c <fdt_print_prop+0x148>
    }
    printm(">");
    800025d0:	0000a517          	auipc	a0,0xa
    800025d4:	63850513          	addi	a0,a0,1592 # 8000cc08 <logo+0x848>
    800025d8:	254000ef          	jal	ra,8000282c <printm>
  }

  printm(";\r\n");
    800025dc:	0000a517          	auipc	a0,0xa
    800025e0:	5f450513          	addi	a0,a0,1524 # 8000cbd0 <logo+0x810>
    800025e4:	248000ef          	jal	ra,8000282c <printm>
}
    800025e8:	60a6                	ld	ra,72(sp)
    800025ea:	6406                	ld	s0,64(sp)
    800025ec:	6161                	addi	sp,sp,80
    800025ee:	8082                	ret

00000000800025f0 <fdt_print_done>:

static void fdt_print_done(const struct fdt_scan_node *node, void *extra)
{
    800025f0:	7179                	addi	sp,sp,-48
    800025f2:	f422                	sd	s0,40(sp)
    800025f4:	1800                	addi	s0,sp,48
    800025f6:	fca43c23          	sd	a0,-40(s0)
    800025fa:	fcb43823          	sd	a1,-48(s0)
  struct fdt_print_info *info = (struct fdt_print_info *)extra;
    800025fe:	fd043783          	ld	a5,-48(s0)
    80002602:	fef43423          	sd	a5,-24(s0)
}
    80002606:	0001                	nop
    80002608:	7422                	ld	s0,40(sp)
    8000260a:	6145                	addi	sp,sp,48
    8000260c:	8082                	ret

000000008000260e <fdt_print_close>:

static int fdt_print_close(const struct fdt_scan_node *node, void *extra)
{
    8000260e:	7179                	addi	sp,sp,-48
    80002610:	f422                	sd	s0,40(sp)
    80002612:	1800                	addi	s0,sp,48
    80002614:	fca43c23          	sd	a0,-40(s0)
    80002618:	fcb43823          	sd	a1,-48(s0)
  struct fdt_print_info *info = (struct fdt_print_info *)extra;
    8000261c:	fd043783          	ld	a5,-48(s0)
    80002620:	fef43423          	sd	a5,-24(s0)
  return 0;
    80002624:	4781                	li	a5,0
}
    80002626:	853e                	mv	a0,a5
    80002628:	7422                	ld	s0,40(sp)
    8000262a:	6145                	addi	sp,sp,48
    8000262c:	8082                	ret

000000008000262e <fdt_print>:

void fdt_print(uintptr_t fdt)
{
    8000262e:	714d                	addi	sp,sp,-336
    80002630:	e686                	sd	ra,328(sp)
    80002632:	e2a2                	sd	s0,320(sp)
    80002634:	0a80                	addi	s0,sp,336
    80002636:	eaa43c23          	sd	a0,-328(s0)
  struct fdt_print_info info;
  struct fdt_cb cb;

  info.depth = 0;
    8000263a:	ee042423          	sw	zero,-280(s0)

  memset(&cb, 0, sizeof(cb));
    8000263e:	ec040793          	addi	a5,s0,-320
    80002642:	02800613          	li	a2,40
    80002646:	4581                	li	a1,0
    80002648:	853e                	mv	a0,a5
    8000264a:	2b1090ef          	jal	ra,8000c0fa <memset>
  cb.open = fdt_print_open;
    8000264e:	00000797          	auipc	a5,0x0
    80002652:	d2c78793          	addi	a5,a5,-724 # 8000237a <fdt_print_open>
    80002656:	ecf43023          	sd	a5,-320(s0)
  cb.prop = fdt_print_prop;
    8000265a:	00000797          	auipc	a5,0x0
    8000265e:	dca78793          	addi	a5,a5,-566 # 80002424 <fdt_print_prop>
    80002662:	ecf43423          	sd	a5,-312(s0)
  cb.done = fdt_print_done;
    80002666:	00000797          	auipc	a5,0x0
    8000266a:	f8a78793          	addi	a5,a5,-118 # 800025f0 <fdt_print_done>
    8000266e:	ecf43823          	sd	a5,-304(s0)
  cb.close = fdt_print_close;
    80002672:	00000797          	auipc	a5,0x0
    80002676:	f9c78793          	addi	a5,a5,-100 # 8000260e <fdt_print_close>
    8000267a:	ecf43c23          	sd	a5,-296(s0)
  cb.extra = &info;
    8000267e:	ee840793          	addi	a5,s0,-280
    80002682:	eef43023          	sd	a5,-288(s0)

  fdt_scan(fdt, &cb);
    80002686:	ec040793          	addi	a5,s0,-320
    8000268a:	85be                	mv	a1,a5
    8000268c:	eb843503          	ld	a0,-328(s0)
    80002690:	b36fe0ef          	jal	ra,800009c6 <fdt_scan>

  while (info.depth > 0) {
    80002694:	a005                	j	800026b4 <fdt_print+0x86>
    info.depth--;
    80002696:	ee842783          	lw	a5,-280(s0)
    8000269a:	37fd                	addiw	a5,a5,-1
    8000269c:	2781                	sext.w	a5,a5
    8000269e:	eef42423          	sw	a5,-280(s0)
    fdt_print_printm(&info, "}\r\n");
    800026a2:	ee840793          	addi	a5,s0,-280
    800026a6:	0000a597          	auipc	a1,0xa
    800026aa:	51258593          	addi	a1,a1,1298 # 8000cbb8 <logo+0x7f8>
    800026ae:	853e                	mv	a0,a5
    800026b0:	c5bff0ef          	jal	ra,8000230a <fdt_print_printm>
  while (info.depth > 0) {
    800026b4:	ee842783          	lw	a5,-280(s0)
    800026b8:	fcf04fe3          	bgtz	a5,80002696 <fdt_print+0x68>
  }
}
    800026bc:	0001                	nop
    800026be:	60b6                	ld	ra,328(sp)
    800026c0:	6416                	ld	s0,320(sp)
    800026c2:	6171                	addi	sp,sp,336
    800026c4:	8082                	ret

00000000800026c6 <load_uintptr_t>:
DECLARE_UNPRIVILEGED_STORE_FUNCTION(uint32_t, sw)
#if __riscv_xlen == 64
DECLARE_UNPRIVILEGED_LOAD_FUNCTION(uint32_t, lwu)
DECLARE_UNPRIVILEGED_LOAD_FUNCTION(uint64_t, ld)
DECLARE_UNPRIVILEGED_STORE_FUNCTION(uint64_t, sd)
DECLARE_UNPRIVILEGED_LOAD_FUNCTION(uintptr_t, ld)
    800026c6:	7179                	addi	sp,sp,-48
    800026c8:	f422                	sd	s0,40(sp)
    800026ca:	1800                	addi	s0,sp,48
    800026cc:	fca43c23          	sd	a0,-40(s0)
    800026d0:	fcb43823          	sd	a1,-48(s0)
    800026d4:	000205b7          	lui	a1,0x20
    800026d8:	fd043603          	ld	a2,-48(s0)
    800026dc:	fd843783          	ld	a5,-40(s0)
    800026e0:	3005a6f3          	csrrs	a3,mstatus,a1
    800026e4:	6398                	ld	a4,0(a5)
    800026e6:	30069073          	csrw	mstatus,a3
    800026ea:	87ba                	mv	a5,a4
    800026ec:	fef43423          	sd	a5,-24(s0)
    800026f0:	fe843783          	ld	a5,-24(s0)
    800026f4:	853e                	mv	a0,a5
    800026f6:	7422                	ld	s0,40(sp)
    800026f8:	6145                	addi	sp,sp,48
    800026fa:	8082                	ret

00000000800026fc <bad_trap>:
#include <errno.h>
#include <stdarg.h>
#include <stdio.h>

void __attribute__((noreturn)) bad_trap(uintptr_t* regs, uintptr_t dummy, uintptr_t mepc)
{
    800026fc:	7139                	addi	sp,sp,-64
    800026fe:	fc06                	sd	ra,56(sp)
    80002700:	f822                	sd	s0,48(sp)
    80002702:	0080                	addi	s0,sp,64
    80002704:	fca43c23          	sd	a0,-40(s0)
    80002708:	fcb43823          	sd	a1,-48(s0)
    8000270c:	fcc43423          	sd	a2,-56(s0)
  die("machine mode: unhandlable trap %d @ %p", read_csr(mcause), mepc);
    80002710:	342027f3          	csrr	a5,mcause
    80002714:	fef43423          	sd	a5,-24(s0)
    80002718:	fe843783          	ld	a5,-24(s0)
    8000271c:	fc843703          	ld	a4,-56(s0)
    80002720:	86be                	mv	a3,a5
    80002722:	4659                	li	a2,22
    80002724:	0000a597          	auipc	a1,0xa
    80002728:	4ec58593          	addi	a1,a1,1260 # 8000cc10 <logo+0x850>
    8000272c:	0000a517          	auipc	a0,0xa
    80002730:	4fc50513          	addi	a0,a0,1276 # 8000cc28 <logo+0x868>
    80002734:	0f8000ef          	jal	ra,8000282c <printm>
    80002738:	67c1                	lui	a5,0x10
    8000273a:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7fff0001>
    8000273e:	738000ef          	jal	ra,80002e76 <poweroff>

0000000080002742 <mcall_console_putchar>:
}

static uintptr_t mcall_console_putchar(uint8_t ch)
{
    80002742:	1101                	addi	sp,sp,-32
    80002744:	ec06                	sd	ra,24(sp)
    80002746:	e822                	sd	s0,16(sp)
    80002748:	1000                	addi	s0,sp,32
    8000274a:	87aa                	mv	a5,a0
    8000274c:	fef407a3          	sb	a5,-17(s0)
  if (uart) {
    80002750:	00017797          	auipc	a5,0x17
    80002754:	90078793          	addi	a5,a5,-1792 # 80019050 <uart>
    80002758:	639c                	ld	a5,0(a5)
    8000275a:	c799                	beqz	a5,80002768 <mcall_console_putchar+0x26>
    uart_putchar(ch);
    8000275c:	fef44783          	lbu	a5,-17(s0)
    80002760:	853e                	mv	a0,a5
    80002762:	376010ef          	jal	ra,80003ad8 <uart_putchar>
    80002766:	a0a1                	j	800027ae <mcall_console_putchar+0x6c>
  } else if (uart16550) {
    80002768:	00017797          	auipc	a5,0x17
    8000276c:	8f078793          	addi	a5,a5,-1808 # 80019058 <uart16550>
    80002770:	639c                	ld	a5,0(a5)
    80002772:	c799                	beqz	a5,80002780 <mcall_console_putchar+0x3e>
    uart16550_putchar(ch);
    80002774:	fef44783          	lbu	a5,-17(s0)
    80002778:	853e                	mv	a0,a5
    8000277a:	552010ef          	jal	ra,80003ccc <uart16550_putchar>
    8000277e:	a805                	j	800027ae <mcall_console_putchar+0x6c>
  } else if (uart_litex) {
    80002780:	00017797          	auipc	a5,0x17
    80002784:	8e078793          	addi	a5,a5,-1824 # 80019060 <uart_litex>
    80002788:	639c                	ld	a5,0(a5)
    8000278a:	c799                	beqz	a5,80002798 <mcall_console_putchar+0x56>
    uart_litex_putchar(ch);
    8000278c:	fef44783          	lbu	a5,-17(s0)
    80002790:	853e                	mv	a0,a5
    80002792:	1a7010ef          	jal	ra,80004138 <uart_litex_putchar>
    80002796:	a821                	j	800027ae <mcall_console_putchar+0x6c>
  } else if (htif) {
    80002798:	00017797          	auipc	a5,0x17
    8000279c:	8a878793          	addi	a5,a5,-1880 # 80019040 <htif>
    800027a0:	639c                	ld	a5,0(a5)
    800027a2:	c791                	beqz	a5,800027ae <mcall_console_putchar+0x6c>
    htif_console_putchar(ch);
    800027a4:	fef44783          	lbu	a5,-17(s0)
    800027a8:	853e                	mv	a0,a5
    800027aa:	1aa010ef          	jal	ra,80003954 <htif_console_putchar>
  }
  return 0;
    800027ae:	4781                	li	a5,0
}
    800027b0:	853e                	mv	a0,a5
    800027b2:	60e2                	ld	ra,24(sp)
    800027b4:	6442                	ld	s0,16(sp)
    800027b6:	6105                	addi	sp,sp,32
    800027b8:	8082                	ret

00000000800027ba <putstring>:

void putstring(const char* s)
{
    800027ba:	1101                	addi	sp,sp,-32
    800027bc:	ec06                	sd	ra,24(sp)
    800027be:	e822                	sd	s0,16(sp)
    800027c0:	1000                	addi	s0,sp,32
    800027c2:	fea43423          	sd	a0,-24(s0)
  while (*s)
    800027c6:	a821                	j	800027de <putstring+0x24>
    mcall_console_putchar(*s++);
    800027c8:	fe843783          	ld	a5,-24(s0)
    800027cc:	00178713          	addi	a4,a5,1
    800027d0:	fee43423          	sd	a4,-24(s0)
    800027d4:	0007c783          	lbu	a5,0(a5)
    800027d8:	853e                	mv	a0,a5
    800027da:	f69ff0ef          	jal	ra,80002742 <mcall_console_putchar>
  while (*s)
    800027de:	fe843783          	ld	a5,-24(s0)
    800027e2:	0007c783          	lbu	a5,0(a5)
    800027e6:	f3ed                	bnez	a5,800027c8 <putstring+0xe>
}
    800027e8:	0001                	nop
    800027ea:	60e2                	ld	ra,24(sp)
    800027ec:	6442                	ld	s0,16(sp)
    800027ee:	6105                	addi	sp,sp,32
    800027f0:	8082                	ret

00000000800027f2 <vprintm>:

void vprintm(const char* s, va_list vl)
{
    800027f2:	712d                	addi	sp,sp,-288
    800027f4:	ee06                	sd	ra,280(sp)
    800027f6:	ea22                	sd	s0,272(sp)
    800027f8:	1200                	addi	s0,sp,288
    800027fa:	eea43423          	sd	a0,-280(s0)
    800027fe:	eeb43023          	sd	a1,-288(s0)
  char buf[256];
  vsnprintf(buf, sizeof buf, s, vl);
    80002802:	ef040793          	addi	a5,s0,-272
    80002806:	ee043683          	ld	a3,-288(s0)
    8000280a:	ee843603          	ld	a2,-280(s0)
    8000280e:	10000593          	li	a1,256
    80002812:	853e                	mv	a0,a5
    80002814:	394090ef          	jal	ra,8000bba8 <vsnprintf>
  putstring(buf);
    80002818:	ef040793          	addi	a5,s0,-272
    8000281c:	853e                	mv	a0,a5
    8000281e:	f9dff0ef          	jal	ra,800027ba <putstring>
}
    80002822:	0001                	nop
    80002824:	60f2                	ld	ra,280(sp)
    80002826:	6452                	ld	s0,272(sp)
    80002828:	6115                	addi	sp,sp,288
    8000282a:	8082                	ret

000000008000282c <printm>:

void printm(const char* s, ...)
{
    8000282c:	7159                	addi	sp,sp,-112
    8000282e:	f406                	sd	ra,40(sp)
    80002830:	f022                	sd	s0,32(sp)
    80002832:	1800                	addi	s0,sp,48
    80002834:	fca43c23          	sd	a0,-40(s0)
    80002838:	e40c                	sd	a1,8(s0)
    8000283a:	e810                	sd	a2,16(s0)
    8000283c:	ec14                	sd	a3,24(s0)
    8000283e:	f018                	sd	a4,32(s0)
    80002840:	f41c                	sd	a5,40(s0)
    80002842:	03043823          	sd	a6,48(s0)
    80002846:	03143c23          	sd	a7,56(s0)
  va_list vl;

  va_start(vl, s);
    8000284a:	04040793          	addi	a5,s0,64
    8000284e:	fc878793          	addi	a5,a5,-56
    80002852:	fef43423          	sd	a5,-24(s0)
  vprintm(s, vl);
    80002856:	fe843783          	ld	a5,-24(s0)
    8000285a:	85be                	mv	a1,a5
    8000285c:	fd843503          	ld	a0,-40(s0)
    80002860:	f93ff0ef          	jal	ra,800027f2 <vprintm>
  va_end(vl);
}
    80002864:	0001                	nop
    80002866:	70a2                	ld	ra,40(sp)
    80002868:	7402                	ld	s0,32(sp)
    8000286a:	6165                	addi	sp,sp,112
    8000286c:	8082                	ret

000000008000286e <send_ipi>:

static void send_ipi(uintptr_t recipient, int event)
{
    8000286e:	7139                	addi	sp,sp,-64
    80002870:	fc22                	sd	s0,56(sp)
    80002872:	0080                	addi	s0,sp,64
    80002874:	fca43423          	sd	a0,-56(s0)
    80002878:	87ae                	mv	a5,a1
    8000287a:	fcf42223          	sw	a5,-60(s0)
  if (((disabled_hart_mask >> recipient) & 1)) return;
    8000287e:	00016797          	auipc	a5,0x16
    80002882:	78278793          	addi	a5,a5,1922 # 80019000 <disabled_hart_mask>
    80002886:	6398                	ld	a4,0(a5)
    80002888:	fc843783          	ld	a5,-56(s0)
    8000288c:	2781                	sext.w	a5,a5
    8000288e:	40f757b3          	sra	a5,a4,a5
    80002892:	8b85                	andi	a5,a5,1
    80002894:	efb5                	bnez	a5,80002910 <send_ipi+0xa2>
  atomic_or(&OTHER_HLS(recipient)->mipi_pending, event);
    80002896:	87a2                	mv	a5,s0
    80002898:	fef43423          	sd	a5,-24(s0)
    8000289c:	fe843703          	ld	a4,-24(s0)
    800028a0:	6785                	lui	a5,0x1
    800028a2:	973e                	add	a4,a4,a5
    800028a4:	77fd                	lui	a5,0xfffff
    800028a6:	8ff9                	and	a5,a5,a4
    800028a8:	86be                	mv	a3,a5
    800028aa:	f14027f3          	csrr	a5,mhartid
    800028ae:	fef43023          	sd	a5,-32(s0)
    800028b2:	fe043783          	ld	a5,-32(s0)
    800028b6:	fc843703          	ld	a4,-56(s0)
    800028ba:	40f707b3          	sub	a5,a4,a5
    800028be:	07b2                	slli	a5,a5,0xc
    800028c0:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xffffffff7f815000>
    800028c4:	97b6                	add	a5,a5,a3
    800028c6:	07a1                	addi	a5,a5,8
    800028c8:	fc442703          	lw	a4,-60(s0)
    800028cc:	0f50000f          	fence	iorw,ow
    800028d0:	44e7a02f          	amoor.w.aq	zero,a4,(a5)
  mb();
    800028d4:	0ff0000f          	fence
  *OTHER_HLS(recipient)->ipi = 1;
    800028d8:	87a2                	mv	a5,s0
    800028da:	fcf43c23          	sd	a5,-40(s0)
    800028de:	fd843703          	ld	a4,-40(s0)
    800028e2:	6785                	lui	a5,0x1
    800028e4:	973e                	add	a4,a4,a5
    800028e6:	77fd                	lui	a5,0xfffff
    800028e8:	8ff9                	and	a5,a5,a4
    800028ea:	86be                	mv	a3,a5
    800028ec:	f14027f3          	csrr	a5,mhartid
    800028f0:	fcf43823          	sd	a5,-48(s0)
    800028f4:	fd043783          	ld	a5,-48(s0)
    800028f8:	fc843703          	ld	a4,-56(s0)
    800028fc:	40f707b3          	sub	a5,a4,a5
    80002900:	07b2                	slli	a5,a5,0xc
    80002902:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xffffffff7f815000>
    80002906:	97b6                	add	a5,a5,a3
    80002908:	639c                	ld	a5,0(a5)
    8000290a:	4705                	li	a4,1
    8000290c:	c398                	sw	a4,0(a5)
    8000290e:	a011                	j	80002912 <send_ipi+0xa4>
  if (((disabled_hart_mask >> recipient) & 1)) return;
    80002910:	0001                	nop
}
    80002912:	7462                	ld	s0,56(sp)
    80002914:	6121                	addi	sp,sp,64
    80002916:	8082                	ret

0000000080002918 <mcall_console_getchar>:

static uintptr_t mcall_console_getchar()
{
    80002918:	1141                	addi	sp,sp,-16
    8000291a:	e406                	sd	ra,8(sp)
    8000291c:	e022                	sd	s0,0(sp)
    8000291e:	0800                	addi	s0,sp,16
  if (uart) {
    80002920:	00016797          	auipc	a5,0x16
    80002924:	73078793          	addi	a5,a5,1840 # 80019050 <uart>
    80002928:	639c                	ld	a5,0(a5)
    8000292a:	c789                	beqz	a5,80002934 <mcall_console_getchar+0x1c>
    return uart_getchar();
    8000292c:	1e0010ef          	jal	ra,80003b0c <uart_getchar>
    80002930:	87aa                	mv	a5,a0
    80002932:	a081                	j	80002972 <mcall_console_getchar+0x5a>
  } else if (uart16550) {
    80002934:	00016797          	auipc	a5,0x16
    80002938:	72478793          	addi	a5,a5,1828 # 80019058 <uart16550>
    8000293c:	639c                	ld	a5,0(a5)
    8000293e:	c789                	beqz	a5,80002948 <mcall_console_getchar+0x30>
    return uart16550_getchar();
    80002940:	3e4010ef          	jal	ra,80003d24 <uart16550_getchar>
    80002944:	87aa                	mv	a5,a0
    80002946:	a035                	j	80002972 <mcall_console_getchar+0x5a>
  } else if (uart_litex) {
    80002948:	00016797          	auipc	a5,0x16
    8000294c:	71878793          	addi	a5,a5,1816 # 80019060 <uart_litex>
    80002950:	639c                	ld	a5,0(a5)
    80002952:	c789                	beqz	a5,8000295c <mcall_console_getchar+0x44>
    return uart_litex_getchar();
    80002954:	023010ef          	jal	ra,80004176 <uart_litex_getchar>
    80002958:	87aa                	mv	a5,a0
    8000295a:	a821                	j	80002972 <mcall_console_getchar+0x5a>
  } else if (htif) {
    8000295c:	00016797          	auipc	a5,0x16
    80002960:	6e478793          	addi	a5,a5,1764 # 80019040 <htif>
    80002964:	639c                	ld	a5,0(a5)
    80002966:	c789                	beqz	a5,80002970 <mcall_console_getchar+0x58>
    return htif_console_getchar();
    80002968:	6db000ef          	jal	ra,80003842 <htif_console_getchar>
    8000296c:	87aa                	mv	a5,a0
    8000296e:	a011                	j	80002972 <mcall_console_getchar+0x5a>
  } else {
    return (uintptr_t)-1;
    80002970:	57fd                	li	a5,-1
  }
}
    80002972:	853e                	mv	a0,a5
    80002974:	60a2                	ld	ra,8(sp)
    80002976:	6402                	ld	s0,0(sp)
    80002978:	0141                	addi	sp,sp,16
    8000297a:	8082                	ret

000000008000297c <mcall_clear_ipi>:

static uintptr_t mcall_clear_ipi()
{
    8000297c:	1101                	addi	sp,sp,-32
    8000297e:	ec22                	sd	s0,24(sp)
    80002980:	1000                	addi	s0,sp,32
  return clear_csr(mip, MIP_SSIP) & MIP_SSIP;
    80002982:	344177f3          	csrrci	a5,mip,2
    80002986:	fef43423          	sd	a5,-24(s0)
    8000298a:	fe843783          	ld	a5,-24(s0)
    8000298e:	8b89                	andi	a5,a5,2
}
    80002990:	853e                	mv	a0,a5
    80002992:	6462                	ld	s0,24(sp)
    80002994:	6105                	addi	sp,sp,32
    80002996:	8082                	ret

0000000080002998 <mcall_shutdown>:

static uintptr_t mcall_shutdown()
{
    80002998:	1141                	addi	sp,sp,-16
    8000299a:	e406                	sd	ra,8(sp)
    8000299c:	e022                	sd	s0,0(sp)
    8000299e:	0800                	addi	s0,sp,16
  poweroff(0);
    800029a0:	4501                	li	a0,0
    800029a2:	4d4000ef          	jal	ra,80002e76 <poweroff>

00000000800029a6 <mcall_set_timer>:
}

static uintptr_t mcall_set_timer(uint64_t when)
{
    800029a6:	7139                	addi	sp,sp,-64
    800029a8:	fc22                	sd	s0,56(sp)
    800029aa:	0080                	addi	s0,sp,64
    800029ac:	fca43423          	sd	a0,-56(s0)
  *HLS()->timecmp = when;
    800029b0:	87a2                	mv	a5,s0
    800029b2:	fef43423          	sd	a5,-24(s0)
    800029b6:	fe843703          	ld	a4,-24(s0)
    800029ba:	6785                	lui	a5,0x1
    800029bc:	973e                	add	a4,a4,a5
    800029be:	77fd                	lui	a5,0xfffff
    800029c0:	8ff9                	and	a5,a5,a4
    800029c2:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xffffffff7f815000>
    800029c6:	6b9c                	ld	a5,16(a5)
    800029c8:	fc843703          	ld	a4,-56(s0)
    800029cc:	e398                	sd	a4,0(a5)
  clear_csr(mip, MIP_STIP);
    800029ce:	02000793          	li	a5,32
    800029d2:	3447b7f3          	csrrc	a5,mip,a5
    800029d6:	fef43023          	sd	a5,-32(s0)
  set_csr(mie, MIP_MTIP);
    800029da:	08000793          	li	a5,128
    800029de:	3047a7f3          	csrrs	a5,mie,a5
    800029e2:	fcf43c23          	sd	a5,-40(s0)
  return 0;
    800029e6:	4781                	li	a5,0
}
    800029e8:	853e                	mv	a0,a5
    800029ea:	7462                	ld	s0,56(sp)
    800029ec:	6121                	addi	sp,sp,64
    800029ee:	8082                	ret

00000000800029f0 <send_ipi_many>:

static void send_ipi_many(uintptr_t* pmask, int event)
{
    800029f0:	7119                	addi	sp,sp,-128
    800029f2:	fc86                	sd	ra,120(sp)
    800029f4:	f8a2                	sd	s0,112(sp)
    800029f6:	0100                	addi	s0,sp,128
    800029f8:	f8a43423          	sd	a0,-120(s0)
    800029fc:	87ae                	mv	a5,a1
    800029fe:	f8f42223          	sw	a5,-124(s0)
  _Static_assert(MAX_HARTS <= 8 * sizeof(*pmask), "# harts > uintptr_t bits");
  uintptr_t mask = hart_mask;
    80002a02:	00016797          	auipc	a5,0x16
    80002a06:	60678793          	addi	a5,a5,1542 # 80019008 <hart_mask>
    80002a0a:	639c                	ld	a5,0(a5)
    80002a0c:	fef43423          	sd	a5,-24(s0)
  if (pmask)
    80002a10:	f8843783          	ld	a5,-120(s0)
    80002a14:	c395                	beqz	a5,80002a38 <send_ipi_many+0x48>
    mask &= load_uintptr_t(pmask, read_csr(mepc));
    80002a16:	341027f3          	csrr	a5,mepc
    80002a1a:	faf43c23          	sd	a5,-72(s0)
    80002a1e:	fb843783          	ld	a5,-72(s0)
    80002a22:	85be                	mv	a1,a5
    80002a24:	f8843503          	ld	a0,-120(s0)
    80002a28:	c9fff0ef          	jal	ra,800026c6 <load_uintptr_t>
    80002a2c:	872a                	mv	a4,a0
    80002a2e:	fe843783          	ld	a5,-24(s0)
    80002a32:	8ff9                	and	a5,a5,a4
    80002a34:	fef43423          	sd	a5,-24(s0)

  // send IPIs to everyone
  for (uintptr_t i = 0, m = mask; m; i++, m >>= 1)
    80002a38:	fe043023          	sd	zero,-32(s0)
    80002a3c:	fe843783          	ld	a5,-24(s0)
    80002a40:	fcf43c23          	sd	a5,-40(s0)
    80002a44:	a035                	j	80002a70 <send_ipi_many+0x80>
    if (m & 1)
    80002a46:	fd843783          	ld	a5,-40(s0)
    80002a4a:	8b85                	andi	a5,a5,1
    80002a4c:	cb81                	beqz	a5,80002a5c <send_ipi_many+0x6c>
      send_ipi(i, event);
    80002a4e:	f8442783          	lw	a5,-124(s0)
    80002a52:	85be                	mv	a1,a5
    80002a54:	fe043503          	ld	a0,-32(s0)
    80002a58:	e17ff0ef          	jal	ra,8000286e <send_ipi>
  for (uintptr_t i = 0, m = mask; m; i++, m >>= 1)
    80002a5c:	fe043783          	ld	a5,-32(s0)
    80002a60:	0785                	addi	a5,a5,1
    80002a62:	fef43023          	sd	a5,-32(s0)
    80002a66:	fd843783          	ld	a5,-40(s0)
    80002a6a:	8385                	srli	a5,a5,0x1
    80002a6c:	fcf43c23          	sd	a5,-40(s0)
    80002a70:	fd843783          	ld	a5,-40(s0)
    80002a74:	fbe9                	bnez	a5,80002a46 <send_ipi_many+0x56>

  if (event == IPI_SOFT)
    80002a76:	f8442783          	lw	a5,-124(s0)
    80002a7a:	0007871b          	sext.w	a4,a5
    80002a7e:	4785                	li	a5,1
    80002a80:	0cf70763          	beq	a4,a5,80002b4e <send_ipi_many+0x15e>
    return;

  // wait until all events have been handled.
  // prevent deadlock by consuming incoming IPIs.
  uint32_t incoming_ipi = 0;
    80002a84:	fc042a23          	sw	zero,-44(s0)
  for (uintptr_t i = 0, m = mask; m; i++, m >>= 1)
    80002a88:	fc043423          	sd	zero,-56(s0)
    80002a8c:	fe843783          	ld	a5,-24(s0)
    80002a90:	fcf43023          	sd	a5,-64(s0)
    80002a94:	a061                	j	80002b1c <send_ipi_many+0x12c>
    if (m & 1)
    80002a96:	fc043783          	ld	a5,-64(s0)
    80002a9a:	8b85                	andi	a5,a5,1
    80002a9c:	c7b5                	beqz	a5,80002b08 <send_ipi_many+0x118>
      while (*OTHER_HLS(i)->ipi)
    80002a9e:	a80d                	j	80002ad0 <send_ipi_many+0xe0>
        incoming_ipi |= atomic_swap(HLS()->ipi, 0);
    80002aa0:	87a2                	mv	a5,s0
    80002aa2:	faf43023          	sd	a5,-96(s0)
    80002aa6:	fa043703          	ld	a4,-96(s0)
    80002aaa:	6785                	lui	a5,0x1
    80002aac:	973e                	add	a4,a4,a5
    80002aae:	77fd                	lui	a5,0xfffff
    80002ab0:	8ff9                	and	a5,a5,a4
    80002ab2:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xffffffff7f815000>
    80002ab6:	639c                	ld	a5,0(a5)
    80002ab8:	4701                	li	a4,0
    80002aba:	0ce7a72f          	amoswap.w.aq	a4,a4,(a5)
    80002abe:	86ba                	mv	a3,a4
    80002ac0:	0006879b          	sext.w	a5,a3
    80002ac4:	873e                	mv	a4,a5
    80002ac6:	fd442783          	lw	a5,-44(s0)
    80002aca:	8fd9                	or	a5,a5,a4
    80002acc:	fcf42a23          	sw	a5,-44(s0)
      while (*OTHER_HLS(i)->ipi)
    80002ad0:	87a2                	mv	a5,s0
    80002ad2:	faf43823          	sd	a5,-80(s0)
    80002ad6:	fb043703          	ld	a4,-80(s0)
    80002ada:	6785                	lui	a5,0x1
    80002adc:	973e                	add	a4,a4,a5
    80002ade:	77fd                	lui	a5,0xfffff
    80002ae0:	8ff9                	and	a5,a5,a4
    80002ae2:	86be                	mv	a3,a5
    80002ae4:	f14027f3          	csrr	a5,mhartid
    80002ae8:	faf43423          	sd	a5,-88(s0)
    80002aec:	fa843783          	ld	a5,-88(s0)
    80002af0:	fc843703          	ld	a4,-56(s0)
    80002af4:	40f707b3          	sub	a5,a4,a5
    80002af8:	07b2                	slli	a5,a5,0xc
    80002afa:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xffffffff7f815000>
    80002afe:	97b6                	add	a5,a5,a3
    80002b00:	639c                	ld	a5,0(a5)
    80002b02:	439c                	lw	a5,0(a5)
    80002b04:	2781                	sext.w	a5,a5
    80002b06:	ffc9                	bnez	a5,80002aa0 <send_ipi_many+0xb0>
  for (uintptr_t i = 0, m = mask; m; i++, m >>= 1)
    80002b08:	fc843783          	ld	a5,-56(s0)
    80002b0c:	0785                	addi	a5,a5,1
    80002b0e:	fcf43423          	sd	a5,-56(s0)
    80002b12:	fc043783          	ld	a5,-64(s0)
    80002b16:	8385                	srli	a5,a5,0x1
    80002b18:	fcf43023          	sd	a5,-64(s0)
    80002b1c:	fc043783          	ld	a5,-64(s0)
    80002b20:	fbbd                	bnez	a5,80002a96 <send_ipi_many+0xa6>

  // if we got an IPI, restore it; it will be taken after returning
  if (incoming_ipi) {
    80002b22:	fd442783          	lw	a5,-44(s0)
    80002b26:	2781                	sext.w	a5,a5
    80002b28:	c785                	beqz	a5,80002b50 <send_ipi_many+0x160>
    *HLS()->ipi = incoming_ipi;
    80002b2a:	87a2                	mv	a5,s0
    80002b2c:	f8f43c23          	sd	a5,-104(s0)
    80002b30:	f9843703          	ld	a4,-104(s0)
    80002b34:	6785                	lui	a5,0x1
    80002b36:	973e                	add	a4,a4,a5
    80002b38:	77fd                	lui	a5,0xfffff
    80002b3a:	8ff9                	and	a5,a5,a4
    80002b3c:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xffffffff7f815000>
    80002b40:	639c                	ld	a5,0(a5)
    80002b42:	fd442703          	lw	a4,-44(s0)
    80002b46:	c398                	sw	a4,0(a5)
    mb();
    80002b48:	0ff0000f          	fence
    80002b4c:	a011                	j	80002b50 <send_ipi_many+0x160>
    return;
    80002b4e:	0001                	nop
  }
}
    80002b50:	70e6                	ld	ra,120(sp)
    80002b52:	7446                	ld	s0,112(sp)
    80002b54:	6109                	addi	sp,sp,128
    80002b56:	8082                	ret

0000000080002b58 <mcall_trap>:

void mcall_trap(uintptr_t* regs, uintptr_t mcause, uintptr_t mepc)
{
    80002b58:	711d                	addi	sp,sp,-96
    80002b5a:	ec86                	sd	ra,88(sp)
    80002b5c:	e8a2                	sd	s0,80(sp)
    80002b5e:	1080                	addi	s0,sp,96
    80002b60:	faa43c23          	sd	a0,-72(s0)
    80002b64:	fab43823          	sd	a1,-80(s0)
    80002b68:	fac43423          	sd	a2,-88(s0)
  write_csr(mepc, mepc + 4);
    80002b6c:	fa843783          	ld	a5,-88(s0)
    80002b70:	0791                	addi	a5,a5,4
    80002b72:	34179073          	csrw	mepc,a5

  uintptr_t n = regs[17], arg0 = regs[10], arg1 = regs[11], retval, ipi_type;
    80002b76:	fb843783          	ld	a5,-72(s0)
    80002b7a:	67dc                	ld	a5,136(a5)
    80002b7c:	fcf43c23          	sd	a5,-40(s0)
    80002b80:	fb843783          	ld	a5,-72(s0)
    80002b84:	6bbc                	ld	a5,80(a5)
    80002b86:	fcf43823          	sd	a5,-48(s0)
    80002b8a:	fb843783          	ld	a5,-72(s0)
    80002b8e:	6fbc                	ld	a5,88(a5)
    80002b90:	fcf43423          	sd	a5,-56(s0)

  switch (n)
    80002b94:	fd843703          	ld	a4,-40(s0)
    80002b98:	47a1                	li	a5,8
    80002b9a:	08e7eb63          	bltu	a5,a4,80002c30 <mcall_trap+0xd8>
    80002b9e:	fd843783          	ld	a5,-40(s0)
    80002ba2:	00279713          	slli	a4,a5,0x2
    80002ba6:	0000a797          	auipc	a5,0xa
    80002baa:	0b278793          	addi	a5,a5,178 # 8000cc58 <logo+0x898>
    80002bae:	97ba                	add	a5,a5,a4
    80002bb0:	439c                	lw	a5,0(a5)
    80002bb2:	0007871b          	sext.w	a4,a5
    80002bb6:	0000a797          	auipc	a5,0xa
    80002bba:	0a278793          	addi	a5,a5,162 # 8000cc58 <logo+0x898>
    80002bbe:	97ba                	add	a5,a5,a4
    80002bc0:	8782                	jr	a5
  {
    case SBI_CONSOLE_PUTCHAR:
      retval = mcall_console_putchar(arg0);
    80002bc2:	fd043783          	ld	a5,-48(s0)
    80002bc6:	0ff7f793          	andi	a5,a5,255
    80002bca:	853e                	mv	a0,a5
    80002bcc:	b77ff0ef          	jal	ra,80002742 <mcall_console_putchar>
    80002bd0:	fea43423          	sd	a0,-24(s0)
      break;
    80002bd4:	a09d                	j	80002c3a <mcall_trap+0xe2>
    case SBI_CONSOLE_GETCHAR:
      retval = mcall_console_getchar();
    80002bd6:	d43ff0ef          	jal	ra,80002918 <mcall_console_getchar>
    80002bda:	fea43423          	sd	a0,-24(s0)
      break;
    80002bde:	a8b1                	j	80002c3a <mcall_trap+0xe2>
    case SBI_SEND_IPI:
      ipi_type = IPI_SOFT;
    80002be0:	4785                	li	a5,1
    80002be2:	fef43023          	sd	a5,-32(s0)
      goto send_ipi;
    80002be6:	a801                	j	80002bf6 <mcall_trap+0x9e>
    case SBI_REMOTE_SFENCE_VMA:
    case SBI_REMOTE_SFENCE_VMA_ASID:
      ipi_type = IPI_SFENCE_VMA;
    80002be8:	4791                	li	a5,4
    80002bea:	fef43023          	sd	a5,-32(s0)
      goto send_ipi;
    80002bee:	a021                	j	80002bf6 <mcall_trap+0x9e>
    case SBI_REMOTE_FENCE_I:
      ipi_type = IPI_FENCE_I;
    80002bf0:	4789                	li	a5,2
    80002bf2:	fef43023          	sd	a5,-32(s0)
send_ipi:
      send_ipi_many((uintptr_t*)arg0, ipi_type);
    80002bf6:	fd043783          	ld	a5,-48(s0)
    80002bfa:	fe043703          	ld	a4,-32(s0)
    80002bfe:	2701                	sext.w	a4,a4
    80002c00:	85ba                	mv	a1,a4
    80002c02:	853e                	mv	a0,a5
    80002c04:	dedff0ef          	jal	ra,800029f0 <send_ipi_many>
      retval = 0;
    80002c08:	fe043423          	sd	zero,-24(s0)
      break;
    80002c0c:	a03d                	j	80002c3a <mcall_trap+0xe2>
    case SBI_CLEAR_IPI:
      retval = mcall_clear_ipi();
    80002c0e:	d6fff0ef          	jal	ra,8000297c <mcall_clear_ipi>
    80002c12:	fea43423          	sd	a0,-24(s0)
      break;
    80002c16:	a015                	j	80002c3a <mcall_trap+0xe2>
    case SBI_SHUTDOWN:
      retval = mcall_shutdown();
    80002c18:	d81ff0ef          	jal	ra,80002998 <mcall_shutdown>
    80002c1c:	fea43423          	sd	a0,-24(s0)
      break;
    80002c20:	a829                	j	80002c3a <mcall_trap+0xe2>
    case SBI_SET_TIMER:
#if __riscv_xlen == 32
      retval = mcall_set_timer(arg0 + ((uint64_t)arg1 << 32));
#else
      retval = mcall_set_timer(arg0);
    80002c22:	fd043503          	ld	a0,-48(s0)
    80002c26:	d81ff0ef          	jal	ra,800029a6 <mcall_set_timer>
    80002c2a:	fea43423          	sd	a0,-24(s0)
#endif
      break;
    80002c2e:	a031                	j	80002c3a <mcall_trap+0xe2>
    default:
      retval = -ENOSYS;
    80002c30:	fda00793          	li	a5,-38
    80002c34:	fef43423          	sd	a5,-24(s0)
      break;
    80002c38:	0001                	nop
  }
  regs[10] = retval;
    80002c3a:	fb843783          	ld	a5,-72(s0)
    80002c3e:	05078793          	addi	a5,a5,80
    80002c42:	fe843703          	ld	a4,-24(s0)
    80002c46:	e398                	sd	a4,0(a5)
}
    80002c48:	0001                	nop
    80002c4a:	60e6                	ld	ra,88(sp)
    80002c4c:	6446                	ld	s0,80(sp)
    80002c4e:	6125                	addi	sp,sp,96
    80002c50:	8082                	ret

0000000080002c52 <redirect_trap>:

void redirect_trap(uintptr_t epc, uintptr_t mstatus, uintptr_t badaddr)
{
    80002c52:	715d                	addi	sp,sp,-80
    80002c54:	e486                	sd	ra,72(sp)
    80002c56:	e0a2                	sd	s0,64(sp)
    80002c58:	0880                	addi	s0,sp,80
    80002c5a:	fca43423          	sd	a0,-56(s0)
    80002c5e:	fcb43023          	sd	a1,-64(s0)
    80002c62:	fac43c23          	sd	a2,-72(s0)
  write_csr(stval, badaddr);
    80002c66:	fb843783          	ld	a5,-72(s0)
    80002c6a:	14379073          	csrw	stval,a5
  write_csr(sepc, epc);
    80002c6e:	fc843783          	ld	a5,-56(s0)
    80002c72:	14179073          	csrw	sepc,a5
  write_csr(scause, read_csr(mcause));
    80002c76:	342027f3          	csrr	a5,mcause
    80002c7a:	fef43423          	sd	a5,-24(s0)
    80002c7e:	fe843783          	ld	a5,-24(s0)
    80002c82:	14279073          	csrw	scause,a5
  write_csr(mepc, read_csr(stvec));
    80002c86:	105027f3          	csrr	a5,stvec
    80002c8a:	fef43023          	sd	a5,-32(s0)
    80002c8e:	fe043783          	ld	a5,-32(s0)
    80002c92:	34179073          	csrw	mepc,a5

  uintptr_t new_mstatus = mstatus & ~(MSTATUS_SPP | MSTATUS_SPIE | MSTATUS_SIE);
    80002c96:	fc043783          	ld	a5,-64(s0)
    80002c9a:	edd7f793          	andi	a5,a5,-291
    80002c9e:	fcf43c23          	sd	a5,-40(s0)
  uintptr_t mpp_s = MSTATUS_MPP & (MSTATUS_MPP >> 1);
    80002ca2:	6785                	lui	a5,0x1
    80002ca4:	80078793          	addi	a5,a5,-2048 # 800 <MEM_START-0x7ffff800>
    80002ca8:	fcf43823          	sd	a5,-48(s0)
  new_mstatus |= (mstatus * (MSTATUS_SPIE / MSTATUS_SIE)) & MSTATUS_SPIE;
    80002cac:	fc043783          	ld	a5,-64(s0)
    80002cb0:	0792                	slli	a5,a5,0x4
    80002cb2:	0207f793          	andi	a5,a5,32
    80002cb6:	fd843703          	ld	a4,-40(s0)
    80002cba:	8fd9                	or	a5,a5,a4
    80002cbc:	fcf43c23          	sd	a5,-40(s0)
  new_mstatus |= (mstatus / (mpp_s / MSTATUS_SPP)) & MSTATUS_SPP;
    80002cc0:	fd043783          	ld	a5,-48(s0)
    80002cc4:	83a1                	srli	a5,a5,0x8
    80002cc6:	fc043703          	ld	a4,-64(s0)
    80002cca:	02f757b3          	divu	a5,a4,a5
    80002cce:	1007f793          	andi	a5,a5,256
    80002cd2:	fd843703          	ld	a4,-40(s0)
    80002cd6:	8fd9                	or	a5,a5,a4
    80002cd8:	fcf43c23          	sd	a5,-40(s0)
  new_mstatus |= mpp_s;
    80002cdc:	fd843703          	ld	a4,-40(s0)
    80002ce0:	fd043783          	ld	a5,-48(s0)
    80002ce4:	8fd9                	or	a5,a5,a4
    80002ce6:	fcf43c23          	sd	a5,-40(s0)
  write_csr(mstatus, new_mstatus);
    80002cea:	fd843783          	ld	a5,-40(s0)
    80002cee:	30079073          	csrw	mstatus,a5

  extern void __redirect_trap();
  return __redirect_trap();
    80002cf2:	ce6fd0ef          	jal	ra,800001d8 <__redirect_trap>
}
    80002cf6:	60a6                	ld	ra,72(sp)
    80002cf8:	6406                	ld	s0,64(sp)
    80002cfa:	6161                	addi	sp,sp,80
    80002cfc:	8082                	ret

0000000080002cfe <pmp_trap>:

void pmp_trap(uintptr_t* regs, uintptr_t mcause, uintptr_t mepc)
{
    80002cfe:	7139                	addi	sp,sp,-64
    80002d00:	fc06                	sd	ra,56(sp)
    80002d02:	f822                	sd	s0,48(sp)
    80002d04:	0080                	addi	s0,sp,64
    80002d06:	fca43c23          	sd	a0,-40(s0)
    80002d0a:	fcb43823          	sd	a1,-48(s0)
    80002d0e:	fcc43423          	sd	a2,-56(s0)
  redirect_trap(mepc, read_csr(mstatus), read_csr(mtval));
    80002d12:	300027f3          	csrr	a5,mstatus
    80002d16:	fef43423          	sd	a5,-24(s0)
    80002d1a:	fe843703          	ld	a4,-24(s0)
    80002d1e:	343027f3          	csrr	a5,mtval
    80002d22:	fef43023          	sd	a5,-32(s0)
    80002d26:	fe043783          	ld	a5,-32(s0)
    80002d2a:	863e                	mv	a2,a5
    80002d2c:	85ba                	mv	a1,a4
    80002d2e:	fc843503          	ld	a0,-56(s0)
    80002d32:	f21ff0ef          	jal	ra,80002c52 <redirect_trap>
}
    80002d36:	0001                	nop
    80002d38:	70e2                	ld	ra,56(sp)
    80002d3a:	7442                	ld	s0,48(sp)
    80002d3c:	6121                	addi	sp,sp,64
    80002d3e:	8082                	ret

0000000080002d40 <machine_page_fault>:

static void machine_page_fault(uintptr_t* regs, uintptr_t mcause, uintptr_t mepc)
{
    80002d40:	7139                	addi	sp,sp,-64
    80002d42:	fc06                	sd	ra,56(sp)
    80002d44:	f822                	sd	s0,48(sp)
    80002d46:	0080                	addi	s0,sp,64
    80002d48:	fca43c23          	sd	a0,-40(s0)
    80002d4c:	fcb43823          	sd	a1,-48(s0)
    80002d50:	fcc43423          	sd	a2,-56(s0)
  // MPRV=1 iff this trap occurred while emulating an instruction on behalf
  // of a lower privilege level. In that case, a2=epc and a3=mstatus.
  // a1 holds MPRV if emulating a load or store, or MPRV | MXR if loading
  // an instruction from memory.  In the latter case, we should report an
  // instruction fault instead of a load fault.
  if (read_csr(mstatus) & MSTATUS_MPRV) {
    80002d54:	300027f3          	csrr	a5,mstatus
    80002d58:	fef43423          	sd	a5,-24(s0)
    80002d5c:	fe843703          	ld	a4,-24(s0)
    80002d60:	000207b7          	lui	a5,0x20
    80002d64:	8ff9                	and	a5,a5,a4
    80002d66:	cbad                	beqz	a5,80002dd8 <machine_page_fault+0x98>
    if (regs[11] == (MSTATUS_MPRV | MSTATUS_MXR)) {
    80002d68:	fd843783          	ld	a5,-40(s0)
    80002d6c:	05878793          	addi	a5,a5,88 # 20058 <MEM_START-0x7ffdffa8>
    80002d70:	6398                	ld	a4,0(a5)
    80002d72:	000a07b7          	lui	a5,0xa0
    80002d76:	02f71263          	bne	a4,a5,80002d9a <machine_page_fault+0x5a>
      if (mcause == CAUSE_LOAD_PAGE_FAULT)
    80002d7a:	fd043703          	ld	a4,-48(s0)
    80002d7e:	47b5                	li	a5,13
    80002d80:	00f71563          	bne	a4,a5,80002d8a <machine_page_fault+0x4a>
        write_csr(mcause, CAUSE_FETCH_PAGE_FAULT);
    80002d84:	34265073          	csrwi	mcause,12
    80002d88:	a015                	j	80002dac <machine_page_fault+0x6c>
      else if (mcause == CAUSE_LOAD_ACCESS)
    80002d8a:	fd043703          	ld	a4,-48(s0)
    80002d8e:	4795                	li	a5,5
    80002d90:	04f71663          	bne	a4,a5,80002ddc <machine_page_fault+0x9c>
        write_csr(mcause, CAUSE_FETCH_ACCESS);
    80002d94:	3420d073          	csrwi	mcause,1
    80002d98:	a811                	j	80002dac <machine_page_fault+0x6c>
      else
        goto fail;
    } else if (regs[11] != MSTATUS_MPRV) {
    80002d9a:	fd843783          	ld	a5,-40(s0)
    80002d9e:	05878793          	addi	a5,a5,88 # a0058 <MEM_START-0x7ff5ffa8>
    80002da2:	6398                	ld	a4,0(a5)
    80002da4:	000207b7          	lui	a5,0x20
    80002da8:	02f71c63          	bne	a4,a5,80002de0 <machine_page_fault+0xa0>
      goto fail;
    }

    return redirect_trap(regs[12], regs[13], read_csr(mtval));
    80002dac:	fd843783          	ld	a5,-40(s0)
    80002db0:	06078793          	addi	a5,a5,96 # 20060 <MEM_START-0x7ffdffa0>
    80002db4:	6398                	ld	a4,0(a5)
    80002db6:	fd843783          	ld	a5,-40(s0)
    80002dba:	06878793          	addi	a5,a5,104
    80002dbe:	6394                	ld	a3,0(a5)
    80002dc0:	343027f3          	csrr	a5,mtval
    80002dc4:	fef43023          	sd	a5,-32(s0)
    80002dc8:	fe043783          	ld	a5,-32(s0)
    80002dcc:	863e                	mv	a2,a5
    80002dce:	85b6                	mv	a1,a3
    80002dd0:	853a                	mv	a0,a4
    80002dd2:	e81ff0ef          	jal	ra,80002c52 <redirect_trap>
    80002dd6:	a831                	j	80002df2 <machine_page_fault+0xb2>
  }

fail:
    80002dd8:	0001                	nop
    80002dda:	a021                	j	80002de2 <machine_page_fault+0xa2>
        goto fail;
    80002ddc:	0001                	nop
    80002dde:	a011                	j	80002de2 <machine_page_fault+0xa2>
      goto fail;
    80002de0:	0001                	nop
  bad_trap(regs, mcause, mepc);
    80002de2:	fc843603          	ld	a2,-56(s0)
    80002de6:	fd043583          	ld	a1,-48(s0)
    80002dea:	fd843503          	ld	a0,-40(s0)
    80002dee:	90fff0ef          	jal	ra,800026fc <bad_trap>
}
    80002df2:	70e2                	ld	ra,56(sp)
    80002df4:	7442                	ld	s0,48(sp)
    80002df6:	6121                	addi	sp,sp,64
    80002df8:	8082                	ret

0000000080002dfa <trap_from_machine_mode>:

void trap_from_machine_mode(uintptr_t* regs, uintptr_t dummy, uintptr_t mepc)
{
    80002dfa:	7139                	addi	sp,sp,-64
    80002dfc:	fc06                	sd	ra,56(sp)
    80002dfe:	f822                	sd	s0,48(sp)
    80002e00:	0080                	addi	s0,sp,64
    80002e02:	fca43c23          	sd	a0,-40(s0)
    80002e06:	fcb43823          	sd	a1,-48(s0)
    80002e0a:	fcc43423          	sd	a2,-56(s0)
  uintptr_t mcause = read_csr(mcause);
    80002e0e:	342027f3          	csrr	a5,mcause
    80002e12:	fef43423          	sd	a5,-24(s0)
    80002e16:	fe843783          	ld	a5,-24(s0)
    80002e1a:	fef43023          	sd	a5,-32(s0)

  switch (mcause)
    80002e1e:	fe043703          	ld	a4,-32(s0)
    80002e22:	47bd                	li	a5,15
    80002e24:	02e7ed63          	bltu	a5,a4,80002e5e <trap_from_machine_mode+0x64>
    80002e28:	fe043783          	ld	a5,-32(s0)
    80002e2c:	00279713          	slli	a4,a5,0x2
    80002e30:	0000a797          	auipc	a5,0xa
    80002e34:	e4c78793          	addi	a5,a5,-436 # 8000cc7c <logo+0x8bc>
    80002e38:	97ba                	add	a5,a5,a4
    80002e3a:	439c                	lw	a5,0(a5)
    80002e3c:	0007871b          	sext.w	a4,a5
    80002e40:	0000a797          	auipc	a5,0xa
    80002e44:	e3c78793          	addi	a5,a5,-452 # 8000cc7c <logo+0x8bc>
    80002e48:	97ba                	add	a5,a5,a4
    80002e4a:	8782                	jr	a5
    case CAUSE_LOAD_PAGE_FAULT:
    case CAUSE_STORE_PAGE_FAULT:
    case CAUSE_FETCH_ACCESS:
    case CAUSE_LOAD_ACCESS:
    case CAUSE_STORE_ACCESS:
      return machine_page_fault(regs, mcause, mepc);
    80002e4c:	fc843603          	ld	a2,-56(s0)
    80002e50:	fe043583          	ld	a1,-32(s0)
    80002e54:	fd843503          	ld	a0,-40(s0)
    80002e58:	ee9ff0ef          	jal	ra,80002d40 <machine_page_fault>
    80002e5c:	a809                	j	80002e6e <trap_from_machine_mode+0x74>
    default:
      bad_trap(regs, dummy, mepc);
    80002e5e:	fc843603          	ld	a2,-56(s0)
    80002e62:	fd043583          	ld	a1,-48(s0)
    80002e66:	fd843503          	ld	a0,-40(s0)
    80002e6a:	893ff0ef          	jal	ra,800026fc <bad_trap>
  }
}
    80002e6e:	70e2                	ld	ra,56(sp)
    80002e70:	7442                	ld	s0,48(sp)
    80002e72:	6121                	addi	sp,sp,64
    80002e74:	8082                	ret

0000000080002e76 <poweroff>:

void poweroff(uint16_t code)
{
    80002e76:	1101                	addi	sp,sp,-32
    80002e78:	ec06                	sd	ra,24(sp)
    80002e7a:	e822                	sd	s0,16(sp)
    80002e7c:	1000                	addi	s0,sp,32
    80002e7e:	87aa                	mv	a5,a0
    80002e80:	fef41723          	sh	a5,-18(s0)
  printm("Power off\r\n");
    80002e84:	0000a517          	auipc	a0,0xa
    80002e88:	e3c50513          	addi	a0,a0,-452 # 8000ccc0 <logo+0x900>
    80002e8c:	9a1ff0ef          	jal	ra,8000282c <printm>
  finisher_exit(code);
    80002e90:	fee45783          	lhu	a5,-18(s0)
    80002e94:	853e                	mv	a0,a5
    80002e96:	4b6010ef          	jal	ra,8000434c <finisher_exit>
  if (htif) {
    80002e9a:	00016797          	auipc	a5,0x16
    80002e9e:	1a678793          	addi	a5,a5,422 # 80019040 <htif>
    80002ea2:	639c                	ld	a5,0(a5)
    80002ea4:	c399                	beqz	a5,80002eaa <poweroff+0x34>
    htif_poweroff();
    80002ea6:	2ed000ef          	jal	ra,80003992 <htif_poweroff>
  } else {
    send_ipi_many(0, IPI_HALT);
    80002eaa:	45a1                	li	a1,8
    80002eac:	4501                	li	a0,0
    80002eae:	b43ff0ef          	jal	ra,800029f0 <send_ipi_many>
    while (1) { asm volatile ("wfi\n"); }
    80002eb2:	10500073          	wfi
    80002eb6:	bff5                	j	80002eb2 <poweroff+0x3c>

0000000080002eb8 <supports_extension>:
#define read_const_csr(reg) ({ unsigned long __tmp; \
  asm ("csrr %0, " #reg : "=r"(__tmp)); \
  __tmp; })

static inline int supports_extension(char ext)
{
    80002eb8:	7179                	addi	sp,sp,-48
    80002eba:	f422                	sd	s0,40(sp)
    80002ebc:	1800                	addi	s0,sp,48
    80002ebe:	87aa                	mv	a5,a0
    80002ec0:	fcf40fa3          	sb	a5,-33(s0)
  return read_const_csr(misa) & (1 << (ext - 'A'));
    80002ec4:	301027f3          	csrr	a5,misa
    80002ec8:	fef43423          	sd	a5,-24(s0)
    80002ecc:	fe843783          	ld	a5,-24(s0)
    80002ed0:	0007869b          	sext.w	a3,a5
    80002ed4:	fdf44783          	lbu	a5,-33(s0)
    80002ed8:	2781                	sext.w	a5,a5
    80002eda:	fbf7879b          	addiw	a5,a5,-65
    80002ede:	2781                	sext.w	a5,a5
    80002ee0:	4705                	li	a4,1
    80002ee2:	00f717bb          	sllw	a5,a4,a5
    80002ee6:	2781                	sext.w	a5,a5
    80002ee8:	2781                	sext.w	a5,a5
    80002eea:	8736                	mv	a4,a3
    80002eec:	8ff9                	and	a5,a5,a4
    80002eee:	2781                	sext.w	a5,a5
    80002ef0:	2781                	sext.w	a5,a5
}
    80002ef2:	853e                	mv	a0,a5
    80002ef4:	7422                	ld	s0,40(sp)
    80002ef6:	6145                	addi	sp,sp,48
    80002ef8:	8082                	ret

0000000080002efa <mstatus_init>:
size_t plic_ndevs;
void* kernel_start;
void* kernel_end;

static void mstatus_init()
{
    80002efa:	1101                	addi	sp,sp,-32
    80002efc:	ec06                	sd	ra,24(sp)
    80002efe:	e822                	sd	s0,16(sp)
    80002f00:	1000                	addi	s0,sp,32
  uintptr_t mstatus = 0;
    80002f02:	fe043423          	sd	zero,-24(s0)
#endif
  mstatus |= MSTATUS_UBE;
#endif

  // Enable FPU
  if (supports_extension('F'))
    80002f06:	04600513          	li	a0,70
    80002f0a:	fafff0ef          	jal	ra,80002eb8 <supports_extension>
    80002f0e:	87aa                	mv	a5,a0
    80002f10:	c799                	beqz	a5,80002f1e <mstatus_init+0x24>
    mstatus |= MSTATUS_FS;
    80002f12:	fe843703          	ld	a4,-24(s0)
    80002f16:	6799                	lui	a5,0x6
    80002f18:	8fd9                	or	a5,a5,a4
    80002f1a:	fef43423          	sd	a5,-24(s0)

  // Enable vector extension
  if (supports_extension('V'))
    80002f1e:	05600513          	li	a0,86
    80002f22:	f97ff0ef          	jal	ra,80002eb8 <supports_extension>
    80002f26:	87aa                	mv	a5,a0
    80002f28:	c799                	beqz	a5,80002f36 <mstatus_init+0x3c>
    mstatus |= MSTATUS_VS;
    80002f2a:	fe843783          	ld	a5,-24(s0)
    80002f2e:	6007e793          	ori	a5,a5,1536
    80002f32:	fef43423          	sd	a5,-24(s0)

  write_csr(mstatus, mstatus);
    80002f36:	fe843783          	ld	a5,-24(s0)
    80002f3a:	30079073          	csrw	mstatus,a5
#if __riscv_xlen == 32 && __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
  write_csr(0x310, mstatush); /* mstatush is not known to gas */
#endif

  // Enable user/supervisor use of perf counters
  if (supports_extension('S'))
    80002f3e:	05300513          	li	a0,83
    80002f42:	f77ff0ef          	jal	ra,80002eb8 <supports_extension>
    80002f46:	87aa                	mv	a5,a0
    80002f48:	c781                	beqz	a5,80002f50 <mstatus_init+0x56>
    write_csr(scounteren, -1);
    80002f4a:	57fd                	li	a5,-1
    80002f4c:	10679073          	csrw	scounteren,a5
  if (supports_extension('U'))
    80002f50:	05500513          	li	a0,85
    80002f54:	f65ff0ef          	jal	ra,80002eb8 <supports_extension>
    80002f58:	87aa                	mv	a5,a0
    80002f5a:	c781                	beqz	a5,80002f62 <mstatus_init+0x68>
    write_csr(mcounteren, -1);
    80002f5c:	57fd                	li	a5,-1
    80002f5e:	30679073          	csrw	mcounteren,a5

  // Enable software interrupts
  write_csr(mie, MIP_MSIP);
    80002f62:	30445073          	csrwi	mie,8

  // Disable paging
  if (supports_extension('S'))
    80002f66:	05300513          	li	a0,83
    80002f6a:	f4fff0ef          	jal	ra,80002eb8 <supports_extension>
    80002f6e:	87aa                	mv	a5,a0
    80002f70:	c399                	beqz	a5,80002f76 <mstatus_init+0x7c>
    write_csr(satp, 0);
    80002f72:	18005073          	csrwi	satp,0
}
    80002f76:	0001                	nop
    80002f78:	60e2                	ld	ra,24(sp)
    80002f7a:	6442                	ld	s0,16(sp)
    80002f7c:	6105                	addi	sp,sp,32
    80002f7e:	8082                	ret

0000000080002f80 <delegate_traps>:

// send S-mode interrupts and most exceptions straight to S-mode
static void delegate_traps()
{
    80002f80:	7179                	addi	sp,sp,-48
    80002f82:	f406                	sd	ra,40(sp)
    80002f84:	f022                	sd	s0,32(sp)
    80002f86:	1800                	addi	s0,sp,48
  if (!supports_extension('S'))
    80002f88:	05300513          	li	a0,83
    80002f8c:	f2dff0ef          	jal	ra,80002eb8 <supports_extension>
    80002f90:	87aa                	mv	a5,a0
    80002f92:	c3dd                	beqz	a5,80003038 <delegate_traps+0xb8>
    return;

  uintptr_t interrupts = MIP_SSIP | MIP_STIP | MIP_SEIP;
    80002f94:	22200793          	li	a5,546
    80002f98:	fef43423          	sd	a5,-24(s0)
  uintptr_t exceptions =
    80002f9c:	67ad                	lui	a5,0xb
    80002f9e:	10978793          	addi	a5,a5,265 # b109 <MEM_START-0x7fff4ef7>
    80002fa2:	fef43023          	sd	a5,-32(s0)
    (1U << CAUSE_BREAKPOINT) |
    (1U << CAUSE_LOAD_PAGE_FAULT) |
    (1U << CAUSE_STORE_PAGE_FAULT) |
    (1U << CAUSE_USER_ECALL);

  write_csr(mideleg, interrupts);
    80002fa6:	fe843783          	ld	a5,-24(s0)
    80002faa:	30379073          	csrw	mideleg,a5
  write_csr(medeleg, exceptions);
    80002fae:	fe043783          	ld	a5,-32(s0)
    80002fb2:	30279073          	csrw	medeleg,a5
  assert((read_csr(mideleg) & interrupts) == interrupts);
    80002fb6:	303027f3          	csrr	a5,mideleg
    80002fba:	fcf43c23          	sd	a5,-40(s0)
    80002fbe:	fd843703          	ld	a4,-40(s0)
    80002fc2:	fe843783          	ld	a5,-24(s0)
    80002fc6:	8ff9                	and	a5,a5,a4
    80002fc8:	fe843703          	ld	a4,-24(s0)
    80002fcc:	02f70763          	beq	a4,a5,80002ffa <delegate_traps+0x7a>
    80002fd0:	0000a697          	auipc	a3,0xa
    80002fd4:	d0068693          	addi	a3,a3,-768 # 8000ccd0 <logo+0x910>
    80002fd8:	05500613          	li	a2,85
    80002fdc:	0000a597          	auipc	a1,0xa
    80002fe0:	d2458593          	addi	a1,a1,-732 # 8000cd00 <logo+0x940>
    80002fe4:	0000a517          	auipc	a0,0xa
    80002fe8:	d3450513          	addi	a0,a0,-716 # 8000cd18 <logo+0x958>
    80002fec:	841ff0ef          	jal	ra,8000282c <printm>
    80002ff0:	67c1                	lui	a5,0x10
    80002ff2:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7fff0001>
    80002ff6:	e81ff0ef          	jal	ra,80002e76 <poweroff>
  assert(read_csr(medeleg) == exceptions);
    80002ffa:	302027f3          	csrr	a5,medeleg
    80002ffe:	fcf43823          	sd	a5,-48(s0)
    80003002:	fd043703          	ld	a4,-48(s0)
    80003006:	fe043783          	ld	a5,-32(s0)
    8000300a:	02f70863          	beq	a4,a5,8000303a <delegate_traps+0xba>
    8000300e:	0000a697          	auipc	a3,0xa
    80003012:	d2a68693          	addi	a3,a3,-726 # 8000cd38 <logo+0x978>
    80003016:	05600613          	li	a2,86
    8000301a:	0000a597          	auipc	a1,0xa
    8000301e:	ce658593          	addi	a1,a1,-794 # 8000cd00 <logo+0x940>
    80003022:	0000a517          	auipc	a0,0xa
    80003026:	cf650513          	addi	a0,a0,-778 # 8000cd18 <logo+0x958>
    8000302a:	803ff0ef          	jal	ra,8000282c <printm>
    8000302e:	67c1                	lui	a5,0x10
    80003030:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7fff0001>
    80003034:	e43ff0ef          	jal	ra,80002e76 <poweroff>
    return;
    80003038:	0001                	nop
}
    8000303a:	70a2                	ld	ra,40(sp)
    8000303c:	7402                	ld	s0,32(sp)
    8000303e:	6145                	addi	sp,sp,48
    80003040:	8082                	ret

0000000080003042 <fp_init>:

static void fp_init()
{
    80003042:	7179                	addi	sp,sp,-48
    80003044:	f406                	sd	ra,40(sp)
    80003046:	f022                	sd	s0,32(sp)
    80003048:	1800                	addi	s0,sp,48
  if (!supports_extension('F'))
    8000304a:	04600513          	li	a0,70
    8000304e:	e6bff0ef          	jal	ra,80002eb8 <supports_extension>
    80003052:	87aa                	mv	a5,a0
    80003054:	c7c1                	beqz	a5,800030dc <fp_init+0x9a>
    return;

  assert(read_csr(mstatus) & MSTATUS_FS);
    80003056:	300027f3          	csrr	a5,mstatus
    8000305a:	fef43023          	sd	a5,-32(s0)
    8000305e:	fe043703          	ld	a4,-32(s0)
    80003062:	6799                	lui	a5,0x6
    80003064:	8ff9                	and	a5,a5,a4
    80003066:	e795                	bnez	a5,80003092 <fp_init+0x50>
    80003068:	0000a697          	auipc	a3,0xa
    8000306c:	cf068693          	addi	a3,a3,-784 # 8000cd58 <logo+0x998>
    80003070:	05e00613          	li	a2,94
    80003074:	0000a597          	auipc	a1,0xa
    80003078:	c8c58593          	addi	a1,a1,-884 # 8000cd00 <logo+0x940>
    8000307c:	0000a517          	auipc	a0,0xa
    80003080:	c9c50513          	addi	a0,a0,-868 # 8000cd18 <logo+0x958>
    80003084:	fa8ff0ef          	jal	ra,8000282c <printm>
    80003088:	67c1                	lui	a5,0x10
    8000308a:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7fff0001>
    8000308e:	de9ff0ef          	jal	ra,80002e76 <poweroff>

#ifdef __riscv_flen
  for (int i = 0; i < 32; i++)
    80003092:	fe042623          	sw	zero,-20(s0)
    80003096:	a80d                	j	800030c8 <fp_init+0x86>
    init_fp_reg(i);
    80003098:	4501                	li	a0,0
    8000309a:	fec42783          	lw	a5,-20(s0)
    8000309e:	0037979b          	slliw	a5,a5,0x3
    800030a2:	2781                	sext.w	a5,a5
    800030a4:	0ff7f793          	andi	a5,a5,255
    800030a8:	fcf43c23          	sd	a5,-40(s0)
    800030ac:	fd843703          	ld	a4,-40(s0)
    800030b0:	00001797          	auipc	a5,0x1
    800030b4:	97ba                	add	a5,a5,a4
    800030b6:	56e782e7          	jalr	t0,1390(a5) # 8000461e <put_f32_reg>
    800030ba:	fcf43823          	sd	a5,-48(s0)
  for (int i = 0; i < 32; i++)
    800030be:	fec42783          	lw	a5,-20(s0)
    800030c2:	2785                	addiw	a5,a5,1
    800030c4:	fef42623          	sw	a5,-20(s0)
    800030c8:	fec42783          	lw	a5,-20(s0)
    800030cc:	0007871b          	sext.w	a4,a5
    800030d0:	47fd                	li	a5,31
    800030d2:	fce7d3e3          	ble	a4,a5,80003098 <fp_init+0x56>
  write_csr(fcsr, 0);
    800030d6:	00305073          	csrwi	fcsr,0
    800030da:	a011                	j	800030de <fp_init+0x9c>
    return;
    800030dc:	0001                	nop
#else
  uintptr_t fd_mask = (1 << ('F' - 'A')) | (1 << ('D' - 'A'));
  clear_csr(misa, fd_mask);
  assert(!(read_csr(misa) & fd_mask));
#endif
}
    800030de:	70a2                	ld	ra,40(sp)
    800030e0:	7402                	ld	s0,32(sp)
    800030e2:	6145                	addi	sp,sp,48
    800030e4:	8082                	ret

00000000800030e6 <hls_init>:

hls_t* hls_init(uintptr_t id)
{
    800030e6:	7139                	addi	sp,sp,-64
    800030e8:	fc06                	sd	ra,56(sp)
    800030ea:	f822                	sd	s0,48(sp)
    800030ec:	0080                	addi	s0,sp,64
    800030ee:	fca43423          	sd	a0,-56(s0)
  hls_t* hls = OTHER_HLS(id);
    800030f2:	87a2                	mv	a5,s0
    800030f4:	fef43423          	sd	a5,-24(s0)
    800030f8:	fe843703          	ld	a4,-24(s0)
    800030fc:	6785                	lui	a5,0x1
    800030fe:	973e                	add	a4,a4,a5
    80003100:	77fd                	lui	a5,0xfffff
    80003102:	8ff9                	and	a5,a5,a4
    80003104:	86be                	mv	a3,a5
    80003106:	f14027f3          	csrr	a5,mhartid
    8000310a:	fef43023          	sd	a5,-32(s0)
    8000310e:	fe043783          	ld	a5,-32(s0)
    80003112:	fc843703          	ld	a4,-56(s0)
    80003116:	40f707b3          	sub	a5,a4,a5
    8000311a:	07b2                	slli	a5,a5,0xc
    8000311c:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xffffffff7f815000>
    80003120:	97b6                	add	a5,a5,a3
    80003122:	fcf43c23          	sd	a5,-40(s0)
  memset(hls, 0, sizeof(*hls));
    80003126:	03800613          	li	a2,56
    8000312a:	4581                	li	a1,0
    8000312c:	fd843503          	ld	a0,-40(s0)
    80003130:	7cb080ef          	jal	ra,8000c0fa <memset>
  return hls;
    80003134:	fd843783          	ld	a5,-40(s0)
}
    80003138:	853e                	mv	a0,a5
    8000313a:	70e2                	ld	ra,56(sp)
    8000313c:	7442                	ld	s0,48(sp)
    8000313e:	6121                	addi	sp,sp,64
    80003140:	8082                	ret

0000000080003142 <memory_init>:

static void memory_init()
{
    80003142:	1141                	addi	sp,sp,-16
    80003144:	e422                	sd	s0,8(sp)
    80003146:	0800                	addi	s0,sp,16
  mem_size = mem_size / MEGAPAGE_SIZE * MEGAPAGE_SIZE;
    80003148:	00016797          	auipc	a5,0x16
    8000314c:	ed878793          	addi	a5,a5,-296 # 80019020 <mem_size>
    80003150:	6398                	ld	a4,0(a5)
    80003152:	ffe007b7          	lui	a5,0xffe00
    80003156:	8f7d                	and	a4,a4,a5
    80003158:	00016797          	auipc	a5,0x16
    8000315c:	ec878793          	addi	a5,a5,-312 # 80019020 <mem_size>
    80003160:	e398                	sd	a4,0(a5)
}
    80003162:	0001                	nop
    80003164:	6422                	ld	s0,8(sp)
    80003166:	0141                	addi	sp,sp,16
    80003168:	8082                	ret

000000008000316a <hart_init>:

static void hart_init()
{
    8000316a:	1141                	addi	sp,sp,-16
    8000316c:	e406                	sd	ra,8(sp)
    8000316e:	e022                	sd	s0,0(sp)
    80003170:	0800                	addi	s0,sp,16
  mstatus_init();
    80003172:	d89ff0ef          	jal	ra,80002efa <mstatus_init>
  fp_init();
    80003176:	ecdff0ef          	jal	ra,80003042 <fp_init>
#ifndef BBL_BOOT_MACHINE
  delegate_traps();
    8000317a:	e07ff0ef          	jal	ra,80002f80 <delegate_traps>
#endif /* BBL_BOOT_MACHINE */
  setup_pmp();
    8000317e:	426000ef          	jal	ra,800035a4 <setup_pmp>
}
    80003182:	0001                	nop
    80003184:	60a2                	ld	ra,8(sp)
    80003186:	6402                	ld	s0,0(sp)
    80003188:	0141                	addi	sp,sp,16
    8000318a:	8082                	ret

000000008000318c <plic_init>:

static void plic_init()
{
    8000318c:	1101                	addi	sp,sp,-32
    8000318e:	ec22                	sd	s0,24(sp)
    80003190:	1000                	addi	s0,sp,32
  for (size_t i = 1; i <= plic_ndevs; i++)
    80003192:	4785                	li	a5,1
    80003194:	fef43423          	sd	a5,-24(s0)
    80003198:	a00d                	j	800031ba <plic_init+0x2e>
    plic_priorities[i] = 1;
    8000319a:	00016797          	auipc	a5,0x16
    8000319e:	e7e78793          	addi	a5,a5,-386 # 80019018 <plic_priorities>
    800031a2:	6398                	ld	a4,0(a5)
    800031a4:	fe843783          	ld	a5,-24(s0)
    800031a8:	078a                	slli	a5,a5,0x2
    800031aa:	97ba                	add	a5,a5,a4
    800031ac:	4705                	li	a4,1
    800031ae:	c398                	sw	a4,0(a5)
  for (size_t i = 1; i <= plic_ndevs; i++)
    800031b0:	fe843783          	ld	a5,-24(s0)
    800031b4:	0785                	addi	a5,a5,1
    800031b6:	fef43423          	sd	a5,-24(s0)
    800031ba:	00016797          	auipc	a5,0x16
    800031be:	e5678793          	addi	a5,a5,-426 # 80019010 <plic_ndevs>
    800031c2:	639c                	ld	a5,0(a5)
    800031c4:	fe843703          	ld	a4,-24(s0)
    800031c8:	fce7f9e3          	bleu	a4,a5,8000319a <plic_init+0xe>
}
    800031cc:	0001                	nop
    800031ce:	6462                	ld	s0,24(sp)
    800031d0:	6105                	addi	sp,sp,32
    800031d2:	8082                	ret

00000000800031d4 <prci_test>:

static void prci_test()
{
    800031d4:	715d                	addi	sp,sp,-80
    800031d6:	e486                	sd	ra,72(sp)
    800031d8:	e0a2                	sd	s0,64(sp)
    800031da:	0880                	addi	s0,sp,80
  assert(!(read_csr(mip) & MIP_MSIP));
    800031dc:	344027f3          	csrr	a5,mip
    800031e0:	fef43423          	sd	a5,-24(s0)
    800031e4:	fe843783          	ld	a5,-24(s0)
    800031e8:	8ba1                	andi	a5,a5,8
    800031ea:	c795                	beqz	a5,80003216 <prci_test+0x42>
    800031ec:	0000a697          	auipc	a3,0xa
    800031f0:	b8c68693          	addi	a3,a3,-1140 # 8000cd78 <logo+0x9b8>
    800031f4:	09000613          	li	a2,144
    800031f8:	0000a597          	auipc	a1,0xa
    800031fc:	b0858593          	addi	a1,a1,-1272 # 8000cd00 <logo+0x940>
    80003200:	0000a517          	auipc	a0,0xa
    80003204:	b1850513          	addi	a0,a0,-1256 # 8000cd18 <logo+0x958>
    80003208:	e24ff0ef          	jal	ra,8000282c <printm>
    8000320c:	67c1                	lui	a5,0x10
    8000320e:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7fff0001>
    80003212:	c65ff0ef          	jal	ra,80002e76 <poweroff>
  *HLS()->ipi = 1;
    80003216:	87a2                	mv	a5,s0
    80003218:	fef43023          	sd	a5,-32(s0)
    8000321c:	fe043703          	ld	a4,-32(s0)
    80003220:	6785                	lui	a5,0x1
    80003222:	973e                	add	a4,a4,a5
    80003224:	77fd                	lui	a5,0xfffff
    80003226:	8ff9                	and	a5,a5,a4
    80003228:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xffffffff7f815000>
    8000322c:	639c                	ld	a5,0(a5)
    8000322e:	4705                	li	a4,1
    80003230:	c398                	sw	a4,0(a5)
  assert(read_csr(mip) & MIP_MSIP);
    80003232:	344027f3          	csrr	a5,mip
    80003236:	fcf43c23          	sd	a5,-40(s0)
    8000323a:	fd843783          	ld	a5,-40(s0)
    8000323e:	8ba1                	andi	a5,a5,8
    80003240:	e795                	bnez	a5,8000326c <prci_test+0x98>
    80003242:	0000a697          	auipc	a3,0xa
    80003246:	b5668693          	addi	a3,a3,-1194 # 8000cd98 <logo+0x9d8>
    8000324a:	09200613          	li	a2,146
    8000324e:	0000a597          	auipc	a1,0xa
    80003252:	ab258593          	addi	a1,a1,-1358 # 8000cd00 <logo+0x940>
    80003256:	0000a517          	auipc	a0,0xa
    8000325a:	ac250513          	addi	a0,a0,-1342 # 8000cd18 <logo+0x958>
    8000325e:	dceff0ef          	jal	ra,8000282c <printm>
    80003262:	67c1                	lui	a5,0x10
    80003264:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7fff0001>
    80003268:	c0fff0ef          	jal	ra,80002e76 <poweroff>
  *HLS()->ipi = 0;
    8000326c:	87a2                	mv	a5,s0
    8000326e:	fcf43823          	sd	a5,-48(s0)
    80003272:	fd043703          	ld	a4,-48(s0)
    80003276:	6785                	lui	a5,0x1
    80003278:	973e                	add	a4,a4,a5
    8000327a:	77fd                	lui	a5,0xfffff
    8000327c:	8ff9                	and	a5,a5,a4
    8000327e:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xffffffff7f815000>
    80003282:	639c                	ld	a5,0(a5)
    80003284:	0007a023          	sw	zero,0(a5)

  assert(!(read_csr(mip) & MIP_MTIP));
    80003288:	344027f3          	csrr	a5,mip
    8000328c:	fcf43423          	sd	a5,-56(s0)
    80003290:	fc843783          	ld	a5,-56(s0)
    80003294:	0807f793          	andi	a5,a5,128
    80003298:	c795                	beqz	a5,800032c4 <prci_test+0xf0>
    8000329a:	0000a697          	auipc	a3,0xa
    8000329e:	b1e68693          	addi	a3,a3,-1250 # 8000cdb8 <logo+0x9f8>
    800032a2:	09500613          	li	a2,149
    800032a6:	0000a597          	auipc	a1,0xa
    800032aa:	a5a58593          	addi	a1,a1,-1446 # 8000cd00 <logo+0x940>
    800032ae:	0000a517          	auipc	a0,0xa
    800032b2:	a6a50513          	addi	a0,a0,-1430 # 8000cd18 <logo+0x958>
    800032b6:	d76ff0ef          	jal	ra,8000282c <printm>
    800032ba:	67c1                	lui	a5,0x10
    800032bc:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7fff0001>
    800032c0:	bb7ff0ef          	jal	ra,80002e76 <poweroff>
  *HLS()->timecmp = 0;
    800032c4:	87a2                	mv	a5,s0
    800032c6:	fcf43023          	sd	a5,-64(s0)
    800032ca:	fc043703          	ld	a4,-64(s0)
    800032ce:	6785                	lui	a5,0x1
    800032d0:	973e                	add	a4,a4,a5
    800032d2:	77fd                	lui	a5,0xfffff
    800032d4:	8ff9                	and	a5,a5,a4
    800032d6:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xffffffff7f815000>
    800032da:	6b9c                	ld	a5,16(a5)
    800032dc:	0007b023          	sd	zero,0(a5)
  assert(read_csr(mip) & MIP_MTIP);
    800032e0:	344027f3          	csrr	a5,mip
    800032e4:	faf43c23          	sd	a5,-72(s0)
    800032e8:	fb843783          	ld	a5,-72(s0)
    800032ec:	0807f793          	andi	a5,a5,128
    800032f0:	e795                	bnez	a5,8000331c <prci_test+0x148>
    800032f2:	0000a697          	auipc	a3,0xa
    800032f6:	ae668693          	addi	a3,a3,-1306 # 8000cdd8 <logo+0xa18>
    800032fa:	09700613          	li	a2,151
    800032fe:	0000a597          	auipc	a1,0xa
    80003302:	a0258593          	addi	a1,a1,-1534 # 8000cd00 <logo+0x940>
    80003306:	0000a517          	auipc	a0,0xa
    8000330a:	a1250513          	addi	a0,a0,-1518 # 8000cd18 <logo+0x958>
    8000330e:	d1eff0ef          	jal	ra,8000282c <printm>
    80003312:	67c1                	lui	a5,0x10
    80003314:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7fff0001>
    80003318:	b5fff0ef          	jal	ra,80002e76 <poweroff>
  *HLS()->timecmp = -1ULL;
    8000331c:	87a2                	mv	a5,s0
    8000331e:	faf43823          	sd	a5,-80(s0)
    80003322:	fb043703          	ld	a4,-80(s0)
    80003326:	6785                	lui	a5,0x1
    80003328:	973e                	add	a4,a4,a5
    8000332a:	77fd                	lui	a5,0xfffff
    8000332c:	8ff9                	and	a5,a5,a4
    8000332e:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xffffffff7f815000>
    80003332:	6b9c                	ld	a5,16(a5)
    80003334:	577d                	li	a4,-1
    80003336:	e398                	sd	a4,0(a5)
}
    80003338:	0001                	nop
    8000333a:	60a6                	ld	ra,72(sp)
    8000333c:	6406                	ld	s0,64(sp)
    8000333e:	6161                	addi	sp,sp,80
    80003340:	8082                	ret

0000000080003342 <hart_plic_init>:

static void hart_plic_init()
{
    80003342:	711d                	addi	sp,sp,-96
    80003344:	eca2                	sd	s0,88(sp)
    80003346:	1080                	addi	s0,sp,96
  // clear pending interrupts
  *HLS()->ipi = 0;
    80003348:	87a2                	mv	a5,s0
    8000334a:	fef43023          	sd	a5,-32(s0)
    8000334e:	fe043703          	ld	a4,-32(s0)
    80003352:	6785                	lui	a5,0x1
    80003354:	973e                	add	a4,a4,a5
    80003356:	77fd                	lui	a5,0xfffff
    80003358:	8ff9                	and	a5,a5,a4
    8000335a:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xffffffff7f815000>
    8000335e:	639c                	ld	a5,0(a5)
    80003360:	0007a023          	sw	zero,0(a5)
  *HLS()->timecmp = -1ULL;
    80003364:	87a2                	mv	a5,s0
    80003366:	fcf43c23          	sd	a5,-40(s0)
    8000336a:	fd843703          	ld	a4,-40(s0)
    8000336e:	6785                	lui	a5,0x1
    80003370:	973e                	add	a4,a4,a5
    80003372:	77fd                	lui	a5,0xfffff
    80003374:	8ff9                	and	a5,a5,a4
    80003376:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xffffffff7f815000>
    8000337a:	6b9c                	ld	a5,16(a5)
    8000337c:	577d                	li	a4,-1
    8000337e:	e398                	sd	a4,0(a5)
  write_csr(mip, 0);
    80003380:	34405073          	csrwi	mip,0

  if (!plic_ndevs)
    80003384:	00016797          	auipc	a5,0x16
    80003388:	c8c78793          	addi	a5,a5,-884 # 80019010 <plic_ndevs>
    8000338c:	639c                	ld	a5,0(a5)
    8000338e:	c3e9                	beqz	a5,80003450 <hart_plic_init+0x10e>
    return;

  size_t ie_words = (plic_ndevs + 8 * sizeof(*HLS()->plic_s_ie) - 1) /
    80003390:	00016797          	auipc	a5,0x16
    80003394:	c8078793          	addi	a5,a5,-896 # 80019010 <plic_ndevs>
    80003398:	639c                	ld	a5,0(a5)
    8000339a:	07fd                	addi	a5,a5,31
    8000339c:	8395                	srli	a5,a5,0x5
    8000339e:	fcf43823          	sd	a5,-48(s0)
		(8 * sizeof(*HLS()->plic_s_ie));
  for (size_t i = 0; i < ie_words; i++) {
    800033a2:	fe043423          	sd	zero,-24(s0)
    800033a6:	a0a9                	j	800033f0 <hart_plic_init+0xae>
     if (HLS()->plic_s_ie) {
    800033a8:	87a2                	mv	a5,s0
    800033aa:	fcf43423          	sd	a5,-56(s0)
    800033ae:	fc843703          	ld	a4,-56(s0)
    800033b2:	6785                	lui	a5,0x1
    800033b4:	973e                	add	a4,a4,a5
    800033b6:	77fd                	lui	a5,0xfffff
    800033b8:	8ff9                	and	a5,a5,a4
    800033ba:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xffffffff7f815000>
    800033be:	7b9c                	ld	a5,48(a5)
    800033c0:	c39d                	beqz	a5,800033e6 <hart_plic_init+0xa4>
        // Supervisor not always present
        HLS()->plic_s_ie[i] = __UINT32_MAX__;
    800033c2:	87a2                	mv	a5,s0
    800033c4:	fcf43023          	sd	a5,-64(s0)
    800033c8:	fc043703          	ld	a4,-64(s0)
    800033cc:	6785                	lui	a5,0x1
    800033ce:	973e                	add	a4,a4,a5
    800033d0:	77fd                	lui	a5,0xfffff
    800033d2:	8ff9                	and	a5,a5,a4
    800033d4:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xffffffff7f815000>
    800033d8:	7b98                	ld	a4,48(a5)
    800033da:	fe843783          	ld	a5,-24(s0)
    800033de:	078a                	slli	a5,a5,0x2
    800033e0:	97ba                	add	a5,a5,a4
    800033e2:	577d                	li	a4,-1
    800033e4:	c398                	sw	a4,0(a5)
  for (size_t i = 0; i < ie_words; i++) {
    800033e6:	fe843783          	ld	a5,-24(s0)
    800033ea:	0785                	addi	a5,a5,1
    800033ec:	fef43423          	sd	a5,-24(s0)
    800033f0:	fe843703          	ld	a4,-24(s0)
    800033f4:	fd043783          	ld	a5,-48(s0)
    800033f8:	faf768e3          	bltu	a4,a5,800033a8 <hart_plic_init+0x66>
     }
  }
  *HLS()->plic_m_thresh = 1;
    800033fc:	87a2                	mv	a5,s0
    800033fe:	faf43c23          	sd	a5,-72(s0)
    80003402:	fb843703          	ld	a4,-72(s0)
    80003406:	6785                	lui	a5,0x1
    80003408:	973e                	add	a4,a4,a5
    8000340a:	77fd                	lui	a5,0xfffff
    8000340c:	8ff9                	and	a5,a5,a4
    8000340e:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xffffffff7f815000>
    80003412:	6f9c                	ld	a5,24(a5)
    80003414:	4705                	li	a4,1
    80003416:	c398                	sw	a4,0(a5)
  if (HLS()->plic_s_thresh) {
    80003418:	87a2                	mv	a5,s0
    8000341a:	faf43823          	sd	a5,-80(s0)
    8000341e:	fb043703          	ld	a4,-80(s0)
    80003422:	6785                	lui	a5,0x1
    80003424:	973e                	add	a4,a4,a5
    80003426:	77fd                	lui	a5,0xfffff
    80003428:	8ff9                	and	a5,a5,a4
    8000342a:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xffffffff7f815000>
    8000342e:	779c                	ld	a5,40(a5)
    80003430:	c38d                	beqz	a5,80003452 <hart_plic_init+0x110>
      // Supervisor not always present
      *HLS()->plic_s_thresh = 0;
    80003432:	87a2                	mv	a5,s0
    80003434:	faf43423          	sd	a5,-88(s0)
    80003438:	fa843703          	ld	a4,-88(s0)
    8000343c:	6785                	lui	a5,0x1
    8000343e:	973e                	add	a4,a4,a5
    80003440:	77fd                	lui	a5,0xfffff
    80003442:	8ff9                	and	a5,a5,a4
    80003444:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xffffffff7f815000>
    80003448:	779c                	ld	a5,40(a5)
    8000344a:	0007a023          	sw	zero,0(a5)
    8000344e:	a011                	j	80003452 <hart_plic_init+0x110>
    return;
    80003450:	0001                	nop
  }
}
    80003452:	6466                	ld	s0,88(sp)
    80003454:	6125                	addi	sp,sp,96
    80003456:	8082                	ret

0000000080003458 <wake_harts>:

static void wake_harts()
{
    80003458:	7179                	addi	sp,sp,-48
    8000345a:	f422                	sd	s0,40(sp)
    8000345c:	1800                	addi	s0,sp,48
  for (int hart = 0; hart < MAX_HARTS; ++hart)
    8000345e:	fe042623          	sw	zero,-20(s0)
    80003462:	a0ad                	j	800034cc <wake_harts+0x74>
    if ((((~disabled_hart_mask & hart_mask) >> hart) & 1))
    80003464:	00016797          	auipc	a5,0x16
    80003468:	b9c78793          	addi	a5,a5,-1124 # 80019000 <disabled_hart_mask>
    8000346c:	639c                	ld	a5,0(a5)
    8000346e:	fff7c793          	not	a5,a5
    80003472:	873e                	mv	a4,a5
    80003474:	00016797          	auipc	a5,0x16
    80003478:	b9478793          	addi	a5,a5,-1132 # 80019008 <hart_mask>
    8000347c:	639c                	ld	a5,0(a5)
    8000347e:	8f7d                	and	a4,a4,a5
    80003480:	fec42783          	lw	a5,-20(s0)
    80003484:	00f757b3          	srl	a5,a4,a5
    80003488:	8b85                	andi	a5,a5,1
    8000348a:	cf85                	beqz	a5,800034c2 <wake_harts+0x6a>
      *OTHER_HLS(hart)->ipi = 1; // wakeup the hart
    8000348c:	87a2                	mv	a5,s0
    8000348e:	fef43023          	sd	a5,-32(s0)
    80003492:	fe043703          	ld	a4,-32(s0)
    80003496:	6785                	lui	a5,0x1
    80003498:	973e                	add	a4,a4,a5
    8000349a:	77fd                	lui	a5,0xfffff
    8000349c:	8ff9                	and	a5,a5,a4
    8000349e:	86be                	mv	a3,a5
    800034a0:	fec42703          	lw	a4,-20(s0)
    800034a4:	f14027f3          	csrr	a5,mhartid
    800034a8:	fcf43c23          	sd	a5,-40(s0)
    800034ac:	fd843783          	ld	a5,-40(s0)
    800034b0:	40f707b3          	sub	a5,a4,a5
    800034b4:	07b2                	slli	a5,a5,0xc
    800034b6:	fc078793          	addi	a5,a5,-64 # ffffffffffffefc0 <_payload_end+0xffffffff7f815000>
    800034ba:	97b6                	add	a5,a5,a3
    800034bc:	639c                	ld	a5,0(a5)
    800034be:	4705                	li	a4,1
    800034c0:	c398                	sw	a4,0(a5)
  for (int hart = 0; hart < MAX_HARTS; ++hart)
    800034c2:	fec42783          	lw	a5,-20(s0)
    800034c6:	2785                	addiw	a5,a5,1
    800034c8:	fef42623          	sw	a5,-20(s0)
    800034cc:	fec42783          	lw	a5,-20(s0)
    800034d0:	0007871b          	sext.w	a4,a5
    800034d4:	479d                	li	a5,7
    800034d6:	f8e7d7e3          	ble	a4,a5,80003464 <wake_harts+0xc>
}
    800034da:	0001                	nop
    800034dc:	7422                	ld	s0,40(sp)
    800034de:	6145                	addi	sp,sp,48
    800034e0:	8082                	ret

00000000800034e2 <init_first_hart>:

void init_first_hart(uintptr_t hartid, uintptr_t dtb)
{
    800034e2:	1101                	addi	sp,sp,-32
    800034e4:	ec06                	sd	ra,24(sp)
    800034e6:	e822                	sd	s0,16(sp)
    800034e8:	1000                	addi	s0,sp,32
    800034ea:	fea43423          	sd	a0,-24(s0)
    800034ee:	feb43023          	sd	a1,-32(s0)
  // Confirm console as early as possible
  query_uart(dtb);
    800034f2:	fe043503          	ld	a0,-32(s0)
    800034f6:	776000ef          	jal	ra,80003c6c <query_uart>
  query_uart16550(dtb);
    800034fa:	fe043503          	ld	a0,-32(s0)
    800034fe:	3db000ef          	jal	ra,800040d8 <query_uart16550>
  query_uart_litex(dtb);
    80003502:	fe043503          	ld	a0,-32(s0)
    80003506:	5e7000ef          	jal	ra,800042ec <query_uart_litex>
  query_htif(dtb);
    8000350a:	fe043503          	ld	a0,-32(s0)
    8000350e:	56a000ef          	jal	ra,80003a78 <query_htif>
  printm("bbl loader\r\n");
    80003512:	0000a517          	auipc	a0,0xa
    80003516:	8e650513          	addi	a0,a0,-1818 # 8000cdf8 <logo+0xa38>
    8000351a:	b12ff0ef          	jal	ra,8000282c <printm>

  hart_init();
    8000351e:	c4dff0ef          	jal	ra,8000316a <hart_init>
  hls_init(0); // this might get called again from parse_config_string
    80003522:	4501                	li	a0,0
    80003524:	bc3ff0ef          	jal	ra,800030e6 <hls_init>

  // Find the power button early as well so die() works
  query_finisher(dtb);
    80003528:	fe043503          	ld	a0,-32(s0)
    8000352c:	793000ef          	jal	ra,800044be <query_finisher>

  query_mem(dtb);
    80003530:	fe043503          	ld	a0,-32(s0)
    80003534:	961fd0ef          	jal	ra,80000e94 <query_mem>
  query_harts(dtb);
    80003538:	fe043503          	ld	a0,-32(s0)
    8000353c:	d61fd0ef          	jal	ra,8000129c <query_harts>
  query_clint(dtb);
    80003540:	fe043503          	ld	a0,-32(s0)
    80003544:	926fe0ef          	jal	ra,8000166a <query_clint>
  query_plic(dtb);
    80003548:	fe043503          	ld	a0,-32(s0)
    8000354c:	dd2fe0ef          	jal	ra,80001b1e <query_plic>
  query_chosen(dtb);
    80003550:	fe043503          	ld	a0,-32(s0)
    80003554:	9d3fe0ef          	jal	ra,80001f26 <query_chosen>

  wake_harts();
    80003558:	f01ff0ef          	jal	ra,80003458 <wake_harts>

  plic_init();
    8000355c:	c31ff0ef          	jal	ra,8000318c <plic_init>
  hart_plic_init();
    80003560:	de3ff0ef          	jal	ra,80003342 <hart_plic_init>
  //prci_test();
  memory_init();
    80003564:	bdfff0ef          	jal	ra,80003142 <memory_init>
  boot_loader(dtb);
    80003568:	fe043503          	ld	a0,-32(s0)
    8000356c:	fc5fc0ef          	jal	ra,80000530 <boot_loader>
}
    80003570:	0001                	nop
    80003572:	60e2                	ld	ra,24(sp)
    80003574:	6442                	ld	s0,16(sp)
    80003576:	6105                	addi	sp,sp,32
    80003578:	8082                	ret

000000008000357a <init_other_hart>:

void init_other_hart(uintptr_t hartid, uintptr_t dtb)
{
    8000357a:	1101                	addi	sp,sp,-32
    8000357c:	ec06                	sd	ra,24(sp)
    8000357e:	e822                	sd	s0,16(sp)
    80003580:	1000                	addi	s0,sp,32
    80003582:	fea43423          	sd	a0,-24(s0)
    80003586:	feb43023          	sd	a1,-32(s0)
  hart_init();
    8000358a:	be1ff0ef          	jal	ra,8000316a <hart_init>
  hart_plic_init();
    8000358e:	db5ff0ef          	jal	ra,80003342 <hart_plic_init>
  boot_other_hart(dtb);
    80003592:	fe043503          	ld	a0,-32(s0)
    80003596:	f1ffc0ef          	jal	ra,800004b4 <boot_other_hart>
}
    8000359a:	0001                	nop
    8000359c:	60e2                	ld	ra,24(sp)
    8000359e:	6442                	ld	s0,16(sp)
    800035a0:	6105                	addi	sp,sp,32
    800035a2:	8082                	ret

00000000800035a4 <setup_pmp>:

void setup_pmp(void)
{
    800035a4:	1101                	addi	sp,sp,-32
    800035a6:	ec22                	sd	s0,24(sp)
    800035a8:	1000                	addi	s0,sp,32
  // Set up a PMP to permit access to all of memory.
  // Ignore the illegal-instruction trap if PMPs aren't supported.
  uintptr_t pmpc = PMP_NAPOT | PMP_R | PMP_W | PMP_X;
    800035aa:	47fd                	li	a5,31
    800035ac:	fef43423          	sd	a5,-24(s0)
  asm volatile ("la t0, 1f\n\t"
    800035b0:	fe843783          	ld	a5,-24(s0)
    800035b4:	577d                	li	a4,-1
    800035b6:	00000297          	auipc	t0,0x0
    800035ba:	01628293          	addi	t0,t0,22 # 800035cc <setup_pmp+0x28>
    800035be:	305292f3          	csrrw	t0,mtvec,t0
    800035c2:	3b071073          	csrw	pmpaddr0,a4
    800035c6:	3a079073          	csrw	pmpcfg0,a5
    800035ca:	0001                	nop
    800035cc:	30529073          	csrw	mtvec,t0
                "csrw pmpaddr0, %1\n\t"
                "csrw pmpcfg0, %0\n\t"
                ".align 2\n\t"
                "1: csrw mtvec, t0"
                : : "r" (pmpc), "r" (-1UL) : "t0");
}
    800035d0:	0001                	nop
    800035d2:	6462                	ld	s0,24(sp)
    800035d4:	6105                	addi	sp,sp,32
    800035d6:	8082                	ret

00000000800035d8 <enter_supervisor_mode>:

void enter_supervisor_mode(void (*fn)(uintptr_t), uintptr_t arg0, uintptr_t arg1)
{
    800035d8:	715d                	addi	sp,sp,-80
    800035da:	e4a2                	sd	s0,72(sp)
    800035dc:	0880                	addi	s0,sp,80
    800035de:	fca43423          	sd	a0,-56(s0)
    800035e2:	fcb43023          	sd	a1,-64(s0)
    800035e6:	fac43c23          	sd	a2,-72(s0)
  uintptr_t mstatus = read_csr(mstatus);
    800035ea:	300027f3          	csrr	a5,mstatus
    800035ee:	fef43423          	sd	a5,-24(s0)
    800035f2:	fe843783          	ld	a5,-24(s0)
    800035f6:	fef43023          	sd	a5,-32(s0)
  mstatus = INSERT_FIELD(mstatus, MSTATUS_MPP, PRV_S);
    800035fa:	fe043703          	ld	a4,-32(s0)
    800035fe:	77f9                	lui	a5,0xffffe
    80003600:	7ff78793          	addi	a5,a5,2047 # ffffffffffffe7ff <_payload_end+0xffffffff7f81483f>
    80003604:	8f7d                	and	a4,a4,a5
    80003606:	6785                	lui	a5,0x1
    80003608:	80078793          	addi	a5,a5,-2048 # 800 <MEM_START-0x7ffff800>
    8000360c:	8fd9                	or	a5,a5,a4
    8000360e:	fef43023          	sd	a5,-32(s0)
  mstatus = INSERT_FIELD(mstatus, MSTATUS_MPIE, 0);
    80003612:	fe043783          	ld	a5,-32(s0)
    80003616:	f7f7f793          	andi	a5,a5,-129
    8000361a:	fef43023          	sd	a5,-32(s0)
  write_csr(mstatus, mstatus);
    8000361e:	fe043783          	ld	a5,-32(s0)
    80003622:	30079073          	csrw	mstatus,a5
  write_csr(mscratch, MACHINE_STACK_TOP() - MENTRY_FRAME_SIZE);
    80003626:	87a2                	mv	a5,s0
    80003628:	fcf43c23          	sd	a5,-40(s0)
    8000362c:	fd843703          	ld	a4,-40(s0)
    80003630:	6785                	lui	a5,0x1
    80003632:	973e                	add	a4,a4,a5
    80003634:	77fd                	lui	a5,0xfffff
    80003636:	8ff9                	and	a5,a5,a4
    80003638:	ec078793          	addi	a5,a5,-320 # ffffffffffffeec0 <_payload_end+0xffffffff7f814f00>
    8000363c:	34079073          	csrw	mscratch,a5
#ifndef __riscv_flen
  uintptr_t *p_fcsr = (uintptr_t*)(MACHINE_STACK_TOP() - MENTRY_FRAME_SIZE); // the x0's save slot
  *p_fcsr = 0;
#endif
  write_csr(mepc, fn);
    80003640:	fc843783          	ld	a5,-56(s0)
    80003644:	34179073          	csrw	mepc,a5

  register uintptr_t a0 asm ("a0") = arg0;
    80003648:	fc043503          	ld	a0,-64(s0)
  register uintptr_t a1 asm ("a1") = arg1;
    8000364c:	fb843583          	ld	a1,-72(s0)
  asm volatile ("mret" : : "r" (a0), "r" (a1));
    80003650:	30200073          	mret

0000000080003654 <enter_machine_mode>:
  __builtin_unreachable();
}

void enter_machine_mode(void (*fn)(uintptr_t, uintptr_t), uintptr_t arg0, uintptr_t arg1)
{
    80003654:	715d                	addi	sp,sp,-80
    80003656:	e486                	sd	ra,72(sp)
    80003658:	e0a2                	sd	s0,64(sp)
    8000365a:	0880                	addi	s0,sp,80
    8000365c:	fca43423          	sd	a0,-56(s0)
    80003660:	fcb43023          	sd	a1,-64(s0)
    80003664:	fac43c23          	sd	a2,-72(s0)
  uintptr_t mstatus = read_csr(mstatus);
    80003668:	300027f3          	csrr	a5,mstatus
    8000366c:	fef43423          	sd	a5,-24(s0)
    80003670:	fe843783          	ld	a5,-24(s0)
    80003674:	fef43023          	sd	a5,-32(s0)
  mstatus = INSERT_FIELD(mstatus, MSTATUS_MPIE, 0);
    80003678:	fe043783          	ld	a5,-32(s0)
    8000367c:	f7f7f793          	andi	a5,a5,-129
    80003680:	fef43023          	sd	a5,-32(s0)
  write_csr(mstatus, mstatus);
    80003684:	fe043783          	ld	a5,-32(s0)
    80003688:	30079073          	csrw	mstatus,a5
  write_csr(mscratch, MACHINE_STACK_TOP() - MENTRY_FRAME_SIZE);
    8000368c:	87a2                	mv	a5,s0
    8000368e:	fcf43c23          	sd	a5,-40(s0)
    80003692:	fd843703          	ld	a4,-40(s0)
    80003696:	6785                	lui	a5,0x1
    80003698:	973e                	add	a4,a4,a5
    8000369a:	77fd                	lui	a5,0xfffff
    8000369c:	8ff9                	and	a5,a5,a4
    8000369e:	ec078793          	addi	a5,a5,-320 # ffffffffffffeec0 <_payload_end+0xffffffff7f814f00>
    800036a2:	34079073          	csrw	mscratch,a5

  /* Jump to the payload's entry point */
  fn(arg0, arg1);
    800036a6:	fc843783          	ld	a5,-56(s0)
    800036aa:	fb843583          	ld	a1,-72(s0)
    800036ae:	fc043503          	ld	a0,-64(s0)
    800036b2:	9782                	jalr	a5

00000000800036b4 <spinlock_trylock>:
  enable_irqrestore(flags); \
  res; })
#endif

static inline int spinlock_trylock(spinlock_t* lock)
{
    800036b4:	7179                	addi	sp,sp,-48
    800036b6:	f422                	sd	s0,40(sp)
    800036b8:	1800                	addi	s0,sp,48
    800036ba:	fca43c23          	sd	a0,-40(s0)
  int res = atomic_swap(&lock->lock, -1);
    800036be:	fd843783          	ld	a5,-40(s0)
    800036c2:	577d                	li	a4,-1
    800036c4:	0ce7a72f          	amoswap.w.aq	a4,a4,(a5)
    800036c8:	86ba                	mv	a3,a4
    800036ca:	0006879b          	sext.w	a5,a3
    800036ce:	fef42623          	sw	a5,-20(s0)
  mb();
    800036d2:	0ff0000f          	fence
  return res;
    800036d6:	fec42783          	lw	a5,-20(s0)
}
    800036da:	853e                	mv	a0,a5
    800036dc:	7422                	ld	s0,40(sp)
    800036de:	6145                	addi	sp,sp,48
    800036e0:	8082                	ret

00000000800036e2 <spinlock_lock>:

static inline void spinlock_lock(spinlock_t* lock)
{
    800036e2:	1101                	addi	sp,sp,-32
    800036e4:	ec06                	sd	ra,24(sp)
    800036e6:	e822                	sd	s0,16(sp)
    800036e8:	1000                	addi	s0,sp,32
    800036ea:	fea43423          	sd	a0,-24(s0)
  do
  {
    while (atomic_read(&lock->lock))
    800036ee:	0001                	nop
    800036f0:	fe843783          	ld	a5,-24(s0)
    800036f4:	439c                	lw	a5,0(a5)
    800036f6:	2781                	sext.w	a5,a5
    800036f8:	ffe5                	bnez	a5,800036f0 <spinlock_lock+0xe>
      ;
  } while (spinlock_trylock(lock));
    800036fa:	fe843503          	ld	a0,-24(s0)
    800036fe:	fb7ff0ef          	jal	ra,800036b4 <spinlock_trylock>
    80003702:	87aa                	mv	a5,a0
    80003704:	f7ed                	bnez	a5,800036ee <spinlock_lock+0xc>
}
    80003706:	0001                	nop
    80003708:	60e2                	ld	ra,24(sp)
    8000370a:	6442                	ld	s0,16(sp)
    8000370c:	6105                	addi	sp,sp,32
    8000370e:	8082                	ret

0000000080003710 <spinlock_unlock>:

static inline void spinlock_unlock(spinlock_t* lock)
{
    80003710:	1101                	addi	sp,sp,-32
    80003712:	ec22                	sd	s0,24(sp)
    80003714:	1000                	addi	s0,sp,32
    80003716:	fea43423          	sd	a0,-24(s0)
  mb();
    8000371a:	0ff0000f          	fence
  atomic_set(&lock->lock,0);
    8000371e:	fe843783          	ld	a5,-24(s0)
    80003722:	0007a023          	sw	zero,0(a5)
}
    80003726:	0001                	nop
    80003728:	6462                	ld	s0,24(sp)
    8000372a:	6105                	addi	sp,sp,32
    8000372c:	8082                	ret

000000008000372e <__check_fromhost>:

#define TOHOST_OFFSET		((uintptr_t)tohost - (uintptr_t)__htif_base)
#define FROMHOST_OFFSET		((uintptr_t)fromhost - (uintptr_t)__htif_base)

static void __check_fromhost()
{
    8000372e:	1101                	addi	sp,sp,-32
    80003730:	ec06                	sd	ra,24(sp)
    80003732:	e822                	sd	s0,16(sp)
    80003734:	1000                	addi	s0,sp,32
  uint64_t fh = fromhost;
    80003736:	0000b797          	auipc	a5,0xb
    8000373a:	8d278793          	addi	a5,a5,-1838 # 8000e008 <fromhost>
    8000373e:	639c                	ld	a5,0(a5)
    80003740:	fef43423          	sd	a5,-24(s0)
  if (!fh)
    80003744:	fe843783          	ld	a5,-24(s0)
    80003748:	cfd1                	beqz	a5,800037e4 <__check_fromhost+0xb6>
    return;
  fromhost = 0;
    8000374a:	0000b797          	auipc	a5,0xb
    8000374e:	8be78793          	addi	a5,a5,-1858 # 8000e008 <fromhost>
    80003752:	0007b023          	sd	zero,0(a5)

  // this should be from the console
  assert(FROMHOST_DEV(fh) == 1);
    80003756:	fe843783          	ld	a5,-24(s0)
    8000375a:	0387d713          	srli	a4,a5,0x38
    8000375e:	4785                	li	a5,1
    80003760:	02f70663          	beq	a4,a5,8000378c <__check_fromhost+0x5e>
    80003764:	00009697          	auipc	a3,0x9
    80003768:	6a468693          	addi	a3,a3,1700 # 8000ce08 <logo+0xa48>
    8000376c:	467d                	li	a2,31
    8000376e:	00009597          	auipc	a1,0x9
    80003772:	6b258593          	addi	a1,a1,1714 # 8000ce20 <logo+0xa60>
    80003776:	00009517          	auipc	a0,0x9
    8000377a:	6c250513          	addi	a0,a0,1730 # 8000ce38 <logo+0xa78>
    8000377e:	8aeff0ef          	jal	ra,8000282c <printm>
    80003782:	67c1                	lui	a5,0x10
    80003784:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7fff0001>
    80003788:	eeeff0ef          	jal	ra,80002e76 <poweroff>
  switch (FROMHOST_CMD(fh)) {
    8000378c:	fe843783          	ld	a5,-24(s0)
    80003790:	07a2                	slli	a5,a5,0x8
    80003792:	93e1                	srli	a5,a5,0x38
    80003794:	c789                	beqz	a5,8000379e <__check_fromhost+0x70>
    80003796:	4705                	li	a4,1
    80003798:	04e78863          	beq	a5,a4,800037e8 <__check_fromhost+0xba>
    8000379c:	a839                	j	800037ba <__check_fromhost+0x8c>
    case 0:
      htif_console_buf = 1 + (uint8_t)FROMHOST_DATA(fh);
    8000379e:	fe843783          	ld	a5,-24(s0)
    800037a2:	0ff7f793          	andi	a5,a5,255
    800037a6:	2781                	sext.w	a5,a5
    800037a8:	2785                	addiw	a5,a5,1
    800037aa:	0007871b          	sext.w	a4,a5
    800037ae:	00016797          	auipc	a5,0x16
    800037b2:	89a78793          	addi	a5,a5,-1894 # 80019048 <htif_console_buf>
    800037b6:	c398                	sw	a4,0(a5)
      break;
    800037b8:	a80d                	j	800037ea <__check_fromhost+0xbc>
    case 1:
      break;
    default:
      assert(0);
    800037ba:	00009697          	auipc	a3,0x9
    800037be:	69e68693          	addi	a3,a3,1694 # 8000ce58 <logo+0xa98>
    800037c2:	02700613          	li	a2,39
    800037c6:	00009597          	auipc	a1,0x9
    800037ca:	65a58593          	addi	a1,a1,1626 # 8000ce20 <logo+0xa60>
    800037ce:	00009517          	auipc	a0,0x9
    800037d2:	66a50513          	addi	a0,a0,1642 # 8000ce38 <logo+0xa78>
    800037d6:	856ff0ef          	jal	ra,8000282c <printm>
    800037da:	67c1                	lui	a5,0x10
    800037dc:	fff78513          	addi	a0,a5,-1 # ffff <MEM_START-0x7fff0001>
    800037e0:	e96ff0ef          	jal	ra,80002e76 <poweroff>
    return;
    800037e4:	0001                	nop
    800037e6:	a011                	j	800037ea <__check_fromhost+0xbc>
      break;
    800037e8:	0001                	nop
  }
}
    800037ea:	60e2                	ld	ra,24(sp)
    800037ec:	6442                	ld	s0,16(sp)
    800037ee:	6105                	addi	sp,sp,32
    800037f0:	8082                	ret

00000000800037f2 <__set_tohost>:

static void __set_tohost(uintptr_t dev, uintptr_t cmd, uintptr_t data)
{
    800037f2:	7179                	addi	sp,sp,-48
    800037f4:	f406                	sd	ra,40(sp)
    800037f6:	f022                	sd	s0,32(sp)
    800037f8:	1800                	addi	s0,sp,48
    800037fa:	fea43423          	sd	a0,-24(s0)
    800037fe:	feb43023          	sd	a1,-32(s0)
    80003802:	fcc43c23          	sd	a2,-40(s0)
  while (tohost)
    80003806:	a019                	j	8000380c <__set_tohost+0x1a>
    __check_fromhost();
    80003808:	f27ff0ef          	jal	ra,8000372e <__check_fromhost>
  while (tohost)
    8000380c:	0000a797          	auipc	a5,0xa
    80003810:	7f478793          	addi	a5,a5,2036 # 8000e000 <tohost>
    80003814:	639c                	ld	a5,0(a5)
    80003816:	fbed                	bnez	a5,80003808 <__set_tohost+0x16>
  tohost = TOHOST_CMD(dev, cmd, data);
    80003818:	fe843783          	ld	a5,-24(s0)
    8000381c:	03879713          	slli	a4,a5,0x38
    80003820:	fe043783          	ld	a5,-32(s0)
    80003824:	17c2                	slli	a5,a5,0x30
    80003826:	8f5d                	or	a4,a4,a5
    80003828:	fd843783          	ld	a5,-40(s0)
    8000382c:	8f5d                	or	a4,a4,a5
    8000382e:	0000a797          	auipc	a5,0xa
    80003832:	7d278793          	addi	a5,a5,2002 # 8000e000 <tohost>
    80003836:	e398                	sd	a4,0(a5)
}
    80003838:	0001                	nop
    8000383a:	70a2                	ld	ra,40(sp)
    8000383c:	7402                	ld	s0,32(sp)
    8000383e:	6145                	addi	sp,sp,48
    80003840:	8082                	ret

0000000080003842 <htif_console_getchar>:

int htif_console_getchar()
{
    80003842:	1101                	addi	sp,sp,-32
    80003844:	ec06                	sd	ra,24(sp)
    80003846:	e822                	sd	s0,16(sp)
    80003848:	1000                	addi	s0,sp,32
#if __riscv_xlen == 32
  // HTIF devices are not supported on RV32
  return -1;
#endif

  spinlock_lock(&htif_lock);
    8000384a:	0000c517          	auipc	a0,0xc
    8000384e:	7de50513          	addi	a0,a0,2014 # 80010028 <htif_lock>
    80003852:	e91ff0ef          	jal	ra,800036e2 <spinlock_lock>
    __check_fromhost();
    80003856:	ed9ff0ef          	jal	ra,8000372e <__check_fromhost>
    int ch = htif_console_buf;
    8000385a:	00015797          	auipc	a5,0x15
    8000385e:	7ee78793          	addi	a5,a5,2030 # 80019048 <htif_console_buf>
    80003862:	439c                	lw	a5,0(a5)
    80003864:	fef42623          	sw	a5,-20(s0)
    if (ch >= 0) {
    80003868:	fec42783          	lw	a5,-20(s0)
    8000386c:	2781                	sext.w	a5,a5
    8000386e:	0007cd63          	bltz	a5,80003888 <htif_console_getchar+0x46>
      htif_console_buf = -1;
    80003872:	00015797          	auipc	a5,0x15
    80003876:	7d678793          	addi	a5,a5,2006 # 80019048 <htif_console_buf>
    8000387a:	577d                	li	a4,-1
    8000387c:	c398                	sw	a4,0(a5)
      __set_tohost(1, 0, 0);
    8000387e:	4601                	li	a2,0
    80003880:	4581                	li	a1,0
    80003882:	4505                	li	a0,1
    80003884:	f6fff0ef          	jal	ra,800037f2 <__set_tohost>
    }
  spinlock_unlock(&htif_lock);
    80003888:	0000c517          	auipc	a0,0xc
    8000388c:	7a050513          	addi	a0,a0,1952 # 80010028 <htif_lock>
    80003890:	e81ff0ef          	jal	ra,80003710 <spinlock_unlock>

  return ch - 1;
    80003894:	fec42783          	lw	a5,-20(s0)
    80003898:	37fd                	addiw	a5,a5,-1
    8000389a:	2781                	sext.w	a5,a5
}
    8000389c:	853e                	mv	a0,a5
    8000389e:	60e2                	ld	ra,24(sp)
    800038a0:	6442                	ld	s0,16(sp)
    800038a2:	6105                	addi	sp,sp,32
    800038a4:	8082                	ret

00000000800038a6 <do_tohost_fromhost>:

static void do_tohost_fromhost(uintptr_t dev, uintptr_t cmd, uintptr_t data)
{
    800038a6:	7139                	addi	sp,sp,-64
    800038a8:	fc06                	sd	ra,56(sp)
    800038aa:	f822                	sd	s0,48(sp)
    800038ac:	0080                	addi	s0,sp,64
    800038ae:	fca43c23          	sd	a0,-40(s0)
    800038b2:	fcb43823          	sd	a1,-48(s0)
    800038b6:	fcc43423          	sd	a2,-56(s0)
  spinlock_lock(&htif_lock);
    800038ba:	0000c517          	auipc	a0,0xc
    800038be:	76e50513          	addi	a0,a0,1902 # 80010028 <htif_lock>
    800038c2:	e21ff0ef          	jal	ra,800036e2 <spinlock_lock>
    __set_tohost(dev, cmd, data);
    800038c6:	fc843603          	ld	a2,-56(s0)
    800038ca:	fd043583          	ld	a1,-48(s0)
    800038ce:	fd843503          	ld	a0,-40(s0)
    800038d2:	f21ff0ef          	jal	ra,800037f2 <__set_tohost>

    while (1) {
      uint64_t fh = fromhost;
    800038d6:	0000a797          	auipc	a5,0xa
    800038da:	73278793          	addi	a5,a5,1842 # 8000e008 <fromhost>
    800038de:	639c                	ld	a5,0(a5)
    800038e0:	fef43423          	sd	a5,-24(s0)
      if (fh) {
    800038e4:	fe843783          	ld	a5,-24(s0)
    800038e8:	d7fd                	beqz	a5,800038d6 <do_tohost_fromhost+0x30>
        if (FROMHOST_DEV(fh) == dev && FROMHOST_CMD(fh) == cmd) {
    800038ea:	fe843783          	ld	a5,-24(s0)
    800038ee:	93e1                	srli	a5,a5,0x38
    800038f0:	fd843703          	ld	a4,-40(s0)
    800038f4:	02f71163          	bne	a4,a5,80003916 <do_tohost_fromhost+0x70>
    800038f8:	fe843783          	ld	a5,-24(s0)
    800038fc:	07a2                	slli	a5,a5,0x8
    800038fe:	93e1                	srli	a5,a5,0x38
    80003900:	fd043703          	ld	a4,-48(s0)
    80003904:	00f71963          	bne	a4,a5,80003916 <do_tohost_fromhost+0x70>
          fromhost = 0;
    80003908:	0000a797          	auipc	a5,0xa
    8000390c:	70078793          	addi	a5,a5,1792 # 8000e008 <fromhost>
    80003910:	0007b023          	sd	zero,0(a5)
          break;
    80003914:	a021                	j	8000391c <do_tohost_fromhost+0x76>
        }
        __check_fromhost();
    80003916:	e19ff0ef          	jal	ra,8000372e <__check_fromhost>
    while (1) {
    8000391a:	bf75                	j	800038d6 <do_tohost_fromhost+0x30>
      }
    }
  spinlock_unlock(&htif_lock);
    8000391c:	0000c517          	auipc	a0,0xc
    80003920:	70c50513          	addi	a0,a0,1804 # 80010028 <htif_lock>
    80003924:	dedff0ef          	jal	ra,80003710 <spinlock_unlock>
}
    80003928:	0001                	nop
    8000392a:	70e2                	ld	ra,56(sp)
    8000392c:	7442                	ld	s0,48(sp)
    8000392e:	6121                	addi	sp,sp,64
    80003930:	8082                	ret

0000000080003932 <htif_syscall>:

void htif_syscall(uintptr_t arg)
{
    80003932:	1101                	addi	sp,sp,-32
    80003934:	ec06                	sd	ra,24(sp)
    80003936:	e822                	sd	s0,16(sp)
    80003938:	1000                	addi	s0,sp,32
    8000393a:	fea43423          	sd	a0,-24(s0)
  do_tohost_fromhost(0, 0, arg);
    8000393e:	fe843603          	ld	a2,-24(s0)
    80003942:	4581                	li	a1,0
    80003944:	4501                	li	a0,0
    80003946:	f61ff0ef          	jal	ra,800038a6 <do_tohost_fromhost>
}
    8000394a:	0001                	nop
    8000394c:	60e2                	ld	ra,24(sp)
    8000394e:	6442                	ld	s0,16(sp)
    80003950:	6105                	addi	sp,sp,32
    80003952:	8082                	ret

0000000080003954 <htif_console_putchar>:

void htif_console_putchar(uint8_t ch)
{
    80003954:	1101                	addi	sp,sp,-32
    80003956:	ec06                	sd	ra,24(sp)
    80003958:	e822                	sd	s0,16(sp)
    8000395a:	1000                	addi	s0,sp,32
    8000395c:	87aa                	mv	a5,a0
    8000395e:	fef407a3          	sb	a5,-17(s0)
  magic_mem[1] = 1;
  magic_mem[2] = (uintptr_t)&ch;
  magic_mem[3] = 1;
  do_tohost_fromhost(0, 0, (uintptr_t)magic_mem);
#else
  spinlock_lock(&htif_lock);
    80003962:	0000c517          	auipc	a0,0xc
    80003966:	6c650513          	addi	a0,a0,1734 # 80010028 <htif_lock>
    8000396a:	d79ff0ef          	jal	ra,800036e2 <spinlock_lock>
    __set_tohost(1, 1, ch);
    8000396e:	fef44783          	lbu	a5,-17(s0)
    80003972:	863e                	mv	a2,a5
    80003974:	4585                	li	a1,1
    80003976:	4505                	li	a0,1
    80003978:	e7bff0ef          	jal	ra,800037f2 <__set_tohost>
  spinlock_unlock(&htif_lock);
    8000397c:	0000c517          	auipc	a0,0xc
    80003980:	6ac50513          	addi	a0,a0,1708 # 80010028 <htif_lock>
    80003984:	d8dff0ef          	jal	ra,80003710 <spinlock_unlock>
#endif
}
    80003988:	0001                	nop
    8000398a:	60e2                	ld	ra,24(sp)
    8000398c:	6442                	ld	s0,16(sp)
    8000398e:	6105                	addi	sp,sp,32
    80003990:	8082                	ret

0000000080003992 <htif_poweroff>:

void htif_poweroff()
{
    80003992:	1141                	addi	sp,sp,-16
    80003994:	e406                	sd	ra,8(sp)
    80003996:	e022                	sd	s0,0(sp)
    80003998:	0800                	addi	s0,sp,16
  while (1) {
    spinlock_lock(&htif_lock);
    8000399a:	0000c517          	auipc	a0,0xc
    8000399e:	68e50513          	addi	a0,a0,1678 # 80010028 <htif_lock>
    800039a2:	d41ff0ef          	jal	ra,800036e2 <spinlock_lock>
    __set_tohost(0, 0, 1);
    800039a6:	4605                	li	a2,1
    800039a8:	4581                	li	a1,0
    800039aa:	4501                	li	a0,0
    800039ac:	e47ff0ef          	jal	ra,800037f2 <__set_tohost>
    spinlock_unlock(&htif_lock);
    800039b0:	0000c517          	auipc	a0,0xc
    800039b4:	67850513          	addi	a0,a0,1656 # 80010028 <htif_lock>
    800039b8:	d59ff0ef          	jal	ra,80003710 <spinlock_unlock>
    spinlock_lock(&htif_lock);
    800039bc:	bff9                	j	8000399a <htif_poweroff+0x8>

00000000800039be <htif_open>:
{
  int compat;
};

static void htif_open(const struct fdt_scan_node *node, void *extra)
{
    800039be:	7179                	addi	sp,sp,-48
    800039c0:	f406                	sd	ra,40(sp)
    800039c2:	f022                	sd	s0,32(sp)
    800039c4:	1800                	addi	s0,sp,48
    800039c6:	fca43c23          	sd	a0,-40(s0)
    800039ca:	fcb43823          	sd	a1,-48(s0)
  struct htif_scan *scan = (struct htif_scan *)extra;
    800039ce:	fd043783          	ld	a5,-48(s0)
    800039d2:	fef43423          	sd	a5,-24(s0)
  memset(scan, 0, sizeof(*scan));
    800039d6:	4611                	li	a2,4
    800039d8:	4581                	li	a1,0
    800039da:	fe843503          	ld	a0,-24(s0)
    800039de:	71c080ef          	jal	ra,8000c0fa <memset>
}
    800039e2:	0001                	nop
    800039e4:	70a2                	ld	ra,40(sp)
    800039e6:	7402                	ld	s0,32(sp)
    800039e8:	6145                	addi	sp,sp,48
    800039ea:	8082                	ret

00000000800039ec <htif_prop>:

static void htif_prop(const struct fdt_scan_prop *prop, void *extra)
{
    800039ec:	7179                	addi	sp,sp,-48
    800039ee:	f406                	sd	ra,40(sp)
    800039f0:	f022                	sd	s0,32(sp)
    800039f2:	1800                	addi	s0,sp,48
    800039f4:	fca43c23          	sd	a0,-40(s0)
    800039f8:	fcb43823          	sd	a1,-48(s0)
  struct htif_scan *scan = (struct htif_scan *)extra;
    800039fc:	fd043783          	ld	a5,-48(s0)
    80003a00:	fef43423          	sd	a5,-24(s0)
  if (!strcmp(prop->name, "compatible") && fdt_string_list_index(prop, "ucb,htif0") >= 0) {
    80003a04:	fd843783          	ld	a5,-40(s0)
    80003a08:	679c                	ld	a5,8(a5)
    80003a0a:	00009597          	auipc	a1,0x9
    80003a0e:	45658593          	addi	a1,a1,1110 # 8000ce60 <logo+0xaa0>
    80003a12:	853e                	mv	a0,a5
    80003a14:	7f0080ef          	jal	ra,8000c204 <strcmp>
    80003a18:	87aa                	mv	a5,a0
    80003a1a:	e385                	bnez	a5,80003a3a <htif_prop+0x4e>
    80003a1c:	00009597          	auipc	a1,0x9
    80003a20:	45458593          	addi	a1,a1,1108 # 8000ce70 <logo+0xab0>
    80003a24:	fd843503          	ld	a0,-40(s0)
    80003a28:	9e4fd0ef          	jal	ra,80000c0c <fdt_string_list_index>
    80003a2c:	87aa                	mv	a5,a0
    80003a2e:	0007c663          	bltz	a5,80003a3a <htif_prop+0x4e>
    scan->compat = 1;
    80003a32:	fe843783          	ld	a5,-24(s0)
    80003a36:	4705                	li	a4,1
    80003a38:	c398                	sw	a4,0(a5)
  }
}
    80003a3a:	0001                	nop
    80003a3c:	70a2                	ld	ra,40(sp)
    80003a3e:	7402                	ld	s0,32(sp)
    80003a40:	6145                	addi	sp,sp,48
    80003a42:	8082                	ret

0000000080003a44 <htif_done>:

static void htif_done(const struct fdt_scan_node *node, void *extra)
{
    80003a44:	7179                	addi	sp,sp,-48
    80003a46:	f422                	sd	s0,40(sp)
    80003a48:	1800                	addi	s0,sp,48
    80003a4a:	fca43c23          	sd	a0,-40(s0)
    80003a4e:	fcb43823          	sd	a1,-48(s0)
  struct htif_scan *scan = (struct htif_scan *)extra;
    80003a52:	fd043783          	ld	a5,-48(s0)
    80003a56:	fef43423          	sd	a5,-24(s0)
  if (!scan->compat) return;
    80003a5a:	fe843783          	ld	a5,-24(s0)
    80003a5e:	439c                	lw	a5,0(a5)
    80003a60:	cb81                	beqz	a5,80003a70 <htif_done+0x2c>

  htif = 1;
    80003a62:	00015797          	auipc	a5,0x15
    80003a66:	5de78793          	addi	a5,a5,1502 # 80019040 <htif>
    80003a6a:	4705                	li	a4,1
    80003a6c:	e398                	sd	a4,0(a5)
    80003a6e:	a011                	j	80003a72 <htif_done+0x2e>
  if (!scan->compat) return;
    80003a70:	0001                	nop
}
    80003a72:	7422                	ld	s0,40(sp)
    80003a74:	6145                	addi	sp,sp,48
    80003a76:	8082                	ret

0000000080003a78 <query_htif>:

void query_htif(uintptr_t fdt)
{
    80003a78:	715d                	addi	sp,sp,-80
    80003a7a:	e486                	sd	ra,72(sp)
    80003a7c:	e0a2                	sd	s0,64(sp)
    80003a7e:	0880                	addi	s0,sp,80
    80003a80:	faa43c23          	sd	a0,-72(s0)
  struct fdt_cb cb;
  struct htif_scan scan;

  memset(&cb, 0, sizeof(cb));
    80003a84:	fc840793          	addi	a5,s0,-56
    80003a88:	02800613          	li	a2,40
    80003a8c:	4581                	li	a1,0
    80003a8e:	853e                	mv	a0,a5
    80003a90:	66a080ef          	jal	ra,8000c0fa <memset>
  cb.open = htif_open;
    80003a94:	00000797          	auipc	a5,0x0
    80003a98:	f2a78793          	addi	a5,a5,-214 # 800039be <htif_open>
    80003a9c:	fcf43423          	sd	a5,-56(s0)
  cb.prop = htif_prop;
    80003aa0:	00000797          	auipc	a5,0x0
    80003aa4:	f4c78793          	addi	a5,a5,-180 # 800039ec <htif_prop>
    80003aa8:	fcf43823          	sd	a5,-48(s0)
  cb.done = htif_done;
    80003aac:	00000797          	auipc	a5,0x0
    80003ab0:	f9878793          	addi	a5,a5,-104 # 80003a44 <htif_done>
    80003ab4:	fcf43c23          	sd	a5,-40(s0)
  cb.extra = &scan;
    80003ab8:	fc040793          	addi	a5,s0,-64
    80003abc:	fef43423          	sd	a5,-24(s0)

  fdt_scan(fdt, &cb);
    80003ac0:	fc840793          	addi	a5,s0,-56
    80003ac4:	85be                	mv	a1,a5
    80003ac6:	fb843503          	ld	a0,-72(s0)
    80003aca:	efdfc0ef          	jal	ra,800009c6 <fdt_scan>
}
    80003ace:	0001                	nop
    80003ad0:	60a6                	ld	ra,72(sp)
    80003ad2:	6406                	ld	s0,64(sp)
    80003ad4:	6161                	addi	sp,sp,80
    80003ad6:	8082                	ret

0000000080003ad8 <uart_putchar>:
#include "fdt.h"

volatile uint32_t* uart;

void uart_putchar(uint8_t ch)
{
    80003ad8:	7179                	addi	sp,sp,-48
    80003ada:	f422                	sd	s0,40(sp)
    80003adc:	1800                	addi	s0,sp,48
    80003ade:	87aa                	mv	a5,a0
    80003ae0:	fcf40fa3          	sb	a5,-33(s0)
#ifdef __riscv_atomic
    int32_t r;
    do {
      __asm__ __volatile__ (
        "amoor.w %0, %2, %1\n"
        : "=r" (r), "+A" (uart[UART_REG_TXFIFO])
    80003ae4:	00015797          	auipc	a5,0x15
    80003ae8:	56c78793          	addi	a5,a5,1388 # 80019050 <uart>
    80003aec:	639c                	ld	a5,0(a5)
      __asm__ __volatile__ (
    80003aee:	fdf44703          	lbu	a4,-33(s0)
    80003af2:	40e7a72f          	amoor.w	a4,a4,(a5)
    80003af6:	fee42623          	sw	a4,-20(s0)
        : "r" (ch));
    } while (r < 0);
    80003afa:	fec42783          	lw	a5,-20(s0)
    80003afe:	2781                	sext.w	a5,a5
    80003b00:	fe07c2e3          	bltz	a5,80003ae4 <uart_putchar+0xc>
#else
    volatile uint32_t *tx = uart + UART_REG_TXFIFO;
    while ((int32_t)(*tx) < 0);
    *tx = ch;
#endif
}
    80003b04:	0001                	nop
    80003b06:	7422                	ld	s0,40(sp)
    80003b08:	6145                	addi	sp,sp,48
    80003b0a:	8082                	ret

0000000080003b0c <uart_getchar>:

int uart_getchar()
{
    80003b0c:	1101                	addi	sp,sp,-32
    80003b0e:	ec22                	sd	s0,24(sp)
    80003b10:	1000                	addi	s0,sp,32
  int32_t ch = uart[UART_REG_RXFIFO];
    80003b12:	00015797          	auipc	a5,0x15
    80003b16:	53e78793          	addi	a5,a5,1342 # 80019050 <uart>
    80003b1a:	639c                	ld	a5,0(a5)
    80003b1c:	0791                	addi	a5,a5,4
    80003b1e:	439c                	lw	a5,0(a5)
    80003b20:	2781                	sext.w	a5,a5
    80003b22:	fef42623          	sw	a5,-20(s0)
  if (ch < 0) return -1;
    80003b26:	fec42783          	lw	a5,-20(s0)
    80003b2a:	2781                	sext.w	a5,a5
    80003b2c:	0007d463          	bgez	a5,80003b34 <uart_getchar+0x28>
    80003b30:	57fd                	li	a5,-1
    80003b32:	a019                	j	80003b38 <uart_getchar+0x2c>
  return ch;
    80003b34:	fec42783          	lw	a5,-20(s0)
}
    80003b38:	853e                	mv	a0,a5
    80003b3a:	6462                	ld	s0,24(sp)
    80003b3c:	6105                	addi	sp,sp,32
    80003b3e:	8082                	ret

0000000080003b40 <uart_open>:
  int compat;
  uint64_t reg;
};

static void uart_open(const struct fdt_scan_node *node, void *extra)
{
    80003b40:	7179                	addi	sp,sp,-48
    80003b42:	f406                	sd	ra,40(sp)
    80003b44:	f022                	sd	s0,32(sp)
    80003b46:	1800                	addi	s0,sp,48
    80003b48:	fca43c23          	sd	a0,-40(s0)
    80003b4c:	fcb43823          	sd	a1,-48(s0)
  struct uart_scan *scan = (struct uart_scan *)extra;
    80003b50:	fd043783          	ld	a5,-48(s0)
    80003b54:	fef43423          	sd	a5,-24(s0)
  memset(scan, 0, sizeof(*scan));
    80003b58:	4641                	li	a2,16
    80003b5a:	4581                	li	a1,0
    80003b5c:	fe843503          	ld	a0,-24(s0)
    80003b60:	59a080ef          	jal	ra,8000c0fa <memset>
}
    80003b64:	0001                	nop
    80003b66:	70a2                	ld	ra,40(sp)
    80003b68:	7402                	ld	s0,32(sp)
    80003b6a:	6145                	addi	sp,sp,48
    80003b6c:	8082                	ret

0000000080003b6e <uart_prop>:

static void uart_prop(const struct fdt_scan_prop *prop, void *extra)
{
    80003b6e:	7179                	addi	sp,sp,-48
    80003b70:	f406                	sd	ra,40(sp)
    80003b72:	f022                	sd	s0,32(sp)
    80003b74:	1800                	addi	s0,sp,48
    80003b76:	fca43c23          	sd	a0,-40(s0)
    80003b7a:	fcb43823          	sd	a1,-48(s0)
  struct uart_scan *scan = (struct uart_scan *)extra;
    80003b7e:	fd043783          	ld	a5,-48(s0)
    80003b82:	fef43423          	sd	a5,-24(s0)
  if (!strcmp(prop->name, "compatible") && fdt_string_list_index(prop, "sifive,uart0") >= 0) {
    80003b86:	fd843783          	ld	a5,-40(s0)
    80003b8a:	679c                	ld	a5,8(a5)
    80003b8c:	00009597          	auipc	a1,0x9
    80003b90:	2f458593          	addi	a1,a1,756 # 8000ce80 <logo+0xac0>
    80003b94:	853e                	mv	a0,a5
    80003b96:	66e080ef          	jal	ra,8000c204 <strcmp>
    80003b9a:	87aa                	mv	a5,a0
    80003b9c:	e38d                	bnez	a5,80003bbe <uart_prop+0x50>
    80003b9e:	00009597          	auipc	a1,0x9
    80003ba2:	2f258593          	addi	a1,a1,754 # 8000ce90 <logo+0xad0>
    80003ba6:	fd843503          	ld	a0,-40(s0)
    80003baa:	862fd0ef          	jal	ra,80000c0c <fdt_string_list_index>
    80003bae:	87aa                	mv	a5,a0
    80003bb0:	0007c763          	bltz	a5,80003bbe <uart_prop+0x50>
    scan->compat = 1;
    80003bb4:	fe843783          	ld	a5,-24(s0)
    80003bb8:	4705                	li	a4,1
    80003bba:	c398                	sw	a4,0(a5)
  } else if (!strcmp(prop->name, "reg")) {
    fdt_get_address(prop->node->parent, prop->value, &scan->reg);
  }
}
    80003bbc:	a825                	j	80003bf4 <uart_prop+0x86>
  } else if (!strcmp(prop->name, "reg")) {
    80003bbe:	fd843783          	ld	a5,-40(s0)
    80003bc2:	679c                	ld	a5,8(a5)
    80003bc4:	00009597          	auipc	a1,0x9
    80003bc8:	2dc58593          	addi	a1,a1,732 # 8000cea0 <logo+0xae0>
    80003bcc:	853e                	mv	a0,a5
    80003bce:	636080ef          	jal	ra,8000c204 <strcmp>
    80003bd2:	87aa                	mv	a5,a0
    80003bd4:	e385                	bnez	a5,80003bf4 <uart_prop+0x86>
    fdt_get_address(prop->node->parent, prop->value, &scan->reg);
    80003bd6:	fd843783          	ld	a5,-40(s0)
    80003bda:	639c                	ld	a5,0(a5)
    80003bdc:	6398                	ld	a4,0(a5)
    80003bde:	fd843783          	ld	a5,-40(s0)
    80003be2:	6b94                	ld	a3,16(a5)
    80003be4:	fe843783          	ld	a5,-24(s0)
    80003be8:	07a1                	addi	a5,a5,8
    80003bea:	863e                	mv	a2,a5
    80003bec:	85b6                	mv	a1,a3
    80003bee:	853a                	mv	a0,a4
    80003bf0:	eebfc0ef          	jal	ra,80000ada <fdt_get_address>
}
    80003bf4:	0001                	nop
    80003bf6:	70a2                	ld	ra,40(sp)
    80003bf8:	7402                	ld	s0,32(sp)
    80003bfa:	6145                	addi	sp,sp,48
    80003bfc:	8082                	ret

0000000080003bfe <uart_done>:

static void uart_done(const struct fdt_scan_node *node, void *extra)
{
    80003bfe:	7179                	addi	sp,sp,-48
    80003c00:	f422                	sd	s0,40(sp)
    80003c02:	1800                	addi	s0,sp,48
    80003c04:	fca43c23          	sd	a0,-40(s0)
    80003c08:	fcb43823          	sd	a1,-48(s0)
  struct uart_scan *scan = (struct uart_scan *)extra;
    80003c0c:	fd043783          	ld	a5,-48(s0)
    80003c10:	fef43423          	sd	a5,-24(s0)
  if (!scan->compat || !scan->reg || uart) return;
    80003c14:	fe843783          	ld	a5,-24(s0)
    80003c18:	439c                	lw	a5,0(a5)
    80003c1a:	c7a9                	beqz	a5,80003c64 <uart_done+0x66>
    80003c1c:	fe843783          	ld	a5,-24(s0)
    80003c20:	679c                	ld	a5,8(a5)
    80003c22:	c3a9                	beqz	a5,80003c64 <uart_done+0x66>
    80003c24:	00015797          	auipc	a5,0x15
    80003c28:	42c78793          	addi	a5,a5,1068 # 80019050 <uart>
    80003c2c:	639c                	ld	a5,0(a5)
    80003c2e:	eb9d                	bnez	a5,80003c64 <uart_done+0x66>

  // Enable Rx/Tx channels
  uart = (void*)(uintptr_t)scan->reg;
    80003c30:	fe843783          	ld	a5,-24(s0)
    80003c34:	679c                	ld	a5,8(a5)
    80003c36:	873e                	mv	a4,a5
    80003c38:	00015797          	auipc	a5,0x15
    80003c3c:	41878793          	addi	a5,a5,1048 # 80019050 <uart>
    80003c40:	e398                	sd	a4,0(a5)
  uart[UART_REG_TXCTRL] = UART_TXEN;
    80003c42:	00015797          	auipc	a5,0x15
    80003c46:	40e78793          	addi	a5,a5,1038 # 80019050 <uart>
    80003c4a:	639c                	ld	a5,0(a5)
    80003c4c:	07a1                	addi	a5,a5,8
    80003c4e:	4705                	li	a4,1
    80003c50:	c398                	sw	a4,0(a5)
  uart[UART_REG_RXCTRL] = UART_RXEN;
    80003c52:	00015797          	auipc	a5,0x15
    80003c56:	3fe78793          	addi	a5,a5,1022 # 80019050 <uart>
    80003c5a:	639c                	ld	a5,0(a5)
    80003c5c:	07b1                	addi	a5,a5,12
    80003c5e:	4705                	li	a4,1
    80003c60:	c398                	sw	a4,0(a5)
    80003c62:	a011                	j	80003c66 <uart_done+0x68>
  if (!scan->compat || !scan->reg || uart) return;
    80003c64:	0001                	nop
}
    80003c66:	7422                	ld	s0,40(sp)
    80003c68:	6145                	addi	sp,sp,48
    80003c6a:	8082                	ret

0000000080003c6c <query_uart>:

void query_uart(uintptr_t fdt)
{
    80003c6c:	711d                	addi	sp,sp,-96
    80003c6e:	ec86                	sd	ra,88(sp)
    80003c70:	e8a2                	sd	s0,80(sp)
    80003c72:	1080                	addi	s0,sp,96
    80003c74:	faa43423          	sd	a0,-88(s0)
  struct fdt_cb cb;
  struct uart_scan scan;

  memset(&cb, 0, sizeof(cb));
    80003c78:	fc840793          	addi	a5,s0,-56
    80003c7c:	02800613          	li	a2,40
    80003c80:	4581                	li	a1,0
    80003c82:	853e                	mv	a0,a5
    80003c84:	476080ef          	jal	ra,8000c0fa <memset>
  cb.open = uart_open;
    80003c88:	00000797          	auipc	a5,0x0
    80003c8c:	eb878793          	addi	a5,a5,-328 # 80003b40 <uart_open>
    80003c90:	fcf43423          	sd	a5,-56(s0)
  cb.prop = uart_prop;
    80003c94:	00000797          	auipc	a5,0x0
    80003c98:	eda78793          	addi	a5,a5,-294 # 80003b6e <uart_prop>
    80003c9c:	fcf43823          	sd	a5,-48(s0)
  cb.done = uart_done;
    80003ca0:	00000797          	auipc	a5,0x0
    80003ca4:	f5e78793          	addi	a5,a5,-162 # 80003bfe <uart_done>
    80003ca8:	fcf43c23          	sd	a5,-40(s0)
  cb.extra = &scan;
    80003cac:	fb840793          	addi	a5,s0,-72
    80003cb0:	fef43423          	sd	a5,-24(s0)

  fdt_scan(fdt, &cb);
    80003cb4:	fc840793          	addi	a5,s0,-56
    80003cb8:	85be                	mv	a1,a5
    80003cba:	fa843503          	ld	a0,-88(s0)
    80003cbe:	d09fc0ef          	jal	ra,800009c6 <fdt_scan>
}
    80003cc2:	0001                	nop
    80003cc4:	60e6                	ld	ra,88(sp)
    80003cc6:	6446                	ld	s0,80(sp)
    80003cc8:	6125                	addi	sp,sp,96
    80003cca:	8082                	ret

0000000080003ccc <uart16550_putchar>:
#ifndef UART_DEFAULT_BAUD
#define UART_DEFAULT_BAUD  38400
#endif

void uart16550_putchar(uint8_t ch)
{
    80003ccc:	1101                	addi	sp,sp,-32
    80003cce:	ec22                	sd	s0,24(sp)
    80003cd0:	1000                	addi	s0,sp,32
    80003cd2:	87aa                	mv	a5,a0
    80003cd4:	fef407a3          	sb	a5,-17(s0)
  while ((uart16550[UART_REG_LSR << uart16550_reg_shift] & UART_REG_STATUS_TX) == 0);
    80003cd8:	0001                	nop
    80003cda:	00015797          	auipc	a5,0x15
    80003cde:	37e78793          	addi	a5,a5,894 # 80019058 <uart16550>
    80003ce2:	639c                	ld	a5,0(a5)
    80003ce4:	0000c717          	auipc	a4,0xc
    80003ce8:	34870713          	addi	a4,a4,840 # 8001002c <uart16550_reg_shift>
    80003cec:	4318                	lw	a4,0(a4)
    80003cee:	4695                	li	a3,5
    80003cf0:	00e6973b          	sllw	a4,a3,a4
    80003cf4:	2701                	sext.w	a4,a4
    80003cf6:	97ba                	add	a5,a5,a4
    80003cf8:	0007c783          	lbu	a5,0(a5)
    80003cfc:	0ff7f793          	andi	a5,a5,255
    80003d00:	2781                	sext.w	a5,a5
    80003d02:	0207f793          	andi	a5,a5,32
    80003d06:	2781                	sext.w	a5,a5
    80003d08:	dbe9                	beqz	a5,80003cda <uart16550_putchar+0xe>
  uart16550[UART_REG_QUEUE << uart16550_reg_shift] = ch;
    80003d0a:	00015797          	auipc	a5,0x15
    80003d0e:	34e78793          	addi	a5,a5,846 # 80019058 <uart16550>
    80003d12:	639c                	ld	a5,0(a5)
    80003d14:	fef44703          	lbu	a4,-17(s0)
    80003d18:	00e78023          	sb	a4,0(a5)
}
    80003d1c:	0001                	nop
    80003d1e:	6462                	ld	s0,24(sp)
    80003d20:	6105                	addi	sp,sp,32
    80003d22:	8082                	ret

0000000080003d24 <uart16550_getchar>:

int uart16550_getchar()
{
    80003d24:	1141                	addi	sp,sp,-16
    80003d26:	e422                	sd	s0,8(sp)
    80003d28:	0800                	addi	s0,sp,16
  if (uart16550[UART_REG_LSR << uart16550_reg_shift] & UART_REG_STATUS_RX)
    80003d2a:	00015797          	auipc	a5,0x15
    80003d2e:	32e78793          	addi	a5,a5,814 # 80019058 <uart16550>
    80003d32:	639c                	ld	a5,0(a5)
    80003d34:	0000c717          	auipc	a4,0xc
    80003d38:	2f870713          	addi	a4,a4,760 # 8001002c <uart16550_reg_shift>
    80003d3c:	4318                	lw	a4,0(a4)
    80003d3e:	4695                	li	a3,5
    80003d40:	00e6973b          	sllw	a4,a3,a4
    80003d44:	2701                	sext.w	a4,a4
    80003d46:	97ba                	add	a5,a5,a4
    80003d48:	0007c783          	lbu	a5,0(a5)
    80003d4c:	0ff7f793          	andi	a5,a5,255
    80003d50:	2781                	sext.w	a5,a5
    80003d52:	8b85                	andi	a5,a5,1
    80003d54:	2781                	sext.w	a5,a5
    80003d56:	cf81                	beqz	a5,80003d6e <uart16550_getchar+0x4a>
    return uart16550[UART_REG_QUEUE << uart16550_reg_shift];
    80003d58:	00015797          	auipc	a5,0x15
    80003d5c:	30078793          	addi	a5,a5,768 # 80019058 <uart16550>
    80003d60:	639c                	ld	a5,0(a5)
    80003d62:	0007c783          	lbu	a5,0(a5)
    80003d66:	0ff7f793          	andi	a5,a5,255
    80003d6a:	2781                	sext.w	a5,a5
    80003d6c:	a011                	j	80003d70 <uart16550_getchar+0x4c>
  return -1;
    80003d6e:	57fd                	li	a5,-1
}
    80003d70:	853e                	mv	a0,a5
    80003d72:	6422                	ld	s0,8(sp)
    80003d74:	0141                	addi	sp,sp,16
    80003d76:	8082                	ret

0000000080003d78 <uart16550_open>:
  uint32_t clock_freq;
  uint32_t baud;
};

static void uart16550_open(const struct fdt_scan_node *node, void *extra)
{
    80003d78:	7179                	addi	sp,sp,-48
    80003d7a:	f406                	sd	ra,40(sp)
    80003d7c:	f022                	sd	s0,32(sp)
    80003d7e:	1800                	addi	s0,sp,48
    80003d80:	fca43c23          	sd	a0,-40(s0)
    80003d84:	fcb43823          	sd	a1,-48(s0)
  struct uart16550_scan *scan = (struct uart16550_scan *)extra;
    80003d88:	fd043783          	ld	a5,-48(s0)
    80003d8c:	fef43423          	sd	a5,-24(s0)
  memset(scan, 0, sizeof(*scan));
    80003d90:	02000613          	li	a2,32
    80003d94:	4581                	li	a1,0
    80003d96:	fe843503          	ld	a0,-24(s0)
    80003d9a:	360080ef          	jal	ra,8000c0fa <memset>
  scan->baud = UART_DEFAULT_BAUD;
    80003d9e:	fe843783          	ld	a5,-24(s0)
    80003da2:	6725                	lui	a4,0x9
    80003da4:	6007071b          	addiw	a4,a4,1536
    80003da8:	cfd8                	sw	a4,28(a5)
}
    80003daa:	0001                	nop
    80003dac:	70a2                	ld	ra,40(sp)
    80003dae:	7402                	ld	s0,32(sp)
    80003db0:	6145                	addi	sp,sp,48
    80003db2:	8082                	ret

0000000080003db4 <uart16550_prop>:

static void uart16550_prop(const struct fdt_scan_prop *prop, void *extra)
{
    80003db4:	7179                	addi	sp,sp,-48
    80003db6:	f406                	sd	ra,40(sp)
    80003db8:	f022                	sd	s0,32(sp)
    80003dba:	1800                	addi	s0,sp,48
    80003dbc:	fca43c23          	sd	a0,-40(s0)
    80003dc0:	fcb43823          	sd	a1,-48(s0)
  struct uart16550_scan *scan = (struct uart16550_scan *)extra;
    80003dc4:	fd043783          	ld	a5,-48(s0)
    80003dc8:	fef43423          	sd	a5,-24(s0)
  // For the purposes of the boot loader, the 16750 is a superset of what 16550a provides
  if (!strcmp(prop->name, "compatible") && ((fdt_string_list_index(prop, "ns16550a") != -1) || (fdt_string_list_index(prop, "ns16750") != -1))) {
    80003dcc:	fd843783          	ld	a5,-40(s0)
    80003dd0:	679c                	ld	a5,8(a5)
    80003dd2:	00009597          	auipc	a1,0x9
    80003dd6:	0d658593          	addi	a1,a1,214 # 8000cea8 <logo+0xae8>
    80003dda:	853e                	mv	a0,a5
    80003ddc:	428080ef          	jal	ra,8000c204 <strcmp>
    80003de0:	87aa                	mv	a5,a0
    80003de2:	e3a1                	bnez	a5,80003e22 <uart16550_prop+0x6e>
    80003de4:	00009597          	auipc	a1,0x9
    80003de8:	0d458593          	addi	a1,a1,212 # 8000ceb8 <logo+0xaf8>
    80003dec:	fd843503          	ld	a0,-40(s0)
    80003df0:	e1dfc0ef          	jal	ra,80000c0c <fdt_string_list_index>
    80003df4:	87aa                	mv	a5,a0
    80003df6:	873e                	mv	a4,a5
    80003df8:	57fd                	li	a5,-1
    80003dfa:	00f71f63          	bne	a4,a5,80003e18 <uart16550_prop+0x64>
    80003dfe:	00009597          	auipc	a1,0x9
    80003e02:	0ca58593          	addi	a1,a1,202 # 8000cec8 <logo+0xb08>
    80003e06:	fd843503          	ld	a0,-40(s0)
    80003e0a:	e03fc0ef          	jal	ra,80000c0c <fdt_string_list_index>
    80003e0e:	87aa                	mv	a5,a0
    80003e10:	873e                	mv	a4,a5
    80003e12:	57fd                	li	a5,-1
    80003e14:	00f70763          	beq	a4,a5,80003e22 <uart16550_prop+0x6e>
    scan->compat = 1;
    80003e18:	fe843783          	ld	a5,-24(s0)
    80003e1c:	4705                	li	a4,1
    80003e1e:	c398                	sw	a4,0(a5)
    // This is the property that Linux uses
    scan->baud = fdt_get_value(prop, 0);
  } else if (!strcmp(prop->name, "clock-frequency")) {
    scan->clock_freq = fdt_get_value(prop, 0);
  }
}
    80003e20:	a8e5                	j	80003f18 <uart16550_prop+0x164>
  } else if (!strcmp(prop->name, "reg")) {
    80003e22:	fd843783          	ld	a5,-40(s0)
    80003e26:	679c                	ld	a5,8(a5)
    80003e28:	00009597          	auipc	a1,0x9
    80003e2c:	0a858593          	addi	a1,a1,168 # 8000ced0 <logo+0xb10>
    80003e30:	853e                	mv	a0,a5
    80003e32:	3d2080ef          	jal	ra,8000c204 <strcmp>
    80003e36:	87aa                	mv	a5,a0
    80003e38:	e38d                	bnez	a5,80003e5a <uart16550_prop+0xa6>
    fdt_get_address(prop->node->parent, prop->value, &scan->reg);
    80003e3a:	fd843783          	ld	a5,-40(s0)
    80003e3e:	639c                	ld	a5,0(a5)
    80003e40:	6398                	ld	a4,0(a5)
    80003e42:	fd843783          	ld	a5,-40(s0)
    80003e46:	6b94                	ld	a3,16(a5)
    80003e48:	fe843783          	ld	a5,-24(s0)
    80003e4c:	07a1                	addi	a5,a5,8
    80003e4e:	863e                	mv	a2,a5
    80003e50:	85b6                	mv	a1,a3
    80003e52:	853a                	mv	a0,a4
    80003e54:	c87fc0ef          	jal	ra,80000ada <fdt_get_address>
}
    80003e58:	a0c1                	j	80003f18 <uart16550_prop+0x164>
  } else if (!strcmp(prop->name, "reg-shift")) {
    80003e5a:	fd843783          	ld	a5,-40(s0)
    80003e5e:	679c                	ld	a5,8(a5)
    80003e60:	00009597          	auipc	a1,0x9
    80003e64:	07858593          	addi	a1,a1,120 # 8000ced8 <logo+0xb18>
    80003e68:	853e                	mv	a0,a5
    80003e6a:	39a080ef          	jal	ra,8000c204 <strcmp>
    80003e6e:	87aa                	mv	a5,a0
    80003e70:	ef89                	bnez	a5,80003e8a <uart16550_prop+0xd6>
    scan->reg_shift = fdt_get_value(prop, 0);
    80003e72:	4581                	li	a1,0
    80003e74:	fd843503          	ld	a0,-40(s0)
    80003e78:	d5ffc0ef          	jal	ra,80000bd6 <fdt_get_value>
    80003e7c:	87aa                	mv	a5,a0
    80003e7e:	0007871b          	sext.w	a4,a5
    80003e82:	fe843783          	ld	a5,-24(s0)
    80003e86:	cbd8                	sw	a4,20(a5)
}
    80003e88:	a841                	j	80003f18 <uart16550_prop+0x164>
  } else if (!strcmp(prop->name, "reg-offset")) {
    80003e8a:	fd843783          	ld	a5,-40(s0)
    80003e8e:	679c                	ld	a5,8(a5)
    80003e90:	00009597          	auipc	a1,0x9
    80003e94:	05858593          	addi	a1,a1,88 # 8000cee8 <logo+0xb28>
    80003e98:	853e                	mv	a0,a5
    80003e9a:	36a080ef          	jal	ra,8000c204 <strcmp>
    80003e9e:	87aa                	mv	a5,a0
    80003ea0:	ef89                	bnez	a5,80003eba <uart16550_prop+0x106>
    scan->reg_offset = fdt_get_value(prop, 0);
    80003ea2:	4581                	li	a1,0
    80003ea4:	fd843503          	ld	a0,-40(s0)
    80003ea8:	d2ffc0ef          	jal	ra,80000bd6 <fdt_get_value>
    80003eac:	87aa                	mv	a5,a0
    80003eae:	0007871b          	sext.w	a4,a5
    80003eb2:	fe843783          	ld	a5,-24(s0)
    80003eb6:	cb98                	sw	a4,16(a5)
}
    80003eb8:	a085                	j	80003f18 <uart16550_prop+0x164>
  } else if (!strcmp(prop->name, "current-speed")) {
    80003eba:	fd843783          	ld	a5,-40(s0)
    80003ebe:	679c                	ld	a5,8(a5)
    80003ec0:	00009597          	auipc	a1,0x9
    80003ec4:	03858593          	addi	a1,a1,56 # 8000cef8 <logo+0xb38>
    80003ec8:	853e                	mv	a0,a5
    80003eca:	33a080ef          	jal	ra,8000c204 <strcmp>
    80003ece:	87aa                	mv	a5,a0
    80003ed0:	ef89                	bnez	a5,80003eea <uart16550_prop+0x136>
    scan->baud = fdt_get_value(prop, 0);
    80003ed2:	4581                	li	a1,0
    80003ed4:	fd843503          	ld	a0,-40(s0)
    80003ed8:	cfffc0ef          	jal	ra,80000bd6 <fdt_get_value>
    80003edc:	87aa                	mv	a5,a0
    80003ede:	0007871b          	sext.w	a4,a5
    80003ee2:	fe843783          	ld	a5,-24(s0)
    80003ee6:	cfd8                	sw	a4,28(a5)
}
    80003ee8:	a805                	j	80003f18 <uart16550_prop+0x164>
  } else if (!strcmp(prop->name, "clock-frequency")) {
    80003eea:	fd843783          	ld	a5,-40(s0)
    80003eee:	679c                	ld	a5,8(a5)
    80003ef0:	00009597          	auipc	a1,0x9
    80003ef4:	01858593          	addi	a1,a1,24 # 8000cf08 <logo+0xb48>
    80003ef8:	853e                	mv	a0,a5
    80003efa:	30a080ef          	jal	ra,8000c204 <strcmp>
    80003efe:	87aa                	mv	a5,a0
    80003f00:	ef81                	bnez	a5,80003f18 <uart16550_prop+0x164>
    scan->clock_freq = fdt_get_value(prop, 0);
    80003f02:	4581                	li	a1,0
    80003f04:	fd843503          	ld	a0,-40(s0)
    80003f08:	ccffc0ef          	jal	ra,80000bd6 <fdt_get_value>
    80003f0c:	87aa                	mv	a5,a0
    80003f0e:	0007871b          	sext.w	a4,a5
    80003f12:	fe843783          	ld	a5,-24(s0)
    80003f16:	cf98                	sw	a4,24(a5)
}
    80003f18:	0001                	nop
    80003f1a:	70a2                	ld	ra,40(sp)
    80003f1c:	7402                	ld	s0,32(sp)
    80003f1e:	6145                	addi	sp,sp,48
    80003f20:	8082                	ret

0000000080003f22 <uart16550_done>:

static void uart16550_done(const struct fdt_scan_node *node, void *extra)
{
    80003f22:	7179                	addi	sp,sp,-48
    80003f24:	f422                	sd	s0,40(sp)
    80003f26:	1800                	addi	s0,sp,48
    80003f28:	fca43c23          	sd	a0,-40(s0)
    80003f2c:	fcb43823          	sd	a1,-48(s0)
  uint32_t clock_freq;
  struct uart16550_scan *scan = (struct uart16550_scan *)extra;
    80003f30:	fd043783          	ld	a5,-48(s0)
    80003f34:	fef43023          	sd	a5,-32(s0)
  if (!scan->compat || !scan->reg || uart16550) return;
    80003f38:	fe043783          	ld	a5,-32(s0)
    80003f3c:	439c                	lw	a5,0(a5)
    80003f3e:	18078963          	beqz	a5,800040d0 <uart16550_done+0x1ae>
    80003f42:	fe043783          	ld	a5,-32(s0)
    80003f46:	679c                	ld	a5,8(a5)
    80003f48:	18078463          	beqz	a5,800040d0 <uart16550_done+0x1ae>
    80003f4c:	00015797          	auipc	a5,0x15
    80003f50:	10c78793          	addi	a5,a5,268 # 80019058 <uart16550>
    80003f54:	639c                	ld	a5,0(a5)
    80003f56:	16079d63          	bnez	a5,800040d0 <uart16550_done+0x1ae>

  if (scan->clock_freq != 0)
    80003f5a:	fe043783          	ld	a5,-32(s0)
    80003f5e:	4f9c                	lw	a5,24(a5)
    80003f60:	cb89                	beqz	a5,80003f72 <uart16550_done+0x50>
    uart16550_clock = scan->clock_freq;
    80003f62:	fe043783          	ld	a5,-32(s0)
    80003f66:	4f98                	lw	a4,24(a5)
    80003f68:	0000b797          	auipc	a5,0xb
    80003f6c:	12c78793          	addi	a5,a5,300 # 8000f094 <uart16550_clock>
    80003f70:	c398                	sw	a4,0(a5)
  // if device tree doesn't supply a clock, fallback to default clock of 1843200

  // Check for divide by zero
  uint32_t divisor = uart16550_clock / (16 * (scan->baud ? scan->baud : UART_DEFAULT_BAUD));
    80003f72:	0000b797          	auipc	a5,0xb
    80003f76:	12278793          	addi	a5,a5,290 # 8000f094 <uart16550_clock>
    80003f7a:	4398                	lw	a4,0(a5)
    80003f7c:	fe043783          	ld	a5,-32(s0)
    80003f80:	4fdc                	lw	a5,28(a5)
    80003f82:	cb81                	beqz	a5,80003f92 <uart16550_done+0x70>
    80003f84:	fe043783          	ld	a5,-32(s0)
    80003f88:	4fdc                	lw	a5,28(a5)
    80003f8a:	0047979b          	slliw	a5,a5,0x4
    80003f8e:	2781                	sext.w	a5,a5
    80003f90:	a019                	j	80003f96 <uart16550_done+0x74>
    80003f92:	000967b7          	lui	a5,0x96
    80003f96:	02f757bb          	divuw	a5,a4,a5
    80003f9a:	fef42623          	sw	a5,-20(s0)
  // If the divisor is out of range, don't assert, set the rate back to the default
  if (divisor >= 0x10000u)
    80003f9e:	fec42783          	lw	a5,-20(s0)
    80003fa2:	0007871b          	sext.w	a4,a5
    80003fa6:	67c1                	lui	a5,0x10
    80003fa8:	00f76e63          	bltu	a4,a5,80003fc4 <uart16550_done+0xa2>
    divisor = uart16550_clock / (16 * UART_DEFAULT_BAUD);
    80003fac:	0000b797          	auipc	a5,0xb
    80003fb0:	0e878793          	addi	a5,a5,232 # 8000f094 <uart16550_clock>
    80003fb4:	439c                	lw	a5,0(a5)
    80003fb6:	873e                	mv	a4,a5
    80003fb8:	000967b7          	lui	a5,0x96
    80003fbc:	02f757bb          	divuw	a5,a4,a5
    80003fc0:	fef42623          	sw	a5,-20(s0)

  uart16550 = (void*)((uintptr_t)scan->reg + scan->reg_offset);
    80003fc4:	fe043783          	ld	a5,-32(s0)
    80003fc8:	6798                	ld	a4,8(a5)
    80003fca:	fe043783          	ld	a5,-32(s0)
    80003fce:	4b9c                	lw	a5,16(a5)
    80003fd0:	1782                	slli	a5,a5,0x20
    80003fd2:	9381                	srli	a5,a5,0x20
    80003fd4:	97ba                	add	a5,a5,a4
    80003fd6:	873e                	mv	a4,a5
    80003fd8:	00015797          	auipc	a5,0x15
    80003fdc:	08078793          	addi	a5,a5,128 # 80019058 <uart16550>
    80003fe0:	e398                	sd	a4,0(a5)
  uart16550_reg_shift = scan->reg_shift;
    80003fe2:	fe043783          	ld	a5,-32(s0)
    80003fe6:	4bd8                	lw	a4,20(a5)
    80003fe8:	0000c797          	auipc	a5,0xc
    80003fec:	04478793          	addi	a5,a5,68 # 8001002c <uart16550_reg_shift>
    80003ff0:	c398                	sw	a4,0(a5)
  // http://wiki.osdev.org/Serial_Ports
  uart16550[UART_REG_IER << uart16550_reg_shift] = 0x00;                // Disable all interrupts
    80003ff2:	00015797          	auipc	a5,0x15
    80003ff6:	06678793          	addi	a5,a5,102 # 80019058 <uart16550>
    80003ffa:	639c                	ld	a5,0(a5)
    80003ffc:	0000c717          	auipc	a4,0xc
    80004000:	03070713          	addi	a4,a4,48 # 8001002c <uart16550_reg_shift>
    80004004:	4318                	lw	a4,0(a4)
    80004006:	4685                	li	a3,1
    80004008:	00e6973b          	sllw	a4,a3,a4
    8000400c:	2701                	sext.w	a4,a4
    8000400e:	97ba                	add	a5,a5,a4
    80004010:	00078023          	sb	zero,0(a5)
  uart16550[UART_REG_LCR << uart16550_reg_shift] = 0x80;                // Enable DLAB (set baud rate divisor)
    80004014:	00015797          	auipc	a5,0x15
    80004018:	04478793          	addi	a5,a5,68 # 80019058 <uart16550>
    8000401c:	639c                	ld	a5,0(a5)
    8000401e:	0000c717          	auipc	a4,0xc
    80004022:	00e70713          	addi	a4,a4,14 # 8001002c <uart16550_reg_shift>
    80004026:	4318                	lw	a4,0(a4)
    80004028:	468d                	li	a3,3
    8000402a:	00e6973b          	sllw	a4,a3,a4
    8000402e:	2701                	sext.w	a4,a4
    80004030:	97ba                	add	a5,a5,a4
    80004032:	f8000713          	li	a4,-128
    80004036:	00e78023          	sb	a4,0(a5)
  uart16550[UART_REG_DLL << uart16550_reg_shift] = (uint8_t)divisor;    // Set divisor (lo byte)
    8000403a:	00015797          	auipc	a5,0x15
    8000403e:	01e78793          	addi	a5,a5,30 # 80019058 <uart16550>
    80004042:	639c                	ld	a5,0(a5)
    80004044:	fec42703          	lw	a4,-20(s0)
    80004048:	0ff77713          	andi	a4,a4,255
    8000404c:	00e78023          	sb	a4,0(a5)
  uart16550[UART_REG_DLM << uart16550_reg_shift] = (uint8_t)(divisor >> 8);     //     (hi byte)
    80004050:	fec42783          	lw	a5,-20(s0)
    80004054:	0087d79b          	srliw	a5,a5,0x8
    80004058:	0007861b          	sext.w	a2,a5
    8000405c:	00015797          	auipc	a5,0x15
    80004060:	ffc78793          	addi	a5,a5,-4 # 80019058 <uart16550>
    80004064:	639c                	ld	a5,0(a5)
    80004066:	0000c717          	auipc	a4,0xc
    8000406a:	fc670713          	addi	a4,a4,-58 # 8001002c <uart16550_reg_shift>
    8000406e:	4318                	lw	a4,0(a4)
    80004070:	4685                	li	a3,1
    80004072:	00e6973b          	sllw	a4,a3,a4
    80004076:	2701                	sext.w	a4,a4
    80004078:	97ba                	add	a5,a5,a4
    8000407a:	8732                	mv	a4,a2
    8000407c:	0ff77713          	andi	a4,a4,255
    80004080:	00e78023          	sb	a4,0(a5)
  uart16550[UART_REG_LCR << uart16550_reg_shift] = 0x03;                // 8 bits, no parity, one stop bit
    80004084:	00015797          	auipc	a5,0x15
    80004088:	fd478793          	addi	a5,a5,-44 # 80019058 <uart16550>
    8000408c:	639c                	ld	a5,0(a5)
    8000408e:	0000c717          	auipc	a4,0xc
    80004092:	f9e70713          	addi	a4,a4,-98 # 8001002c <uart16550_reg_shift>
    80004096:	4318                	lw	a4,0(a4)
    80004098:	468d                	li	a3,3
    8000409a:	00e6973b          	sllw	a4,a3,a4
    8000409e:	2701                	sext.w	a4,a4
    800040a0:	97ba                	add	a5,a5,a4
    800040a2:	470d                	li	a4,3
    800040a4:	00e78023          	sb	a4,0(a5)
  uart16550[UART_REG_FCR << uart16550_reg_shift] = 0xC7;                // Enable FIFO, clear them, with 14-byte threshold
    800040a8:	00015797          	auipc	a5,0x15
    800040ac:	fb078793          	addi	a5,a5,-80 # 80019058 <uart16550>
    800040b0:	639c                	ld	a5,0(a5)
    800040b2:	0000c717          	auipc	a4,0xc
    800040b6:	f7a70713          	addi	a4,a4,-134 # 8001002c <uart16550_reg_shift>
    800040ba:	4318                	lw	a4,0(a4)
    800040bc:	4689                	li	a3,2
    800040be:	00e6973b          	sllw	a4,a3,a4
    800040c2:	2701                	sext.w	a4,a4
    800040c4:	97ba                	add	a5,a5,a4
    800040c6:	fc700713          	li	a4,-57
    800040ca:	00e78023          	sb	a4,0(a5)
    800040ce:	a011                	j	800040d2 <uart16550_done+0x1b0>
  if (!scan->compat || !scan->reg || uart16550) return;
    800040d0:	0001                	nop
}
    800040d2:	7422                	ld	s0,40(sp)
    800040d4:	6145                	addi	sp,sp,48
    800040d6:	8082                	ret

00000000800040d8 <query_uart16550>:

void query_uart16550(uintptr_t fdt)
{
    800040d8:	7159                	addi	sp,sp,-112
    800040da:	f486                	sd	ra,104(sp)
    800040dc:	f0a2                	sd	s0,96(sp)
    800040de:	1880                	addi	s0,sp,112
    800040e0:	f8a43c23          	sd	a0,-104(s0)
  struct fdt_cb cb;
  struct uart16550_scan scan;

  memset(&cb, 0, sizeof(cb));
    800040e4:	fc840793          	addi	a5,s0,-56
    800040e8:	02800613          	li	a2,40
    800040ec:	4581                	li	a1,0
    800040ee:	853e                	mv	a0,a5
    800040f0:	00a080ef          	jal	ra,8000c0fa <memset>
  cb.open = uart16550_open;
    800040f4:	00000797          	auipc	a5,0x0
    800040f8:	c8478793          	addi	a5,a5,-892 # 80003d78 <uart16550_open>
    800040fc:	fcf43423          	sd	a5,-56(s0)
  cb.prop = uart16550_prop;
    80004100:	00000797          	auipc	a5,0x0
    80004104:	cb478793          	addi	a5,a5,-844 # 80003db4 <uart16550_prop>
    80004108:	fcf43823          	sd	a5,-48(s0)
  cb.done = uart16550_done;
    8000410c:	00000797          	auipc	a5,0x0
    80004110:	e1678793          	addi	a5,a5,-490 # 80003f22 <uart16550_done>
    80004114:	fcf43c23          	sd	a5,-40(s0)
  cb.extra = &scan;
    80004118:	fa840793          	addi	a5,s0,-88
    8000411c:	fef43423          	sd	a5,-24(s0)

  fdt_scan(fdt, &cb);
    80004120:	fc840793          	addi	a5,s0,-56
    80004124:	85be                	mv	a1,a5
    80004126:	f9843503          	ld	a0,-104(s0)
    8000412a:	89dfc0ef          	jal	ra,800009c6 <fdt_scan>
}
    8000412e:	0001                	nop
    80004130:	70a6                	ld	ra,104(sp)
    80004132:	7406                	ld	s0,96(sp)
    80004134:	6165                	addi	sp,sp,112
    80004136:	8082                	ret

0000000080004138 <uart_litex_putchar>:
#define UART_REG_EV_STATUS  3
#define UART_REG_EV_PENDING 4
#define UART_REG_EV_ENABLE  5

void uart_litex_putchar(uint8_t c)
{
    80004138:	1101                	addi	sp,sp,-32
    8000413a:	ec22                	sd	s0,24(sp)
    8000413c:	1000                	addi	s0,sp,32
    8000413e:	87aa                	mv	a5,a0
    80004140:	fef407a3          	sb	a5,-17(s0)
    while ((uart_litex[UART_REG_TXFULL] & 0x01)); // wait while tx-buffer full
    80004144:	0001                	nop
    80004146:	00015797          	auipc	a5,0x15
    8000414a:	f1a78793          	addi	a5,a5,-230 # 80019060 <uart_litex>
    8000414e:	639c                	ld	a5,0(a5)
    80004150:	0791                	addi	a5,a5,4
    80004152:	439c                	lw	a5,0(a5)
    80004154:	2781                	sext.w	a5,a5
    80004156:	8b85                	andi	a5,a5,1
    80004158:	2781                	sext.w	a5,a5
    8000415a:	f7f5                	bnez	a5,80004146 <uart_litex_putchar+0xe>
    uart_litex[UART_REG_RXTX] = c;
    8000415c:	00015797          	auipc	a5,0x15
    80004160:	f0478793          	addi	a5,a5,-252 # 80019060 <uart_litex>
    80004164:	639c                	ld	a5,0(a5)
    80004166:	fef44703          	lbu	a4,-17(s0)
    8000416a:	2701                	sext.w	a4,a4
    8000416c:	c398                	sw	a4,0(a5)
}
    8000416e:	0001                	nop
    80004170:	6462                	ld	s0,24(sp)
    80004172:	6105                	addi	sp,sp,32
    80004174:	8082                	ret

0000000080004176 <uart_litex_getchar>:

int uart_litex_getchar()
{
    80004176:	1101                	addi	sp,sp,-32
    80004178:	ec22                	sd	s0,24(sp)
    8000417a:	1000                	addi	s0,sp,32
    int c = -1;
    8000417c:	57fd                	li	a5,-1
    8000417e:	fef42623          	sw	a5,-20(s0)
    if (!(uart_litex[UART_REG_RXEMPTY] & 0x01)) { // if rx-buffer not empty
    80004182:	00015797          	auipc	a5,0x15
    80004186:	ede78793          	addi	a5,a5,-290 # 80019060 <uart_litex>
    8000418a:	639c                	ld	a5,0(a5)
    8000418c:	07a1                	addi	a5,a5,8
    8000418e:	439c                	lw	a5,0(a5)
    80004190:	2781                	sext.w	a5,a5
    80004192:	8b85                	andi	a5,a5,1
    80004194:	2781                	sext.w	a5,a5
    80004196:	e395                	bnez	a5,800041ba <uart_litex_getchar+0x44>
        c = uart_litex[UART_REG_RXTX];
    80004198:	00015797          	auipc	a5,0x15
    8000419c:	ec878793          	addi	a5,a5,-312 # 80019060 <uart_litex>
    800041a0:	639c                	ld	a5,0(a5)
    800041a2:	439c                	lw	a5,0(a5)
    800041a4:	2781                	sext.w	a5,a5
    800041a6:	fef42623          	sw	a5,-20(s0)
        uart_litex[UART_REG_EV_PENDING] = 0x02; // ack (UART_EV_RX)
    800041aa:	00015797          	auipc	a5,0x15
    800041ae:	eb678793          	addi	a5,a5,-330 # 80019060 <uart_litex>
    800041b2:	639c                	ld	a5,0(a5)
    800041b4:	07c1                	addi	a5,a5,16
    800041b6:	4709                	li	a4,2
    800041b8:	c398                	sw	a4,0(a5)
    }
    return c;
    800041ba:	fec42783          	lw	a5,-20(s0)
}
    800041be:	853e                	mv	a0,a5
    800041c0:	6462                	ld	s0,24(sp)
    800041c2:	6105                	addi	sp,sp,32
    800041c4:	8082                	ret

00000000800041c6 <uart_litex_open>:
    int compat;
    uint64_t reg;
};

static void uart_litex_open(const struct fdt_scan_node *node, void *extra)
{
    800041c6:	7179                	addi	sp,sp,-48
    800041c8:	f406                	sd	ra,40(sp)
    800041ca:	f022                	sd	s0,32(sp)
    800041cc:	1800                	addi	s0,sp,48
    800041ce:	fca43c23          	sd	a0,-40(s0)
    800041d2:	fcb43823          	sd	a1,-48(s0)
    struct uart_litex_scan *scan = (struct uart_litex_scan *)extra;
    800041d6:	fd043783          	ld	a5,-48(s0)
    800041da:	fef43423          	sd	a5,-24(s0)
    memset(scan, 0, sizeof(*scan));
    800041de:	4641                	li	a2,16
    800041e0:	4581                	li	a1,0
    800041e2:	fe843503          	ld	a0,-24(s0)
    800041e6:	715070ef          	jal	ra,8000c0fa <memset>
}
    800041ea:	0001                	nop
    800041ec:	70a2                	ld	ra,40(sp)
    800041ee:	7402                	ld	s0,32(sp)
    800041f0:	6145                	addi	sp,sp,48
    800041f2:	8082                	ret

00000000800041f4 <uart_litex_prop>:

static void uart_litex_prop(const struct fdt_scan_prop *prop, void *extra)
{
    800041f4:	7179                	addi	sp,sp,-48
    800041f6:	f406                	sd	ra,40(sp)
    800041f8:	f022                	sd	s0,32(sp)
    800041fa:	1800                	addi	s0,sp,48
    800041fc:	fca43c23          	sd	a0,-40(s0)
    80004200:	fcb43823          	sd	a1,-48(s0)
    struct uart_litex_scan *scan = (struct uart_litex_scan *)extra;
    80004204:	fd043783          	ld	a5,-48(s0)
    80004208:	fef43423          	sd	a5,-24(s0)
    if (!strcmp(prop->name, "compatible") &&
    8000420c:	fd843783          	ld	a5,-40(s0)
    80004210:	679c                	ld	a5,8(a5)
    80004212:	00009597          	auipc	a1,0x9
    80004216:	d0658593          	addi	a1,a1,-762 # 8000cf18 <logo+0xb58>
    8000421a:	853e                	mv	a0,a5
    8000421c:	7e9070ef          	jal	ra,8000c204 <strcmp>
    80004220:	87aa                	mv	a5,a0
    80004222:	ef95                	bnez	a5,8000425e <uart_litex_prop+0x6a>
        (!strcmp((const char *)prop->value, "litex,uart0") ||
    80004224:	fd843783          	ld	a5,-40(s0)
    80004228:	6b9c                	ld	a5,16(a5)
    8000422a:	00009597          	auipc	a1,0x9
    8000422e:	cfe58593          	addi	a1,a1,-770 # 8000cf28 <logo+0xb68>
    80004232:	853e                	mv	a0,a5
    80004234:	7d1070ef          	jal	ra,8000c204 <strcmp>
    80004238:	87aa                	mv	a5,a0
    if (!strcmp(prop->name, "compatible") &&
    8000423a:	cf89                	beqz	a5,80004254 <uart_litex_prop+0x60>
         !strcmp((const char *)prop->value, "litex,liteuart"))) {
    8000423c:	fd843783          	ld	a5,-40(s0)
    80004240:	6b9c                	ld	a5,16(a5)
    80004242:	00009597          	auipc	a1,0x9
    80004246:	cf658593          	addi	a1,a1,-778 # 8000cf38 <logo+0xb78>
    8000424a:	853e                	mv	a0,a5
    8000424c:	7b9070ef          	jal	ra,8000c204 <strcmp>
    80004250:	87aa                	mv	a5,a0
        (!strcmp((const char *)prop->value, "litex,uart0") ||
    80004252:	e791                	bnez	a5,8000425e <uart_litex_prop+0x6a>
        scan->compat = 1;
    80004254:	fe843783          	ld	a5,-24(s0)
    80004258:	4705                	li	a4,1
    8000425a:	c398                	sw	a4,0(a5)
    } else if (!strcmp(prop->name, "reg")) {
        fdt_get_address(prop->node->parent, prop->value, &scan->reg);
    }
}
    8000425c:	a825                	j	80004294 <uart_litex_prop+0xa0>
    } else if (!strcmp(prop->name, "reg")) {
    8000425e:	fd843783          	ld	a5,-40(s0)
    80004262:	679c                	ld	a5,8(a5)
    80004264:	00009597          	auipc	a1,0x9
    80004268:	ce458593          	addi	a1,a1,-796 # 8000cf48 <logo+0xb88>
    8000426c:	853e                	mv	a0,a5
    8000426e:	797070ef          	jal	ra,8000c204 <strcmp>
    80004272:	87aa                	mv	a5,a0
    80004274:	e385                	bnez	a5,80004294 <uart_litex_prop+0xa0>
        fdt_get_address(prop->node->parent, prop->value, &scan->reg);
    80004276:	fd843783          	ld	a5,-40(s0)
    8000427a:	639c                	ld	a5,0(a5)
    8000427c:	6398                	ld	a4,0(a5)
    8000427e:	fd843783          	ld	a5,-40(s0)
    80004282:	6b94                	ld	a3,16(a5)
    80004284:	fe843783          	ld	a5,-24(s0)
    80004288:	07a1                	addi	a5,a5,8
    8000428a:	863e                	mv	a2,a5
    8000428c:	85b6                	mv	a1,a3
    8000428e:	853a                	mv	a0,a4
    80004290:	84bfc0ef          	jal	ra,80000ada <fdt_get_address>
}
    80004294:	0001                	nop
    80004296:	70a2                	ld	ra,40(sp)
    80004298:	7402                	ld	s0,32(sp)
    8000429a:	6145                	addi	sp,sp,48
    8000429c:	8082                	ret

000000008000429e <uart_litex_done>:

static void uart_litex_done(const struct fdt_scan_node *node, void *extra)
{
    8000429e:	7179                	addi	sp,sp,-48
    800042a0:	f422                	sd	s0,40(sp)
    800042a2:	1800                	addi	s0,sp,48
    800042a4:	fca43c23          	sd	a0,-40(s0)
    800042a8:	fcb43823          	sd	a1,-48(s0)
    struct uart_litex_scan *scan = (struct uart_litex_scan *)extra;
    800042ac:	fd043783          	ld	a5,-48(s0)
    800042b0:	fef43423          	sd	a5,-24(s0)
    if (!scan->compat || !scan->reg || uart_litex)
    800042b4:	fe843783          	ld	a5,-24(s0)
    800042b8:	439c                	lw	a5,0(a5)
    800042ba:	c78d                	beqz	a5,800042e4 <uart_litex_done+0x46>
    800042bc:	fe843783          	ld	a5,-24(s0)
    800042c0:	679c                	ld	a5,8(a5)
    800042c2:	c38d                	beqz	a5,800042e4 <uart_litex_done+0x46>
    800042c4:	00015797          	auipc	a5,0x15
    800042c8:	d9c78793          	addi	a5,a5,-612 # 80019060 <uart_litex>
    800042cc:	639c                	ld	a5,0(a5)
    800042ce:	eb99                	bnez	a5,800042e4 <uart_litex_done+0x46>
        return;

    // Initialize LiteX UART
    uart_litex = (void *)(uintptr_t)scan->reg;
    800042d0:	fe843783          	ld	a5,-24(s0)
    800042d4:	679c                	ld	a5,8(a5)
    800042d6:	873e                	mv	a4,a5
    800042d8:	00015797          	auipc	a5,0x15
    800042dc:	d8878793          	addi	a5,a5,-632 # 80019060 <uart_litex>
    800042e0:	e398                	sd	a4,0(a5)
    800042e2:	a011                	j	800042e6 <uart_litex_done+0x48>
        return;
    800042e4:	0001                	nop
}
    800042e6:	7422                	ld	s0,40(sp)
    800042e8:	6145                	addi	sp,sp,48
    800042ea:	8082                	ret

00000000800042ec <query_uart_litex>:

void query_uart_litex(uintptr_t fdt)
{
    800042ec:	711d                	addi	sp,sp,-96
    800042ee:	ec86                	sd	ra,88(sp)
    800042f0:	e8a2                	sd	s0,80(sp)
    800042f2:	1080                	addi	s0,sp,96
    800042f4:	faa43423          	sd	a0,-88(s0)
    struct fdt_cb cb;
    struct uart_litex_scan scan;

    memset(&cb, 0, sizeof(cb));
    800042f8:	fc840793          	addi	a5,s0,-56
    800042fc:	02800613          	li	a2,40
    80004300:	4581                	li	a1,0
    80004302:	853e                	mv	a0,a5
    80004304:	5f7070ef          	jal	ra,8000c0fa <memset>
    cb.open = uart_litex_open;
    80004308:	00000797          	auipc	a5,0x0
    8000430c:	ebe78793          	addi	a5,a5,-322 # 800041c6 <uart_litex_open>
    80004310:	fcf43423          	sd	a5,-56(s0)
    cb.prop = uart_litex_prop;
    80004314:	00000797          	auipc	a5,0x0
    80004318:	ee078793          	addi	a5,a5,-288 # 800041f4 <uart_litex_prop>
    8000431c:	fcf43823          	sd	a5,-48(s0)
    cb.done = uart_litex_done;
    80004320:	00000797          	auipc	a5,0x0
    80004324:	f7e78793          	addi	a5,a5,-130 # 8000429e <uart_litex_done>
    80004328:	fcf43c23          	sd	a5,-40(s0)
    cb.extra = &scan;
    8000432c:	fb840793          	addi	a5,s0,-72
    80004330:	fef43423          	sd	a5,-24(s0)

    fdt_scan(fdt, &cb);
    80004334:	fc840793          	addi	a5,s0,-56
    80004338:	85be                	mv	a1,a5
    8000433a:	fa843503          	ld	a0,-88(s0)
    8000433e:	e88fc0ef          	jal	ra,800009c6 <fdt_scan>
}
    80004342:	0001                	nop
    80004344:	60e6                	ld	ra,88(sp)
    80004346:	6446                	ld	s0,80(sp)
    80004348:	6125                	addi	sp,sp,96
    8000434a:	8082                	ret

000000008000434c <finisher_exit>:
#include "fdt.h"

volatile uint32_t* finisher;

void finisher_exit(uint16_t code)
{
    8000434c:	1101                	addi	sp,sp,-32
    8000434e:	ec22                	sd	s0,24(sp)
    80004350:	1000                	addi	s0,sp,32
    80004352:	87aa                	mv	a5,a0
    80004354:	fef41723          	sh	a5,-18(s0)
  if (!finisher) return;
    80004358:	00015797          	auipc	a5,0x15
    8000435c:	d1078793          	addi	a5,a5,-752 # 80019068 <finisher>
    80004360:	639c                	ld	a5,0(a5)
    80004362:	c7a1                	beqz	a5,800043aa <finisher_exit+0x5e>
  if (code == 0) {
    80004364:	fee45783          	lhu	a5,-18(s0)
    80004368:	2781                	sext.w	a5,a5
    8000436a:	eb99                	bnez	a5,80004380 <finisher_exit+0x34>
    *finisher = FINISHER_PASS;
    8000436c:	00015797          	auipc	a5,0x15
    80004370:	cfc78793          	addi	a5,a5,-772 # 80019068 <finisher>
    80004374:	639c                	ld	a5,0(a5)
    80004376:	6715                	lui	a4,0x5
    80004378:	5557071b          	addiw	a4,a4,1365
    8000437c:	c398                	sw	a4,0(a5)
    8000437e:	a03d                	j	800043ac <finisher_exit+0x60>
  } else {
    *finisher = code << 16 | FINISHER_FAIL;
    80004380:	fee45783          	lhu	a5,-18(s0)
    80004384:	2781                	sext.w	a5,a5
    80004386:	0107979b          	slliw	a5,a5,0x10
    8000438a:	0007871b          	sext.w	a4,a5
    8000438e:	678d                	lui	a5,0x3
    80004390:	33378793          	addi	a5,a5,819 # 3333 <MEM_START-0x7fffcccd>
    80004394:	8fd9                	or	a5,a5,a4
    80004396:	0007871b          	sext.w	a4,a5
    8000439a:	00015797          	auipc	a5,0x15
    8000439e:	cce78793          	addi	a5,a5,-818 # 80019068 <finisher>
    800043a2:	639c                	ld	a5,0(a5)
    800043a4:	2701                	sext.w	a4,a4
    800043a6:	c398                	sw	a4,0(a5)
    800043a8:	a011                	j	800043ac <finisher_exit+0x60>
  if (!finisher) return;
    800043aa:	0001                	nop
  }
}
    800043ac:	6462                	ld	s0,24(sp)
    800043ae:	6105                	addi	sp,sp,32
    800043b0:	8082                	ret

00000000800043b2 <finisher_open>:
  int compat;
  uint64_t reg;
};

static void finisher_open(const struct fdt_scan_node *node, void *extra)
{
    800043b2:	7179                	addi	sp,sp,-48
    800043b4:	f406                	sd	ra,40(sp)
    800043b6:	f022                	sd	s0,32(sp)
    800043b8:	1800                	addi	s0,sp,48
    800043ba:	fca43c23          	sd	a0,-40(s0)
    800043be:	fcb43823          	sd	a1,-48(s0)
  struct finisher_scan *scan = (struct finisher_scan *)extra;
    800043c2:	fd043783          	ld	a5,-48(s0)
    800043c6:	fef43423          	sd	a5,-24(s0)
  memset(scan, 0, sizeof(*scan));
    800043ca:	4641                	li	a2,16
    800043cc:	4581                	li	a1,0
    800043ce:	fe843503          	ld	a0,-24(s0)
    800043d2:	529070ef          	jal	ra,8000c0fa <memset>
}
    800043d6:	0001                	nop
    800043d8:	70a2                	ld	ra,40(sp)
    800043da:	7402                	ld	s0,32(sp)
    800043dc:	6145                	addi	sp,sp,48
    800043de:	8082                	ret

00000000800043e0 <finisher_prop>:

static void finisher_prop(const struct fdt_scan_prop *prop, void *extra)
{
    800043e0:	7179                	addi	sp,sp,-48
    800043e2:	f406                	sd	ra,40(sp)
    800043e4:	f022                	sd	s0,32(sp)
    800043e6:	1800                	addi	s0,sp,48
    800043e8:	fca43c23          	sd	a0,-40(s0)
    800043ec:	fcb43823          	sd	a1,-48(s0)
  struct finisher_scan *scan = (struct finisher_scan *)extra;
    800043f0:	fd043783          	ld	a5,-48(s0)
    800043f4:	fef43423          	sd	a5,-24(s0)
  if (!strcmp(prop->name, "compatible") && fdt_string_list_index(prop, "sifive,test0") >= 0) {
    800043f8:	fd843783          	ld	a5,-40(s0)
    800043fc:	679c                	ld	a5,8(a5)
    800043fe:	00009597          	auipc	a1,0x9
    80004402:	b5258593          	addi	a1,a1,-1198 # 8000cf50 <logo+0xb90>
    80004406:	853e                	mv	a0,a5
    80004408:	5fd070ef          	jal	ra,8000c204 <strcmp>
    8000440c:	87aa                	mv	a5,a0
    8000440e:	e38d                	bnez	a5,80004430 <finisher_prop+0x50>
    80004410:	00009597          	auipc	a1,0x9
    80004414:	b5058593          	addi	a1,a1,-1200 # 8000cf60 <logo+0xba0>
    80004418:	fd843503          	ld	a0,-40(s0)
    8000441c:	ff0fc0ef          	jal	ra,80000c0c <fdt_string_list_index>
    80004420:	87aa                	mv	a5,a0
    80004422:	0007c763          	bltz	a5,80004430 <finisher_prop+0x50>
    scan->compat = 1;
    80004426:	fe843783          	ld	a5,-24(s0)
    8000442a:	4705                	li	a4,1
    8000442c:	c398                	sw	a4,0(a5)
  } else if (!strcmp(prop->name, "reg")) {
    fdt_get_address(prop->node->parent, prop->value, &scan->reg);
  }
}
    8000442e:	a825                	j	80004466 <finisher_prop+0x86>
  } else if (!strcmp(prop->name, "reg")) {
    80004430:	fd843783          	ld	a5,-40(s0)
    80004434:	679c                	ld	a5,8(a5)
    80004436:	00009597          	auipc	a1,0x9
    8000443a:	b3a58593          	addi	a1,a1,-1222 # 8000cf70 <logo+0xbb0>
    8000443e:	853e                	mv	a0,a5
    80004440:	5c5070ef          	jal	ra,8000c204 <strcmp>
    80004444:	87aa                	mv	a5,a0
    80004446:	e385                	bnez	a5,80004466 <finisher_prop+0x86>
    fdt_get_address(prop->node->parent, prop->value, &scan->reg);
    80004448:	fd843783          	ld	a5,-40(s0)
    8000444c:	639c                	ld	a5,0(a5)
    8000444e:	6398                	ld	a4,0(a5)
    80004450:	fd843783          	ld	a5,-40(s0)
    80004454:	6b94                	ld	a3,16(a5)
    80004456:	fe843783          	ld	a5,-24(s0)
    8000445a:	07a1                	addi	a5,a5,8
    8000445c:	863e                	mv	a2,a5
    8000445e:	85b6                	mv	a1,a3
    80004460:	853a                	mv	a0,a4
    80004462:	e78fc0ef          	jal	ra,80000ada <fdt_get_address>
}
    80004466:	0001                	nop
    80004468:	70a2                	ld	ra,40(sp)
    8000446a:	7402                	ld	s0,32(sp)
    8000446c:	6145                	addi	sp,sp,48
    8000446e:	8082                	ret

0000000080004470 <finisher_done>:

static void finisher_done(const struct fdt_scan_node *node, void *extra)
{
    80004470:	7179                	addi	sp,sp,-48
    80004472:	f422                	sd	s0,40(sp)
    80004474:	1800                	addi	s0,sp,48
    80004476:	fca43c23          	sd	a0,-40(s0)
    8000447a:	fcb43823          	sd	a1,-48(s0)
  struct finisher_scan *scan = (struct finisher_scan *)extra;
    8000447e:	fd043783          	ld	a5,-48(s0)
    80004482:	fef43423          	sd	a5,-24(s0)
  if (!scan->compat || !scan->reg || finisher) return;
    80004486:	fe843783          	ld	a5,-24(s0)
    8000448a:	439c                	lw	a5,0(a5)
    8000448c:	c78d                	beqz	a5,800044b6 <finisher_done+0x46>
    8000448e:	fe843783          	ld	a5,-24(s0)
    80004492:	679c                	ld	a5,8(a5)
    80004494:	c38d                	beqz	a5,800044b6 <finisher_done+0x46>
    80004496:	00015797          	auipc	a5,0x15
    8000449a:	bd278793          	addi	a5,a5,-1070 # 80019068 <finisher>
    8000449e:	639c                	ld	a5,0(a5)
    800044a0:	eb99                	bnez	a5,800044b6 <finisher_done+0x46>
  finisher = (uint32_t*)(uintptr_t)scan->reg;
    800044a2:	fe843783          	ld	a5,-24(s0)
    800044a6:	679c                	ld	a5,8(a5)
    800044a8:	873e                	mv	a4,a5
    800044aa:	00015797          	auipc	a5,0x15
    800044ae:	bbe78793          	addi	a5,a5,-1090 # 80019068 <finisher>
    800044b2:	e398                	sd	a4,0(a5)
    800044b4:	a011                	j	800044b8 <finisher_done+0x48>
  if (!scan->compat || !scan->reg || finisher) return;
    800044b6:	0001                	nop
}
    800044b8:	7422                	ld	s0,40(sp)
    800044ba:	6145                	addi	sp,sp,48
    800044bc:	8082                	ret

00000000800044be <query_finisher>:

void query_finisher(uintptr_t fdt)
{
    800044be:	711d                	addi	sp,sp,-96
    800044c0:	ec86                	sd	ra,88(sp)
    800044c2:	e8a2                	sd	s0,80(sp)
    800044c4:	1080                	addi	s0,sp,96
    800044c6:	faa43423          	sd	a0,-88(s0)
  struct fdt_cb cb;
  struct finisher_scan scan;

  memset(&cb, 0, sizeof(cb));
    800044ca:	fc840793          	addi	a5,s0,-56
    800044ce:	02800613          	li	a2,40
    800044d2:	4581                	li	a1,0
    800044d4:	853e                	mv	a0,a5
    800044d6:	425070ef          	jal	ra,8000c0fa <memset>
  cb.open = finisher_open;
    800044da:	00000797          	auipc	a5,0x0
    800044de:	ed878793          	addi	a5,a5,-296 # 800043b2 <finisher_open>
    800044e2:	fcf43423          	sd	a5,-56(s0)
  cb.prop = finisher_prop;
    800044e6:	00000797          	auipc	a5,0x0
    800044ea:	efa78793          	addi	a5,a5,-262 # 800043e0 <finisher_prop>
    800044ee:	fcf43823          	sd	a5,-48(s0)
  cb.done = finisher_done;
    800044f2:	00000797          	auipc	a5,0x0
    800044f6:	f7e78793          	addi	a5,a5,-130 # 80004470 <finisher_done>
    800044fa:	fcf43c23          	sd	a5,-40(s0)
  cb.extra = &scan;
    800044fe:	fb840793          	addi	a5,s0,-72
    80004502:	fef43423          	sd	a5,-24(s0)

  fdt_scan(fdt, &cb);
    80004506:	fc840793          	addi	a5,s0,-56
    8000450a:	85be                	mv	a1,a5
    8000450c:	fa843503          	ld	a0,-88(s0)
    80004510:	cb6fc0ef          	jal	ra,800009c6 <fdt_scan>
}
    80004514:	0001                	nop
    80004516:	60e6                	ld	ra,88(sp)
    80004518:	6446                	ld	s0,80(sp)
    8000451a:	6125                	addi	sp,sp,96
    8000451c:	8082                	ret

000000008000451e <get_f32_reg>:

  .text
  .option norvc
  .globl get_f32_reg
  get_f32_reg:
    get_f32(f0)
    8000451e:	e0000553          	fmv.x.w	a0,ft0
    80004522:	00028067          	jr	t0
    get_f32(f1)
    80004526:	e0008553          	fmv.x.w	a0,ft1
    8000452a:	00028067          	jr	t0
    get_f32(f2)
    8000452e:	e0010553          	fmv.x.w	a0,ft2
    80004532:	00028067          	jr	t0
    get_f32(f3)
    80004536:	e0018553          	fmv.x.w	a0,ft3
    8000453a:	00028067          	jr	t0
    get_f32(f4)
    8000453e:	e0020553          	fmv.x.w	a0,ft4
    80004542:	00028067          	jr	t0
    get_f32(f5)
    80004546:	e0028553          	fmv.x.w	a0,ft5
    8000454a:	00028067          	jr	t0
    get_f32(f6)
    8000454e:	e0030553          	fmv.x.w	a0,ft6
    80004552:	00028067          	jr	t0
    get_f32(f7)
    80004556:	e0038553          	fmv.x.w	a0,ft7
    8000455a:	00028067          	jr	t0
    get_f32(f8)
    8000455e:	e0040553          	fmv.x.w	a0,fs0
    80004562:	00028067          	jr	t0
    get_f32(f9)
    80004566:	e0048553          	fmv.x.w	a0,fs1
    8000456a:	00028067          	jr	t0
    get_f32(f10)
    8000456e:	e0050553          	fmv.x.w	a0,fa0
    80004572:	00028067          	jr	t0
    get_f32(f11)
    80004576:	e0058553          	fmv.x.w	a0,fa1
    8000457a:	00028067          	jr	t0
    get_f32(f12)
    8000457e:	e0060553          	fmv.x.w	a0,fa2
    80004582:	00028067          	jr	t0
    get_f32(f13)
    80004586:	e0068553          	fmv.x.w	a0,fa3
    8000458a:	00028067          	jr	t0
    get_f32(f14)
    8000458e:	e0070553          	fmv.x.w	a0,fa4
    80004592:	00028067          	jr	t0
    get_f32(f15)
    80004596:	e0078553          	fmv.x.w	a0,fa5
    8000459a:	00028067          	jr	t0
    get_f32(f16)
    8000459e:	e0080553          	fmv.x.w	a0,fa6
    800045a2:	00028067          	jr	t0
    get_f32(f17)
    800045a6:	e0088553          	fmv.x.w	a0,fa7
    800045aa:	00028067          	jr	t0
    get_f32(f18)
    800045ae:	e0090553          	fmv.x.w	a0,fs2
    800045b2:	00028067          	jr	t0
    get_f32(f19)
    800045b6:	e0098553          	fmv.x.w	a0,fs3
    800045ba:	00028067          	jr	t0
    get_f32(f20)
    800045be:	e00a0553          	fmv.x.w	a0,fs4
    800045c2:	00028067          	jr	t0
    get_f32(f21)
    800045c6:	e00a8553          	fmv.x.w	a0,fs5
    800045ca:	00028067          	jr	t0
    get_f32(f22)
    800045ce:	e00b0553          	fmv.x.w	a0,fs6
    800045d2:	00028067          	jr	t0
    get_f32(f23)
    800045d6:	e00b8553          	fmv.x.w	a0,fs7
    800045da:	00028067          	jr	t0
    get_f32(f24)
    800045de:	e00c0553          	fmv.x.w	a0,fs8
    800045e2:	00028067          	jr	t0
    get_f32(f25)
    800045e6:	e00c8553          	fmv.x.w	a0,fs9
    800045ea:	00028067          	jr	t0
    get_f32(f26)
    800045ee:	e00d0553          	fmv.x.w	a0,fs10
    800045f2:	00028067          	jr	t0
    get_f32(f27)
    800045f6:	e00d8553          	fmv.x.w	a0,fs11
    800045fa:	00028067          	jr	t0
    get_f32(f28)
    800045fe:	e00e0553          	fmv.x.w	a0,ft8
    80004602:	00028067          	jr	t0
    get_f32(f29)
    80004606:	e00e8553          	fmv.x.w	a0,ft9
    8000460a:	00028067          	jr	t0
    get_f32(f30)
    8000460e:	e00f0553          	fmv.x.w	a0,ft10
    80004612:	00028067          	jr	t0
    get_f32(f31)
    80004616:	e00f8553          	fmv.x.w	a0,ft11
    8000461a:	00028067          	jr	t0

000000008000461e <put_f32_reg>:
  
  .text
  .globl put_f32_reg
  put_f32_reg:
    put_f32(f0)
    8000461e:	f0050053          	fmv.w.x	ft0,a0
    80004622:	00028067          	jr	t0
    put_f32(f1)
    80004626:	f00500d3          	fmv.w.x	ft1,a0
    8000462a:	00028067          	jr	t0
    put_f32(f2)
    8000462e:	f0050153          	fmv.w.x	ft2,a0
    80004632:	00028067          	jr	t0
    put_f32(f3)
    80004636:	f00501d3          	fmv.w.x	ft3,a0
    8000463a:	00028067          	jr	t0
    put_f32(f4)
    8000463e:	f0050253          	fmv.w.x	ft4,a0
    80004642:	00028067          	jr	t0
    put_f32(f5)
    80004646:	f00502d3          	fmv.w.x	ft5,a0
    8000464a:	00028067          	jr	t0
    put_f32(f6)
    8000464e:	f0050353          	fmv.w.x	ft6,a0
    80004652:	00028067          	jr	t0
    put_f32(f7)
    80004656:	f00503d3          	fmv.w.x	ft7,a0
    8000465a:	00028067          	jr	t0
    put_f32(f8)
    8000465e:	f0050453          	fmv.w.x	fs0,a0
    80004662:	00028067          	jr	t0
    put_f32(f9)
    80004666:	f00504d3          	fmv.w.x	fs1,a0
    8000466a:	00028067          	jr	t0
    put_f32(f10)
    8000466e:	f0050553          	fmv.w.x	fa0,a0
    80004672:	00028067          	jr	t0
    put_f32(f11)
    80004676:	f00505d3          	fmv.w.x	fa1,a0
    8000467a:	00028067          	jr	t0
    put_f32(f12)
    8000467e:	f0050653          	fmv.w.x	fa2,a0
    80004682:	00028067          	jr	t0
    put_f32(f13)
    80004686:	f00506d3          	fmv.w.x	fa3,a0
    8000468a:	00028067          	jr	t0
    put_f32(f14)
    8000468e:	f0050753          	fmv.w.x	fa4,a0
    80004692:	00028067          	jr	t0
    put_f32(f15)
    80004696:	f00507d3          	fmv.w.x	fa5,a0
    8000469a:	00028067          	jr	t0
    put_f32(f16)
    8000469e:	f0050853          	fmv.w.x	fa6,a0
    800046a2:	00028067          	jr	t0
    put_f32(f17)
    800046a6:	f00508d3          	fmv.w.x	fa7,a0
    800046aa:	00028067          	jr	t0
    put_f32(f18)
    800046ae:	f0050953          	fmv.w.x	fs2,a0
    800046b2:	00028067          	jr	t0
    put_f32(f19)
    800046b6:	f00509d3          	fmv.w.x	fs3,a0
    800046ba:	00028067          	jr	t0
    put_f32(f20)
    800046be:	f0050a53          	fmv.w.x	fs4,a0
    800046c2:	00028067          	jr	t0
    put_f32(f21)
    800046c6:	f0050ad3          	fmv.w.x	fs5,a0
    800046ca:	00028067          	jr	t0
    put_f32(f22)
    800046ce:	f0050b53          	fmv.w.x	fs6,a0
    800046d2:	00028067          	jr	t0
    put_f32(f23)
    800046d6:	f0050bd3          	fmv.w.x	fs7,a0
    800046da:	00028067          	jr	t0
    put_f32(f24)
    800046de:	f0050c53          	fmv.w.x	fs8,a0
    800046e2:	00028067          	jr	t0
    put_f32(f25)
    800046e6:	f0050cd3          	fmv.w.x	fs9,a0
    800046ea:	00028067          	jr	t0
    put_f32(f26)
    800046ee:	f0050d53          	fmv.w.x	fs10,a0
    800046f2:	00028067          	jr	t0
    put_f32(f27)
    800046f6:	f0050dd3          	fmv.w.x	fs11,a0
    800046fa:	00028067          	jr	t0
    put_f32(f28)
    800046fe:	f0050e53          	fmv.w.x	ft8,a0
    80004702:	00028067          	jr	t0
    put_f32(f29)
    80004706:	f0050ed3          	fmv.w.x	ft9,a0
    8000470a:	00028067          	jr	t0
    put_f32(f30)
    8000470e:	f0050f53          	fmv.w.x	ft10,a0
    80004712:	00028067          	jr	t0
    put_f32(f31)
    80004716:	f0050fd3          	fmv.w.x	ft11,a0
    8000471a:	00028067          	jr	t0

000000008000471e <get_f64_reg>:
 #if __riscv_flen > 32

  .text
  .globl get_f64_reg
  get_f64_reg:
    get_f64(f0)
    8000471e:	e2000553          	fmv.x.d	a0,ft0
    80004722:	00028067          	jr	t0
    get_f64(f1)
    80004726:	e2008553          	fmv.x.d	a0,ft1
    8000472a:	00028067          	jr	t0
    get_f64(f2)
    8000472e:	e2010553          	fmv.x.d	a0,ft2
    80004732:	00028067          	jr	t0
    get_f64(f3)
    80004736:	e2018553          	fmv.x.d	a0,ft3
    8000473a:	00028067          	jr	t0
    get_f64(f4)
    8000473e:	e2020553          	fmv.x.d	a0,ft4
    80004742:	00028067          	jr	t0
    get_f64(f5)
    80004746:	e2028553          	fmv.x.d	a0,ft5
    8000474a:	00028067          	jr	t0
    get_f64(f6)
    8000474e:	e2030553          	fmv.x.d	a0,ft6
    80004752:	00028067          	jr	t0
    get_f64(f7)
    80004756:	e2038553          	fmv.x.d	a0,ft7
    8000475a:	00028067          	jr	t0
    get_f64(f8)
    8000475e:	e2040553          	fmv.x.d	a0,fs0
    80004762:	00028067          	jr	t0
    get_f64(f9)
    80004766:	e2048553          	fmv.x.d	a0,fs1
    8000476a:	00028067          	jr	t0
    get_f64(f10)
    8000476e:	e2050553          	fmv.x.d	a0,fa0
    80004772:	00028067          	jr	t0
    get_f64(f11)
    80004776:	e2058553          	fmv.x.d	a0,fa1
    8000477a:	00028067          	jr	t0
    get_f64(f12)
    8000477e:	e2060553          	fmv.x.d	a0,fa2
    80004782:	00028067          	jr	t0
    get_f64(f13)
    80004786:	e2068553          	fmv.x.d	a0,fa3
    8000478a:	00028067          	jr	t0
    get_f64(f14)
    8000478e:	e2070553          	fmv.x.d	a0,fa4
    80004792:	00028067          	jr	t0
    get_f64(f15)
    80004796:	e2078553          	fmv.x.d	a0,fa5
    8000479a:	00028067          	jr	t0
    get_f64(f16)
    8000479e:	e2080553          	fmv.x.d	a0,fa6
    800047a2:	00028067          	jr	t0
    get_f64(f17)
    800047a6:	e2088553          	fmv.x.d	a0,fa7
    800047aa:	00028067          	jr	t0
    get_f64(f18)
    800047ae:	e2090553          	fmv.x.d	a0,fs2
    800047b2:	00028067          	jr	t0
    get_f64(f19)
    800047b6:	e2098553          	fmv.x.d	a0,fs3
    800047ba:	00028067          	jr	t0
    get_f64(f20)
    800047be:	e20a0553          	fmv.x.d	a0,fs4
    800047c2:	00028067          	jr	t0
    get_f64(f21)
    800047c6:	e20a8553          	fmv.x.d	a0,fs5
    800047ca:	00028067          	jr	t0
    get_f64(f22)
    800047ce:	e20b0553          	fmv.x.d	a0,fs6
    800047d2:	00028067          	jr	t0
    get_f64(f23)
    800047d6:	e20b8553          	fmv.x.d	a0,fs7
    800047da:	00028067          	jr	t0
    get_f64(f24)
    800047de:	e20c0553          	fmv.x.d	a0,fs8
    800047e2:	00028067          	jr	t0
    get_f64(f25)
    800047e6:	e20c8553          	fmv.x.d	a0,fs9
    800047ea:	00028067          	jr	t0
    get_f64(f26)
    800047ee:	e20d0553          	fmv.x.d	a0,fs10
    800047f2:	00028067          	jr	t0
    get_f64(f27)
    800047f6:	e20d8553          	fmv.x.d	a0,fs11
    800047fa:	00028067          	jr	t0
    get_f64(f28)
    800047fe:	e20e0553          	fmv.x.d	a0,ft8
    80004802:	00028067          	jr	t0
    get_f64(f29)
    80004806:	e20e8553          	fmv.x.d	a0,ft9
    8000480a:	00028067          	jr	t0
    get_f64(f30)
    8000480e:	e20f0553          	fmv.x.d	a0,ft10
    80004812:	00028067          	jr	t0
    get_f64(f31)
    80004816:	e20f8553          	fmv.x.d	a0,ft11
    8000481a:	00028067          	jr	t0

000000008000481e <put_f64_reg>:
  
  .text
  .globl put_f64_reg
  put_f64_reg:
    put_f64(f0)
    8000481e:	f2050053          	fmv.d.x	ft0,a0
    80004822:	00028067          	jr	t0
    put_f64(f1)
    80004826:	f20500d3          	fmv.d.x	ft1,a0
    8000482a:	00028067          	jr	t0
    put_f64(f2)
    8000482e:	f2050153          	fmv.d.x	ft2,a0
    80004832:	00028067          	jr	t0
    put_f64(f3)
    80004836:	f20501d3          	fmv.d.x	ft3,a0
    8000483a:	00028067          	jr	t0
    put_f64(f4)
    8000483e:	f2050253          	fmv.d.x	ft4,a0
    80004842:	00028067          	jr	t0
    put_f64(f5)
    80004846:	f20502d3          	fmv.d.x	ft5,a0
    8000484a:	00028067          	jr	t0
    put_f64(f6)
    8000484e:	f2050353          	fmv.d.x	ft6,a0
    80004852:	00028067          	jr	t0
    put_f64(f7)
    80004856:	f20503d3          	fmv.d.x	ft7,a0
    8000485a:	00028067          	jr	t0
    put_f64(f8)
    8000485e:	f2050453          	fmv.d.x	fs0,a0
    80004862:	00028067          	jr	t0
    put_f64(f9)
    80004866:	f20504d3          	fmv.d.x	fs1,a0
    8000486a:	00028067          	jr	t0
    put_f64(f10)
    8000486e:	f2050553          	fmv.d.x	fa0,a0
    80004872:	00028067          	jr	t0
    put_f64(f11)
    80004876:	f20505d3          	fmv.d.x	fa1,a0
    8000487a:	00028067          	jr	t0
    put_f64(f12)
    8000487e:	f2050653          	fmv.d.x	fa2,a0
    80004882:	00028067          	jr	t0
    put_f64(f13)
    80004886:	f20506d3          	fmv.d.x	fa3,a0
    8000488a:	00028067          	jr	t0
    put_f64(f14)
    8000488e:	f2050753          	fmv.d.x	fa4,a0
    80004892:	00028067          	jr	t0
    put_f64(f15)
    80004896:	f20507d3          	fmv.d.x	fa5,a0
    8000489a:	00028067          	jr	t0
    put_f64(f16)
    8000489e:	f2050853          	fmv.d.x	fa6,a0
    800048a2:	00028067          	jr	t0
    put_f64(f17)
    800048a6:	f20508d3          	fmv.d.x	fa7,a0
    800048aa:	00028067          	jr	t0
    put_f64(f18)
    800048ae:	f2050953          	fmv.d.x	fs2,a0
    800048b2:	00028067          	jr	t0
    put_f64(f19)
    800048b6:	f20509d3          	fmv.d.x	fs3,a0
    800048ba:	00028067          	jr	t0
    put_f64(f20)
    800048be:	f2050a53          	fmv.d.x	fs4,a0
    800048c2:	00028067          	jr	t0
    put_f64(f21)
    800048c6:	f2050ad3          	fmv.d.x	fs5,a0
    800048ca:	00028067          	jr	t0
    put_f64(f22)
    800048ce:	f2050b53          	fmv.d.x	fs6,a0
    800048d2:	00028067          	jr	t0
    put_f64(f23)
    800048d6:	f2050bd3          	fmv.d.x	fs7,a0
    800048da:	00028067          	jr	t0
    put_f64(f24)
    800048de:	f2050c53          	fmv.d.x	fs8,a0
    800048e2:	00028067          	jr	t0
    put_f64(f25)
    800048e6:	f2050cd3          	fmv.d.x	fs9,a0
    800048ea:	00028067          	jr	t0
    put_f64(f26)
    800048ee:	f2050d53          	fmv.d.x	fs10,a0
    800048f2:	00028067          	jr	t0
    put_f64(f27)
    800048f6:	f2050dd3          	fmv.d.x	fs11,a0
    800048fa:	00028067          	jr	t0
    put_f64(f28)
    800048fe:	f2050e53          	fmv.d.x	ft8,a0
    80004902:	00028067          	jr	t0
    put_f64(f29)
    80004906:	f2050ed3          	fmv.d.x	ft9,a0
    8000490a:	00028067          	jr	t0
    put_f64(f30)
    8000490e:	f2050f53          	fmv.d.x	ft10,a0
    80004912:	00028067          	jr	t0
    put_f64(f31)
    80004916:	f2050fd3          	fmv.d.x	ft11,a0
    8000491a:	00028067          	jr	t0

000000008000491e <emulate_rvc>:
#include "unprivileged_memory.h"
#include "mtrap.h"
#include <limits.h>

static DECLARE_EMULATION_FUNC(emulate_rvc)
{
    8000491e:	7139                	addi	sp,sp,-64
    80004920:	fc06                	sd	ra,56(sp)
    80004922:	f822                	sd	s0,48(sp)
    80004924:	0080                	addi	s0,sp,64
    80004926:	fea43423          	sd	a0,-24(s0)
    8000492a:	feb43023          	sd	a1,-32(s0)
    8000492e:	fcc43c23          	sd	a2,-40(s0)
    80004932:	fcd43823          	sd	a3,-48(s0)
    80004936:	fce43423          	sd	a4,-56(s0)
  } else
#  endif
# endif
#endif

  return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
    8000493a:	fc843703          	ld	a4,-56(s0)
    8000493e:	fd043683          	ld	a3,-48(s0)
    80004942:	fd843603          	ld	a2,-40(s0)
    80004946:	fe043583          	ld	a1,-32(s0)
    8000494a:	fe843503          	ld	a0,-24(s0)
    8000494e:	14a000ef          	jal	ra,80004a98 <truly_illegal_insn>
}
    80004952:	70e2                	ld	ra,56(sp)
    80004954:	7442                	ld	s0,48(sp)
    80004956:	6121                	addi	sp,sp,64
    80004958:	8082                	ret

000000008000495a <illegal_insn_trap>:

void illegal_insn_trap(uintptr_t* regs, uintptr_t mcause, uintptr_t mepc)
{
    8000495a:	7175                	addi	sp,sp,-144
    8000495c:	e506                	sd	ra,136(sp)
    8000495e:	e122                	sd	s0,128(sp)
    80004960:	0900                	addi	s0,sp,144
    80004962:	f8a43423          	sd	a0,-120(s0)
    80004966:	f8b43023          	sd	a1,-128(s0)
    8000496a:	f6c43c23          	sd	a2,-136(s0)
       "  .word truly_illegal_insn - illegal_insn_trap_table\n"
       "  .word truly_illegal_insn - illegal_insn_trap_table\n"
       "  .word truly_illegal_insn - illegal_insn_trap_table\n"
       "  .popsection");

  uintptr_t mstatus = read_csr(mstatus);
    8000496e:	300027f3          	csrr	a5,mstatus
    80004972:	fef43023          	sd	a5,-32(s0)
    80004976:	fe043783          	ld	a5,-32(s0)
    8000497a:	f8f43c23          	sd	a5,-104(s0)
  insn_t insn = read_csr(mtval);
    8000497e:	343027f3          	csrr	a5,mtval
    80004982:	fcf43c23          	sd	a5,-40(s0)
    80004986:	fd843783          	ld	a5,-40(s0)
    8000498a:	fef43423          	sd	a5,-24(s0)

  if (unlikely((insn & 3) != 3)) {
    8000498e:	fe843783          	ld	a5,-24(s0)
    80004992:	8b8d                	andi	a5,a5,3
    80004994:	17f5                	addi	a5,a5,-3
    80004996:	00f037b3          	snez	a5,a5
    8000499a:	0ff7f793          	andi	a5,a5,255
    8000499e:	c3cd                	beqz	a5,80004a40 <illegal_insn_trap+0xe6>
    if (insn == 0)
    800049a0:	fe843783          	ld	a5,-24(s0)
    800049a4:	ebad                	bnez	a5,80004a16 <illegal_insn_trap+0xbc>
    800049a6:	f7843783          	ld	a5,-136(s0)
    800049aa:	fcf43023          	sd	a5,-64(s0)
    800049ae:	f9840793          	addi	a5,s0,-104
    800049b2:	faf43c23          	sd	a5,-72(s0)
}
#endif

static uintptr_t __attribute__((always_inline)) get_insn(uintptr_t mepc, uintptr_t* mstatus)
{
  register uintptr_t __mstatus_adjust asm ("a1") = MSTATUS_MPRV | MSTATUS_MXR;
    800049b6:	000a05b7          	lui	a1,0xa0
  register uintptr_t __mepc asm ("a2") = mepc;
    800049ba:	fc043603          	ld	a2,-64(s0)
       : [mprv] "r" (__mstatus_adjust), [addr] "r" (__mepc));
#else
#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
  uintptr_t rvc_mask = 3 << 24;
#else
  uintptr_t rvc_mask = 3;
    800049be:	478d                	li	a5,3
    800049c0:	faf43823          	sd	a5,-80(s0)
#endif
  uintptr_t tmp;
  asm ("csrrs %[mstatus], mstatus, %[mprv]\n"
    800049c4:	fb043783          	ld	a5,-80(s0)
    800049c8:	3005a6f3          	csrrs	a3,mstatus,a1
    800049cc:	00267713          	andi	a4,a2,2
    800049d0:	eb11                	bnez	a4,800049e4 <illegal_insn_trap+0x8a>
    800049d2:	00066503          	lwu	a0,0(a2)
    800049d6:	00f57733          	and	a4,a0,a5
    800049da:	00f70f63          	beq	a4,a5,800049f8 <illegal_insn_trap+0x9e>
    800049de:	1542                	slli	a0,a0,0x30
    800049e0:	9141                	srli	a0,a0,0x30
    800049e2:	a819                	j	800049f8 <illegal_insn_trap+0x9e>
    800049e4:	00065503          	lhu	a0,0(a2)
    800049e8:	00f57733          	and	a4,a0,a5
    800049ec:	00f71663          	bne	a4,a5,800049f8 <illegal_insn_trap+0x9e>
    800049f0:	00265703          	lhu	a4,2(a2)
    800049f4:	0742                	slli	a4,a4,0x10
    800049f6:	953a                	add	a0,a0,a4
    800049f8:	30069073          	csrw	mstatus,a3
    800049fc:	862a                	mv	a2,a0
    800049fe:	fac43423          	sd	a2,-88(s0)
    80004a02:	fae43023          	sd	a4,-96(s0)
       "2: csrw mstatus, %[mstatus]"
       : [mstatus] "+&r" (__mstatus), [insn] "=&r" (val), [tmp] "=&r" (tmp)
       : [mprv] "r" (__mstatus_adjust), [addr] "r" (__mepc),
         [rvc_mask] "r" (rvc_mask), [xlen_minus_16] "i" (__riscv_xlen - 16));
#endif
  *mstatus = __mstatus;
    80004a06:	8736                	mv	a4,a3
    80004a08:	fb843783          	ld	a5,-72(s0)
    80004a0c:	e398                	sd	a4,0(a5)
#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
  return __builtin_bswap32(val);
#else
  return val;
    80004a0e:	fa843783          	ld	a5,-88(s0)
      insn = get_insn(mepc, &mstatus);
    80004a12:	fef43423          	sd	a5,-24(s0)
    if ((insn & 3) != 3)
    80004a16:	fe843783          	ld	a5,-24(s0)
    80004a1a:	0037f713          	andi	a4,a5,3
    80004a1e:	478d                	li	a5,3
    80004a20:	02f70063          	beq	a4,a5,80004a40 <illegal_insn_trap+0xe6>
      return emulate_rvc(regs, mcause, mepc, mstatus, insn);
    80004a24:	f9843783          	ld	a5,-104(s0)
    80004a28:	fe843703          	ld	a4,-24(s0)
    80004a2c:	86be                	mv	a3,a5
    80004a2e:	f7843603          	ld	a2,-136(s0)
    80004a32:	f8043583          	ld	a1,-128(s0)
    80004a36:	f8843503          	ld	a0,-120(s0)
    80004a3a:	ee5ff0ef          	jal	ra,8000491e <emulate_rvc>
    80004a3e:	a889                	j	80004a90 <illegal_insn_trap+0x136>
  }

  write_csr(mepc, mepc + 4);
    80004a40:	f7843783          	ld	a5,-136(s0)
    80004a44:	0791                	addi	a5,a5,4
    80004a46:	34179073          	csrw	mepc,a5

  extern uint32_t illegal_insn_trap_table[];
  int32_t* pf = (void*)illegal_insn_trap_table + (insn & 0x7c);
    80004a4a:	fe843783          	ld	a5,-24(s0)
    80004a4e:	07c7f713          	andi	a4,a5,124
    80004a52:	00008797          	auipc	a5,0x8
    80004a56:	52278793          	addi	a5,a5,1314 # 8000cf74 <illegal_insn_trap_table>
    80004a5a:	97ba                	add	a5,a5,a4
    80004a5c:	fcf43823          	sd	a5,-48(s0)
  emulation_func f = (emulation_func)((void*)illegal_insn_trap_table + *pf);
    80004a60:	00008797          	auipc	a5,0x8
    80004a64:	51478793          	addi	a5,a5,1300 # 8000cf74 <illegal_insn_trap_table>
    80004a68:	fd043703          	ld	a4,-48(s0)
    80004a6c:	4318                	lw	a4,0(a4)
    80004a6e:	97ba                	add	a5,a5,a4
    80004a70:	fcf43423          	sd	a5,-56(s0)
  f(regs, mcause, mepc, mstatus, insn);
    80004a74:	f9843783          	ld	a5,-104(s0)
    80004a78:	fc843803          	ld	a6,-56(s0)
    80004a7c:	fe843703          	ld	a4,-24(s0)
    80004a80:	86be                	mv	a3,a5
    80004a82:	f7843603          	ld	a2,-136(s0)
    80004a86:	f8043583          	ld	a1,-128(s0)
    80004a8a:	f8843503          	ld	a0,-120(s0)
    80004a8e:	9802                	jalr	a6
}
    80004a90:	60aa                	ld	ra,136(sp)
    80004a92:	640a                	ld	s0,128(sp)
    80004a94:	6149                	addi	sp,sp,144
    80004a96:	8082                	ret

0000000080004a98 <truly_illegal_insn>:

__attribute__((noinline))
DECLARE_EMULATION_FUNC(truly_illegal_insn)
{
    80004a98:	7139                	addi	sp,sp,-64
    80004a9a:	fc06                	sd	ra,56(sp)
    80004a9c:	f822                	sd	s0,48(sp)
    80004a9e:	0080                	addi	s0,sp,64
    80004aa0:	fea43423          	sd	a0,-24(s0)
    80004aa4:	feb43023          	sd	a1,-32(s0)
    80004aa8:	fcc43c23          	sd	a2,-40(s0)
    80004aac:	fcd43823          	sd	a3,-48(s0)
    80004ab0:	fce43423          	sd	a4,-56(s0)
  return redirect_trap(mepc, mstatus, insn);
    80004ab4:	fc843603          	ld	a2,-56(s0)
    80004ab8:	fd043583          	ld	a1,-48(s0)
    80004abc:	fd843503          	ld	a0,-40(s0)
    80004ac0:	992fe0ef          	jal	ra,80002c52 <redirect_trap>
}
    80004ac4:	70e2                	ld	ra,56(sp)
    80004ac6:	7442                	ld	s0,48(sp)
    80004ac8:	6121                	addi	sp,sp,64
    80004aca:	8082                	ret

0000000080004acc <emulate_read_csr>:

static inline int emulate_read_csr(int num, uintptr_t mstatus, uintptr_t* result)
{
    80004acc:	7139                	addi	sp,sp,-64
    80004ace:	fc22                	sd	s0,56(sp)
    80004ad0:	0080                	addi	s0,sp,64
    80004ad2:	87aa                	mv	a5,a0
    80004ad4:	fcb43823          	sd	a1,-48(s0)
    80004ad8:	fcc43423          	sd	a2,-56(s0)
    80004adc:	fcf42e23          	sw	a5,-36(s0)
  uintptr_t counteren = -1;
    80004ae0:	57fd                	li	a5,-1
    80004ae2:	fef43423          	sd	a5,-24(s0)
  if (EXTRACT_FIELD(mstatus, MSTATUS_MPP) == PRV_U)
    80004ae6:	fd043703          	ld	a4,-48(s0)
    80004aea:	6789                	lui	a5,0x2
    80004aec:	80078793          	addi	a5,a5,-2048 # 1800 <MEM_START-0x7fffe800>
    80004af0:	8f7d                	and	a4,a4,a5
    80004af2:	7ff00793          	li	a5,2047
    80004af6:	00e7ea63          	bltu	a5,a4,80004b0a <emulate_read_csr+0x3e>
    counteren = read_csr(scounteren);
    80004afa:	106027f3          	csrr	a5,scounteren
    80004afe:	fef43023          	sd	a5,-32(s0)
    80004b02:	fe043783          	ld	a5,-32(s0)
    80004b06:	fef43423          	sd	a5,-24(s0)

  switch (num)
    80004b0a:	fdc42783          	lw	a5,-36(s0)
    80004b0e:	0007871b          	sext.w	a4,a5
    80004b12:	6785                	lui	a5,0x1
    80004b14:	c0178793          	addi	a5,a5,-1023 # c01 <MEM_START-0x7ffff3ff>
    80004b18:	02f71363          	bne	a4,a5,80004b3e <emulate_read_csr+0x72>
  {
    case CSR_TIME:
      if (!((counteren >> (CSR_TIME - CSR_CYCLE)) & 1))
    80004b1c:	fe843783          	ld	a5,-24(s0)
    80004b20:	8b89                	andi	a5,a5,2
    80004b22:	e399                	bnez	a5,80004b28 <emulate_read_csr+0x5c>
        return -1;
    80004b24:	57fd                	li	a5,-1
    80004b26:	a829                	j	80004b40 <emulate_read_csr+0x74>
      *result = *mtime;
    80004b28:	00014797          	auipc	a5,0x14
    80004b2c:	50878793          	addi	a5,a5,1288 # 80019030 <mtime>
    80004b30:	639c                	ld	a5,0(a5)
    80004b32:	6398                	ld	a4,0(a5)
    80004b34:	fc843783          	ld	a5,-56(s0)
    80004b38:	e398                	sd	a4,0(a5)
      return 0;
    80004b3a:	4781                	li	a5,0
    80004b3c:	a011                	j	80004b40 <emulate_read_csr+0x74>
      if ((mstatus & MSTATUS_FS) == 0) break;
      *result = GET_FCSR();
      return 0;
#endif
  }
  return -1;
    80004b3e:	57fd                	li	a5,-1
}
    80004b40:	853e                	mv	a0,a5
    80004b42:	7462                	ld	s0,56(sp)
    80004b44:	6121                	addi	sp,sp,64
    80004b46:	8082                	ret

0000000080004b48 <emulate_write_csr>:

static inline int emulate_write_csr(int num, uintptr_t value, uintptr_t mstatus)
{
    80004b48:	7179                	addi	sp,sp,-48
    80004b4a:	f422                	sd	s0,40(sp)
    80004b4c:	1800                	addi	s0,sp,48
    80004b4e:	87aa                	mv	a5,a0
    80004b50:	feb43023          	sd	a1,-32(s0)
    80004b54:	fcc43c23          	sd	a2,-40(s0)
    80004b58:	fef42623          	sw	a5,-20(s0)
    case CSR_FRM: SET_FRM(value); return 0;
    case CSR_FFLAGS: SET_FFLAGS(value); return 0;
    case CSR_FCSR: SET_FCSR(value); return 0;
#endif
  }
  return -1;
    80004b5c:	57fd                	li	a5,-1
}
    80004b5e:	853e                	mv	a0,a5
    80004b60:	7422                	ld	s0,40(sp)
    80004b62:	6145                	addi	sp,sp,48
    80004b64:	8082                	ret

0000000080004b66 <emulate_system_opcode>:

DECLARE_EMULATION_FUNC(emulate_system_opcode)
{
    80004b66:	7159                	addi	sp,sp,-112
    80004b68:	f486                	sd	ra,104(sp)
    80004b6a:	f0a2                	sd	s0,96(sp)
    80004b6c:	1880                	addi	s0,sp,112
    80004b6e:	faa43c23          	sd	a0,-72(s0)
    80004b72:	fab43823          	sd	a1,-80(s0)
    80004b76:	fac43423          	sd	a2,-88(s0)
    80004b7a:	fad43023          	sd	a3,-96(s0)
    80004b7e:	f8e43c23          	sd	a4,-104(s0)
  int rs1_num = (insn >> 15) & 0x1f;
    80004b82:	f9843783          	ld	a5,-104(s0)
    80004b86:	83bd                	srli	a5,a5,0xf
    80004b88:	2781                	sext.w	a5,a5
    80004b8a:	8bfd                	andi	a5,a5,31
    80004b8c:	fef42023          	sw	a5,-32(s0)
  uintptr_t rs1_val = GET_RS1(insn, regs);
    80004b90:	0f800793          	li	a5,248
    80004b94:	fcf42e23          	sw	a5,-36(s0)
    80004b98:	f9843783          	ld	a5,-104(s0)
    80004b9c:	00c7d713          	srli	a4,a5,0xc
    80004ba0:	fdc42783          	lw	a5,-36(s0)
    80004ba4:	8f7d                	and	a4,a4,a5
    80004ba6:	fb843783          	ld	a5,-72(s0)
    80004baa:	97ba                	add	a5,a5,a4
    80004bac:	639c                	ld	a5,0(a5)
    80004bae:	fcf43823          	sd	a5,-48(s0)
  int csr_num = (uint32_t)insn >> 20;
    80004bb2:	f9843783          	ld	a5,-104(s0)
    80004bb6:	2781                	sext.w	a5,a5
    80004bb8:	0147d79b          	srliw	a5,a5,0x14
    80004bbc:	2781                	sext.w	a5,a5
    80004bbe:	fcf42623          	sw	a5,-52(s0)
  uintptr_t csr_val, new_csr_val;

  if (emulate_read_csr(csr_num, mstatus, &csr_val))
    80004bc2:	fc040713          	addi	a4,s0,-64
    80004bc6:	fcc42783          	lw	a5,-52(s0)
    80004bca:	863a                	mv	a2,a4
    80004bcc:	fa043583          	ld	a1,-96(s0)
    80004bd0:	853e                	mv	a0,a5
    80004bd2:	efbff0ef          	jal	ra,80004acc <emulate_read_csr>
    80004bd6:	87aa                	mv	a5,a0
    80004bd8:	cf91                	beqz	a5,80004bf4 <emulate_system_opcode+0x8e>
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
    80004bda:	f9843703          	ld	a4,-104(s0)
    80004bde:	fa043683          	ld	a3,-96(s0)
    80004be2:	fa843603          	ld	a2,-88(s0)
    80004be6:	fb043583          	ld	a1,-80(s0)
    80004bea:	fb843503          	ld	a0,-72(s0)
    80004bee:	eabff0ef          	jal	ra,80004a98 <truly_illegal_insn>
    80004bf2:	aa15                	j	80004d26 <emulate_system_opcode+0x1c0>

  int do_write = rs1_num;
    80004bf4:	fe042783          	lw	a5,-32(s0)
    80004bf8:	fef42223          	sw	a5,-28(s0)
  switch (GET_RM(insn))
    80004bfc:	f9843783          	ld	a5,-104(s0)
    80004c00:	83b1                	srli	a5,a5,0xc
    80004c02:	8b9d                	andi	a5,a5,7
    80004c04:	471d                	li	a4,7
    80004c06:	0cf76263          	bltu	a4,a5,80004cca <emulate_system_opcode+0x164>
    80004c0a:	00279713          	slli	a4,a5,0x2
    80004c0e:	00008797          	auipc	a5,0x8
    80004c12:	3e678793          	addi	a5,a5,998 # 8000cff4 <illegal_insn_trap_table+0x80>
    80004c16:	97ba                	add	a5,a5,a4
    80004c18:	439c                	lw	a5,0(a5)
    80004c1a:	0007871b          	sext.w	a4,a5
    80004c1e:	00008797          	auipc	a5,0x8
    80004c22:	3d678793          	addi	a5,a5,982 # 8000cff4 <illegal_insn_trap_table+0x80>
    80004c26:	97ba                	add	a5,a5,a4
    80004c28:	8782                	jr	a5
  {
    case 0: return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
    80004c2a:	f9843703          	ld	a4,-104(s0)
    80004c2e:	fa043683          	ld	a3,-96(s0)
    80004c32:	fa843603          	ld	a2,-88(s0)
    80004c36:	fb043583          	ld	a1,-80(s0)
    80004c3a:	fb843503          	ld	a0,-72(s0)
    80004c3e:	e5bff0ef          	jal	ra,80004a98 <truly_illegal_insn>
    80004c42:	a0d5                	j	80004d26 <emulate_system_opcode+0x1c0>
    case 1: new_csr_val = rs1_val; do_write = 1; break;
    80004c44:	fd043783          	ld	a5,-48(s0)
    80004c48:	fef43423          	sd	a5,-24(s0)
    80004c4c:	4785                	li	a5,1
    80004c4e:	fef42223          	sw	a5,-28(s0)
    80004c52:	a8a5                	j	80004cca <emulate_system_opcode+0x164>
    case 2: new_csr_val = csr_val | rs1_val; break;
    80004c54:	fc043783          	ld	a5,-64(s0)
    80004c58:	fd043703          	ld	a4,-48(s0)
    80004c5c:	8fd9                	or	a5,a5,a4
    80004c5e:	fef43423          	sd	a5,-24(s0)
    80004c62:	a0a5                	j	80004cca <emulate_system_opcode+0x164>
    case 3: new_csr_val = csr_val & ~rs1_val; break;
    80004c64:	fd043783          	ld	a5,-48(s0)
    80004c68:	fff7c713          	not	a4,a5
    80004c6c:	fc043783          	ld	a5,-64(s0)
    80004c70:	8ff9                	and	a5,a5,a4
    80004c72:	fef43423          	sd	a5,-24(s0)
    80004c76:	a891                	j	80004cca <emulate_system_opcode+0x164>
    case 4: return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
    80004c78:	f9843703          	ld	a4,-104(s0)
    80004c7c:	fa043683          	ld	a3,-96(s0)
    80004c80:	fa843603          	ld	a2,-88(s0)
    80004c84:	fb043583          	ld	a1,-80(s0)
    80004c88:	fb843503          	ld	a0,-72(s0)
    80004c8c:	e0dff0ef          	jal	ra,80004a98 <truly_illegal_insn>
    80004c90:	a859                	j	80004d26 <emulate_system_opcode+0x1c0>
    case 5: new_csr_val = rs1_num; do_write = 1; break;
    80004c92:	fe042783          	lw	a5,-32(s0)
    80004c96:	fef43423          	sd	a5,-24(s0)
    80004c9a:	4785                	li	a5,1
    80004c9c:	fef42223          	sw	a5,-28(s0)
    80004ca0:	a02d                	j	80004cca <emulate_system_opcode+0x164>
    case 6: new_csr_val = csr_val | rs1_num; break;
    80004ca2:	fe042703          	lw	a4,-32(s0)
    80004ca6:	fc043783          	ld	a5,-64(s0)
    80004caa:	8fd9                	or	a5,a5,a4
    80004cac:	fef43423          	sd	a5,-24(s0)
    80004cb0:	a829                	j	80004cca <emulate_system_opcode+0x164>
    case 7: new_csr_val = csr_val & ~rs1_num; break;
    80004cb2:	fe042783          	lw	a5,-32(s0)
    80004cb6:	fff7c793          	not	a5,a5
    80004cba:	2781                	sext.w	a5,a5
    80004cbc:	873e                	mv	a4,a5
    80004cbe:	fc043783          	ld	a5,-64(s0)
    80004cc2:	8ff9                	and	a5,a5,a4
    80004cc4:	fef43423          	sd	a5,-24(s0)
    80004cc8:	0001                	nop
  }

  if (do_write && emulate_write_csr(csr_num, new_csr_val, mstatus))
    80004cca:	fe442783          	lw	a5,-28(s0)
    80004cce:	2781                	sext.w	a5,a5
    80004cd0:	cb8d                	beqz	a5,80004d02 <emulate_system_opcode+0x19c>
    80004cd2:	fcc42783          	lw	a5,-52(s0)
    80004cd6:	fa043603          	ld	a2,-96(s0)
    80004cda:	fe843583          	ld	a1,-24(s0)
    80004cde:	853e                	mv	a0,a5
    80004ce0:	e69ff0ef          	jal	ra,80004b48 <emulate_write_csr>
    80004ce4:	87aa                	mv	a5,a0
    80004ce6:	cf91                	beqz	a5,80004d02 <emulate_system_opcode+0x19c>
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
    80004ce8:	f9843703          	ld	a4,-104(s0)
    80004cec:	fa043683          	ld	a3,-96(s0)
    80004cf0:	fa843603          	ld	a2,-88(s0)
    80004cf4:	fb043583          	ld	a1,-80(s0)
    80004cf8:	fb843503          	ld	a0,-72(s0)
    80004cfc:	d9dff0ef          	jal	ra,80004a98 <truly_illegal_insn>
    80004d00:	a01d                	j	80004d26 <emulate_system_opcode+0x1c0>

  SET_RD(insn, regs, csr_val);
    80004d02:	0f800793          	li	a5,248
    80004d06:	fcf42423          	sw	a5,-56(s0)
    80004d0a:	f9843783          	ld	a5,-104(s0)
    80004d0e:	0047d713          	srli	a4,a5,0x4
    80004d12:	fc842783          	lw	a5,-56(s0)
    80004d16:	8f7d                	and	a4,a4,a5
    80004d18:	fb843783          	ld	a5,-72(s0)
    80004d1c:	97ba                	add	a5,a5,a4
    80004d1e:	873e                	mv	a4,a5
    80004d20:	fc043783          	ld	a5,-64(s0)
    80004d24:	e31c                	sd	a5,0(a4)
}
    80004d26:	70a6                	ld	ra,104(sp)
    80004d28:	7406                	ld	s0,96(sp)
    80004d2a:	6165                	addi	sp,sp,112
    80004d2c:	8082                	ret

0000000080004d2e <emulate_fp>:
#if defined(__riscv_flen) && __riscv_flen != 64
# error single-float only is not supported
#endif

DECLARE_EMULATION_FUNC(emulate_fp)
{
    80004d2e:	711d                	addi	sp,sp,-96
    80004d30:	ec86                	sd	ra,88(sp)
    80004d32:	e8a2                	sd	s0,80(sp)
    80004d34:	1080                	addi	s0,sp,96
    80004d36:	fca43423          	sd	a0,-56(s0)
    80004d3a:	fcb43023          	sd	a1,-64(s0)
    80004d3e:	fac43c23          	sd	a2,-72(s0)
    80004d42:	fad43823          	sd	a3,-80(s0)
    80004d46:	fae43423          	sd	a4,-88(s0)
       "  .word emulate_fmv_fi - fp_emulation_table\n"
       "  .word truly_illegal_insn - fp_emulation_table\n"
       "  .popsection");

  // if FPU is disabled, punt back to the OS
  if (unlikely((mstatus & MSTATUS_FS) == 0))
    80004d4a:	fb043703          	ld	a4,-80(s0)
    80004d4e:	6799                	lui	a5,0x6
    80004d50:	8ff9                	and	a5,a5,a4
    80004d52:	0017b793          	seqz	a5,a5
    80004d56:	0ff7f793          	andi	a5,a5,255
    80004d5a:	cf91                	beqz	a5,80004d76 <emulate_fp+0x48>
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
    80004d5c:	fa843703          	ld	a4,-88(s0)
    80004d60:	fb043683          	ld	a3,-80(s0)
    80004d64:	fb843603          	ld	a2,-72(s0)
    80004d68:	fc043583          	ld	a1,-64(s0)
    80004d6c:	fc843503          	ld	a0,-56(s0)
    80004d70:	d29ff0ef          	jal	ra,80004a98 <truly_illegal_insn>
    80004d74:	a045                	j	80004e14 <emulate_fp+0xe6>

  extern uint32_t fp_emulation_table[];
  int32_t* pf = (void*)fp_emulation_table + ((insn >> 25) & 0x7c);
    80004d76:	fa843783          	ld	a5,-88(s0)
    80004d7a:	83e5                	srli	a5,a5,0x19
    80004d7c:	07c7f713          	andi	a4,a5,124
    80004d80:	00008797          	auipc	a5,0x8
    80004d84:	29878793          	addi	a5,a5,664 # 8000d018 <fp_emulation_table>
    80004d88:	97ba                	add	a5,a5,a4
    80004d8a:	fef43423          	sd	a5,-24(s0)
  emulation_func f = (emulation_func)((void*)fp_emulation_table + *pf);
    80004d8e:	00008797          	auipc	a5,0x8
    80004d92:	28a78793          	addi	a5,a5,650 # 8000d018 <fp_emulation_table>
    80004d96:	fe843703          	ld	a4,-24(s0)
    80004d9a:	4318                	lw	a4,0(a4)
    80004d9c:	97ba                	add	a5,a5,a4
    80004d9e:	fef43023          	sd	a5,-32(s0)

  SETUP_STATIC_ROUNDING(insn);
    80004da2:	002027f3          	frrm	a5
    80004da6:	fcf43c23          	sd	a5,-40(s0)
    80004daa:	fd843783          	ld	a5,-40(s0)
    80004dae:	823e                	mv	tp,a5
    80004db0:	fa843703          	ld	a4,-88(s0)
    80004db4:	679d                	lui	a5,0x7
    80004db6:	8f7d                	and	a4,a4,a5
    80004db8:	77e5                	lui	a5,0xffff9
    80004dba:	97ba                	add	a5,a5,a4
    80004dbc:	0017b793          	seqz	a5,a5
    80004dc0:	0ff7f793          	andi	a5,a5,255
    80004dc4:	eb9d                	bnez	a5,80004dfa <emulate_fp+0xcc>
    80004dc6:	fa843783          	ld	a5,-88(s0)
    80004dca:	83b1                	srli	a5,a5,0xc
    80004dcc:	0077f713          	andi	a4,a5,7
    80004dd0:	4791                	li	a5,4
    80004dd2:	00e7ff63          	bleu	a4,a5,80004df0 <emulate_fp+0xc2>
    80004dd6:	fa843703          	ld	a4,-88(s0)
    80004dda:	fb043683          	ld	a3,-80(s0)
    80004dde:	fb843603          	ld	a2,-72(s0)
    80004de2:	fc043583          	ld	a1,-64(s0)
    80004de6:	fc843503          	ld	a0,-56(s0)
    80004dea:	cafff0ef          	jal	ra,80004a98 <truly_illegal_insn>
    80004dee:	a01d                	j	80004e14 <emulate_fp+0xe6>
    80004df0:	fa843783          	ld	a5,-88(s0)
    80004df4:	83b1                	srli	a5,a5,0xc
    80004df6:	8b9d                	andi	a5,a5,7
    80004df8:	823e                	mv	tp,a5
  return f(regs, mcause, mepc, mstatus, insn);
    80004dfa:	fe043783          	ld	a5,-32(s0)
    80004dfe:	fa843703          	ld	a4,-88(s0)
    80004e02:	fb043683          	ld	a3,-80(s0)
    80004e06:	fb843603          	ld	a2,-72(s0)
    80004e0a:	fc043583          	ld	a1,-64(s0)
    80004e0e:	fc843503          	ld	a0,-56(s0)
    80004e12:	9782                	jalr	a5
}
    80004e14:	60e6                	ld	ra,88(sp)
    80004e16:	6446                	ld	s0,80(sp)
    80004e18:	6125                	addi	sp,sp,96
    80004e1a:	8082                	ret

0000000080004e1c <emulate_any_fadd>:

#define f32(x) ((float32_t){ .v = x })
#define f64(x) ((float64_t){ .v = x })

void emulate_any_fadd(uintptr_t* regs, uintptr_t mcause, uintptr_t mepc, uintptr_t mstatus, insn_t insn, int32_t neg_b)
{
    80004e1c:	7171                	addi	sp,sp,-176
    80004e1e:	f506                	sd	ra,168(sp)
    80004e20:	f122                	sd	s0,160(sp)
    80004e22:	1900                	addi	s0,sp,176
    80004e24:	f6a43c23          	sd	a0,-136(s0)
    80004e28:	f6b43823          	sd	a1,-144(s0)
    80004e2c:	f6c43423          	sd	a2,-152(s0)
    80004e30:	f6d43023          	sd	a3,-160(s0)
    80004e34:	f4e43c23          	sd	a4,-168(s0)
    80004e38:	f4f42a23          	sw	a5,-172(s0)
  if (GET_PRECISION(insn) == PRECISION_S) {
    80004e3c:	f5843783          	ld	a5,-168(s0)
    80004e40:	83e5                	srli	a5,a5,0x19
    80004e42:	8b8d                	andi	a5,a5,3
    80004e44:	e7d9                	bnez	a5,80004ed2 <emulate_any_fadd+0xb6>
    uint32_t rs1 = GET_F32_RS1(insn, regs);
    80004e46:	f5843783          	ld	a5,-168(s0)
    80004e4a:	83b1                	srli	a5,a5,0xc
    80004e4c:	2781                	sext.w	a5,a5
    80004e4e:	0f87f793          	andi	a5,a5,248
    80004e52:	2781                	sext.w	a5,a5
    80004e54:	853e                	mv	a0,a5
    80004e56:	fffff797          	auipc	a5,0xfffff
    80004e5a:	97aa                	add	a5,a5,a0
    80004e5c:	6c8782e7          	jalr	t0,1736(a5) # 8000451e <get_f32_reg>
    80004e60:	fef43423          	sd	a5,-24(s0)
    80004e64:	0005079b          	sext.w	a5,a0
    80004e68:	fef42223          	sw	a5,-28(s0)
    uint32_t rs2 = GET_F32_RS2(insn, regs) ^ neg_b;
    80004e6c:	f5843783          	ld	a5,-168(s0)
    80004e70:	83c5                	srli	a5,a5,0x11
    80004e72:	2781                	sext.w	a5,a5
    80004e74:	0f87f793          	andi	a5,a5,248
    80004e78:	2781                	sext.w	a5,a5
    80004e7a:	853e                	mv	a0,a5
    80004e7c:	fffff797          	auipc	a5,0xfffff
    80004e80:	97aa                	add	a5,a5,a0
    80004e82:	6a2782e7          	jalr	t0,1698(a5) # 8000451e <get_f32_reg>
    80004e86:	fcf43c23          	sd	a5,-40(s0)
    80004e8a:	0005071b          	sext.w	a4,a0
    80004e8e:	f5442783          	lw	a5,-172(s0)
    80004e92:	8fb9                	xor	a5,a5,a4
    80004e94:	2781                	sext.w	a5,a5
    80004e96:	fcf42a23          	sw	a5,-44(s0)
    SET_F32_RD(insn, regs, f32_add(f32(rs1), f32(rs2)).v);
    80004e9a:	fe442783          	lw	a5,-28(s0)
    80004e9e:	fd442703          	lw	a4,-44(s0)
    80004ea2:	85ba                	mv	a1,a4
    80004ea4:	853e                	mv	a0,a5
    80004ea6:	70f010ef          	jal	ra,80006db4 <f32_add>
    80004eaa:	87aa                	mv	a5,a0
    80004eac:	2781                	sext.w	a5,a5
    80004eae:	853e                	mv	a0,a5
    80004eb0:	f5843783          	ld	a5,-168(s0)
    80004eb4:	8391                	srli	a5,a5,0x4
    80004eb6:	0f87f793          	andi	a5,a5,248
    80004eba:	fcf43423          	sd	a5,-56(s0)
    80004ebe:	fc843703          	ld	a4,-56(s0)
    80004ec2:	fffff797          	auipc	a5,0xfffff
    80004ec6:	97ba                	add	a5,a5,a4
    80004ec8:	75c782e7          	jalr	t0,1884(a5) # 8000461e <put_f32_reg>
    80004ecc:	fcf43023          	sd	a5,-64(s0)
    80004ed0:	a84d                	j	80004f82 <emulate_any_fadd+0x166>
  } else if (GET_PRECISION(insn) == PRECISION_D) {
    80004ed2:	f5843783          	ld	a5,-168(s0)
    80004ed6:	83e5                	srli	a5,a5,0x19
    80004ed8:	0037f713          	andi	a4,a5,3
    80004edc:	4785                	li	a5,1
    80004ede:	08f71663          	bne	a4,a5,80004f6a <emulate_any_fadd+0x14e>
    uint64_t rs1 = GET_F64_RS1(insn, regs);
    80004ee2:	f5843783          	ld	a5,-168(s0)
    80004ee6:	83b1                	srli	a5,a5,0xc
    80004ee8:	0f87f793          	andi	a5,a5,248
    80004eec:	853e                	mv	a0,a5
    80004eee:	00000797          	auipc	a5,0x0
    80004ef2:	97aa                	add	a5,a5,a0
    80004ef4:	830782e7          	jalr	t0,-2000(a5) # 8000471e <get_f64_reg>
    80004ef8:	faf43c23          	sd	a5,-72(s0)
    80004efc:	87aa                	mv	a5,a0
    80004efe:	faf43823          	sd	a5,-80(s0)
    uint64_t rs2 = GET_F64_RS2(insn, regs) ^ ((uint64_t)neg_b << 32);
    80004f02:	f5843783          	ld	a5,-168(s0)
    80004f06:	83c5                	srli	a5,a5,0x11
    80004f08:	0f87f793          	andi	a5,a5,248
    80004f0c:	853e                	mv	a0,a5
    80004f0e:	00000797          	auipc	a5,0x0
    80004f12:	97aa                	add	a5,a5,a0
    80004f14:	810782e7          	jalr	t0,-2032(a5) # 8000471e <get_f64_reg>
    80004f18:	faf43423          	sd	a5,-88(s0)
    80004f1c:	87aa                	mv	a5,a0
    80004f1e:	873e                	mv	a4,a5
    80004f20:	f5442783          	lw	a5,-172(s0)
    80004f24:	1782                	slli	a5,a5,0x20
    80004f26:	8fb9                	xor	a5,a5,a4
    80004f28:	faf43023          	sd	a5,-96(s0)
    SET_F64_RD(insn, regs, f64_add(f64(rs1), f64(rs2)).v);
    80004f2c:	fb043783          	ld	a5,-80(s0)
    80004f30:	fa043703          	ld	a4,-96(s0)
    80004f34:	85ba                	mv	a1,a4
    80004f36:	853e                	mv	a0,a5
    80004f38:	531020ef          	jal	ra,80007c68 <f64_add>
    80004f3c:	87aa                	mv	a5,a0
    80004f3e:	f8f43423          	sd	a5,-120(s0)
    80004f42:	f8843783          	ld	a5,-120(s0)
    80004f46:	853e                	mv	a0,a5
    80004f48:	f5843783          	ld	a5,-168(s0)
    80004f4c:	8391                	srli	a5,a5,0x4
    80004f4e:	0f87f793          	andi	a5,a5,248
    80004f52:	f8f43c23          	sd	a5,-104(s0)
    80004f56:	f9843703          	ld	a4,-104(s0)
    80004f5a:	00000797          	auipc	a5,0x0
    80004f5e:	97ba                	add	a5,a5,a4
    80004f60:	8c4782e7          	jalr	t0,-1852(a5) # 8000481e <put_f64_reg>
    80004f64:	f8f43823          	sd	a5,-112(s0)
    80004f68:	a829                	j	80004f82 <emulate_any_fadd+0x166>
  } else {
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
    80004f6a:	f5843703          	ld	a4,-168(s0)
    80004f6e:	f6043683          	ld	a3,-160(s0)
    80004f72:	f6843603          	ld	a2,-152(s0)
    80004f76:	f7043583          	ld	a1,-144(s0)
    80004f7a:	f7843503          	ld	a0,-136(s0)
    80004f7e:	b1bff0ef          	jal	ra,80004a98 <truly_illegal_insn>
  }
}
    80004f82:	70aa                	ld	ra,168(sp)
    80004f84:	740a                	ld	s0,160(sp)
    80004f86:	614d                	addi	sp,sp,176
    80004f88:	8082                	ret

0000000080004f8a <emulate_fadd>:

DECLARE_EMULATION_FUNC(emulate_fadd)
{
    80004f8a:	7139                	addi	sp,sp,-64
    80004f8c:	fc06                	sd	ra,56(sp)
    80004f8e:	f822                	sd	s0,48(sp)
    80004f90:	0080                	addi	s0,sp,64
    80004f92:	fea43423          	sd	a0,-24(s0)
    80004f96:	feb43023          	sd	a1,-32(s0)
    80004f9a:	fcc43c23          	sd	a2,-40(s0)
    80004f9e:	fcd43823          	sd	a3,-48(s0)
    80004fa2:	fce43423          	sd	a4,-56(s0)
  return emulate_any_fadd(regs, mcause, mepc, mstatus, insn, 0);
    80004fa6:	4781                	li	a5,0
    80004fa8:	fc843703          	ld	a4,-56(s0)
    80004fac:	fd043683          	ld	a3,-48(s0)
    80004fb0:	fd843603          	ld	a2,-40(s0)
    80004fb4:	fe043583          	ld	a1,-32(s0)
    80004fb8:	fe843503          	ld	a0,-24(s0)
    80004fbc:	e61ff0ef          	jal	ra,80004e1c <emulate_any_fadd>
}
    80004fc0:	70e2                	ld	ra,56(sp)
    80004fc2:	7442                	ld	s0,48(sp)
    80004fc4:	6121                	addi	sp,sp,64
    80004fc6:	8082                	ret

0000000080004fc8 <emulate_fsub>:

DECLARE_EMULATION_FUNC(emulate_fsub)
{
    80004fc8:	7139                	addi	sp,sp,-64
    80004fca:	fc06                	sd	ra,56(sp)
    80004fcc:	f822                	sd	s0,48(sp)
    80004fce:	0080                	addi	s0,sp,64
    80004fd0:	fea43423          	sd	a0,-24(s0)
    80004fd4:	feb43023          	sd	a1,-32(s0)
    80004fd8:	fcc43c23          	sd	a2,-40(s0)
    80004fdc:	fcd43823          	sd	a3,-48(s0)
    80004fe0:	fce43423          	sd	a4,-56(s0)
  return emulate_any_fadd(regs, mcause, mepc, mstatus, insn, INT32_MIN);
    80004fe4:	800007b7          	lui	a5,0x80000
    80004fe8:	fc843703          	ld	a4,-56(s0)
    80004fec:	fd043683          	ld	a3,-48(s0)
    80004ff0:	fd843603          	ld	a2,-40(s0)
    80004ff4:	fe043583          	ld	a1,-32(s0)
    80004ff8:	fe843503          	ld	a0,-24(s0)
    80004ffc:	e21ff0ef          	jal	ra,80004e1c <emulate_any_fadd>
}
    80005000:	70e2                	ld	ra,56(sp)
    80005002:	7442                	ld	s0,48(sp)
    80005004:	6121                	addi	sp,sp,64
    80005006:	8082                	ret

0000000080005008 <emulate_fmul>:

DECLARE_EMULATION_FUNC(emulate_fmul)
{
    80005008:	7171                	addi	sp,sp,-176
    8000500a:	f506                	sd	ra,168(sp)
    8000500c:	f122                	sd	s0,160(sp)
    8000500e:	1900                	addi	s0,sp,176
    80005010:	f6a43c23          	sd	a0,-136(s0)
    80005014:	f6b43823          	sd	a1,-144(s0)
    80005018:	f6c43423          	sd	a2,-152(s0)
    8000501c:	f6d43023          	sd	a3,-160(s0)
    80005020:	f4e43c23          	sd	a4,-168(s0)
  if (GET_PRECISION(insn) == PRECISION_S) {
    80005024:	f5843783          	ld	a5,-168(s0)
    80005028:	83e5                	srli	a5,a5,0x19
    8000502a:	8b8d                	andi	a5,a5,3
    8000502c:	e3d9                	bnez	a5,800050b2 <emulate_fmul+0xaa>
    uint32_t rs1 = GET_F32_RS1(insn, regs);
    8000502e:	f5843783          	ld	a5,-168(s0)
    80005032:	83b1                	srli	a5,a5,0xc
    80005034:	2781                	sext.w	a5,a5
    80005036:	0f87f793          	andi	a5,a5,248
    8000503a:	2781                	sext.w	a5,a5
    8000503c:	853e                	mv	a0,a5
    8000503e:	fffff797          	auipc	a5,0xfffff
    80005042:	97aa                	add	a5,a5,a0
    80005044:	4e0782e7          	jalr	t0,1248(a5) # 8000451e <get_f32_reg>
    80005048:	fef43423          	sd	a5,-24(s0)
    8000504c:	0005079b          	sext.w	a5,a0
    80005050:	fef42223          	sw	a5,-28(s0)
    uint32_t rs2 = GET_F32_RS2(insn, regs);
    80005054:	f5843783          	ld	a5,-168(s0)
    80005058:	83c5                	srli	a5,a5,0x11
    8000505a:	2781                	sext.w	a5,a5
    8000505c:	0f87f793          	andi	a5,a5,248
    80005060:	2781                	sext.w	a5,a5
    80005062:	853e                	mv	a0,a5
    80005064:	fffff797          	auipc	a5,0xfffff
    80005068:	97aa                	add	a5,a5,a0
    8000506a:	4ba782e7          	jalr	t0,1210(a5) # 8000451e <get_f32_reg>
    8000506e:	fcf43c23          	sd	a5,-40(s0)
    80005072:	0005079b          	sext.w	a5,a0
    80005076:	fcf42a23          	sw	a5,-44(s0)
    SET_F32_RD(insn, regs, f32_mul(f32(rs1), f32(rs2)).v);
    8000507a:	fe442783          	lw	a5,-28(s0)
    8000507e:	fd442703          	lw	a4,-44(s0)
    80005082:	85ba                	mv	a1,a4
    80005084:	853e                	mv	a0,a5
    80005086:	40c020ef          	jal	ra,80007492 <f32_mul>
    8000508a:	87aa                	mv	a5,a0
    8000508c:	2781                	sext.w	a5,a5
    8000508e:	853e                	mv	a0,a5
    80005090:	f5843783          	ld	a5,-168(s0)
    80005094:	8391                	srli	a5,a5,0x4
    80005096:	0f87f793          	andi	a5,a5,248
    8000509a:	fcf43423          	sd	a5,-56(s0)
    8000509e:	fc843703          	ld	a4,-56(s0)
    800050a2:	fffff797          	auipc	a5,0xfffff
    800050a6:	97ba                	add	a5,a5,a4
    800050a8:	57c782e7          	jalr	t0,1404(a5) # 8000461e <put_f32_reg>
    800050ac:	fcf43023          	sd	a5,-64(s0)
    800050b0:	a065                	j	80005158 <emulate_fmul+0x150>
  } else if (GET_PRECISION(insn) == PRECISION_D) {
    800050b2:	f5843783          	ld	a5,-168(s0)
    800050b6:	83e5                	srli	a5,a5,0x19
    800050b8:	0037f713          	andi	a4,a5,3
    800050bc:	4785                	li	a5,1
    800050be:	08f71163          	bne	a4,a5,80005140 <emulate_fmul+0x138>
    uint64_t rs1 = GET_F64_RS1(insn, regs);
    800050c2:	f5843783          	ld	a5,-168(s0)
    800050c6:	83b1                	srli	a5,a5,0xc
    800050c8:	0f87f793          	andi	a5,a5,248
    800050cc:	853e                	mv	a0,a5
    800050ce:	fffff797          	auipc	a5,0xfffff
    800050d2:	97aa                	add	a5,a5,a0
    800050d4:	650782e7          	jalr	t0,1616(a5) # 8000471e <get_f64_reg>
    800050d8:	faf43c23          	sd	a5,-72(s0)
    800050dc:	87aa                	mv	a5,a0
    800050de:	faf43823          	sd	a5,-80(s0)
    uint64_t rs2 = GET_F64_RS2(insn, regs);
    800050e2:	f5843783          	ld	a5,-168(s0)
    800050e6:	83c5                	srli	a5,a5,0x11
    800050e8:	0f87f793          	andi	a5,a5,248
    800050ec:	853e                	mv	a0,a5
    800050ee:	fffff797          	auipc	a5,0xfffff
    800050f2:	97aa                	add	a5,a5,a0
    800050f4:	630782e7          	jalr	t0,1584(a5) # 8000471e <get_f64_reg>
    800050f8:	faf43423          	sd	a5,-88(s0)
    800050fc:	87aa                	mv	a5,a0
    800050fe:	faf43023          	sd	a5,-96(s0)
    SET_F64_RD(insn, regs, f64_mul(f64(rs1), f64(rs2)).v);
    80005102:	fb043783          	ld	a5,-80(s0)
    80005106:	fa043703          	ld	a4,-96(s0)
    8000510a:	85ba                	mv	a1,a4
    8000510c:	853e                	mv	a0,a5
    8000510e:	2a6030ef          	jal	ra,800083b4 <f64_mul>
    80005112:	87aa                	mv	a5,a0
    80005114:	f8f43423          	sd	a5,-120(s0)
    80005118:	f8843783          	ld	a5,-120(s0)
    8000511c:	853e                	mv	a0,a5
    8000511e:	f5843783          	ld	a5,-168(s0)
    80005122:	8391                	srli	a5,a5,0x4
    80005124:	0f87f793          	andi	a5,a5,248
    80005128:	f8f43c23          	sd	a5,-104(s0)
    8000512c:	f9843703          	ld	a4,-104(s0)
    80005130:	fffff797          	auipc	a5,0xfffff
    80005134:	97ba                	add	a5,a5,a4
    80005136:	6ee782e7          	jalr	t0,1774(a5) # 8000481e <put_f64_reg>
    8000513a:	f8f43823          	sd	a5,-112(s0)
    8000513e:	a829                	j	80005158 <emulate_fmul+0x150>
  } else {
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
    80005140:	f5843703          	ld	a4,-168(s0)
    80005144:	f6043683          	ld	a3,-160(s0)
    80005148:	f6843603          	ld	a2,-152(s0)
    8000514c:	f7043583          	ld	a1,-144(s0)
    80005150:	f7843503          	ld	a0,-136(s0)
    80005154:	945ff0ef          	jal	ra,80004a98 <truly_illegal_insn>
  }
}
    80005158:	70aa                	ld	ra,168(sp)
    8000515a:	740a                	ld	s0,160(sp)
    8000515c:	614d                	addi	sp,sp,176
    8000515e:	8082                	ret

0000000080005160 <emulate_fdiv>:

DECLARE_EMULATION_FUNC(emulate_fdiv)
{
    80005160:	7171                	addi	sp,sp,-176
    80005162:	f506                	sd	ra,168(sp)
    80005164:	f122                	sd	s0,160(sp)
    80005166:	1900                	addi	s0,sp,176
    80005168:	f6a43c23          	sd	a0,-136(s0)
    8000516c:	f6b43823          	sd	a1,-144(s0)
    80005170:	f6c43423          	sd	a2,-152(s0)
    80005174:	f6d43023          	sd	a3,-160(s0)
    80005178:	f4e43c23          	sd	a4,-168(s0)
  if (GET_PRECISION(insn) == PRECISION_S) {
    8000517c:	f5843783          	ld	a5,-168(s0)
    80005180:	83e5                	srli	a5,a5,0x19
    80005182:	8b8d                	andi	a5,a5,3
    80005184:	e3d9                	bnez	a5,8000520a <emulate_fdiv+0xaa>
    uint32_t rs1 = GET_F32_RS1(insn, regs);
    80005186:	f5843783          	ld	a5,-168(s0)
    8000518a:	83b1                	srli	a5,a5,0xc
    8000518c:	2781                	sext.w	a5,a5
    8000518e:	0f87f793          	andi	a5,a5,248
    80005192:	2781                	sext.w	a5,a5
    80005194:	853e                	mv	a0,a5
    80005196:	fffff797          	auipc	a5,0xfffff
    8000519a:	97aa                	add	a5,a5,a0
    8000519c:	388782e7          	jalr	t0,904(a5) # 8000451e <get_f32_reg>
    800051a0:	fef43423          	sd	a5,-24(s0)
    800051a4:	0005079b          	sext.w	a5,a0
    800051a8:	fef42223          	sw	a5,-28(s0)
    uint32_t rs2 = GET_F32_RS2(insn, regs);
    800051ac:	f5843783          	ld	a5,-168(s0)
    800051b0:	83c5                	srli	a5,a5,0x11
    800051b2:	2781                	sext.w	a5,a5
    800051b4:	0f87f793          	andi	a5,a5,248
    800051b8:	2781                	sext.w	a5,a5
    800051ba:	853e                	mv	a0,a5
    800051bc:	fffff797          	auipc	a5,0xfffff
    800051c0:	97aa                	add	a5,a5,a0
    800051c2:	362782e7          	jalr	t0,866(a5) # 8000451e <get_f32_reg>
    800051c6:	fcf43c23          	sd	a5,-40(s0)
    800051ca:	0005079b          	sext.w	a5,a0
    800051ce:	fcf42a23          	sw	a5,-44(s0)
    SET_F32_RD(insn, regs, f32_div(f32(rs1), f32(rs2)).v);
    800051d2:	fe442783          	lw	a5,-28(s0)
    800051d6:	fd442703          	lw	a4,-44(s0)
    800051da:	85ba                	mv	a1,a4
    800051dc:	853e                	mv	a0,a5
    800051de:	457010ef          	jal	ra,80006e34 <f32_div>
    800051e2:	87aa                	mv	a5,a0
    800051e4:	2781                	sext.w	a5,a5
    800051e6:	853e                	mv	a0,a5
    800051e8:	f5843783          	ld	a5,-168(s0)
    800051ec:	8391                	srli	a5,a5,0x4
    800051ee:	0f87f793          	andi	a5,a5,248
    800051f2:	fcf43423          	sd	a5,-56(s0)
    800051f6:	fc843703          	ld	a4,-56(s0)
    800051fa:	fffff797          	auipc	a5,0xfffff
    800051fe:	97ba                	add	a5,a5,a4
    80005200:	424782e7          	jalr	t0,1060(a5) # 8000461e <put_f32_reg>
    80005204:	fcf43023          	sd	a5,-64(s0)
    80005208:	a065                	j	800052b0 <emulate_fdiv+0x150>
  } else if (GET_PRECISION(insn) == PRECISION_D) {
    8000520a:	f5843783          	ld	a5,-168(s0)
    8000520e:	83e5                	srli	a5,a5,0x19
    80005210:	0037f713          	andi	a4,a5,3
    80005214:	4785                	li	a5,1
    80005216:	08f71163          	bne	a4,a5,80005298 <emulate_fdiv+0x138>
    uint64_t rs1 = GET_F64_RS1(insn, regs);
    8000521a:	f5843783          	ld	a5,-168(s0)
    8000521e:	83b1                	srli	a5,a5,0xc
    80005220:	0f87f793          	andi	a5,a5,248
    80005224:	853e                	mv	a0,a5
    80005226:	fffff797          	auipc	a5,0xfffff
    8000522a:	97aa                	add	a5,a5,a0
    8000522c:	4f8782e7          	jalr	t0,1272(a5) # 8000471e <get_f64_reg>
    80005230:	faf43c23          	sd	a5,-72(s0)
    80005234:	87aa                	mv	a5,a0
    80005236:	faf43823          	sd	a5,-80(s0)
    uint64_t rs2 = GET_F64_RS2(insn, regs);
    8000523a:	f5843783          	ld	a5,-168(s0)
    8000523e:	83c5                	srli	a5,a5,0x11
    80005240:	0f87f793          	andi	a5,a5,248
    80005244:	853e                	mv	a0,a5
    80005246:	fffff797          	auipc	a5,0xfffff
    8000524a:	97aa                	add	a5,a5,a0
    8000524c:	4d8782e7          	jalr	t0,1240(a5) # 8000471e <get_f64_reg>
    80005250:	faf43423          	sd	a5,-88(s0)
    80005254:	87aa                	mv	a5,a0
    80005256:	faf43023          	sd	a5,-96(s0)
    SET_F64_RD(insn, regs, f64_div(f64(rs1), f64(rs2)).v);
    8000525a:	fb043783          	ld	a5,-80(s0)
    8000525e:	fa043703          	ld	a4,-96(s0)
    80005262:	85ba                	mv	a1,a4
    80005264:	853e                	mv	a0,a5
    80005266:	291020ef          	jal	ra,80007cf6 <f64_div>
    8000526a:	87aa                	mv	a5,a0
    8000526c:	f8f43423          	sd	a5,-120(s0)
    80005270:	f8843783          	ld	a5,-120(s0)
    80005274:	853e                	mv	a0,a5
    80005276:	f5843783          	ld	a5,-168(s0)
    8000527a:	8391                	srli	a5,a5,0x4
    8000527c:	0f87f793          	andi	a5,a5,248
    80005280:	f8f43c23          	sd	a5,-104(s0)
    80005284:	f9843703          	ld	a4,-104(s0)
    80005288:	fffff797          	auipc	a5,0xfffff
    8000528c:	97ba                	add	a5,a5,a4
    8000528e:	596782e7          	jalr	t0,1430(a5) # 8000481e <put_f64_reg>
    80005292:	f8f43823          	sd	a5,-112(s0)
    80005296:	a829                	j	800052b0 <emulate_fdiv+0x150>
  } else {
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
    80005298:	f5843703          	ld	a4,-168(s0)
    8000529c:	f6043683          	ld	a3,-160(s0)
    800052a0:	f6843603          	ld	a2,-152(s0)
    800052a4:	f7043583          	ld	a1,-144(s0)
    800052a8:	f7843503          	ld	a0,-136(s0)
    800052ac:	fecff0ef          	jal	ra,80004a98 <truly_illegal_insn>
  }
}
    800052b0:	70aa                	ld	ra,168(sp)
    800052b2:	740a                	ld	s0,160(sp)
    800052b4:	614d                	addi	sp,sp,176
    800052b6:	8082                	ret

00000000800052b8 <emulate_fsqrt>:

DECLARE_EMULATION_FUNC(emulate_fsqrt)
{
    800052b8:	7119                	addi	sp,sp,-128
    800052ba:	fc86                	sd	ra,120(sp)
    800052bc:	f8a2                	sd	s0,112(sp)
    800052be:	0100                	addi	s0,sp,128
    800052c0:	faa43423          	sd	a0,-88(s0)
    800052c4:	fab43023          	sd	a1,-96(s0)
    800052c8:	f8c43c23          	sd	a2,-104(s0)
    800052cc:	f8d43823          	sd	a3,-112(s0)
    800052d0:	f8e43423          	sd	a4,-120(s0)
  if ((insn >> 20) & 0x1f)
    800052d4:	f8843783          	ld	a5,-120(s0)
    800052d8:	83d1                	srli	a5,a5,0x14
    800052da:	8bfd                	andi	a5,a5,31
    800052dc:	cf91                	beqz	a5,800052f8 <emulate_fsqrt+0x40>
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
    800052de:	f8843703          	ld	a4,-120(s0)
    800052e2:	f9043683          	ld	a3,-112(s0)
    800052e6:	f9843603          	ld	a2,-104(s0)
    800052ea:	fa043583          	ld	a1,-96(s0)
    800052ee:	fa843503          	ld	a0,-88(s0)
    800052f2:	fa6ff0ef          	jal	ra,80004a98 <truly_illegal_insn>
    800052f6:	a8d9                	j	800053cc <emulate_fsqrt+0x114>

  if (GET_PRECISION(insn) == PRECISION_S) {
    800052f8:	f8843783          	ld	a5,-120(s0)
    800052fc:	83e5                	srli	a5,a5,0x19
    800052fe:	8b8d                	andi	a5,a5,3
    80005300:	ebb1                	bnez	a5,80005354 <emulate_fsqrt+0x9c>
    SET_F32_RD(insn, regs, f32_sqrt(f32(GET_F32_RS1(insn, regs))).v);
    80005302:	f8843783          	ld	a5,-120(s0)
    80005306:	83b1                	srli	a5,a5,0xc
    80005308:	2781                	sext.w	a5,a5
    8000530a:	0f87f793          	andi	a5,a5,248
    8000530e:	2781                	sext.w	a5,a5
    80005310:	853e                	mv	a0,a5
    80005312:	fffff797          	auipc	a5,0xfffff
    80005316:	97aa                	add	a5,a5,a0
    80005318:	20c782e7          	jalr	t0,524(a5) # 8000451e <get_f32_reg>
    8000531c:	fef43423          	sd	a5,-24(s0)
    80005320:	0005079b          	sext.w	a5,a0
    80005324:	2781                	sext.w	a5,a5
    80005326:	853e                	mv	a0,a5
    80005328:	3da020ef          	jal	ra,80007702 <f32_sqrt>
    8000532c:	87aa                	mv	a5,a0
    8000532e:	2781                	sext.w	a5,a5
    80005330:	853e                	mv	a0,a5
    80005332:	f8843783          	ld	a5,-120(s0)
    80005336:	8391                	srli	a5,a5,0x4
    80005338:	0f87f793          	andi	a5,a5,248
    8000533c:	fef43023          	sd	a5,-32(s0)
    80005340:	fe043703          	ld	a4,-32(s0)
    80005344:	fffff797          	auipc	a5,0xfffff
    80005348:	97ba                	add	a5,a5,a4
    8000534a:	2da782e7          	jalr	t0,730(a5) # 8000461e <put_f32_reg>
    8000534e:	fcf43c23          	sd	a5,-40(s0)
    80005352:	a8ad                	j	800053cc <emulate_fsqrt+0x114>
  } else if (GET_PRECISION(insn) == PRECISION_D) {
    80005354:	f8843783          	ld	a5,-120(s0)
    80005358:	83e5                	srli	a5,a5,0x19
    8000535a:	0037f713          	andi	a4,a5,3
    8000535e:	4785                	li	a5,1
    80005360:	04f71a63          	bne	a4,a5,800053b4 <emulate_fsqrt+0xfc>
    SET_F64_RD(insn, regs, f64_sqrt(f64(GET_F64_RS1(insn, regs))).v);
    80005364:	f8843783          	ld	a5,-120(s0)
    80005368:	83b1                	srli	a5,a5,0xc
    8000536a:	0f87f793          	andi	a5,a5,248
    8000536e:	853e                	mv	a0,a5
    80005370:	fffff797          	auipc	a5,0xfffff
    80005374:	97aa                	add	a5,a5,a0
    80005376:	3ae782e7          	jalr	t0,942(a5) # 8000471e <get_f64_reg>
    8000537a:	fcf43823          	sd	a5,-48(s0)
    8000537e:	87aa                	mv	a5,a0
    80005380:	853e                	mv	a0,a5
    80005382:	2a4030ef          	jal	ra,80008626 <f64_sqrt>
    80005386:	87aa                	mv	a5,a0
    80005388:	faf43c23          	sd	a5,-72(s0)
    8000538c:	fb843783          	ld	a5,-72(s0)
    80005390:	853e                	mv	a0,a5
    80005392:	f8843783          	ld	a5,-120(s0)
    80005396:	8391                	srli	a5,a5,0x4
    80005398:	0f87f793          	andi	a5,a5,248
    8000539c:	fcf43423          	sd	a5,-56(s0)
    800053a0:	fc843703          	ld	a4,-56(s0)
    800053a4:	fffff797          	auipc	a5,0xfffff
    800053a8:	97ba                	add	a5,a5,a4
    800053aa:	47a782e7          	jalr	t0,1146(a5) # 8000481e <put_f64_reg>
    800053ae:	fcf43023          	sd	a5,-64(s0)
    800053b2:	a829                	j	800053cc <emulate_fsqrt+0x114>
  } else {
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
    800053b4:	f8843703          	ld	a4,-120(s0)
    800053b8:	f9043683          	ld	a3,-112(s0)
    800053bc:	f9843603          	ld	a2,-104(s0)
    800053c0:	fa043583          	ld	a1,-96(s0)
    800053c4:	fa843503          	ld	a0,-88(s0)
    800053c8:	ed0ff0ef          	jal	ra,80004a98 <truly_illegal_insn>
  }
}
    800053cc:	70e6                	ld	ra,120(sp)
    800053ce:	7446                	ld	s0,112(sp)
    800053d0:	6109                	addi	sp,sp,128
    800053d2:	8082                	ret

00000000800053d4 <emulate_fsgnj>:

DECLARE_EMULATION_FUNC(emulate_fsgnj)
{
    800053d4:	7155                	addi	sp,sp,-208
    800053d6:	e586                	sd	ra,200(sp)
    800053d8:	e1a2                	sd	s0,192(sp)
    800053da:	0980                	addi	s0,sp,208
    800053dc:	f4a43c23          	sd	a0,-168(s0)
    800053e0:	f4b43823          	sd	a1,-176(s0)
    800053e4:	f4c43423          	sd	a2,-184(s0)
    800053e8:	f4d43023          	sd	a3,-192(s0)
    800053ec:	f2e43c23          	sd	a4,-200(s0)
  int rm = GET_RM(insn);
    800053f0:	f3843783          	ld	a5,-200(s0)
    800053f4:	83b1                	srli	a5,a5,0xc
    800053f6:	2781                	sext.w	a5,a5
    800053f8:	8b9d                	andi	a5,a5,7
    800053fa:	fef42623          	sw	a5,-20(s0)
  if (rm >= 3)
    800053fe:	fec42783          	lw	a5,-20(s0)
    80005402:	0007871b          	sext.w	a4,a5
    80005406:	4789                	li	a5,2
    80005408:	00e7df63          	ble	a4,a5,80005426 <emulate_fsgnj+0x52>
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
    8000540c:	f3843703          	ld	a4,-200(s0)
    80005410:	f4043683          	ld	a3,-192(s0)
    80005414:	f4843603          	ld	a2,-184(s0)
    80005418:	f5043583          	ld	a1,-176(s0)
    8000541c:	f5843503          	ld	a0,-168(s0)
    80005420:	e78ff0ef          	jal	ra,80004a98 <truly_illegal_insn>
    80005424:	a2e1                	j	800055ec <emulate_fsgnj+0x218>
    typeof(rs1) rs2_sign = (rs2) >> (8*sizeof(rs1)-1); \
    rs1_sign &= (rm) >> 1; \
    rs1_sign ^= (rm) ^ rs2_sign; \
    ((rs1) << 1 >> 1) | (rs1_sign << (8*sizeof(rs1)-1)); })

  if (GET_PRECISION(insn) == PRECISION_S) {
    80005426:	f3843783          	ld	a5,-200(s0)
    8000542a:	83e5                	srli	a5,a5,0x19
    8000542c:	8b8d                	andi	a5,a5,3
    8000542e:	efe9                	bnez	a5,80005508 <emulate_fsgnj+0x134>
    uint32_t rs1 = GET_F32_RS1(insn, regs);
    80005430:	f3843783          	ld	a5,-200(s0)
    80005434:	83b1                	srli	a5,a5,0xc
    80005436:	2781                	sext.w	a5,a5
    80005438:	0f87f793          	andi	a5,a5,248
    8000543c:	2781                	sext.w	a5,a5
    8000543e:	853e                	mv	a0,a5
    80005440:	fffff797          	auipc	a5,0xfffff
    80005444:	97aa                	add	a5,a5,a0
    80005446:	0de782e7          	jalr	t0,222(a5) # 8000451e <get_f32_reg>
    8000544a:	fef43023          	sd	a5,-32(s0)
    8000544e:	0005079b          	sext.w	a5,a0
    80005452:	fcf42e23          	sw	a5,-36(s0)
    uint32_t rs2 = GET_F32_RS2(insn, regs);
    80005456:	f3843783          	ld	a5,-200(s0)
    8000545a:	83c5                	srli	a5,a5,0x11
    8000545c:	2781                	sext.w	a5,a5
    8000545e:	0f87f793          	andi	a5,a5,248
    80005462:	2781                	sext.w	a5,a5
    80005464:	853e                	mv	a0,a5
    80005466:	fffff797          	auipc	a5,0xfffff
    8000546a:	97aa                	add	a5,a5,a0
    8000546c:	0b8782e7          	jalr	t0,184(a5) # 8000451e <get_f32_reg>
    80005470:	fcf43823          	sd	a5,-48(s0)
    80005474:	0005079b          	sext.w	a5,a0
    80005478:	fcf42623          	sw	a5,-52(s0)
    SET_F32_RD(insn, regs, DO_FSGNJ(rs1, rs2, rm));
    8000547c:	fdc42783          	lw	a5,-36(s0)
    80005480:	01f7d79b          	srliw	a5,a5,0x1f
    80005484:	fcf42423          	sw	a5,-56(s0)
    80005488:	fcc42783          	lw	a5,-52(s0)
    8000548c:	01f7d79b          	srliw	a5,a5,0x1f
    80005490:	fcf42223          	sw	a5,-60(s0)
    80005494:	fec42783          	lw	a5,-20(s0)
    80005498:	4017d79b          	sraiw	a5,a5,0x1
    8000549c:	2781                	sext.w	a5,a5
    8000549e:	0007871b          	sext.w	a4,a5
    800054a2:	fc842783          	lw	a5,-56(s0)
    800054a6:	8ff9                	and	a5,a5,a4
    800054a8:	fcf42423          	sw	a5,-56(s0)
    800054ac:	fec42703          	lw	a4,-20(s0)
    800054b0:	fc442783          	lw	a5,-60(s0)
    800054b4:	8fb9                	xor	a5,a5,a4
    800054b6:	0007871b          	sext.w	a4,a5
    800054ba:	fc842783          	lw	a5,-56(s0)
    800054be:	8fb9                	xor	a5,a5,a4
    800054c0:	fcf42423          	sw	a5,-56(s0)
    800054c4:	fdc42703          	lw	a4,-36(s0)
    800054c8:	800007b7          	lui	a5,0x80000
    800054cc:	fff7c793          	not	a5,a5
    800054d0:	8ff9                	and	a5,a5,a4
    800054d2:	0007871b          	sext.w	a4,a5
    800054d6:	fc842783          	lw	a5,-56(s0)
    800054da:	01f7979b          	slliw	a5,a5,0x1f
    800054de:	2781                	sext.w	a5,a5
    800054e0:	8fd9                	or	a5,a5,a4
    800054e2:	2781                	sext.w	a5,a5
    800054e4:	853e                	mv	a0,a5
    800054e6:	f3843783          	ld	a5,-200(s0)
    800054ea:	8391                	srli	a5,a5,0x4
    800054ec:	0f87f793          	andi	a5,a5,248
    800054f0:	faf43c23          	sd	a5,-72(s0)
    800054f4:	fb843703          	ld	a4,-72(s0)
    800054f8:	fffff797          	auipc	a5,0xfffff
    800054fc:	97ba                	add	a5,a5,a4
    800054fe:	126782e7          	jalr	t0,294(a5) # 8000461e <put_f32_reg>
    80005502:	faf43823          	sd	a5,-80(s0)
    80005506:	a0dd                	j	800055ec <emulate_fsgnj+0x218>
  } else if (GET_PRECISION(insn) == PRECISION_D) {
    80005508:	f3843783          	ld	a5,-200(s0)
    8000550c:	83e5                	srli	a5,a5,0x19
    8000550e:	0037f713          	andi	a4,a5,3
    80005512:	4785                	li	a5,1
    80005514:	0cf71063          	bne	a4,a5,800055d4 <emulate_fsgnj+0x200>
    uint64_t rs1 = GET_F64_RS1(insn, regs);
    80005518:	f3843783          	ld	a5,-200(s0)
    8000551c:	83b1                	srli	a5,a5,0xc
    8000551e:	0f87f793          	andi	a5,a5,248
    80005522:	853e                	mv	a0,a5
    80005524:	fffff797          	auipc	a5,0xfffff
    80005528:	97aa                	add	a5,a5,a0
    8000552a:	1fa782e7          	jalr	t0,506(a5) # 8000471e <get_f64_reg>
    8000552e:	faf43423          	sd	a5,-88(s0)
    80005532:	87aa                	mv	a5,a0
    80005534:	faf43023          	sd	a5,-96(s0)
    uint64_t rs2 = GET_F64_RS2(insn, regs);
    80005538:	f3843783          	ld	a5,-200(s0)
    8000553c:	83c5                	srli	a5,a5,0x11
    8000553e:	0f87f793          	andi	a5,a5,248
    80005542:	853e                	mv	a0,a5
    80005544:	fffff797          	auipc	a5,0xfffff
    80005548:	97aa                	add	a5,a5,a0
    8000554a:	1da782e7          	jalr	t0,474(a5) # 8000471e <get_f64_reg>
    8000554e:	f8f43c23          	sd	a5,-104(s0)
    80005552:	87aa                	mv	a5,a0
    80005554:	f8f43823          	sd	a5,-112(s0)
    SET_F64_RD(insn, regs, DO_FSGNJ(rs1, rs2, rm));
    80005558:	fa043783          	ld	a5,-96(s0)
    8000555c:	93fd                	srli	a5,a5,0x3f
    8000555e:	f8f43423          	sd	a5,-120(s0)
    80005562:	f9043783          	ld	a5,-112(s0)
    80005566:	93fd                	srli	a5,a5,0x3f
    80005568:	f8f43023          	sd	a5,-128(s0)
    8000556c:	fec42783          	lw	a5,-20(s0)
    80005570:	4017d79b          	sraiw	a5,a5,0x1
    80005574:	2781                	sext.w	a5,a5
    80005576:	873e                	mv	a4,a5
    80005578:	f8843783          	ld	a5,-120(s0)
    8000557c:	8ff9                	and	a5,a5,a4
    8000557e:	f8f43423          	sd	a5,-120(s0)
    80005582:	fec42703          	lw	a4,-20(s0)
    80005586:	f8043783          	ld	a5,-128(s0)
    8000558a:	8fb9                	xor	a5,a5,a4
    8000558c:	f8843703          	ld	a4,-120(s0)
    80005590:	8fb9                	xor	a5,a5,a4
    80005592:	f8f43423          	sd	a5,-120(s0)
    80005596:	fa043703          	ld	a4,-96(s0)
    8000559a:	57fd                	li	a5,-1
    8000559c:	8385                	srli	a5,a5,0x1
    8000559e:	8f7d                	and	a4,a4,a5
    800055a0:	f8843783          	ld	a5,-120(s0)
    800055a4:	17fe                	slli	a5,a5,0x3f
    800055a6:	8fd9                	or	a5,a5,a4
    800055a8:	f6f43423          	sd	a5,-152(s0)
    800055ac:	f6843783          	ld	a5,-152(s0)
    800055b0:	853e                	mv	a0,a5
    800055b2:	f3843783          	ld	a5,-200(s0)
    800055b6:	8391                	srli	a5,a5,0x4
    800055b8:	0f87f793          	andi	a5,a5,248
    800055bc:	f6f43c23          	sd	a5,-136(s0)
    800055c0:	f7843703          	ld	a4,-136(s0)
    800055c4:	fffff797          	auipc	a5,0xfffff
    800055c8:	97ba                	add	a5,a5,a4
    800055ca:	25a782e7          	jalr	t0,602(a5) # 8000481e <put_f64_reg>
    800055ce:	f6f43823          	sd	a5,-144(s0)
    800055d2:	a829                	j	800055ec <emulate_fsgnj+0x218>
  } else {
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
    800055d4:	f3843703          	ld	a4,-200(s0)
    800055d8:	f4043683          	ld	a3,-192(s0)
    800055dc:	f4843603          	ld	a2,-184(s0)
    800055e0:	f5043583          	ld	a1,-176(s0)
    800055e4:	f5843503          	ld	a0,-168(s0)
    800055e8:	cb0ff0ef          	jal	ra,80004a98 <truly_illegal_insn>
  }
}
    800055ec:	60ae                	ld	ra,200(sp)
    800055ee:	640e                	ld	s0,192(sp)
    800055f0:	6169                	addi	sp,sp,208
    800055f2:	8082                	ret

00000000800055f4 <emulate_fmin>:

DECLARE_EMULATION_FUNC(emulate_fmin)
{
    800055f4:	7155                	addi	sp,sp,-208
    800055f6:	e586                	sd	ra,200(sp)
    800055f8:	e1a2                	sd	s0,192(sp)
    800055fa:	0980                	addi	s0,sp,208
    800055fc:	f4a43c23          	sd	a0,-168(s0)
    80005600:	f4b43823          	sd	a1,-176(s0)
    80005604:	f4c43423          	sd	a2,-184(s0)
    80005608:	f4d43023          	sd	a3,-192(s0)
    8000560c:	f2e43c23          	sd	a4,-200(s0)
  int rm = GET_RM(insn);
    80005610:	f3843783          	ld	a5,-200(s0)
    80005614:	83b1                	srli	a5,a5,0xc
    80005616:	2781                	sext.w	a5,a5
    80005618:	8b9d                	andi	a5,a5,7
    8000561a:	fef42623          	sw	a5,-20(s0)
  if (rm >= 2)
    8000561e:	fec42783          	lw	a5,-20(s0)
    80005622:	0007871b          	sext.w	a4,a5
    80005626:	4785                	li	a5,1
    80005628:	00e7df63          	ble	a4,a5,80005646 <emulate_fmin+0x52>
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
    8000562c:	f3843703          	ld	a4,-200(s0)
    80005630:	f4043683          	ld	a3,-192(s0)
    80005634:	f4843603          	ld	a2,-184(s0)
    80005638:	f5043583          	ld	a1,-176(s0)
    8000563c:	f5843503          	ld	a0,-168(s0)
    80005640:	c58ff0ef          	jal	ra,80004a98 <truly_illegal_insn>
    80005644:	a431                	j	80005850 <emulate_fmin+0x25c>

  if (GET_PRECISION(insn) == PRECISION_S) {
    80005646:	f3843783          	ld	a5,-200(s0)
    8000564a:	83e5                	srli	a5,a5,0x19
    8000564c:	8b8d                	andi	a5,a5,3
    8000564e:	ebf5                	bnez	a5,80005742 <emulate_fmin+0x14e>
    uint32_t rs1 = GET_F32_RS1(insn, regs);
    80005650:	f3843783          	ld	a5,-200(s0)
    80005654:	83b1                	srli	a5,a5,0xc
    80005656:	2781                	sext.w	a5,a5
    80005658:	0f87f793          	andi	a5,a5,248
    8000565c:	2781                	sext.w	a5,a5
    8000565e:	853e                	mv	a0,a5
    80005660:	fffff797          	auipc	a5,0xfffff
    80005664:	97aa                	add	a5,a5,a0
    80005666:	ebe782e7          	jalr	t0,-322(a5) # 8000451e <get_f32_reg>
    8000566a:	fef43023          	sd	a5,-32(s0)
    8000566e:	0005079b          	sext.w	a5,a0
    80005672:	fcf42e23          	sw	a5,-36(s0)
    uint32_t rs2 = GET_F32_RS2(insn, regs);
    80005676:	f3843783          	ld	a5,-200(s0)
    8000567a:	83c5                	srli	a5,a5,0x11
    8000567c:	2781                	sext.w	a5,a5
    8000567e:	0f87f793          	andi	a5,a5,248
    80005682:	2781                	sext.w	a5,a5
    80005684:	853e                	mv	a0,a5
    80005686:	fffff797          	auipc	a5,0xfffff
    8000568a:	97aa                	add	a5,a5,a0
    8000568c:	e98782e7          	jalr	t0,-360(a5) # 8000451e <get_f32_reg>
    80005690:	fcf43823          	sd	a5,-48(s0)
    80005694:	0005079b          	sext.w	a5,a0
    80005698:	fcf42623          	sw	a5,-52(s0)
    uint32_t arg1 = rm ? rs2 : rs1;
    8000569c:	fec42783          	lw	a5,-20(s0)
    800056a0:	2781                	sext.w	a5,a5
    800056a2:	c781                	beqz	a5,800056aa <emulate_fmin+0xb6>
    800056a4:	fcc42783          	lw	a5,-52(s0)
    800056a8:	a019                	j	800056ae <emulate_fmin+0xba>
    800056aa:	fdc42783          	lw	a5,-36(s0)
    800056ae:	fcf42423          	sw	a5,-56(s0)
    uint32_t arg2 = rm ? rs1 : rs2;
    800056b2:	fec42783          	lw	a5,-20(s0)
    800056b6:	2781                	sext.w	a5,a5
    800056b8:	c781                	beqz	a5,800056c0 <emulate_fmin+0xcc>
    800056ba:	fdc42783          	lw	a5,-36(s0)
    800056be:	a019                	j	800056c4 <emulate_fmin+0xd0>
    800056c0:	fcc42783          	lw	a5,-52(s0)
    800056c4:	fcf42223          	sw	a5,-60(s0)
    int use_rs1 = f32_lt_quiet(f32(arg1), f32(arg2)) || isNaNF32UI(rs2);
    800056c8:	fc842783          	lw	a5,-56(s0)
    800056cc:	fc442703          	lw	a4,-60(s0)
    800056d0:	85ba                	mv	a1,a4
    800056d2:	853e                	mv	a0,a5
    800056d4:	45f010ef          	jal	ra,80007332 <f32_lt_quiet>
    800056d8:	87aa                	mv	a5,a0
    800056da:	e785                	bnez	a5,80005702 <emulate_fmin+0x10e>
    800056dc:	fcc42783          	lw	a5,-52(s0)
    800056e0:	fff7c793          	not	a5,a5
    800056e4:	2781                	sext.w	a5,a5
    800056e6:	873e                	mv	a4,a5
    800056e8:	7f8007b7          	lui	a5,0x7f800
    800056ec:	8ff9                	and	a5,a5,a4
    800056ee:	2781                	sext.w	a5,a5
    800056f0:	eb99                	bnez	a5,80005706 <emulate_fmin+0x112>
    800056f2:	fcc42703          	lw	a4,-52(s0)
    800056f6:	008007b7          	lui	a5,0x800
    800056fa:	17fd                	addi	a5,a5,-1
    800056fc:	8ff9                	and	a5,a5,a4
    800056fe:	2781                	sext.w	a5,a5
    80005700:	c399                	beqz	a5,80005706 <emulate_fmin+0x112>
    80005702:	4785                	li	a5,1
    80005704:	a011                	j	80005708 <emulate_fmin+0x114>
    80005706:	4781                	li	a5,0
    80005708:	fcf42023          	sw	a5,-64(s0)
    SET_F32_RD(insn, regs, use_rs1 ? rs1 : rs2);
    8000570c:	fc042783          	lw	a5,-64(s0)
    80005710:	2781                	sext.w	a5,a5
    80005712:	c781                	beqz	a5,8000571a <emulate_fmin+0x126>
    80005714:	fdc42783          	lw	a5,-36(s0)
    80005718:	a019                	j	8000571e <emulate_fmin+0x12a>
    8000571a:	fcc42783          	lw	a5,-52(s0)
    8000571e:	853e                	mv	a0,a5
    80005720:	f3843783          	ld	a5,-200(s0)
    80005724:	8391                	srli	a5,a5,0x4
    80005726:	0f87f793          	andi	a5,a5,248
    8000572a:	faf43c23          	sd	a5,-72(s0)
    8000572e:	fb843703          	ld	a4,-72(s0)
    80005732:	fffff797          	auipc	a5,0xfffff
    80005736:	97ba                	add	a5,a5,a4
    80005738:	eec782e7          	jalr	t0,-276(a5) # 8000461e <put_f32_reg>
    8000573c:	faf43823          	sd	a5,-80(s0)
    80005740:	aa01                	j	80005850 <emulate_fmin+0x25c>
  } else if (GET_PRECISION(insn) == PRECISION_D) {
    80005742:	f3843783          	ld	a5,-200(s0)
    80005746:	83e5                	srli	a5,a5,0x19
    80005748:	0037f713          	andi	a4,a5,3
    8000574c:	4785                	li	a5,1
    8000574e:	0ef71563          	bne	a4,a5,80005838 <emulate_fmin+0x244>
    uint64_t rs1 = GET_F64_RS1(insn, regs);
    80005752:	f3843783          	ld	a5,-200(s0)
    80005756:	83b1                	srli	a5,a5,0xc
    80005758:	0f87f793          	andi	a5,a5,248
    8000575c:	853e                	mv	a0,a5
    8000575e:	fffff797          	auipc	a5,0xfffff
    80005762:	97aa                	add	a5,a5,a0
    80005764:	fc0782e7          	jalr	t0,-64(a5) # 8000471e <get_f64_reg>
    80005768:	faf43423          	sd	a5,-88(s0)
    8000576c:	87aa                	mv	a5,a0
    8000576e:	faf43023          	sd	a5,-96(s0)
    uint64_t rs2 = GET_F64_RS2(insn, regs);
    80005772:	f3843783          	ld	a5,-200(s0)
    80005776:	83c5                	srli	a5,a5,0x11
    80005778:	0f87f793          	andi	a5,a5,248
    8000577c:	853e                	mv	a0,a5
    8000577e:	fffff797          	auipc	a5,0xfffff
    80005782:	97aa                	add	a5,a5,a0
    80005784:	fa0782e7          	jalr	t0,-96(a5) # 8000471e <get_f64_reg>
    80005788:	f8f43c23          	sd	a5,-104(s0)
    8000578c:	87aa                	mv	a5,a0
    8000578e:	f8f43823          	sd	a5,-112(s0)
    uint64_t arg1 = rm ? rs2 : rs1;
    80005792:	fec42783          	lw	a5,-20(s0)
    80005796:	2781                	sext.w	a5,a5
    80005798:	c781                	beqz	a5,800057a0 <emulate_fmin+0x1ac>
    8000579a:	f9043783          	ld	a5,-112(s0)
    8000579e:	a019                	j	800057a4 <emulate_fmin+0x1b0>
    800057a0:	fa043783          	ld	a5,-96(s0)
    800057a4:	f8f43423          	sd	a5,-120(s0)
    uint64_t arg2 = rm ? rs1 : rs2;
    800057a8:	fec42783          	lw	a5,-20(s0)
    800057ac:	2781                	sext.w	a5,a5
    800057ae:	c781                	beqz	a5,800057b6 <emulate_fmin+0x1c2>
    800057b0:	fa043783          	ld	a5,-96(s0)
    800057b4:	a019                	j	800057ba <emulate_fmin+0x1c6>
    800057b6:	f9043783          	ld	a5,-112(s0)
    800057ba:	f8f43023          	sd	a5,-128(s0)
    int use_rs1 = f64_lt_quiet(f64(arg1), f64(arg2)) || isNaNF64UI(rs2);
    800057be:	f8843783          	ld	a5,-120(s0)
    800057c2:	f8043703          	ld	a4,-128(s0)
    800057c6:	85ba                	mv	a1,a4
    800057c8:	853e                	mv	a0,a5
    800057ca:	29f020ef          	jal	ra,80008268 <f64_lt_quiet>
    800057ce:	87aa                	mv	a5,a0
    800057d0:	e385                	bnez	a5,800057f0 <emulate_fmin+0x1fc>
    800057d2:	f9043783          	ld	a5,-112(s0)
    800057d6:	fff7c713          	not	a4,a5
    800057da:	7ff00793          	li	a5,2047
    800057de:	17d2                	slli	a5,a5,0x34
    800057e0:	8ff9                	and	a5,a5,a4
    800057e2:	eb89                	bnez	a5,800057f4 <emulate_fmin+0x200>
    800057e4:	f9043703          	ld	a4,-112(s0)
    800057e8:	57fd                	li	a5,-1
    800057ea:	83b1                	srli	a5,a5,0xc
    800057ec:	8ff9                	and	a5,a5,a4
    800057ee:	c399                	beqz	a5,800057f4 <emulate_fmin+0x200>
    800057f0:	4785                	li	a5,1
    800057f2:	a011                	j	800057f6 <emulate_fmin+0x202>
    800057f4:	4781                	li	a5,0
    800057f6:	f6f42e23          	sw	a5,-132(s0)
    SET_F64_RD(insn, regs, use_rs1 ? rs1 : rs2);
    800057fa:	f7c42783          	lw	a5,-132(s0)
    800057fe:	2781                	sext.w	a5,a5
    80005800:	c781                	beqz	a5,80005808 <emulate_fmin+0x214>
    80005802:	fa043783          	ld	a5,-96(s0)
    80005806:	a019                	j	8000580c <emulate_fmin+0x218>
    80005808:	f9043783          	ld	a5,-112(s0)
    8000580c:	f6f43023          	sd	a5,-160(s0)
    80005810:	f6043783          	ld	a5,-160(s0)
    80005814:	853e                	mv	a0,a5
    80005816:	f3843783          	ld	a5,-200(s0)
    8000581a:	8391                	srli	a5,a5,0x4
    8000581c:	0f87f793          	andi	a5,a5,248
    80005820:	f6f43823          	sd	a5,-144(s0)
    80005824:	f7043703          	ld	a4,-144(s0)
    80005828:	fffff797          	auipc	a5,0xfffff
    8000582c:	97ba                	add	a5,a5,a4
    8000582e:	ff6782e7          	jalr	t0,-10(a5) # 8000481e <put_f64_reg>
    80005832:	f6f43423          	sd	a5,-152(s0)
    80005836:	a829                	j	80005850 <emulate_fmin+0x25c>
  } else {
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
    80005838:	f3843703          	ld	a4,-200(s0)
    8000583c:	f4043683          	ld	a3,-192(s0)
    80005840:	f4843603          	ld	a2,-184(s0)
    80005844:	f5043583          	ld	a1,-176(s0)
    80005848:	f5843503          	ld	a0,-168(s0)
    8000584c:	a4cff0ef          	jal	ra,80004a98 <truly_illegal_insn>
  }
}
    80005850:	60ae                	ld	ra,200(sp)
    80005852:	640e                	ld	s0,192(sp)
    80005854:	6169                	addi	sp,sp,208
    80005856:	8082                	ret

0000000080005858 <emulate_fcvt_ff>:

DECLARE_EMULATION_FUNC(emulate_fcvt_ff)
{
    80005858:	7119                	addi	sp,sp,-128
    8000585a:	fc86                	sd	ra,120(sp)
    8000585c:	f8a2                	sd	s0,112(sp)
    8000585e:	0100                	addi	s0,sp,128
    80005860:	faa43423          	sd	a0,-88(s0)
    80005864:	fab43023          	sd	a1,-96(s0)
    80005868:	f8c43c23          	sd	a2,-104(s0)
    8000586c:	f8d43823          	sd	a3,-112(s0)
    80005870:	f8e43423          	sd	a4,-120(s0)
  int rs2_num = (insn >> 20) & 0x1f;
    80005874:	f8843783          	ld	a5,-120(s0)
    80005878:	83d1                	srli	a5,a5,0x14
    8000587a:	2781                	sext.w	a5,a5
    8000587c:	8bfd                	andi	a5,a5,31
    8000587e:	fef42623          	sw	a5,-20(s0)
  if (GET_PRECISION(insn) == PRECISION_S) {
    80005882:	f8843783          	ld	a5,-120(s0)
    80005886:	83e5                	srli	a5,a5,0x19
    80005888:	8b8d                	andi	a5,a5,3
    8000588a:	ebb5                	bnez	a5,800058fe <emulate_fcvt_ff+0xa6>
    if (rs2_num != 1)
    8000588c:	fec42783          	lw	a5,-20(s0)
    80005890:	0007871b          	sext.w	a4,a5
    80005894:	4785                	li	a5,1
    80005896:	00f70f63          	beq	a4,a5,800058b4 <emulate_fcvt_ff+0x5c>
      return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
    8000589a:	f8843703          	ld	a4,-120(s0)
    8000589e:	f9043683          	ld	a3,-112(s0)
    800058a2:	f9843603          	ld	a2,-104(s0)
    800058a6:	fa043583          	ld	a1,-96(s0)
    800058aa:	fa843503          	ld	a0,-88(s0)
    800058ae:	9eaff0ef          	jal	ra,80004a98 <truly_illegal_insn>
    800058b2:	a0fd                	j	800059a0 <emulate_fcvt_ff+0x148>
    SET_F32_RD(insn, regs, f64_to_f32(f64(GET_F64_RS1(insn, regs))).v);
    800058b4:	f8843783          	ld	a5,-120(s0)
    800058b8:	83b1                	srli	a5,a5,0xc
    800058ba:	0f87f793          	andi	a5,a5,248
    800058be:	853e                	mv	a0,a5
    800058c0:	fffff797          	auipc	a5,0xfffff
    800058c4:	97aa                	add	a5,a5,a0
    800058c6:	e5e782e7          	jalr	t0,-418(a5) # 8000471e <get_f64_reg>
    800058ca:	fef43023          	sd	a5,-32(s0)
    800058ce:	87aa                	mv	a5,a0
    800058d0:	853e                	mv	a0,a5
    800058d2:	79b020ef          	jal	ra,8000886c <f64_to_f32>
    800058d6:	87aa                	mv	a5,a0
    800058d8:	2781                	sext.w	a5,a5
    800058da:	853e                	mv	a0,a5
    800058dc:	f8843783          	ld	a5,-120(s0)
    800058e0:	8391                	srli	a5,a5,0x4
    800058e2:	0f87f793          	andi	a5,a5,248
    800058e6:	fcf43c23          	sd	a5,-40(s0)
    800058ea:	fd843703          	ld	a4,-40(s0)
    800058ee:	fffff797          	auipc	a5,0xfffff
    800058f2:	97ba                	add	a5,a5,a4
    800058f4:	d30782e7          	jalr	t0,-720(a5) # 8000461e <put_f32_reg>
    800058f8:	fcf43823          	sd	a5,-48(s0)
    800058fc:	a055                	j	800059a0 <emulate_fcvt_ff+0x148>
  } else if (GET_PRECISION(insn) == PRECISION_D) {
    800058fe:	f8843783          	ld	a5,-120(s0)
    80005902:	83e5                	srli	a5,a5,0x19
    80005904:	0037f713          	andi	a4,a5,3
    80005908:	4785                	li	a5,1
    8000590a:	06f71f63          	bne	a4,a5,80005988 <emulate_fcvt_ff+0x130>
    if (rs2_num != 0)
    8000590e:	fec42783          	lw	a5,-20(s0)
    80005912:	2781                	sext.w	a5,a5
    80005914:	cf91                	beqz	a5,80005930 <emulate_fcvt_ff+0xd8>
      return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
    80005916:	f8843703          	ld	a4,-120(s0)
    8000591a:	f9043683          	ld	a3,-112(s0)
    8000591e:	f9843603          	ld	a2,-104(s0)
    80005922:	fa043583          	ld	a1,-96(s0)
    80005926:	fa843503          	ld	a0,-88(s0)
    8000592a:	96eff0ef          	jal	ra,80004a98 <truly_illegal_insn>
    8000592e:	a88d                	j	800059a0 <emulate_fcvt_ff+0x148>
    SET_F64_RD(insn, regs, f32_to_f64(f32(GET_F32_RS1(insn, regs))).v);
    80005930:	f8843783          	ld	a5,-120(s0)
    80005934:	83b1                	srli	a5,a5,0xc
    80005936:	2781                	sext.w	a5,a5
    80005938:	0f87f793          	andi	a5,a5,248
    8000593c:	2781                	sext.w	a5,a5
    8000593e:	853e                	mv	a0,a5
    80005940:	fffff797          	auipc	a5,0xfffff
    80005944:	97aa                	add	a5,a5,a0
    80005946:	bde782e7          	jalr	t0,-1058(a5) # 8000451e <get_f32_reg>
    8000594a:	fcf43423          	sd	a5,-56(s0)
    8000594e:	0005079b          	sext.w	a5,a0
    80005952:	2781                	sext.w	a5,a5
    80005954:	853e                	mv	a0,a5
    80005956:	795010ef          	jal	ra,800078ea <f32_to_f64>
    8000595a:	87aa                	mv	a5,a0
    8000595c:	faf43823          	sd	a5,-80(s0)
    80005960:	fb043783          	ld	a5,-80(s0)
    80005964:	853e                	mv	a0,a5
    80005966:	f8843783          	ld	a5,-120(s0)
    8000596a:	8391                	srli	a5,a5,0x4
    8000596c:	0f87f793          	andi	a5,a5,248
    80005970:	fcf43023          	sd	a5,-64(s0)
    80005974:	fc043703          	ld	a4,-64(s0)
    80005978:	fffff797          	auipc	a5,0xfffff
    8000597c:	97ba                	add	a5,a5,a4
    8000597e:	ea6782e7          	jalr	t0,-346(a5) # 8000481e <put_f64_reg>
    80005982:	faf43c23          	sd	a5,-72(s0)
    80005986:	a829                	j	800059a0 <emulate_fcvt_ff+0x148>
  } else {
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
    80005988:	f8843703          	ld	a4,-120(s0)
    8000598c:	f9043683          	ld	a3,-112(s0)
    80005990:	f9843603          	ld	a2,-104(s0)
    80005994:	fa043583          	ld	a1,-96(s0)
    80005998:	fa843503          	ld	a0,-88(s0)
    8000599c:	8fcff0ef          	jal	ra,80004a98 <truly_illegal_insn>
  }
}
    800059a0:	70e6                	ld	ra,120(sp)
    800059a2:	7446                	ld	s0,112(sp)
    800059a4:	6109                	addi	sp,sp,128
    800059a6:	8082                	ret

00000000800059a8 <emulate_fcvt_fi>:

DECLARE_EMULATION_FUNC(emulate_fcvt_fi)
{
    800059a8:	7175                	addi	sp,sp,-144
    800059aa:	e506                	sd	ra,136(sp)
    800059ac:	e122                	sd	s0,128(sp)
    800059ae:	0900                	addi	s0,sp,144
    800059b0:	f8a43c23          	sd	a0,-104(s0)
    800059b4:	f8b43823          	sd	a1,-112(s0)
    800059b8:	f8c43423          	sd	a2,-120(s0)
    800059bc:	f8d43023          	sd	a3,-128(s0)
    800059c0:	f6e43c23          	sd	a4,-136(s0)
  if (GET_PRECISION(insn) != PRECISION_S && GET_PRECISION(insn) != PRECISION_D)
    800059c4:	f7843783          	ld	a5,-136(s0)
    800059c8:	83e5                	srli	a5,a5,0x19
    800059ca:	8b8d                	andi	a5,a5,3
    800059cc:	c795                	beqz	a5,800059f8 <emulate_fcvt_fi+0x50>
    800059ce:	f7843783          	ld	a5,-136(s0)
    800059d2:	83e5                	srli	a5,a5,0x19
    800059d4:	0037f713          	andi	a4,a5,3
    800059d8:	4785                	li	a5,1
    800059da:	00f70f63          	beq	a4,a5,800059f8 <emulate_fcvt_fi+0x50>
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
    800059de:	f7843703          	ld	a4,-136(s0)
    800059e2:	f8043683          	ld	a3,-128(s0)
    800059e6:	f8843603          	ld	a2,-120(s0)
    800059ea:	f9043583          	ld	a1,-112(s0)
    800059ee:	f9843503          	ld	a0,-104(s0)
    800059f2:	8a6ff0ef          	jal	ra,80004a98 <truly_illegal_insn>
    800059f6:	a29d                	j	80005b5c <emulate_fcvt_fi+0x1b4>

  int negative = 0;
    800059f8:	fe042623          	sw	zero,-20(s0)
  uint64_t uint_val = GET_RS1(insn, regs);
    800059fc:	0f800793          	li	a5,248
    80005a00:	fcf42a23          	sw	a5,-44(s0)
    80005a04:	f7843783          	ld	a5,-136(s0)
    80005a08:	00c7d713          	srli	a4,a5,0xc
    80005a0c:	fd442783          	lw	a5,-44(s0)
    80005a10:	8f7d                	and	a4,a4,a5
    80005a12:	f9843783          	ld	a5,-104(s0)
    80005a16:	97ba                	add	a5,a5,a4
    80005a18:	639c                	ld	a5,0(a5)
    80005a1a:	fef43023          	sd	a5,-32(s0)

  switch ((insn >> 20) & 0x1f)
    80005a1e:	f7843783          	ld	a5,-136(s0)
    80005a22:	83d1                	srli	a5,a5,0x14
    80005a24:	8bfd                	andi	a5,a5,31
    80005a26:	4705                	li	a4,1
    80005a28:	04e78863          	beq	a5,a4,80005a78 <emulate_fcvt_fi+0xd0>
    80005a2c:	cb81                	beqz	a5,80005a3c <emulate_fcvt_fi+0x94>
    80005a2e:	4709                	li	a4,2
    80005a30:	04e78c63          	beq	a5,a4,80005a88 <emulate_fcvt_fi+0xe0>
    80005a34:	470d                	li	a4,3
    80005a36:	08e78b63          	beq	a5,a4,80005acc <emulate_fcvt_fi+0x124>
    80005a3a:	a8a5                	j	80005ab2 <emulate_fcvt_fi+0x10a>
  {
    case 0: // int32
      negative = (int32_t)uint_val < 0;
    80005a3c:	fe043783          	ld	a5,-32(s0)
    80005a40:	2781                	sext.w	a5,a5
    80005a42:	01f7d79b          	srliw	a5,a5,0x1f
    80005a46:	0ff7f793          	andi	a5,a5,255
    80005a4a:	fef42623          	sw	a5,-20(s0)
      uint_val = (uint32_t)(negative ? -uint_val : uint_val);
    80005a4e:	fec42783          	lw	a5,-20(s0)
    80005a52:	2781                	sext.w	a5,a5
    80005a54:	cb91                	beqz	a5,80005a68 <emulate_fcvt_fi+0xc0>
    80005a56:	fe043783          	ld	a5,-32(s0)
    80005a5a:	2781                	sext.w	a5,a5
    80005a5c:	40f007bb          	negw	a5,a5
    80005a60:	2781                	sext.w	a5,a5
    80005a62:	1782                	slli	a5,a5,0x20
    80005a64:	9381                	srli	a5,a5,0x20
    80005a66:	a031                	j	80005a72 <emulate_fcvt_fi+0xca>
    80005a68:	fe043783          	ld	a5,-32(s0)
    80005a6c:	2781                	sext.w	a5,a5
    80005a6e:	1782                	slli	a5,a5,0x20
    80005a70:	9381                	srli	a5,a5,0x20
    80005a72:	fef43023          	sd	a5,-32(s0)
      break;
    80005a76:	a8a1                	j	80005ace <emulate_fcvt_fi+0x126>
    case 1: // uint32
      uint_val = (uint32_t)uint_val;
    80005a78:	fe043783          	ld	a5,-32(s0)
    80005a7c:	2781                	sext.w	a5,a5
    80005a7e:	1782                	slli	a5,a5,0x20
    80005a80:	9381                	srli	a5,a5,0x20
    80005a82:	fef43023          	sd	a5,-32(s0)
      break;
    80005a86:	a0a1                	j	80005ace <emulate_fcvt_fi+0x126>
#if __riscv_xlen == 64
    case 2: // int64
      negative = (int64_t)uint_val < 0;
    80005a88:	fe043783          	ld	a5,-32(s0)
    80005a8c:	93fd                	srli	a5,a5,0x3f
    80005a8e:	0ff7f793          	andi	a5,a5,255
    80005a92:	fef42623          	sw	a5,-20(s0)
      uint_val = negative ? -uint_val : uint_val;
    80005a96:	fec42783          	lw	a5,-20(s0)
    80005a9a:	2781                	sext.w	a5,a5
    80005a9c:	c791                	beqz	a5,80005aa8 <emulate_fcvt_fi+0x100>
    80005a9e:	fe043783          	ld	a5,-32(s0)
    80005aa2:	40f007b3          	neg	a5,a5
    80005aa6:	a019                	j	80005aac <emulate_fcvt_fi+0x104>
    80005aa8:	fe043783          	ld	a5,-32(s0)
    80005aac:	fef43023          	sd	a5,-32(s0)
    case 3: // uint64
      break;
    80005ab0:	a831                	j	80005acc <emulate_fcvt_fi+0x124>
#endif
    default:
      return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
    80005ab2:	f7843703          	ld	a4,-136(s0)
    80005ab6:	f8043683          	ld	a3,-128(s0)
    80005aba:	f8843603          	ld	a2,-120(s0)
    80005abe:	f9043583          	ld	a1,-112(s0)
    80005ac2:	f9843503          	ld	a0,-104(s0)
    80005ac6:	fd3fe0ef          	jal	ra,80004a98 <truly_illegal_insn>
    80005aca:	a849                	j	80005b5c <emulate_fcvt_fi+0x1b4>
      break;
    80005acc:	0001                	nop
  }

  uint64_t float64 = ui64_to_f64(uint_val).v;
    80005ace:	fe043503          	ld	a0,-32(s0)
    80005ad2:	41f050ef          	jal	ra,8000b6f0 <ui64_to_f64>
    80005ad6:	87aa                	mv	a5,a0
    80005ad8:	fcf43c23          	sd	a5,-40(s0)
  if (negative)
    80005adc:	fec42783          	lw	a5,-20(s0)
    80005ae0:	2781                	sext.w	a5,a5
    80005ae2:	cb81                	beqz	a5,80005af2 <emulate_fcvt_fi+0x14a>
    float64 ^= INT64_MIN;
    80005ae4:	fd843703          	ld	a4,-40(s0)
    80005ae8:	57fd                	li	a5,-1
    80005aea:	17fe                	slli	a5,a5,0x3f
    80005aec:	8fb9                	xor	a5,a5,a4
    80005aee:	fcf43c23          	sd	a5,-40(s0)

  if (GET_PRECISION(insn) == PRECISION_S)
    80005af2:	f7843783          	ld	a5,-136(s0)
    80005af6:	83e5                	srli	a5,a5,0x19
    80005af8:	8b8d                	andi	a5,a5,3
    80005afa:	eb95                	bnez	a5,80005b2e <emulate_fcvt_fi+0x186>
    SET_F32_RD(insn, regs, f64_to_f32(f64(float64)).v);
    80005afc:	fd843783          	ld	a5,-40(s0)
    80005b00:	853e                	mv	a0,a5
    80005b02:	56b020ef          	jal	ra,8000886c <f64_to_f32>
    80005b06:	87aa                	mv	a5,a0
    80005b08:	2781                	sext.w	a5,a5
    80005b0a:	853e                	mv	a0,a5
    80005b0c:	f7843783          	ld	a5,-136(s0)
    80005b10:	8391                	srli	a5,a5,0x4
    80005b12:	0f87f793          	andi	a5,a5,248
    80005b16:	fcf43423          	sd	a5,-56(s0)
    80005b1a:	fc843703          	ld	a4,-56(s0)
    80005b1e:	fffff797          	auipc	a5,0xfffff
    80005b22:	97ba                	add	a5,a5,a4
    80005b24:	b00782e7          	jalr	t0,-1280(a5) # 8000461e <put_f32_reg>
    80005b28:	fcf43023          	sd	a5,-64(s0)
    80005b2c:	a805                	j	80005b5c <emulate_fcvt_fi+0x1b4>
  else
    SET_F64_RD(insn, regs, float64);
    80005b2e:	fd843783          	ld	a5,-40(s0)
    80005b32:	faf43423          	sd	a5,-88(s0)
    80005b36:	fa843783          	ld	a5,-88(s0)
    80005b3a:	853e                	mv	a0,a5
    80005b3c:	f7843783          	ld	a5,-136(s0)
    80005b40:	8391                	srli	a5,a5,0x4
    80005b42:	0f87f793          	andi	a5,a5,248
    80005b46:	faf43c23          	sd	a5,-72(s0)
    80005b4a:	fb843703          	ld	a4,-72(s0)
    80005b4e:	fffff797          	auipc	a5,0xfffff
    80005b52:	97ba                	add	a5,a5,a4
    80005b54:	cd0782e7          	jalr	t0,-816(a5) # 8000481e <put_f64_reg>
    80005b58:	faf43823          	sd	a5,-80(s0)
}
    80005b5c:	60aa                	ld	ra,136(sp)
    80005b5e:	640a                	ld	s0,128(sp)
    80005b60:	6149                	addi	sp,sp,144
    80005b62:	8082                	ret

0000000080005b64 <emulate_fcvt_if>:

DECLARE_EMULATION_FUNC(emulate_fcvt_if)
{
    80005b64:	7135                	addi	sp,sp,-160
    80005b66:	ed06                	sd	ra,152(sp)
    80005b68:	e922                	sd	s0,144(sp)
    80005b6a:	1100                	addi	s0,sp,160
    80005b6c:	f8a43423          	sd	a0,-120(s0)
    80005b70:	f8b43023          	sd	a1,-128(s0)
    80005b74:	f6c43c23          	sd	a2,-136(s0)
    80005b78:	f6d43823          	sd	a3,-144(s0)
    80005b7c:	f6e43423          	sd	a4,-152(s0)
  int rs2_num = (insn >> 20) & 0x1f;
    80005b80:	f6843783          	ld	a5,-152(s0)
    80005b84:	83d1                	srli	a5,a5,0x14
    80005b86:	2781                	sext.w	a5,a5
    80005b88:	8bfd                	andi	a5,a5,31
    80005b8a:	fcf42223          	sw	a5,-60(s0)
#if __riscv_xlen == 64
  if (rs2_num >= 4)
    80005b8e:	fc442783          	lw	a5,-60(s0)
    80005b92:	0007871b          	sext.w	a4,a5
    80005b96:	478d                	li	a5,3
    80005b98:	00e7df63          	ble	a4,a5,80005bb6 <emulate_fcvt_if+0x52>
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
    80005b9c:	f6843703          	ld	a4,-152(s0)
    80005ba0:	f7043683          	ld	a3,-144(s0)
    80005ba4:	f7843603          	ld	a2,-136(s0)
    80005ba8:	f8043583          	ld	a1,-128(s0)
    80005bac:	f8843503          	ld	a0,-120(s0)
    80005bb0:	ee9fe0ef          	jal	ra,80004a98 <truly_illegal_insn>
    80005bb4:	ac25                	j	80005dec <emulate_fcvt_if+0x288>
  if (rs2_num >= 2)
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
#endif

  int64_t float64;
  if (GET_PRECISION(insn) == PRECISION_S)
    80005bb6:	f6843783          	ld	a5,-152(s0)
    80005bba:	83e5                	srli	a5,a5,0x19
    80005bbc:	8b8d                	andi	a5,a5,3
    80005bbe:	eb95                	bnez	a5,80005bf2 <emulate_fcvt_if+0x8e>
    float64 = f32_to_f64(f32(GET_F32_RS1(insn, regs))).v;
    80005bc0:	f6843783          	ld	a5,-152(s0)
    80005bc4:	83b1                	srli	a5,a5,0xc
    80005bc6:	2781                	sext.w	a5,a5
    80005bc8:	0f87f793          	andi	a5,a5,248
    80005bcc:	2781                	sext.w	a5,a5
    80005bce:	853e                	mv	a0,a5
    80005bd0:	fffff797          	auipc	a5,0xfffff
    80005bd4:	97aa                	add	a5,a5,a0
    80005bd6:	94e782e7          	jalr	t0,-1714(a5) # 8000451e <get_f32_reg>
    80005bda:	faf43c23          	sd	a5,-72(s0)
    80005bde:	0005079b          	sext.w	a5,a0
    80005be2:	2781                	sext.w	a5,a5
    80005be4:	853e                	mv	a0,a5
    80005be6:	505010ef          	jal	ra,800078ea <f32_to_f64>
    80005bea:	87aa                	mv	a5,a0
    80005bec:	fef43423          	sd	a5,-24(s0)
    80005bf0:	a0b9                	j	80005c3e <emulate_fcvt_if+0xda>
  else if (GET_PRECISION(insn) == PRECISION_D)
    80005bf2:	f6843783          	ld	a5,-152(s0)
    80005bf6:	83e5                	srli	a5,a5,0x19
    80005bf8:	0037f713          	andi	a4,a5,3
    80005bfc:	4785                	li	a5,1
    80005bfe:	02f71363          	bne	a4,a5,80005c24 <emulate_fcvt_if+0xc0>
    float64 = GET_F64_RS1(insn, regs);
    80005c02:	f6843783          	ld	a5,-152(s0)
    80005c06:	83b1                	srli	a5,a5,0xc
    80005c08:	0f87f793          	andi	a5,a5,248
    80005c0c:	853e                	mv	a0,a5
    80005c0e:	fffff797          	auipc	a5,0xfffff
    80005c12:	97aa                	add	a5,a5,a0
    80005c14:	b10782e7          	jalr	t0,-1264(a5) # 8000471e <get_f64_reg>
    80005c18:	faf43823          	sd	a5,-80(s0)
    80005c1c:	87aa                	mv	a5,a0
    80005c1e:	fef43423          	sd	a5,-24(s0)
    80005c22:	a831                	j	80005c3e <emulate_fcvt_if+0xda>
  else
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
    80005c24:	f6843703          	ld	a4,-152(s0)
    80005c28:	f7043683          	ld	a3,-144(s0)
    80005c2c:	f7843603          	ld	a2,-136(s0)
    80005c30:	f8043583          	ld	a1,-128(s0)
    80005c34:	f8843503          	ld	a0,-120(s0)
    80005c38:	e61fe0ef          	jal	ra,80004a98 <truly_illegal_insn>
    80005c3c:	aa45                	j	80005dec <emulate_fcvt_if+0x288>

  int negative = 0;
    80005c3e:	fe042223          	sw	zero,-28(s0)
  if (float64 < 0) {
    80005c42:	fe843783          	ld	a5,-24(s0)
    80005c46:	0007dc63          	bgez	a5,80005c5e <emulate_fcvt_if+0xfa>
    negative = 1;
    80005c4a:	4785                	li	a5,1
    80005c4c:	fef42223          	sw	a5,-28(s0)
    float64 ^= INT64_MIN;
    80005c50:	fe843703          	ld	a4,-24(s0)
    80005c54:	57fd                	li	a5,-1
    80005c56:	17fe                	slli	a5,a5,0x3f
    80005c58:	8fb9                	xor	a5,a5,a4
    80005c5a:	fef43423          	sd	a5,-24(s0)
  }
  uint64_t uint_val = f64_to_ui64(f64(float64), softfloat_roundingMode, true);
    80005c5e:	fe843783          	ld	a5,-24(s0)
    80005c62:	873e                	mv	a4,a5
    80005c64:	8792                	mv	a5,tp
    80005c66:	0ff7f793          	andi	a5,a5,255
    80005c6a:	4605                	li	a2,1
    80005c6c:	85be                	mv	a1,a5
    80005c6e:	853a                	mv	a0,a4
    80005c70:	4fb020ef          	jal	ra,8000896a <f64_to_ui64>
    80005c74:	faa43423          	sd	a0,-88(s0)
    80005c78:	fc442783          	lw	a5,-60(s0)
    80005c7c:	0007871b          	sext.w	a4,a5
    80005c80:	4785                	li	a5,1
    80005c82:	08f70363          	beq	a4,a5,80005d08 <emulate_fcvt_if+0x1a4>
    80005c86:	fc442783          	lw	a5,-60(s0)
    80005c8a:	0007871b          	sext.w	a4,a5
    80005c8e:	4785                	li	a5,1
    80005c90:	00e7c763          	blt	a5,a4,80005c9e <emulate_fcvt_if+0x13a>
    80005c94:	fc442783          	lw	a5,-60(s0)
    80005c98:	2781                	sext.w	a5,a5
    80005c9a:	c38d                	beqz	a5,80005cbc <emulate_fcvt_if+0x158>
    80005c9c:	aa01                	j	80005dac <emulate_fcvt_if+0x248>
    80005c9e:	fc442783          	lw	a5,-60(s0)
    80005ca2:	0007871b          	sext.w	a4,a5
    80005ca6:	4789                	li	a5,2
    80005ca8:	08f70b63          	beq	a4,a5,80005d3e <emulate_fcvt_if+0x1da>
    80005cac:	fc442783          	lw	a5,-60(s0)
    80005cb0:	0007871b          	sext.w	a4,a5
    80005cb4:	478d                	li	a5,3
    80005cb6:	0cf70463          	beq	a4,a5,80005d7e <emulate_fcvt_if+0x21a>
    80005cba:	a8cd                	j	80005dac <emulate_fcvt_if+0x248>
  uint64_t result, limit, limit_result;

  switch (rs2_num)
  {
    case 0: // int32
      if (negative) {
    80005cbc:	fe442783          	lw	a5,-28(s0)
    80005cc0:	2781                	sext.w	a5,a5
    80005cc2:	c39d                	beqz	a5,80005ce8 <emulate_fcvt_if+0x184>
        result = (int32_t)-uint_val;
    80005cc4:	fa843783          	ld	a5,-88(s0)
    80005cc8:	2781                	sext.w	a5,a5
    80005cca:	40f007bb          	negw	a5,a5
    80005cce:	2781                	sext.w	a5,a5
    80005cd0:	2781                	sext.w	a5,a5
    80005cd2:	fcf43c23          	sd	a5,-40(s0)
        limit_result = limit = (uint32_t)INT32_MIN;
    80005cd6:	4785                	li	a5,1
    80005cd8:	07fe                	slli	a5,a5,0x1f
    80005cda:	fcf43823          	sd	a5,-48(s0)
    80005cde:	fd043783          	ld	a5,-48(s0)
    80005ce2:	fcf43423          	sd	a5,-56(s0)
      } else {
        result = (int32_t)uint_val;
        limit_result = limit = INT32_MAX;
      }
      break;
    80005ce6:	a0d9                	j	80005dac <emulate_fcvt_if+0x248>
        result = (int32_t)uint_val;
    80005ce8:	fa843783          	ld	a5,-88(s0)
    80005cec:	2781                	sext.w	a5,a5
    80005cee:	fcf43c23          	sd	a5,-40(s0)
        limit_result = limit = INT32_MAX;
    80005cf2:	800007b7          	lui	a5,0x80000
    80005cf6:	fff7c793          	not	a5,a5
    80005cfa:	fcf43823          	sd	a5,-48(s0)
    80005cfe:	fd043783          	ld	a5,-48(s0)
    80005d02:	fcf43423          	sd	a5,-56(s0)
      break;
    80005d06:	a05d                	j	80005dac <emulate_fcvt_if+0x248>

    case 1: // uint32
      limit = limit_result = UINT32_MAX;
    80005d08:	57fd                	li	a5,-1
    80005d0a:	9381                	srli	a5,a5,0x20
    80005d0c:	fcf43423          	sd	a5,-56(s0)
    80005d10:	fc843783          	ld	a5,-56(s0)
    80005d14:	fcf43823          	sd	a5,-48(s0)
      if (negative)
    80005d18:	fe442783          	lw	a5,-28(s0)
    80005d1c:	2781                	sext.w	a5,a5
    80005d1e:	cb81                	beqz	a5,80005d2e <emulate_fcvt_if+0x1ca>
        result = limit = 0;
    80005d20:	fc043823          	sd	zero,-48(s0)
    80005d24:	fd043783          	ld	a5,-48(s0)
    80005d28:	fcf43c23          	sd	a5,-40(s0)
      else
        result = (uint32_t)uint_val;
      break;
    80005d2c:	a041                	j	80005dac <emulate_fcvt_if+0x248>
        result = (uint32_t)uint_val;
    80005d2e:	fa843783          	ld	a5,-88(s0)
    80005d32:	2781                	sext.w	a5,a5
    80005d34:	1782                	slli	a5,a5,0x20
    80005d36:	9381                	srli	a5,a5,0x20
    80005d38:	fcf43c23          	sd	a5,-40(s0)
      break;
    80005d3c:	a885                	j	80005dac <emulate_fcvt_if+0x248>

    case 2: // int32
      if (negative) {
    80005d3e:	fe442783          	lw	a5,-28(s0)
    80005d42:	2781                	sext.w	a5,a5
    80005d44:	c385                	beqz	a5,80005d64 <emulate_fcvt_if+0x200>
        result = (int64_t)-uint_val;
    80005d46:	fa843783          	ld	a5,-88(s0)
    80005d4a:	40f007b3          	neg	a5,a5
    80005d4e:	fcf43c23          	sd	a5,-40(s0)
        limit_result = limit = (uint64_t)INT64_MIN;
    80005d52:	57fd                	li	a5,-1
    80005d54:	17fe                	slli	a5,a5,0x3f
    80005d56:	fcf43823          	sd	a5,-48(s0)
    80005d5a:	fd043783          	ld	a5,-48(s0)
    80005d5e:	fcf43423          	sd	a5,-56(s0)
      } else {
        result = (int64_t)uint_val;
        limit_result = limit = INT64_MAX;
      }
      break;
    80005d62:	a0a9                	j	80005dac <emulate_fcvt_if+0x248>
        result = (int64_t)uint_val;
    80005d64:	fa843783          	ld	a5,-88(s0)
    80005d68:	fcf43c23          	sd	a5,-40(s0)
        limit_result = limit = INT64_MAX;
    80005d6c:	57fd                	li	a5,-1
    80005d6e:	8385                	srli	a5,a5,0x1
    80005d70:	fcf43823          	sd	a5,-48(s0)
    80005d74:	fd043783          	ld	a5,-48(s0)
    80005d78:	fcf43423          	sd	a5,-56(s0)
      break;
    80005d7c:	a805                	j	80005dac <emulate_fcvt_if+0x248>

    case 3: // uint64
      limit = limit_result = UINT64_MAX;
    80005d7e:	57fd                	li	a5,-1
    80005d80:	fcf43423          	sd	a5,-56(s0)
    80005d84:	fc843783          	ld	a5,-56(s0)
    80005d88:	fcf43823          	sd	a5,-48(s0)
      if (negative)
    80005d8c:	fe442783          	lw	a5,-28(s0)
    80005d90:	2781                	sext.w	a5,a5
    80005d92:	cb81                	beqz	a5,80005da2 <emulate_fcvt_if+0x23e>
        result = limit = 0;
    80005d94:	fc043823          	sd	zero,-48(s0)
    80005d98:	fd043783          	ld	a5,-48(s0)
    80005d9c:	fcf43c23          	sd	a5,-40(s0)
      else
        result = (uint64_t)uint_val;
      break;
    80005da0:	a031                	j	80005dac <emulate_fcvt_if+0x248>
        result = (uint64_t)uint_val;
    80005da2:	fa843783          	ld	a5,-88(s0)
    80005da6:	fcf43c23          	sd	a5,-40(s0)
      break;
    80005daa:	a009                	j	80005dac <emulate_fcvt_if+0x248>

    default:
      __builtin_unreachable();
  }

  if (uint_val > limit) {
    80005dac:	fa843703          	ld	a4,-88(s0)
    80005db0:	fd043783          	ld	a5,-48(s0)
    80005db4:	00e7fa63          	bleu	a4,a5,80005dc8 <emulate_fcvt_if+0x264>
    result = limit_result;
    80005db8:	fc843783          	ld	a5,-56(s0)
    80005dbc:	fcf43c23          	sd	a5,-40(s0)
    softfloat_raiseFlags(softfloat_flag_invalid);
    80005dc0:	001867f3          	csrrsi	a5,fflags,16
    80005dc4:	faf43023          	sd	a5,-96(s0)
  }

  SET_FS_DIRTY();
  SET_RD(insn, regs, result);
    80005dc8:	0f800793          	li	a5,248
    80005dcc:	f8f42e23          	sw	a5,-100(s0)
    80005dd0:	f6843783          	ld	a5,-152(s0)
    80005dd4:	0047d713          	srli	a4,a5,0x4
    80005dd8:	f9c42783          	lw	a5,-100(s0)
    80005ddc:	8f7d                	and	a4,a4,a5
    80005dde:	f8843783          	ld	a5,-120(s0)
    80005de2:	97ba                	add	a5,a5,a4
    80005de4:	873e                	mv	a4,a5
    80005de6:	fd843783          	ld	a5,-40(s0)
    80005dea:	e31c                	sd	a5,0(a4)
}
    80005dec:	60ea                	ld	ra,152(sp)
    80005dee:	644a                	ld	s0,144(sp)
    80005df0:	610d                	addi	sp,sp,160
    80005df2:	8082                	ret

0000000080005df4 <emulate_fcmp>:

DECLARE_EMULATION_FUNC(emulate_fcmp)
{
    80005df4:	7135                	addi	sp,sp,-160
    80005df6:	ed06                	sd	ra,152(sp)
    80005df8:	e922                	sd	s0,144(sp)
    80005dfa:	1100                	addi	s0,sp,160
    80005dfc:	f8a43423          	sd	a0,-120(s0)
    80005e00:	f8b43023          	sd	a1,-128(s0)
    80005e04:	f6c43c23          	sd	a2,-136(s0)
    80005e08:	f6d43823          	sd	a3,-144(s0)
    80005e0c:	f6e43423          	sd	a4,-152(s0)
  int rm = GET_RM(insn);
    80005e10:	f6843783          	ld	a5,-152(s0)
    80005e14:	83b1                	srli	a5,a5,0xc
    80005e16:	2781                	sext.w	a5,a5
    80005e18:	8b9d                	andi	a5,a5,7
    80005e1a:	fef42223          	sw	a5,-28(s0)
  if (rm >= 3)
    80005e1e:	fe442783          	lw	a5,-28(s0)
    80005e22:	0007871b          	sext.w	a4,a5
    80005e26:	4789                	li	a5,2
    80005e28:	00e7df63          	ble	a4,a5,80005e46 <emulate_fcmp+0x52>
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
    80005e2c:	f6843703          	ld	a4,-152(s0)
    80005e30:	f7043683          	ld	a3,-144(s0)
    80005e34:	f7843603          	ld	a2,-136(s0)
    80005e38:	f8043583          	ld	a1,-128(s0)
    80005e3c:	f8843503          	ld	a0,-120(s0)
    80005e40:	c59fe0ef          	jal	ra,80004a98 <truly_illegal_insn>
    80005e44:	aa71                	j	80005fe0 <emulate_fcmp+0x1ec>

  uintptr_t result;
  if (GET_PRECISION(insn) == PRECISION_S) {
    80005e46:	f6843783          	ld	a5,-152(s0)
    80005e4a:	83e5                	srli	a5,a5,0x19
    80005e4c:	8b8d                	andi	a5,a5,3
    80005e4e:	e3dd                	bnez	a5,80005ef4 <emulate_fcmp+0x100>
    uint32_t rs1 = GET_F32_RS1(insn, regs);
    80005e50:	f6843783          	ld	a5,-152(s0)
    80005e54:	83b1                	srli	a5,a5,0xc
    80005e56:	2781                	sext.w	a5,a5
    80005e58:	0f87f793          	andi	a5,a5,248
    80005e5c:	2781                	sext.w	a5,a5
    80005e5e:	853e                	mv	a0,a5
    80005e60:	ffffe797          	auipc	a5,0xffffe
    80005e64:	97aa                	add	a5,a5,a0
    80005e66:	6be782e7          	jalr	t0,1726(a5) # 8000451e <get_f32_reg>
    80005e6a:	fcf43c23          	sd	a5,-40(s0)
    80005e6e:	0005079b          	sext.w	a5,a0
    80005e72:	fcf42a23          	sw	a5,-44(s0)
    uint32_t rs2 = GET_F32_RS2(insn, regs);
    80005e76:	f6843783          	ld	a5,-152(s0)
    80005e7a:	83c5                	srli	a5,a5,0x11
    80005e7c:	2781                	sext.w	a5,a5
    80005e7e:	0f87f793          	andi	a5,a5,248
    80005e82:	2781                	sext.w	a5,a5
    80005e84:	853e                	mv	a0,a5
    80005e86:	ffffe797          	auipc	a5,0xffffe
    80005e8a:	97aa                	add	a5,a5,a0
    80005e8c:	698782e7          	jalr	t0,1688(a5) # 8000451e <get_f32_reg>
    80005e90:	fcf43423          	sd	a5,-56(s0)
    80005e94:	0005079b          	sext.w	a5,a0
    80005e98:	fcf42223          	sw	a5,-60(s0)
    if (rm != 1)
    80005e9c:	fe442783          	lw	a5,-28(s0)
    80005ea0:	0007871b          	sext.w	a4,a5
    80005ea4:	4785                	li	a5,1
    80005ea6:	00f70d63          	beq	a4,a5,80005ec0 <emulate_fcmp+0xcc>
      result = f32_eq(f32(rs1), f32(rs2));
    80005eaa:	fd442783          	lw	a5,-44(s0)
    80005eae:	fc442703          	lw	a4,-60(s0)
    80005eb2:	85ba                	mv	a1,a4
    80005eb4:	853e                	mv	a0,a5
    80005eb6:	264010ef          	jal	ra,8000711a <f32_eq>
    80005eba:	87aa                	mv	a5,a0
    80005ebc:	fef43423          	sd	a5,-24(s0)
    if (rm == 1 || (rm == 0 && !result))
    80005ec0:	fe442783          	lw	a5,-28(s0)
    80005ec4:	0007871b          	sext.w	a4,a5
    80005ec8:	4785                	li	a5,1
    80005eca:	00f70963          	beq	a4,a5,80005edc <emulate_fcmp+0xe8>
    80005ece:	fe442783          	lw	a5,-28(s0)
    80005ed2:	2781                	sext.w	a5,a5
    80005ed4:	e3ed                	bnez	a5,80005fb6 <emulate_fcmp+0x1c2>
    80005ed6:	fe843783          	ld	a5,-24(s0)
    80005eda:	eff1                	bnez	a5,80005fb6 <emulate_fcmp+0x1c2>
      result = f32_lt(f32(rs1), f32(rs2));
    80005edc:	fd442783          	lw	a5,-44(s0)
    80005ee0:	fc442703          	lw	a4,-60(s0)
    80005ee4:	85ba                	mv	a1,a4
    80005ee6:	853e                	mv	a0,a5
    80005ee8:	32a010ef          	jal	ra,80007212 <f32_lt>
    80005eec:	87aa                	mv	a5,a0
    80005eee:	fef43423          	sd	a5,-24(s0)
    goto success;
    80005ef2:	a0d1                	j	80005fb6 <emulate_fcmp+0x1c2>
  } else if (GET_PRECISION(insn) == PRECISION_D) {
    80005ef4:	f6843783          	ld	a5,-152(s0)
    80005ef8:	83e5                	srli	a5,a5,0x19
    80005efa:	0037f713          	andi	a4,a5,3
    80005efe:	4785                	li	a5,1
    80005f00:	08f71e63          	bne	a4,a5,80005f9c <emulate_fcmp+0x1a8>
    uint64_t rs1 = GET_F64_RS1(insn, regs);
    80005f04:	f6843783          	ld	a5,-152(s0)
    80005f08:	83b1                	srli	a5,a5,0xc
    80005f0a:	0f87f793          	andi	a5,a5,248
    80005f0e:	853e                	mv	a0,a5
    80005f10:	fffff797          	auipc	a5,0xfffff
    80005f14:	97aa                	add	a5,a5,a0
    80005f16:	80e782e7          	jalr	t0,-2034(a5) # 8000471e <get_f64_reg>
    80005f1a:	faf43c23          	sd	a5,-72(s0)
    80005f1e:	87aa                	mv	a5,a0
    80005f20:	faf43823          	sd	a5,-80(s0)
    uint64_t rs2 = GET_F64_RS2(insn, regs);
    80005f24:	f6843783          	ld	a5,-152(s0)
    80005f28:	83c5                	srli	a5,a5,0x11
    80005f2a:	0f87f793          	andi	a5,a5,248
    80005f2e:	853e                	mv	a0,a5
    80005f30:	ffffe797          	auipc	a5,0xffffe
    80005f34:	97aa                	add	a5,a5,a0
    80005f36:	7ee782e7          	jalr	t0,2030(a5) # 8000471e <get_f64_reg>
    80005f3a:	faf43423          	sd	a5,-88(s0)
    80005f3e:	87aa                	mv	a5,a0
    80005f40:	faf43023          	sd	a5,-96(s0)
    if (rm != 1)
    80005f44:	fe442783          	lw	a5,-28(s0)
    80005f48:	0007871b          	sext.w	a4,a5
    80005f4c:	4785                	li	a5,1
    80005f4e:	00f70d63          	beq	a4,a5,80005f68 <emulate_fcmp+0x174>
      result = f64_eq(f64(rs1), f64(rs2));
    80005f52:	fb043783          	ld	a5,-80(s0)
    80005f56:	fa043703          	ld	a4,-96(s0)
    80005f5a:	85ba                	mv	a1,a4
    80005f5c:	853e                	mv	a0,a5
    80005f5e:	116020ef          	jal	ra,80008074 <f64_eq>
    80005f62:	87aa                	mv	a5,a0
    80005f64:	fef43423          	sd	a5,-24(s0)
    if (rm == 1 || (rm == 0 && !result))
    80005f68:	fe442783          	lw	a5,-28(s0)
    80005f6c:	0007871b          	sext.w	a4,a5
    80005f70:	4785                	li	a5,1
    80005f72:	00f70963          	beq	a4,a5,80005f84 <emulate_fcmp+0x190>
    80005f76:	fe442783          	lw	a5,-28(s0)
    80005f7a:	2781                	sext.w	a5,a5
    80005f7c:	ef9d                	bnez	a5,80005fba <emulate_fcmp+0x1c6>
    80005f7e:	fe843783          	ld	a5,-24(s0)
    80005f82:	ef85                	bnez	a5,80005fba <emulate_fcmp+0x1c6>
      result = f64_lt(f64(rs1), f64(rs2));
    80005f84:	fb043783          	ld	a5,-80(s0)
    80005f88:	fa043703          	ld	a4,-96(s0)
    80005f8c:	85ba                	mv	a1,a4
    80005f8e:	853e                	mv	a0,a5
    80005f90:	1d0020ef          	jal	ra,80008160 <f64_lt>
    80005f94:	87aa                	mv	a5,a0
    80005f96:	fef43423          	sd	a5,-24(s0)
    goto success;
    80005f9a:	a005                	j	80005fba <emulate_fcmp+0x1c6>
  }
  return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
    80005f9c:	f6843703          	ld	a4,-152(s0)
    80005fa0:	f7043683          	ld	a3,-144(s0)
    80005fa4:	f7843603          	ld	a2,-136(s0)
    80005fa8:	f8043583          	ld	a1,-128(s0)
    80005fac:	f8843503          	ld	a0,-120(s0)
    80005fb0:	ae9fe0ef          	jal	ra,80004a98 <truly_illegal_insn>
    80005fb4:	a035                	j	80005fe0 <emulate_fcmp+0x1ec>
    goto success;
    80005fb6:	0001                	nop
    80005fb8:	a011                	j	80005fbc <emulate_fcmp+0x1c8>
    goto success;
    80005fba:	0001                	nop
success:
  SET_FS_DIRTY();
  SET_RD(insn, regs, result);
    80005fbc:	0f800793          	li	a5,248
    80005fc0:	f8f42e23          	sw	a5,-100(s0)
    80005fc4:	f6843783          	ld	a5,-152(s0)
    80005fc8:	0047d713          	srli	a4,a5,0x4
    80005fcc:	f9c42783          	lw	a5,-100(s0)
    80005fd0:	8f7d                	and	a4,a4,a5
    80005fd2:	f8843783          	ld	a5,-120(s0)
    80005fd6:	97ba                	add	a5,a5,a4
    80005fd8:	873e                	mv	a4,a5
    80005fda:	fe843783          	ld	a5,-24(s0)
    80005fde:	e31c                	sd	a5,0(a4)
}
    80005fe0:	60ea                	ld	ra,152(sp)
    80005fe2:	644a                	ld	s0,144(sp)
    80005fe4:	610d                	addi	sp,sp,160
    80005fe6:	8082                	ret

0000000080005fe8 <emulate_fmv_if>:

DECLARE_EMULATION_FUNC(emulate_fmv_if)
{
    80005fe8:	711d                	addi	sp,sp,-96
    80005fea:	ec86                	sd	ra,88(sp)
    80005fec:	e8a2                	sd	s0,80(sp)
    80005fee:	1080                	addi	s0,sp,96
    80005ff0:	fca43423          	sd	a0,-56(s0)
    80005ff4:	fcb43023          	sd	a1,-64(s0)
    80005ff8:	fac43c23          	sd	a2,-72(s0)
    80005ffc:	fad43823          	sd	a3,-80(s0)
    80006000:	fae43423          	sd	a4,-88(s0)
  uintptr_t result;
  if ((insn >> 20) & 0x1f)
    80006004:	fa843783          	ld	a5,-88(s0)
    80006008:	83d1                	srli	a5,a5,0x14
    8000600a:	8bfd                	andi	a5,a5,31
    8000600c:	cf91                	beqz	a5,80006028 <emulate_fmv_if+0x40>
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
    8000600e:	fa843703          	ld	a4,-88(s0)
    80006012:	fb043683          	ld	a3,-80(s0)
    80006016:	fb843603          	ld	a2,-72(s0)
    8000601a:	fc043583          	ld	a1,-64(s0)
    8000601e:	fc843503          	ld	a0,-56(s0)
    80006022:	a77fe0ef          	jal	ra,80004a98 <truly_illegal_insn>
    80006026:	aa31                	j	80006142 <emulate_fmv_if+0x15a>

  if (GET_PRECISION(insn) == PRECISION_S) {
    80006028:	fa843783          	ld	a5,-88(s0)
    8000602c:	83e5                	srli	a5,a5,0x19
    8000602e:	8b8d                	andi	a5,a5,3
    80006030:	e3b5                	bnez	a5,80006094 <emulate_fmv_if+0xac>
    result = GET_F32_RS1(insn, regs);
    80006032:	fa843783          	ld	a5,-88(s0)
    80006036:	83b1                	srli	a5,a5,0xc
    80006038:	2781                	sext.w	a5,a5
    8000603a:	0f87f793          	andi	a5,a5,248
    8000603e:	2781                	sext.w	a5,a5
    80006040:	853e                	mv	a0,a5
    80006042:	ffffe797          	auipc	a5,0xffffe
    80006046:	97aa                	add	a5,a5,a0
    80006048:	4dc782e7          	jalr	t0,1244(a5) # 8000451e <get_f32_reg>
    8000604c:	fef43023          	sd	a5,-32(s0)
    80006050:	0005079b          	sext.w	a5,a0
    80006054:	fef43423          	sd	a5,-24(s0)
    switch (GET_RM(insn)) {
    80006058:	fa843783          	ld	a5,-88(s0)
    8000605c:	83b1                	srli	a5,a5,0xc
    8000605e:	8b9d                	andi	a5,a5,7
    80006060:	cfc5                	beqz	a5,80006118 <emulate_fmv_if+0x130>
    80006062:	4705                	li	a4,1
    80006064:	00e79b63          	bne	a5,a4,8000607a <emulate_fmv_if+0x92>
      case GET_RM(MATCH_FMV_X_W): break;
      case GET_RM(MATCH_FCLASS_S): result = f32_classify(f32(result)); break;
    80006068:	fe843783          	ld	a5,-24(s0)
    8000606c:	2781                	sext.w	a5,a5
    8000606e:	853e                	mv	a0,a5
    80006070:	183010ef          	jal	ra,800079f2 <f32_classify>
    80006074:	fea43423          	sd	a0,-24(s0)
    80006078:	a05d                	j	8000611e <emulate_fmv_if+0x136>
      default: return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
    8000607a:	fa843703          	ld	a4,-88(s0)
    8000607e:	fb043683          	ld	a3,-80(s0)
    80006082:	fb843603          	ld	a2,-72(s0)
    80006086:	fc043583          	ld	a1,-64(s0)
    8000608a:	fc843503          	ld	a0,-56(s0)
    8000608e:	a0bfe0ef          	jal	ra,80004a98 <truly_illegal_insn>
    80006092:	a845                	j	80006142 <emulate_fmv_if+0x15a>
    }
  } else if (GET_PRECISION(insn) == PRECISION_D) {
    80006094:	fa843783          	ld	a5,-88(s0)
    80006098:	83e5                	srli	a5,a5,0x19
    8000609a:	0037f713          	andi	a4,a5,3
    8000609e:	4785                	li	a5,1
    800060a0:	04f71f63          	bne	a4,a5,800060fe <emulate_fmv_if+0x116>
    result = GET_F64_RS1(insn, regs);
    800060a4:	fa843783          	ld	a5,-88(s0)
    800060a8:	83b1                	srli	a5,a5,0xc
    800060aa:	0f87f793          	andi	a5,a5,248
    800060ae:	853e                	mv	a0,a5
    800060b0:	ffffe797          	auipc	a5,0xffffe
    800060b4:	97aa                	add	a5,a5,a0
    800060b6:	66e782e7          	jalr	t0,1646(a5) # 8000471e <get_f64_reg>
    800060ba:	fcf43c23          	sd	a5,-40(s0)
    800060be:	87aa                	mv	a5,a0
    800060c0:	fef43423          	sd	a5,-24(s0)
    switch (GET_RM(insn)) {
    800060c4:	fa843783          	ld	a5,-88(s0)
    800060c8:	83b1                	srli	a5,a5,0xc
    800060ca:	8b9d                	andi	a5,a5,7
    800060cc:	cba1                	beqz	a5,8000611c <emulate_fmv_if+0x134>
    800060ce:	4705                	li	a4,1
    800060d0:	00e79a63          	bne	a5,a4,800060e4 <emulate_fmv_if+0xfc>
      case GET_RM(MATCH_FMV_X_D): break;
      case GET_RM(MATCH_FCLASS_D): result = f64_classify(f64(result)); break;
    800060d4:	fe843783          	ld	a5,-24(s0)
    800060d8:	853e                	mv	a0,a5
    800060da:	1d9020ef          	jal	ra,80008ab2 <f64_classify>
    800060de:	fea43423          	sd	a0,-24(s0)
    800060e2:	a835                	j	8000611e <emulate_fmv_if+0x136>
      default: return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
    800060e4:	fa843703          	ld	a4,-88(s0)
    800060e8:	fb043683          	ld	a3,-80(s0)
    800060ec:	fb843603          	ld	a2,-72(s0)
    800060f0:	fc043583          	ld	a1,-64(s0)
    800060f4:	fc843503          	ld	a0,-56(s0)
    800060f8:	9a1fe0ef          	jal	ra,80004a98 <truly_illegal_insn>
    800060fc:	a099                	j	80006142 <emulate_fmv_if+0x15a>
    }
  } else {
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
    800060fe:	fa843703          	ld	a4,-88(s0)
    80006102:	fb043683          	ld	a3,-80(s0)
    80006106:	fb843603          	ld	a2,-72(s0)
    8000610a:	fc043583          	ld	a1,-64(s0)
    8000610e:	fc843503          	ld	a0,-56(s0)
    80006112:	987fe0ef          	jal	ra,80004a98 <truly_illegal_insn>
    80006116:	a035                	j	80006142 <emulate_fmv_if+0x15a>
      case GET_RM(MATCH_FMV_X_W): break;
    80006118:	0001                	nop
    8000611a:	a011                	j	8000611e <emulate_fmv_if+0x136>
      case GET_RM(MATCH_FMV_X_D): break;
    8000611c:	0001                	nop
  }

  SET_FS_DIRTY();
  SET_RD(insn, regs, result);
    8000611e:	0f800793          	li	a5,248
    80006122:	fcf42a23          	sw	a5,-44(s0)
    80006126:	fa843783          	ld	a5,-88(s0)
    8000612a:	0047d713          	srli	a4,a5,0x4
    8000612e:	fd442783          	lw	a5,-44(s0)
    80006132:	8f7d                	and	a4,a4,a5
    80006134:	fc843783          	ld	a5,-56(s0)
    80006138:	97ba                	add	a5,a5,a4
    8000613a:	873e                	mv	a4,a5
    8000613c:	fe843783          	ld	a5,-24(s0)
    80006140:	e31c                	sd	a5,0(a4)
}
    80006142:	60e6                	ld	ra,88(sp)
    80006144:	6446                	ld	s0,80(sp)
    80006146:	6125                	addi	sp,sp,96
    80006148:	8082                	ret

000000008000614a <emulate_fmv_fi>:

DECLARE_EMULATION_FUNC(emulate_fmv_fi)
{
    8000614a:	7119                	addi	sp,sp,-128
    8000614c:	fc86                	sd	ra,120(sp)
    8000614e:	f8a2                	sd	s0,112(sp)
    80006150:	0100                	addi	s0,sp,128
    80006152:	faa43423          	sd	a0,-88(s0)
    80006156:	fab43023          	sd	a1,-96(s0)
    8000615a:	f8c43c23          	sd	a2,-104(s0)
    8000615e:	f8d43823          	sd	a3,-112(s0)
    80006162:	f8e43423          	sd	a4,-120(s0)
  uintptr_t rs1 = GET_RS1(insn, regs);
    80006166:	0f800793          	li	a5,248
    8000616a:	fef42623          	sw	a5,-20(s0)
    8000616e:	f8843783          	ld	a5,-120(s0)
    80006172:	00c7d713          	srli	a4,a5,0xc
    80006176:	fec42783          	lw	a5,-20(s0)
    8000617a:	8f7d                	and	a4,a4,a5
    8000617c:	fa843783          	ld	a5,-88(s0)
    80006180:	97ba                	add	a5,a5,a4
    80006182:	639c                	ld	a5,0(a5)
    80006184:	fef43023          	sd	a5,-32(s0)

  if ((insn & MASK_FMV_W_X) == MATCH_FMV_W_X)
    80006188:	f8843703          	ld	a4,-120(s0)
    8000618c:	00007797          	auipc	a5,0x7
    80006190:	f0c78793          	addi	a5,a5,-244 # 8000d098 <fp_emulation_table+0x80>
    80006194:	639c                	ld	a5,0(a5)
    80006196:	8f7d                	and	a4,a4,a5
    80006198:	47bd                	li	a5,15
    8000619a:	07f2                	slli	a5,a5,0x1c
    8000619c:	05378793          	addi	a5,a5,83
    800061a0:	02f71763          	bne	a4,a5,800061ce <emulate_fmv_fi+0x84>
    SET_F32_RD(insn, regs, rs1);
    800061a4:	fe043783          	ld	a5,-32(s0)
    800061a8:	2781                	sext.w	a5,a5
    800061aa:	853e                	mv	a0,a5
    800061ac:	f8843783          	ld	a5,-120(s0)
    800061b0:	8391                	srli	a5,a5,0x4
    800061b2:	0f87f793          	andi	a5,a5,248
    800061b6:	fcf43c23          	sd	a5,-40(s0)
    800061ba:	fd843703          	ld	a4,-40(s0)
    800061be:	ffffe797          	auipc	a5,0xffffe
    800061c2:	97ba                	add	a5,a5,a4
    800061c4:	460782e7          	jalr	t0,1120(a5) # 8000461e <put_f32_reg>
    800061c8:	fcf43823          	sd	a5,-48(s0)
    800061cc:	a0a5                	j	80006234 <emulate_fmv_fi+0xea>
#if __riscv_xlen == 64
  else if ((insn & MASK_FMV_D_X) == MATCH_FMV_D_X)
    800061ce:	f8843703          	ld	a4,-120(s0)
    800061d2:	00007797          	auipc	a5,0x7
    800061d6:	ec678793          	addi	a5,a5,-314 # 8000d098 <fp_emulation_table+0x80>
    800061da:	639c                	ld	a5,0(a5)
    800061dc:	8f7d                	and	a4,a4,a5
    800061de:	07900793          	li	a5,121
    800061e2:	07e6                	slli	a5,a5,0x19
    800061e4:	05378793          	addi	a5,a5,83
    800061e8:	02f71a63          	bne	a4,a5,8000621c <emulate_fmv_fi+0xd2>
    SET_F64_RD(insn, regs, rs1);
    800061ec:	fe043783          	ld	a5,-32(s0)
    800061f0:	faf43c23          	sd	a5,-72(s0)
    800061f4:	fb843783          	ld	a5,-72(s0)
    800061f8:	853e                	mv	a0,a5
    800061fa:	f8843783          	ld	a5,-120(s0)
    800061fe:	8391                	srli	a5,a5,0x4
    80006200:	0f87f793          	andi	a5,a5,248
    80006204:	fcf43423          	sd	a5,-56(s0)
    80006208:	fc843703          	ld	a4,-56(s0)
    8000620c:	ffffe797          	auipc	a5,0xffffe
    80006210:	97ba                	add	a5,a5,a4
    80006212:	612782e7          	jalr	t0,1554(a5) # 8000481e <put_f64_reg>
    80006216:	fcf43023          	sd	a5,-64(s0)
    8000621a:	a829                	j	80006234 <emulate_fmv_fi+0xea>
#endif
  else
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
    8000621c:	f8843703          	ld	a4,-120(s0)
    80006220:	f9043683          	ld	a3,-112(s0)
    80006224:	f9843603          	ld	a2,-104(s0)
    80006228:	fa043583          	ld	a1,-96(s0)
    8000622c:	fa843503          	ld	a0,-88(s0)
    80006230:	869fe0ef          	jal	ra,80004a98 <truly_illegal_insn>
}
    80006234:	70e6                	ld	ra,120(sp)
    80006236:	7446                	ld	s0,112(sp)
    80006238:	6109                	addi	sp,sp,128
    8000623a:	8082                	ret

000000008000623c <emulate_fmadd>:

DECLARE_EMULATION_FUNC(emulate_fmadd)
{
    8000623c:	7115                	addi	sp,sp,-224
    8000623e:	ed86                	sd	ra,216(sp)
    80006240:	e9a2                	sd	s0,208(sp)
    80006242:	1180                	addi	s0,sp,224
    80006244:	f4a43423          	sd	a0,-184(s0)
    80006248:	f4b43023          	sd	a1,-192(s0)
    8000624c:	f2c43c23          	sd	a2,-200(s0)
    80006250:	f2d43823          	sd	a3,-208(s0)
    80006254:	f2e43423          	sd	a4,-216(s0)
  // if FPU is disabled, punt back to the OS
  if (unlikely((mstatus & MSTATUS_FS) == 0))
    80006258:	f3043703          	ld	a4,-208(s0)
    8000625c:	6799                	lui	a5,0x6
    8000625e:	8ff9                	and	a5,a5,a4
    80006260:	0017b793          	seqz	a5,a5
    80006264:	0ff7f793          	andi	a5,a5,255
    80006268:	cf91                	beqz	a5,80006284 <emulate_fmadd+0x48>
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
    8000626a:	f2843703          	ld	a4,-216(s0)
    8000626e:	f3043683          	ld	a3,-208(s0)
    80006272:	f3843603          	ld	a2,-200(s0)
    80006276:	f4043583          	ld	a1,-192(s0)
    8000627a:	f4843503          	ld	a0,-184(s0)
    8000627e:	81bfe0ef          	jal	ra,80004a98 <truly_illegal_insn>
    80006282:	ac91                	j	800064d6 <emulate_fmadd+0x29a>

  bool negA = (insn >> 3) & 1;
    80006284:	f2843783          	ld	a5,-216(s0)
    80006288:	838d                	srli	a5,a5,0x3
    8000628a:	8b85                	andi	a5,a5,1
    8000628c:	00f037b3          	snez	a5,a5
    80006290:	fef407a3          	sb	a5,-17(s0)
  bool negC = (insn >> 2) & 1;
    80006294:	f2843783          	ld	a5,-216(s0)
    80006298:	8389                	srli	a5,a5,0x2
    8000629a:	8b85                	andi	a5,a5,1
    8000629c:	00f037b3          	snez	a5,a5
    800062a0:	fef40723          	sb	a5,-18(s0)
  SETUP_STATIC_ROUNDING(insn);
    800062a4:	002027f3          	frrm	a5
    800062a8:	fef43023          	sd	a5,-32(s0)
    800062ac:	fe043783          	ld	a5,-32(s0)
    800062b0:	823e                	mv	tp,a5
    800062b2:	f2843703          	ld	a4,-216(s0)
    800062b6:	679d                	lui	a5,0x7
    800062b8:	8f7d                	and	a4,a4,a5
    800062ba:	77e5                	lui	a5,0xffff9
    800062bc:	97ba                	add	a5,a5,a4
    800062be:	0017b793          	seqz	a5,a5
    800062c2:	0ff7f793          	andi	a5,a5,255
    800062c6:	eb9d                	bnez	a5,800062fc <emulate_fmadd+0xc0>
    800062c8:	f2843783          	ld	a5,-216(s0)
    800062cc:	83b1                	srli	a5,a5,0xc
    800062ce:	0077f713          	andi	a4,a5,7
    800062d2:	4791                	li	a5,4
    800062d4:	00e7ff63          	bleu	a4,a5,800062f2 <emulate_fmadd+0xb6>
    800062d8:	f2843703          	ld	a4,-216(s0)
    800062dc:	f3043683          	ld	a3,-208(s0)
    800062e0:	f3843603          	ld	a2,-200(s0)
    800062e4:	f4043583          	ld	a1,-192(s0)
    800062e8:	f4843503          	ld	a0,-184(s0)
    800062ec:	facfe0ef          	jal	ra,80004a98 <truly_illegal_insn>
    800062f0:	a2dd                	j	800064d6 <emulate_fmadd+0x29a>
    800062f2:	f2843783          	ld	a5,-216(s0)
    800062f6:	83b1                	srli	a5,a5,0xc
    800062f8:	8b9d                	andi	a5,a5,7
    800062fa:	823e                	mv	tp,a5
  if (GET_PRECISION(insn) == PRECISION_S) {
    800062fc:	f2843783          	ld	a5,-216(s0)
    80006300:	83e5                	srli	a5,a5,0x19
    80006302:	8b8d                	andi	a5,a5,3
    80006304:	eff9                	bnez	a5,800063e2 <emulate_fmadd+0x1a6>
    uint32_t rs1 = GET_F32_RS1(insn, regs) ^ (negA ? INT32_MIN : 0);
    80006306:	f2843783          	ld	a5,-216(s0)
    8000630a:	83b1                	srli	a5,a5,0xc
    8000630c:	2781                	sext.w	a5,a5
    8000630e:	0f87f793          	andi	a5,a5,248
    80006312:	2781                	sext.w	a5,a5
    80006314:	853e                	mv	a0,a5
    80006316:	ffffe797          	auipc	a5,0xffffe
    8000631a:	97aa                	add	a5,a5,a0
    8000631c:	208782e7          	jalr	t0,520(a5) # 8000451e <get_f32_reg>
    80006320:	fcf43c23          	sd	a5,-40(s0)
    80006324:	0005071b          	sext.w	a4,a0
    80006328:	fef44783          	lbu	a5,-17(s0)
    8000632c:	0ff7f793          	andi	a5,a5,255
    80006330:	c781                	beqz	a5,80006338 <emulate_fmadd+0xfc>
    80006332:	800007b7          	lui	a5,0x80000
    80006336:	a011                	j	8000633a <emulate_fmadd+0xfe>
    80006338:	4781                	li	a5,0
    8000633a:	8fb9                	xor	a5,a5,a4
    8000633c:	2781                	sext.w	a5,a5
    8000633e:	fcf42a23          	sw	a5,-44(s0)
    uint32_t rs2 = GET_F32_RS2(insn, regs);
    80006342:	f2843783          	ld	a5,-216(s0)
    80006346:	83c5                	srli	a5,a5,0x11
    80006348:	2781                	sext.w	a5,a5
    8000634a:	0f87f793          	andi	a5,a5,248
    8000634e:	2781                	sext.w	a5,a5
    80006350:	853e                	mv	a0,a5
    80006352:	ffffe797          	auipc	a5,0xffffe
    80006356:	97aa                	add	a5,a5,a0
    80006358:	1cc782e7          	jalr	t0,460(a5) # 8000451e <get_f32_reg>
    8000635c:	fcf43423          	sd	a5,-56(s0)
    80006360:	0005079b          	sext.w	a5,a0
    80006364:	fcf42223          	sw	a5,-60(s0)
    uint32_t rs3 = GET_F32_RS3(insn, regs) ^ (negC ? INT32_MIN : 0);
    80006368:	f2843783          	ld	a5,-216(s0)
    8000636c:	83e1                	srli	a5,a5,0x18
    8000636e:	2781                	sext.w	a5,a5
    80006370:	0f87f793          	andi	a5,a5,248
    80006374:	2781                	sext.w	a5,a5
    80006376:	853e                	mv	a0,a5
    80006378:	ffffe797          	auipc	a5,0xffffe
    8000637c:	97aa                	add	a5,a5,a0
    8000637e:	1a6782e7          	jalr	t0,422(a5) # 8000451e <get_f32_reg>
    80006382:	faf43c23          	sd	a5,-72(s0)
    80006386:	0005071b          	sext.w	a4,a0
    8000638a:	fee44783          	lbu	a5,-18(s0)
    8000638e:	0ff7f793          	andi	a5,a5,255
    80006392:	c781                	beqz	a5,8000639a <emulate_fmadd+0x15e>
    80006394:	800007b7          	lui	a5,0x80000
    80006398:	a011                	j	8000639c <emulate_fmadd+0x160>
    8000639a:	4781                	li	a5,0
    8000639c:	8fb9                	xor	a5,a5,a4
    8000639e:	2781                	sext.w	a5,a5
    800063a0:	faf42a23          	sw	a5,-76(s0)
    SET_F32_RD(insn, regs, softfloat_mulAddF32(rs1, rs2, rs3, 0).v);
    800063a4:	fd446783          	lwu	a5,-44(s0)
    800063a8:	fc446703          	lwu	a4,-60(s0)
    800063ac:	fb446603          	lwu	a2,-76(s0)
    800063b0:	4681                	li	a3,0
    800063b2:	85ba                	mv	a1,a4
    800063b4:	853e                	mv	a0,a5
    800063b6:	164030ef          	jal	ra,8000951a <softfloat_mulAddF32>
    800063ba:	87aa                	mv	a5,a0
    800063bc:	2781                	sext.w	a5,a5
    800063be:	853e                	mv	a0,a5
    800063c0:	f2843783          	ld	a5,-216(s0)
    800063c4:	8391                	srli	a5,a5,0x4
    800063c6:	0f87f793          	andi	a5,a5,248
    800063ca:	faf43423          	sd	a5,-88(s0)
    800063ce:	fa843703          	ld	a4,-88(s0)
    800063d2:	ffffe797          	auipc	a5,0xffffe
    800063d6:	97ba                	add	a5,a5,a4
    800063d8:	24c782e7          	jalr	t0,588(a5) # 8000461e <put_f32_reg>
    800063dc:	faf43023          	sd	a5,-96(s0)
    800063e0:	a8dd                	j	800064d6 <emulate_fmadd+0x29a>
  } else if (GET_PRECISION(insn) == PRECISION_D) {
    800063e2:	f2843783          	ld	a5,-216(s0)
    800063e6:	83e5                	srli	a5,a5,0x19
    800063e8:	0037f713          	andi	a4,a5,3
    800063ec:	4785                	li	a5,1
    800063ee:	0cf71863          	bne	a4,a5,800064be <emulate_fmadd+0x282>
    uint64_t rs1 = GET_F64_RS1(insn, regs) ^ (negA ? INT64_MIN : 0);
    800063f2:	f2843783          	ld	a5,-216(s0)
    800063f6:	83b1                	srli	a5,a5,0xc
    800063f8:	0f87f793          	andi	a5,a5,248
    800063fc:	853e                	mv	a0,a5
    800063fe:	ffffe797          	auipc	a5,0xffffe
    80006402:	97aa                	add	a5,a5,a0
    80006404:	320782e7          	jalr	t0,800(a5) # 8000471e <get_f64_reg>
    80006408:	f8f43c23          	sd	a5,-104(s0)
    8000640c:	87aa                	mv	a5,a0
    8000640e:	873e                	mv	a4,a5
    80006410:	fef44783          	lbu	a5,-17(s0)
    80006414:	0ff7f793          	andi	a5,a5,255
    80006418:	c781                	beqz	a5,80006420 <emulate_fmadd+0x1e4>
    8000641a:	57fd                	li	a5,-1
    8000641c:	17fe                	slli	a5,a5,0x3f
    8000641e:	a011                	j	80006422 <emulate_fmadd+0x1e6>
    80006420:	4781                	li	a5,0
    80006422:	8fb9                	xor	a5,a5,a4
    80006424:	f8f43823          	sd	a5,-112(s0)
    uint64_t rs2 = GET_F64_RS2(insn, regs);
    80006428:	f2843783          	ld	a5,-216(s0)
    8000642c:	83c5                	srli	a5,a5,0x11
    8000642e:	0f87f793          	andi	a5,a5,248
    80006432:	853e                	mv	a0,a5
    80006434:	ffffe797          	auipc	a5,0xffffe
    80006438:	97aa                	add	a5,a5,a0
    8000643a:	2ea782e7          	jalr	t0,746(a5) # 8000471e <get_f64_reg>
    8000643e:	f8f43423          	sd	a5,-120(s0)
    80006442:	87aa                	mv	a5,a0
    80006444:	f8f43023          	sd	a5,-128(s0)
    uint64_t rs3 = GET_F64_RS3(insn, regs) ^ (negC ? INT64_MIN : 0);
    80006448:	f2843783          	ld	a5,-216(s0)
    8000644c:	83e1                	srli	a5,a5,0x18
    8000644e:	0f87f793          	andi	a5,a5,248
    80006452:	853e                	mv	a0,a5
    80006454:	ffffe797          	auipc	a5,0xffffe
    80006458:	97aa                	add	a5,a5,a0
    8000645a:	2ca782e7          	jalr	t0,714(a5) # 8000471e <get_f64_reg>
    8000645e:	f6f43c23          	sd	a5,-136(s0)
    80006462:	87aa                	mv	a5,a0
    80006464:	873e                	mv	a4,a5
    80006466:	fee44783          	lbu	a5,-18(s0)
    8000646a:	0ff7f793          	andi	a5,a5,255
    8000646e:	c781                	beqz	a5,80006476 <emulate_fmadd+0x23a>
    80006470:	57fd                	li	a5,-1
    80006472:	17fe                	slli	a5,a5,0x3f
    80006474:	a011                	j	80006478 <emulate_fmadd+0x23c>
    80006476:	4781                	li	a5,0
    80006478:	8fb9                	xor	a5,a5,a4
    8000647a:	f6f43823          	sd	a5,-144(s0)
    SET_F64_RD(insn, regs, softfloat_mulAddF64(rs1, rs2, rs3, 0).v);
    8000647e:	4681                	li	a3,0
    80006480:	f7043603          	ld	a2,-144(s0)
    80006484:	f8043583          	ld	a1,-128(s0)
    80006488:	f9043503          	ld	a0,-112(s0)
    8000648c:	62a030ef          	jal	ra,80009ab6 <softfloat_mulAddF64>
    80006490:	87aa                	mv	a5,a0
    80006492:	f4f43c23          	sd	a5,-168(s0)
    80006496:	f5843783          	ld	a5,-168(s0)
    8000649a:	853e                	mv	a0,a5
    8000649c:	f2843783          	ld	a5,-216(s0)
    800064a0:	8391                	srli	a5,a5,0x4
    800064a2:	0f87f793          	andi	a5,a5,248
    800064a6:	f6f43423          	sd	a5,-152(s0)
    800064aa:	f6843703          	ld	a4,-152(s0)
    800064ae:	ffffe797          	auipc	a5,0xffffe
    800064b2:	97ba                	add	a5,a5,a4
    800064b4:	370782e7          	jalr	t0,880(a5) # 8000481e <put_f64_reg>
    800064b8:	f6f43023          	sd	a5,-160(s0)
    800064bc:	a829                	j	800064d6 <emulate_fmadd+0x29a>
  } else {
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
    800064be:	f2843703          	ld	a4,-216(s0)
    800064c2:	f3043683          	ld	a3,-208(s0)
    800064c6:	f3843603          	ld	a2,-200(s0)
    800064ca:	f4043583          	ld	a1,-192(s0)
    800064ce:	f4843503          	ld	a0,-184(s0)
    800064d2:	dc6fe0ef          	jal	ra,80004a98 <truly_illegal_insn>
  }
}
    800064d6:	60ee                	ld	ra,216(sp)
    800064d8:	644e                	ld	s0,208(sp)
    800064da:	612d                	addi	sp,sp,224
    800064dc:	8082                	ret

00000000800064de <load_uint8_t>:
DECLARE_UNPRIVILEGED_LOAD_FUNCTION(uint8_t, lbu)
    800064de:	7179                	addi	sp,sp,-48
    800064e0:	f422                	sd	s0,40(sp)
    800064e2:	1800                	addi	s0,sp,48
    800064e4:	fca43c23          	sd	a0,-40(s0)
    800064e8:	fcb43823          	sd	a1,-48(s0)
    800064ec:	000205b7          	lui	a1,0x20
    800064f0:	fd043603          	ld	a2,-48(s0)
    800064f4:	fd843783          	ld	a5,-40(s0)
    800064f8:	3005a6f3          	csrrs	a3,mstatus,a1
    800064fc:	0007c703          	lbu	a4,0(a5)
    80006500:	30069073          	csrw	mstatus,a3
    80006504:	87ba                	mv	a5,a4
    80006506:	fef407a3          	sb	a5,-17(s0)
    8000650a:	fef44783          	lbu	a5,-17(s0)
    8000650e:	853e                	mv	a0,a5
    80006510:	7422                	ld	s0,40(sp)
    80006512:	6145                	addi	sp,sp,48
    80006514:	8082                	ret

0000000080006516 <store_uint8_t>:
DECLARE_UNPRIVILEGED_STORE_FUNCTION(uint8_t, sb)
    80006516:	7179                	addi	sp,sp,-48
    80006518:	f422                	sd	s0,40(sp)
    8000651a:	1800                	addi	s0,sp,48
    8000651c:	fea43423          	sd	a0,-24(s0)
    80006520:	87ae                	mv	a5,a1
    80006522:	fcc43c23          	sd	a2,-40(s0)
    80006526:	fef403a3          	sb	a5,-25(s0)
    8000652a:	000205b7          	lui	a1,0x20
    8000652e:	fd843603          	ld	a2,-40(s0)
    80006532:	fe744783          	lbu	a5,-25(s0)
    80006536:	fe843703          	ld	a4,-24(s0)
    8000653a:	3005a6f3          	csrrs	a3,mstatus,a1
    8000653e:	00f70023          	sb	a5,0(a4) # 5000 <MEM_START-0x7fffb000>
    80006542:	30069073          	csrw	mstatus,a3
    80006546:	0001                	nop
    80006548:	7422                	ld	s0,40(sp)
    8000654a:	6145                	addi	sp,sp,48
    8000654c:	8082                	ret

000000008000654e <lfsr63>:
int snprintf(char* out, size_t n, const char* s, ...);
void start_user(trapframe_t* tf) __attribute__((noreturn));
void dump_tf(trapframe_t*);

static uint64_t lfsr63(uint64_t x)
{
    8000654e:	7179                	addi	sp,sp,-48
    80006550:	f422                	sd	s0,40(sp)
    80006552:	1800                	addi	s0,sp,48
    80006554:	fca43c23          	sd	a0,-40(s0)
  uint64_t bit = (x ^ (x >> 1)) & 1;
    80006558:	fd843783          	ld	a5,-40(s0)
    8000655c:	0017d713          	srli	a4,a5,0x1
    80006560:	fd843783          	ld	a5,-40(s0)
    80006564:	8fb9                	xor	a5,a5,a4
    80006566:	8b85                	andi	a5,a5,1
    80006568:	fef43423          	sd	a5,-24(s0)
  return (x >> 1) | (bit << 62);
    8000656c:	fd843783          	ld	a5,-40(s0)
    80006570:	0017d713          	srli	a4,a5,0x1
    80006574:	fe843783          	ld	a5,-24(s0)
    80006578:	17fa                	slli	a5,a5,0x3e
    8000657a:	8fd9                	or	a5,a5,a4
}
    8000657c:	853e                	mv	a0,a5
    8000657e:	7422                	ld	s0,40(sp)
    80006580:	6145                	addi	sp,sp,48
    80006582:	8082                	ret

0000000080006584 <insn_len>:

static inline int insn_len(long insn)
{
    80006584:	1101                	addi	sp,sp,-32
    80006586:	ec22                	sd	s0,24(sp)
    80006588:	1000                	addi	s0,sp,32
    8000658a:	fea43423          	sd	a0,-24(s0)
  return (insn & 0x3) < 0x3 ? 2 : 4;
    8000658e:	fe843783          	ld	a5,-24(s0)
    80006592:	0037f713          	andi	a4,a5,3
    80006596:	4789                	li	a5,2
    80006598:	00e7c463          	blt	a5,a4,800065a0 <insn_len+0x1c>
    8000659c:	4789                	li	a5,2
    8000659e:	a011                	j	800065a2 <insn_len+0x1e>
    800065a0:	4791                	li	a5,4
}
    800065a2:	853e                	mv	a0,a5
    800065a4:	6462                	ld	s0,24(sp)
    800065a6:	6105                	addi	sp,sp,32
    800065a8:	8082                	ret

00000000800065aa <misaligned_load_trap>:
  uint32_t int32;
  uint64_t int64;
};

void misaligned_load_trap(uintptr_t* regs, uintptr_t mcause, uintptr_t mepc)
{
    800065aa:	7155                	addi	sp,sp,-208
    800065ac:	e586                	sd	ra,200(sp)
    800065ae:	e1a2                	sd	s0,192(sp)
    800065b0:	0980                	addi	s0,sp,208
    800065b2:	f4a43423          	sd	a0,-184(s0)
    800065b6:	f4b43023          	sd	a1,-192(s0)
    800065ba:	f2c43c23          	sd	a2,-200(s0)
    800065be:	f3843783          	ld	a5,-200(s0)
    800065c2:	f8f43423          	sd	a5,-120(s0)
    800065c6:	f5840793          	addi	a5,s0,-168
    800065ca:	f8f43023          	sd	a5,-128(s0)
  register uintptr_t __mstatus_adjust asm ("a1") = MSTATUS_MPRV | MSTATUS_MXR;
    800065ce:	000a05b7          	lui	a1,0xa0
  register uintptr_t __mepc asm ("a2") = mepc;
    800065d2:	f8843603          	ld	a2,-120(s0)
  uintptr_t rvc_mask = 3;
    800065d6:	478d                	li	a5,3
    800065d8:	f6f43c23          	sd	a5,-136(s0)
  asm ("csrrs %[mstatus], mstatus, %[mprv]\n"
    800065dc:	f7843783          	ld	a5,-136(s0)
    800065e0:	3005a6f3          	csrrs	a3,mstatus,a1
    800065e4:	00267713          	andi	a4,a2,2
    800065e8:	eb11                	bnez	a4,800065fc <misaligned_load_trap+0x52>
    800065ea:	00066503          	lwu	a0,0(a2)
    800065ee:	00f57733          	and	a4,a0,a5
    800065f2:	00f70f63          	beq	a4,a5,80006610 <misaligned_load_trap+0x66>
    800065f6:	1542                	slli	a0,a0,0x30
    800065f8:	9141                	srli	a0,a0,0x30
    800065fa:	a819                	j	80006610 <misaligned_load_trap+0x66>
    800065fc:	00065503          	lhu	a0,0(a2)
    80006600:	00f57733          	and	a4,a0,a5
    80006604:	00f71663          	bne	a4,a5,80006610 <misaligned_load_trap+0x66>
    80006608:	00265703          	lhu	a4,2(a2)
    8000660c:	0742                	slli	a4,a4,0x10
    8000660e:	953a                	add	a0,a0,a4
    80006610:	30069073          	csrw	mstatus,a3
    80006614:	862a                	mv	a2,a0
    80006616:	f6c43823          	sd	a2,-144(s0)
    8000661a:	f6e43423          	sd	a4,-152(s0)
  *mstatus = __mstatus;
    8000661e:	8736                	mv	a4,a3
    80006620:	f8043783          	ld	a5,-128(s0)
    80006624:	e398                	sd	a4,0(a5)
  return val;
    80006626:	f7043783          	ld	a5,-144(s0)
  union byte_array val;
  uintptr_t mstatus;
  insn_t insn = get_insn(mepc, &mstatus);
    8000662a:	fef43423          	sd	a5,-24(s0)
  uintptr_t npc = mepc + insn_len(insn);
    8000662e:	fe843783          	ld	a5,-24(s0)
    80006632:	853e                	mv	a0,a5
    80006634:	f51ff0ef          	jal	ra,80006584 <insn_len>
    80006638:	87aa                	mv	a5,a0
    8000663a:	873e                	mv	a4,a5
    8000663c:	f3843783          	ld	a5,-200(s0)
    80006640:	97ba                	add	a5,a5,a4
    80006642:	fcf43423          	sd	a5,-56(s0)
  uintptr_t addr = read_csr(mtval);
    80006646:	343027f3          	csrr	a5,mtval
    8000664a:	fcf43023          	sd	a5,-64(s0)
    8000664e:	fc043783          	ld	a5,-64(s0)
    80006652:	faf43c23          	sd	a5,-72(s0)

  int shift = 0, fp = 0, len;
    80006656:	fe042223          	sw	zero,-28(s0)
    8000665a:	fe042023          	sw	zero,-32(s0)
  if ((insn & MASK_LW) == MATCH_LW)
    8000665e:	fe843703          	ld	a4,-24(s0)
    80006662:	679d                	lui	a5,0x7
    80006664:	07f78793          	addi	a5,a5,127 # 707f <MEM_START-0x7fff8f81>
    80006668:	8f7d                	and	a4,a4,a5
    8000666a:	6789                	lui	a5,0x2
    8000666c:	078d                	addi	a5,a5,3
    8000666e:	02f71463          	bne	a4,a5,80006696 <misaligned_load_trap+0xec>
    len = 4, shift = 8*(sizeof(uintptr_t) - len);
    80006672:	4791                	li	a5,4
    80006674:	fcf42e23          	sw	a5,-36(s0)
    80006678:	fdc42783          	lw	a5,-36(s0)
    8000667c:	2781                	sext.w	a5,a5
    8000667e:	873e                	mv	a4,a5
    80006680:	4781                	li	a5,0
    80006682:	9f99                	subw	a5,a5,a4
    80006684:	0037979b          	slliw	a5,a5,0x3
    80006688:	2781                	sext.w	a5,a5
    8000668a:	0407879b          	addiw	a5,a5,64
    8000668e:	2781                	sext.w	a5,a5
    80006690:	fef42223          	sw	a5,-28(s0)
    80006694:	a4bd                	j	80006902 <misaligned_load_trap+0x358>
#if __riscv_xlen == 64
  else if ((insn & MASK_LD) == MATCH_LD)
    80006696:	fe843703          	ld	a4,-24(s0)
    8000669a:	679d                	lui	a5,0x7
    8000669c:	07f78793          	addi	a5,a5,127 # 707f <MEM_START-0x7fff8f81>
    800066a0:	8f7d                	and	a4,a4,a5
    800066a2:	678d                	lui	a5,0x3
    800066a4:	078d                	addi	a5,a5,3
    800066a6:	02f71463          	bne	a4,a5,800066ce <misaligned_load_trap+0x124>
    len = 8, shift = 8*(sizeof(uintptr_t) - len);
    800066aa:	47a1                	li	a5,8
    800066ac:	fcf42e23          	sw	a5,-36(s0)
    800066b0:	fdc42783          	lw	a5,-36(s0)
    800066b4:	2781                	sext.w	a5,a5
    800066b6:	873e                	mv	a4,a5
    800066b8:	4781                	li	a5,0
    800066ba:	9f99                	subw	a5,a5,a4
    800066bc:	0037979b          	slliw	a5,a5,0x3
    800066c0:	2781                	sext.w	a5,a5
    800066c2:	0407879b          	addiw	a5,a5,64
    800066c6:	2781                	sext.w	a5,a5
    800066c8:	fef42223          	sw	a5,-28(s0)
    800066cc:	ac1d                	j	80006902 <misaligned_load_trap+0x358>
  else if ((insn & MASK_LWU) == MATCH_LWU)
    800066ce:	fe843703          	ld	a4,-24(s0)
    800066d2:	679d                	lui	a5,0x7
    800066d4:	07f78793          	addi	a5,a5,127 # 707f <MEM_START-0x7fff8f81>
    800066d8:	8f7d                	and	a4,a4,a5
    800066da:	6799                	lui	a5,0x6
    800066dc:	078d                	addi	a5,a5,3
    800066de:	00f71663          	bne	a4,a5,800066ea <misaligned_load_trap+0x140>
    len = 4;
    800066e2:	4791                	li	a5,4
    800066e4:	fcf42e23          	sw	a5,-36(s0)
    800066e8:	ac29                	j	80006902 <misaligned_load_trap+0x358>
#endif
#ifdef PK_ENABLE_FP_EMULATION
  else if ((insn & MASK_FLD) == MATCH_FLD)
    800066ea:	fe843703          	ld	a4,-24(s0)
    800066ee:	679d                	lui	a5,0x7
    800066f0:	07f78793          	addi	a5,a5,127 # 707f <MEM_START-0x7fff8f81>
    800066f4:	8f7d                	and	a4,a4,a5
    800066f6:	678d                	lui	a5,0x3
    800066f8:	079d                	addi	a5,a5,7
    800066fa:	00f71963          	bne	a4,a5,8000670c <misaligned_load_trap+0x162>
    fp = 1, len = 8;
    800066fe:	4785                	li	a5,1
    80006700:	fef42023          	sw	a5,-32(s0)
    80006704:	47a1                	li	a5,8
    80006706:	fcf42e23          	sw	a5,-36(s0)
    8000670a:	aae5                	j	80006902 <misaligned_load_trap+0x358>
  else if ((insn & MASK_FLW) == MATCH_FLW)
    8000670c:	fe843703          	ld	a4,-24(s0)
    80006710:	679d                	lui	a5,0x7
    80006712:	07f78793          	addi	a5,a5,127 # 707f <MEM_START-0x7fff8f81>
    80006716:	8f7d                	and	a4,a4,a5
    80006718:	6789                	lui	a5,0x2
    8000671a:	079d                	addi	a5,a5,7
    8000671c:	00f71963          	bne	a4,a5,8000672e <misaligned_load_trap+0x184>
    fp = 1, len = 4;
    80006720:	4785                	li	a5,1
    80006722:	fef42023          	sw	a5,-32(s0)
    80006726:	4791                	li	a5,4
    80006728:	fcf42e23          	sw	a5,-36(s0)
    8000672c:	aad9                	j	80006902 <misaligned_load_trap+0x358>
#endif
  else if ((insn & MASK_LH) == MATCH_LH)
    8000672e:	fe843703          	ld	a4,-24(s0)
    80006732:	679d                	lui	a5,0x7
    80006734:	07f78793          	addi	a5,a5,127 # 707f <MEM_START-0x7fff8f81>
    80006738:	8f7d                	and	a4,a4,a5
    8000673a:	6785                	lui	a5,0x1
    8000673c:	078d                	addi	a5,a5,3
    8000673e:	02f71463          	bne	a4,a5,80006766 <misaligned_load_trap+0x1bc>
    len = 2, shift = 8*(sizeof(uintptr_t) - len);
    80006742:	4789                	li	a5,2
    80006744:	fcf42e23          	sw	a5,-36(s0)
    80006748:	fdc42783          	lw	a5,-36(s0)
    8000674c:	2781                	sext.w	a5,a5
    8000674e:	873e                	mv	a4,a5
    80006750:	4781                	li	a5,0
    80006752:	9f99                	subw	a5,a5,a4
    80006754:	0037979b          	slliw	a5,a5,0x3
    80006758:	2781                	sext.w	a5,a5
    8000675a:	0407879b          	addiw	a5,a5,64
    8000675e:	2781                	sext.w	a5,a5
    80006760:	fef42223          	sw	a5,-28(s0)
    80006764:	aa79                	j	80006902 <misaligned_load_trap+0x358>
  else if ((insn & MASK_LHU) == MATCH_LHU)
    80006766:	fe843703          	ld	a4,-24(s0)
    8000676a:	679d                	lui	a5,0x7
    8000676c:	07f78793          	addi	a5,a5,127 # 707f <MEM_START-0x7fff8f81>
    80006770:	8f7d                	and	a4,a4,a5
    80006772:	6795                	lui	a5,0x5
    80006774:	078d                	addi	a5,a5,3
    80006776:	00f71663          	bne	a4,a5,80006782 <misaligned_load_trap+0x1d8>
    len = 2;
    8000677a:	4789                	li	a5,2
    8000677c:	fcf42e23          	sw	a5,-36(s0)
    80006780:	a249                	j	80006902 <misaligned_load_trap+0x358>
#ifdef __riscv_compressed
# if __riscv_xlen >= 64
  else if ((insn & MASK_C_LD) == MATCH_C_LD)
    80006782:	fe843703          	ld	a4,-24(s0)
    80006786:	67b9                	lui	a5,0xe
    80006788:	078d                	addi	a5,a5,3
    8000678a:	8f7d                	and	a4,a4,a5
    8000678c:	6799                	lui	a5,0x6
    8000678e:	02f71c63          	bne	a4,a5,800067c6 <misaligned_load_trap+0x21c>
    len = 8, shift = 8*(sizeof(uintptr_t) - len), insn = RVC_RS2S(insn) << SH_RD;
    80006792:	47a1                	li	a5,8
    80006794:	fcf42e23          	sw	a5,-36(s0)
    80006798:	fdc42783          	lw	a5,-36(s0)
    8000679c:	2781                	sext.w	a5,a5
    8000679e:	873e                	mv	a4,a5
    800067a0:	4781                	li	a5,0
    800067a2:	9f99                	subw	a5,a5,a4
    800067a4:	0037979b          	slliw	a5,a5,0x3
    800067a8:	2781                	sext.w	a5,a5
    800067aa:	0407879b          	addiw	a5,a5,64
    800067ae:	2781                	sext.w	a5,a5
    800067b0:	fef42223          	sw	a5,-28(s0)
    800067b4:	fe843783          	ld	a5,-24(s0)
    800067b8:	8389                	srli	a5,a5,0x2
    800067ba:	8b9d                	andi	a5,a5,7
    800067bc:	07a1                	addi	a5,a5,8
    800067be:	079e                	slli	a5,a5,0x7
    800067c0:	fef43423          	sd	a5,-24(s0)
    800067c4:	aa3d                	j	80006902 <misaligned_load_trap+0x358>
  else if ((insn & MASK_C_LDSP) == MATCH_C_LDSP && ((insn >> SH_RD) & 0x1f))
    800067c6:	fe843703          	ld	a4,-24(s0)
    800067ca:	67b9                	lui	a5,0xe
    800067cc:	078d                	addi	a5,a5,3
    800067ce:	8f7d                	and	a4,a4,a5
    800067d0:	6799                	lui	a5,0x6
    800067d2:	0789                	addi	a5,a5,2
    800067d4:	02f71963          	bne	a4,a5,80006806 <misaligned_load_trap+0x25c>
    800067d8:	fe843783          	ld	a5,-24(s0)
    800067dc:	839d                	srli	a5,a5,0x7
    800067de:	8bfd                	andi	a5,a5,31
    800067e0:	c39d                	beqz	a5,80006806 <misaligned_load_trap+0x25c>
    len = 8, shift = 8*(sizeof(uintptr_t) - len);
    800067e2:	47a1                	li	a5,8
    800067e4:	fcf42e23          	sw	a5,-36(s0)
    800067e8:	fdc42783          	lw	a5,-36(s0)
    800067ec:	2781                	sext.w	a5,a5
    800067ee:	873e                	mv	a4,a5
    800067f0:	4781                	li	a5,0
    800067f2:	9f99                	subw	a5,a5,a4
    800067f4:	0037979b          	slliw	a5,a5,0x3
    800067f8:	2781                	sext.w	a5,a5
    800067fa:	0407879b          	addiw	a5,a5,64
    800067fe:	2781                	sext.w	a5,a5
    80006800:	fef42223          	sw	a5,-28(s0)
    80006804:	a8fd                	j	80006902 <misaligned_load_trap+0x358>
# endif
  else if ((insn & MASK_C_LW) == MATCH_C_LW)
    80006806:	fe843703          	ld	a4,-24(s0)
    8000680a:	67b9                	lui	a5,0xe
    8000680c:	078d                	addi	a5,a5,3
    8000680e:	8f7d                	and	a4,a4,a5
    80006810:	6791                	lui	a5,0x4
    80006812:	02f71c63          	bne	a4,a5,8000684a <misaligned_load_trap+0x2a0>
    len = 4, shift = 8*(sizeof(uintptr_t) - len), insn = RVC_RS2S(insn) << SH_RD;
    80006816:	4791                	li	a5,4
    80006818:	fcf42e23          	sw	a5,-36(s0)
    8000681c:	fdc42783          	lw	a5,-36(s0)
    80006820:	2781                	sext.w	a5,a5
    80006822:	873e                	mv	a4,a5
    80006824:	4781                	li	a5,0
    80006826:	9f99                	subw	a5,a5,a4
    80006828:	0037979b          	slliw	a5,a5,0x3
    8000682c:	2781                	sext.w	a5,a5
    8000682e:	0407879b          	addiw	a5,a5,64
    80006832:	2781                	sext.w	a5,a5
    80006834:	fef42223          	sw	a5,-28(s0)
    80006838:	fe843783          	ld	a5,-24(s0)
    8000683c:	8389                	srli	a5,a5,0x2
    8000683e:	8b9d                	andi	a5,a5,7
    80006840:	07a1                	addi	a5,a5,8
    80006842:	079e                	slli	a5,a5,0x7
    80006844:	fef43423          	sd	a5,-24(s0)
    80006848:	a86d                	j	80006902 <misaligned_load_trap+0x358>
  else if ((insn & MASK_C_LWSP) == MATCH_C_LWSP && ((insn >> SH_RD) & 0x1f))
    8000684a:	fe843703          	ld	a4,-24(s0)
    8000684e:	67b9                	lui	a5,0xe
    80006850:	078d                	addi	a5,a5,3
    80006852:	8f7d                	and	a4,a4,a5
    80006854:	6791                	lui	a5,0x4
    80006856:	0789                	addi	a5,a5,2
    80006858:	02f71963          	bne	a4,a5,8000688a <misaligned_load_trap+0x2e0>
    8000685c:	fe843783          	ld	a5,-24(s0)
    80006860:	839d                	srli	a5,a5,0x7
    80006862:	8bfd                	andi	a5,a5,31
    80006864:	c39d                	beqz	a5,8000688a <misaligned_load_trap+0x2e0>
    len = 4, shift = 8*(sizeof(uintptr_t) - len);
    80006866:	4791                	li	a5,4
    80006868:	fcf42e23          	sw	a5,-36(s0)
    8000686c:	fdc42783          	lw	a5,-36(s0)
    80006870:	2781                	sext.w	a5,a5
    80006872:	873e                	mv	a4,a5
    80006874:	4781                	li	a5,0
    80006876:	9f99                	subw	a5,a5,a4
    80006878:	0037979b          	slliw	a5,a5,0x3
    8000687c:	2781                	sext.w	a5,a5
    8000687e:	0407879b          	addiw	a5,a5,64
    80006882:	2781                	sext.w	a5,a5
    80006884:	fef42223          	sw	a5,-28(s0)
    80006888:	a8ad                	j	80006902 <misaligned_load_trap+0x358>
# ifdef PK_ENABLE_FP_EMULATION
  else if ((insn & MASK_C_FLD) == MATCH_C_FLD)
    8000688a:	fe843703          	ld	a4,-24(s0)
    8000688e:	67b9                	lui	a5,0xe
    80006890:	078d                	addi	a5,a5,3
    80006892:	8f7d                	and	a4,a4,a5
    80006894:	6789                	lui	a5,0x2
    80006896:	02f71163          	bne	a4,a5,800068b8 <misaligned_load_trap+0x30e>
    fp = 1, len = 8, insn = RVC_RS2S(insn) << SH_RD;
    8000689a:	4785                	li	a5,1
    8000689c:	fef42023          	sw	a5,-32(s0)
    800068a0:	47a1                	li	a5,8
    800068a2:	fcf42e23          	sw	a5,-36(s0)
    800068a6:	fe843783          	ld	a5,-24(s0)
    800068aa:	8389                	srli	a5,a5,0x2
    800068ac:	8b9d                	andi	a5,a5,7
    800068ae:	07a1                	addi	a5,a5,8
    800068b0:	079e                	slli	a5,a5,0x7
    800068b2:	fef43423          	sd	a5,-24(s0)
    800068b6:	a0b1                	j	80006902 <misaligned_load_trap+0x358>
  else if ((insn & MASK_C_FLDSP) == MATCH_C_FLDSP)
    800068b8:	fe843703          	ld	a4,-24(s0)
    800068bc:	67b9                	lui	a5,0xe
    800068be:	078d                	addi	a5,a5,3
    800068c0:	8f7d                	and	a4,a4,a5
    800068c2:	6789                	lui	a5,0x2
    800068c4:	0789                	addi	a5,a5,2
    800068c6:	00f71963          	bne	a4,a5,800068d8 <misaligned_load_trap+0x32e>
    fp = 1, len = 8;
    800068ca:	4785                	li	a5,1
    800068cc:	fef42023          	sw	a5,-32(s0)
    800068d0:	47a1                	li	a5,8
    800068d2:	fcf42e23          	sw	a5,-36(s0)
    800068d6:	a035                	j	80006902 <misaligned_load_trap+0x358>
    fp = 1, len = 4;
#  endif
# endif
#endif
  else {
    mcause = CAUSE_LOAD_ACCESS;
    800068d8:	4795                	li	a5,5
    800068da:	f4f43023          	sd	a5,-192(s0)
    write_csr(mcause, mcause);
    800068de:	f4043783          	ld	a5,-192(s0)
    800068e2:	34279073          	csrw	mcause,a5
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
    800068e6:	f5843783          	ld	a5,-168(s0)
    800068ea:	fe843703          	ld	a4,-24(s0)
    800068ee:	86be                	mv	a3,a5
    800068f0:	f3843603          	ld	a2,-200(s0)
    800068f4:	f4043583          	ld	a1,-192(s0)
    800068f8:	f4843503          	ld	a0,-184(s0)
    800068fc:	99cfe0ef          	jal	ra,80004a98 <truly_illegal_insn>
    80006900:	a8d5                	j	800069f4 <misaligned_load_trap+0x44a>
  }

  val.int64 = 0;
    80006902:	f6043023          	sd	zero,-160(s0)
  for (intptr_t i = 0; i < len; i++)
    80006906:	fc043823          	sd	zero,-48(s0)
    8000690a:	a80d                	j	8000693c <misaligned_load_trap+0x392>
    val.bytes[i] = load_uint8_t((void *)(addr + i), mepc);
    8000690c:	fd043703          	ld	a4,-48(s0)
    80006910:	fb843783          	ld	a5,-72(s0)
    80006914:	97ba                	add	a5,a5,a4
    80006916:	f3843583          	ld	a1,-200(s0)
    8000691a:	853e                	mv	a0,a5
    8000691c:	bc3ff0ef          	jal	ra,800064de <load_uint8_t>
    80006920:	87aa                	mv	a5,a0
    80006922:	873e                	mv	a4,a5
    80006924:	fd043783          	ld	a5,-48(s0)
    80006928:	ff040693          	addi	a3,s0,-16
    8000692c:	97b6                	add	a5,a5,a3
    8000692e:	f6e78823          	sb	a4,-144(a5) # 1f70 <MEM_START-0x7fffe090>
  for (intptr_t i = 0; i < len; i++)
    80006932:	fd043783          	ld	a5,-48(s0)
    80006936:	0785                	addi	a5,a5,1
    80006938:	fcf43823          	sd	a5,-48(s0)
    8000693c:	fdc42783          	lw	a5,-36(s0)
    80006940:	fd043703          	ld	a4,-48(s0)
    80006944:	fcf744e3          	blt	a4,a5,8000690c <misaligned_load_trap+0x362>

  if (!fp)
    80006948:	fe042783          	lw	a5,-32(s0)
    8000694c:	2781                	sext.w	a5,a5
    8000694e:	ef8d                	bnez	a5,80006988 <misaligned_load_trap+0x3de>
#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
    SET_RD(insn, regs, (intptr_t)val.intx << shift >> shift);
    80006950:	f6043783          	ld	a5,-160(s0)
    80006954:	873e                	mv	a4,a5
    80006956:	fe442783          	lw	a5,-28(s0)
    8000695a:	00f71733          	sll	a4,a4,a5
    8000695e:	fe442783          	lw	a5,-28(s0)
    80006962:	40f756b3          	sra	a3,a4,a5
    80006966:	0f800793          	li	a5,248
    8000696a:	faf42a23          	sw	a5,-76(s0)
    8000696e:	fe843783          	ld	a5,-24(s0)
    80006972:	0047d713          	srli	a4,a5,0x4
    80006976:	fb442783          	lw	a5,-76(s0)
    8000697a:	8f7d                	and	a4,a4,a5
    8000697c:	f4843783          	ld	a5,-184(s0)
    80006980:	97ba                	add	a5,a5,a4
    80006982:	8736                	mv	a4,a3
    80006984:	e398                	sd	a4,0(a5)
    80006986:	a09d                	j	800069ec <misaligned_load_trap+0x442>
#else
    SET_RD(insn, regs, (intptr_t)val.intx >> shift);
#endif
  else if (len == 8)
    80006988:	fdc42783          	lw	a5,-36(s0)
    8000698c:	0007871b          	sext.w	a4,a5
    80006990:	47a1                	li	a5,8
    80006992:	02f71a63          	bne	a4,a5,800069c6 <misaligned_load_trap+0x41c>
    SET_F64_RD(insn, regs, val.int64);
    80006996:	f6043783          	ld	a5,-160(s0)
    8000699a:	f4f43823          	sd	a5,-176(s0)
    8000699e:	f5043783          	ld	a5,-176(s0)
    800069a2:	853e                	mv	a0,a5
    800069a4:	fe843783          	ld	a5,-24(s0)
    800069a8:	8391                	srli	a5,a5,0x4
    800069aa:	0f87f793          	andi	a5,a5,248
    800069ae:	faf43423          	sd	a5,-88(s0)
    800069b2:	fa843703          	ld	a4,-88(s0)
    800069b6:	ffffe797          	auipc	a5,0xffffe
    800069ba:	97ba                	add	a5,a5,a4
    800069bc:	e68782e7          	jalr	t0,-408(a5) # 8000481e <put_f64_reg>
    800069c0:	faf43023          	sd	a5,-96(s0)
    800069c4:	a025                	j	800069ec <misaligned_load_trap+0x442>
  else
    SET_F32_RD(insn, regs, val.int32);
    800069c6:	f6042783          	lw	a5,-160(s0)
    800069ca:	853e                	mv	a0,a5
    800069cc:	fe843783          	ld	a5,-24(s0)
    800069d0:	8391                	srli	a5,a5,0x4
    800069d2:	0f87f793          	andi	a5,a5,248
    800069d6:	f8f43c23          	sd	a5,-104(s0)
    800069da:	f9843703          	ld	a4,-104(s0)
    800069de:	ffffe797          	auipc	a5,0xffffe
    800069e2:	97ba                	add	a5,a5,a4
    800069e4:	c40782e7          	jalr	t0,-960(a5) # 8000461e <put_f32_reg>
    800069e8:	f8f43823          	sd	a5,-112(s0)

  write_csr(mepc, npc);
    800069ec:	fc843783          	ld	a5,-56(s0)
    800069f0:	34179073          	csrw	mepc,a5
}
    800069f4:	60ae                	ld	ra,200(sp)
    800069f6:	640e                	ld	s0,192(sp)
    800069f8:	6169                	addi	sp,sp,208
    800069fa:	8082                	ret

00000000800069fc <misaligned_store_trap>:

void misaligned_store_trap(uintptr_t* regs, uintptr_t mcause, uintptr_t mepc)
{
    800069fc:	7155                	addi	sp,sp,-208
    800069fe:	e586                	sd	ra,200(sp)
    80006a00:	e1a2                	sd	s0,192(sp)
    80006a02:	0980                	addi	s0,sp,208
    80006a04:	f4a43423          	sd	a0,-184(s0)
    80006a08:	f4b43023          	sd	a1,-192(s0)
    80006a0c:	f2c43c23          	sd	a2,-200(s0)
    80006a10:	f3843783          	ld	a5,-200(s0)
    80006a14:	f8f43023          	sd	a5,-128(s0)
    80006a18:	f5040793          	addi	a5,s0,-176
    80006a1c:	f6f43c23          	sd	a5,-136(s0)
  register uintptr_t __mstatus_adjust asm ("a1") = MSTATUS_MPRV | MSTATUS_MXR;
    80006a20:	000a05b7          	lui	a1,0xa0
  register uintptr_t __mepc asm ("a2") = mepc;
    80006a24:	f8043603          	ld	a2,-128(s0)
  uintptr_t rvc_mask = 3;
    80006a28:	478d                	li	a5,3
    80006a2a:	f6f43823          	sd	a5,-144(s0)
  asm ("csrrs %[mstatus], mstatus, %[mprv]\n"
    80006a2e:	f7043783          	ld	a5,-144(s0)
    80006a32:	3005a6f3          	csrrs	a3,mstatus,a1
    80006a36:	00267713          	andi	a4,a2,2
    80006a3a:	eb11                	bnez	a4,80006a4e <misaligned_store_trap+0x52>
    80006a3c:	00066503          	lwu	a0,0(a2)
    80006a40:	00f57733          	and	a4,a0,a5
    80006a44:	00f70f63          	beq	a4,a5,80006a62 <misaligned_store_trap+0x66>
    80006a48:	1542                	slli	a0,a0,0x30
    80006a4a:	9141                	srli	a0,a0,0x30
    80006a4c:	a819                	j	80006a62 <misaligned_store_trap+0x66>
    80006a4e:	00065503          	lhu	a0,0(a2)
    80006a52:	00f57733          	and	a4,a0,a5
    80006a56:	00f71663          	bne	a4,a5,80006a62 <misaligned_store_trap+0x66>
    80006a5a:	00265703          	lhu	a4,2(a2)
    80006a5e:	0742                	slli	a4,a4,0x10
    80006a60:	953a                	add	a0,a0,a4
    80006a62:	30069073          	csrw	mstatus,a3
    80006a66:	862a                	mv	a2,a0
    80006a68:	f6c43423          	sd	a2,-152(s0)
    80006a6c:	f6e43023          	sd	a4,-160(s0)
  *mstatus = __mstatus;
    80006a70:	8736                	mv	a4,a3
    80006a72:	f7843783          	ld	a5,-136(s0)
    80006a76:	e398                	sd	a4,0(a5)
  return val;
    80006a78:	f6843783          	ld	a5,-152(s0)
  union byte_array val;
  uintptr_t mstatus;
  insn_t insn = get_insn(mepc, &mstatus);
    80006a7c:	fef43023          	sd	a5,-32(s0)
  uintptr_t npc = mepc + insn_len(insn);
    80006a80:	fe043783          	ld	a5,-32(s0)
    80006a84:	853e                	mv	a0,a5
    80006a86:	affff0ef          	jal	ra,80006584 <insn_len>
    80006a8a:	87aa                	mv	a5,a0
    80006a8c:	873e                	mv	a4,a5
    80006a8e:	f3843783          	ld	a5,-200(s0)
    80006a92:	97ba                	add	a5,a5,a4
    80006a94:	fcf43c23          	sd	a5,-40(s0)
  int len;

  val.intx = GET_RS2(insn, regs);
    80006a98:	0f800793          	li	a5,248
    80006a9c:	fcf42a23          	sw	a5,-44(s0)
    80006aa0:	fe043783          	ld	a5,-32(s0)
    80006aa4:	0117d713          	srli	a4,a5,0x11
    80006aa8:	fd442783          	lw	a5,-44(s0)
    80006aac:	8f7d                	and	a4,a4,a5
    80006aae:	f4843783          	ld	a5,-184(s0)
    80006ab2:	97ba                	add	a5,a5,a4
    80006ab4:	639c                	ld	a5,0(a5)
    80006ab6:	f4f43c23          	sd	a5,-168(s0)
  if ((insn & MASK_SW) == MATCH_SW)
    80006aba:	fe043703          	ld	a4,-32(s0)
    80006abe:	679d                	lui	a5,0x7
    80006ac0:	07f78793          	addi	a5,a5,127 # 707f <MEM_START-0x7fff8f81>
    80006ac4:	8f7d                	and	a4,a4,a5
    80006ac6:	6789                	lui	a5,0x2
    80006ac8:	02378793          	addi	a5,a5,35 # 2023 <MEM_START-0x7fffdfdd>
    80006acc:	00f71663          	bne	a4,a5,80006ad8 <misaligned_store_trap+0xdc>
    len = 4;
    80006ad0:	4791                	li	a5,4
    80006ad2:	fef42623          	sw	a5,-20(s0)
    80006ad6:	a4bd                	j	80006d44 <misaligned_store_trap+0x348>
#if __riscv_xlen == 64
  else if ((insn & MASK_SD) == MATCH_SD)
    80006ad8:	fe043703          	ld	a4,-32(s0)
    80006adc:	679d                	lui	a5,0x7
    80006ade:	07f78793          	addi	a5,a5,127 # 707f <MEM_START-0x7fff8f81>
    80006ae2:	8f7d                	and	a4,a4,a5
    80006ae4:	678d                	lui	a5,0x3
    80006ae6:	02378793          	addi	a5,a5,35 # 3023 <MEM_START-0x7fffcfdd>
    80006aea:	00f71663          	bne	a4,a5,80006af6 <misaligned_store_trap+0xfa>
    len = 8;
    80006aee:	47a1                	li	a5,8
    80006af0:	fef42623          	sw	a5,-20(s0)
    80006af4:	ac81                	j	80006d44 <misaligned_store_trap+0x348>
#endif
#ifdef PK_ENABLE_FP_EMULATION
  else if ((insn & MASK_FSD) == MATCH_FSD)
    80006af6:	fe043703          	ld	a4,-32(s0)
    80006afa:	679d                	lui	a5,0x7
    80006afc:	07f78793          	addi	a5,a5,127 # 707f <MEM_START-0x7fff8f81>
    80006b00:	8f7d                	and	a4,a4,a5
    80006b02:	678d                	lui	a5,0x3
    80006b04:	02778793          	addi	a5,a5,39 # 3027 <MEM_START-0x7fffcfd9>
    80006b08:	02f71663          	bne	a4,a5,80006b34 <misaligned_store_trap+0x138>
    len = 8, val.int64 = GET_F64_RS2(insn, regs);
    80006b0c:	47a1                	li	a5,8
    80006b0e:	fef42623          	sw	a5,-20(s0)
    80006b12:	fe043783          	ld	a5,-32(s0)
    80006b16:	83c5                	srli	a5,a5,0x11
    80006b18:	0f87f793          	andi	a5,a5,248
    80006b1c:	853e                	mv	a0,a5
    80006b1e:	ffffe797          	auipc	a5,0xffffe
    80006b22:	97aa                	add	a5,a5,a0
    80006b24:	c00782e7          	jalr	t0,-1024(a5) # 8000471e <get_f64_reg>
    80006b28:	fcf43423          	sd	a5,-56(s0)
    80006b2c:	87aa                	mv	a5,a0
    80006b2e:	f4f43c23          	sd	a5,-168(s0)
    80006b32:	ac09                	j	80006d44 <misaligned_store_trap+0x348>
  else if ((insn & MASK_FSW) == MATCH_FSW)
    80006b34:	fe043703          	ld	a4,-32(s0)
    80006b38:	679d                	lui	a5,0x7
    80006b3a:	07f78793          	addi	a5,a5,127 # 707f <MEM_START-0x7fff8f81>
    80006b3e:	8f7d                	and	a4,a4,a5
    80006b40:	6789                	lui	a5,0x2
    80006b42:	02778793          	addi	a5,a5,39 # 2027 <MEM_START-0x7fffdfd9>
    80006b46:	02f71963          	bne	a4,a5,80006b78 <misaligned_store_trap+0x17c>
    len = 4, val.intx = GET_F32_RS2(insn, regs);
    80006b4a:	4791                	li	a5,4
    80006b4c:	fef42623          	sw	a5,-20(s0)
    80006b50:	fe043783          	ld	a5,-32(s0)
    80006b54:	83c5                	srli	a5,a5,0x11
    80006b56:	2781                	sext.w	a5,a5
    80006b58:	0f87f793          	andi	a5,a5,248
    80006b5c:	2781                	sext.w	a5,a5
    80006b5e:	853e                	mv	a0,a5
    80006b60:	ffffe797          	auipc	a5,0xffffe
    80006b64:	97aa                	add	a5,a5,a0
    80006b66:	9be782e7          	jalr	t0,-1602(a5) # 8000451e <get_f32_reg>
    80006b6a:	fcf43023          	sd	a5,-64(s0)
    80006b6e:	0005079b          	sext.w	a5,a0
    80006b72:	f4f43c23          	sd	a5,-168(s0)
    80006b76:	a2f9                	j	80006d44 <misaligned_store_trap+0x348>
#endif
  else if ((insn & MASK_SH) == MATCH_SH)
    80006b78:	fe043703          	ld	a4,-32(s0)
    80006b7c:	679d                	lui	a5,0x7
    80006b7e:	07f78793          	addi	a5,a5,127 # 707f <MEM_START-0x7fff8f81>
    80006b82:	8f7d                	and	a4,a4,a5
    80006b84:	6785                	lui	a5,0x1
    80006b86:	02378793          	addi	a5,a5,35 # 1023 <MEM_START-0x7fffefdd>
    80006b8a:	00f71663          	bne	a4,a5,80006b96 <misaligned_store_trap+0x19a>
    len = 2;
    80006b8e:	4789                	li	a5,2
    80006b90:	fef42623          	sw	a5,-20(s0)
    80006b94:	aa45                	j	80006d44 <misaligned_store_trap+0x348>
#ifdef __riscv_compressed
# if __riscv_xlen >= 64
  else if ((insn & MASK_C_SD) == MATCH_C_SD)
    80006b96:	fe043703          	ld	a4,-32(s0)
    80006b9a:	67b9                	lui	a5,0xe
    80006b9c:	078d                	addi	a5,a5,3
    80006b9e:	8f7d                	and	a4,a4,a5
    80006ba0:	67b9                	lui	a5,0xe
    80006ba2:	02f71a63          	bne	a4,a5,80006bd6 <misaligned_store_trap+0x1da>
    len = 8, val.intx = GET_RS2S(insn, regs);
    80006ba6:	47a1                	li	a5,8
    80006ba8:	fef42623          	sw	a5,-20(s0)
    80006bac:	0f800793          	li	a5,248
    80006bb0:	faf42e23          	sw	a5,-68(s0)
    80006bb4:	fe043783          	ld	a5,-32(s0)
    80006bb8:	8389                	srli	a5,a5,0x2
    80006bba:	8b9d                	andi	a5,a5,7
    80006bbc:	07a1                	addi	a5,a5,8
    80006bbe:	00379713          	slli	a4,a5,0x3
    80006bc2:	fbc42783          	lw	a5,-68(s0)
    80006bc6:	8f7d                	and	a4,a4,a5
    80006bc8:	f4843783          	ld	a5,-184(s0)
    80006bcc:	97ba                	add	a5,a5,a4
    80006bce:	639c                	ld	a5,0(a5)
    80006bd0:	f4f43c23          	sd	a5,-168(s0)
    80006bd4:	aa85                	j	80006d44 <misaligned_store_trap+0x348>
  else if ((insn & MASK_C_SDSP) == MATCH_C_SDSP && ((insn >> SH_RD) & 0x1f))
    80006bd6:	fe043703          	ld	a4,-32(s0)
    80006bda:	67b9                	lui	a5,0xe
    80006bdc:	078d                	addi	a5,a5,3
    80006bde:	8f7d                	and	a4,a4,a5
    80006be0:	67b9                	lui	a5,0xe
    80006be2:	0789                	addi	a5,a5,2
    80006be4:	02f71c63          	bne	a4,a5,80006c1c <misaligned_store_trap+0x220>
    80006be8:	fe043783          	ld	a5,-32(s0)
    80006bec:	839d                	srli	a5,a5,0x7
    80006bee:	8bfd                	andi	a5,a5,31
    80006bf0:	c795                	beqz	a5,80006c1c <misaligned_store_trap+0x220>
    len = 8, val.intx = GET_RS2C(insn, regs);
    80006bf2:	47a1                	li	a5,8
    80006bf4:	fef42623          	sw	a5,-20(s0)
    80006bf8:	0f800793          	li	a5,248
    80006bfc:	faf42c23          	sw	a5,-72(s0)
    80006c00:	fe043783          	ld	a5,-32(s0)
    80006c04:	00179713          	slli	a4,a5,0x1
    80006c08:	fb842783          	lw	a5,-72(s0)
    80006c0c:	8f7d                	and	a4,a4,a5
    80006c0e:	f4843783          	ld	a5,-184(s0)
    80006c12:	97ba                	add	a5,a5,a4
    80006c14:	639c                	ld	a5,0(a5)
    80006c16:	f4f43c23          	sd	a5,-168(s0)
    80006c1a:	a22d                	j	80006d44 <misaligned_store_trap+0x348>
# endif
  else if ((insn & MASK_C_SW) == MATCH_C_SW)
    80006c1c:	fe043703          	ld	a4,-32(s0)
    80006c20:	67b9                	lui	a5,0xe
    80006c22:	078d                	addi	a5,a5,3
    80006c24:	8f7d                	and	a4,a4,a5
    80006c26:	67b1                	lui	a5,0xc
    80006c28:	02f71a63          	bne	a4,a5,80006c5c <misaligned_store_trap+0x260>
    len = 4, val.intx = GET_RS2S(insn, regs);
    80006c2c:	4791                	li	a5,4
    80006c2e:	fef42623          	sw	a5,-20(s0)
    80006c32:	0f800793          	li	a5,248
    80006c36:	faf42a23          	sw	a5,-76(s0)
    80006c3a:	fe043783          	ld	a5,-32(s0)
    80006c3e:	8389                	srli	a5,a5,0x2
    80006c40:	8b9d                	andi	a5,a5,7
    80006c42:	07a1                	addi	a5,a5,8
    80006c44:	00379713          	slli	a4,a5,0x3
    80006c48:	fb442783          	lw	a5,-76(s0)
    80006c4c:	8f7d                	and	a4,a4,a5
    80006c4e:	f4843783          	ld	a5,-184(s0)
    80006c52:	97ba                	add	a5,a5,a4
    80006c54:	639c                	ld	a5,0(a5)
    80006c56:	f4f43c23          	sd	a5,-168(s0)
    80006c5a:	a0ed                	j	80006d44 <misaligned_store_trap+0x348>
  else if ((insn & MASK_C_SWSP) == MATCH_C_SWSP && ((insn >> SH_RD) & 0x1f))
    80006c5c:	fe043703          	ld	a4,-32(s0)
    80006c60:	67b9                	lui	a5,0xe
    80006c62:	078d                	addi	a5,a5,3
    80006c64:	8f7d                	and	a4,a4,a5
    80006c66:	67b1                	lui	a5,0xc
    80006c68:	0789                	addi	a5,a5,2
    80006c6a:	02f71c63          	bne	a4,a5,80006ca2 <misaligned_store_trap+0x2a6>
    80006c6e:	fe043783          	ld	a5,-32(s0)
    80006c72:	839d                	srli	a5,a5,0x7
    80006c74:	8bfd                	andi	a5,a5,31
    80006c76:	c795                	beqz	a5,80006ca2 <misaligned_store_trap+0x2a6>
    len = 4, val.intx = GET_RS2C(insn, regs);
    80006c78:	4791                	li	a5,4
    80006c7a:	fef42623          	sw	a5,-20(s0)
    80006c7e:	0f800793          	li	a5,248
    80006c82:	faf42823          	sw	a5,-80(s0)
    80006c86:	fe043783          	ld	a5,-32(s0)
    80006c8a:	00179713          	slli	a4,a5,0x1
    80006c8e:	fb042783          	lw	a5,-80(s0)
    80006c92:	8f7d                	and	a4,a4,a5
    80006c94:	f4843783          	ld	a5,-184(s0)
    80006c98:	97ba                	add	a5,a5,a4
    80006c9a:	639c                	ld	a5,0(a5)
    80006c9c:	f4f43c23          	sd	a5,-168(s0)
    80006ca0:	a055                	j	80006d44 <misaligned_store_trap+0x348>
# ifdef PK_ENABLE_FP_EMULATION
  else if ((insn & MASK_C_FSD) == MATCH_C_FSD)
    80006ca2:	fe043703          	ld	a4,-32(s0)
    80006ca6:	67b9                	lui	a5,0xe
    80006ca8:	078d                	addi	a5,a5,3
    80006caa:	8f7d                	and	a4,a4,a5
    80006cac:	67a9                	lui	a5,0xa
    80006cae:	02f71963          	bne	a4,a5,80006ce0 <misaligned_store_trap+0x2e4>
    len = 8, val.int64 = GET_F64_RS2S(insn, regs);
    80006cb2:	47a1                	li	a5,8
    80006cb4:	fef42623          	sw	a5,-20(s0)
    80006cb8:	fe043783          	ld	a5,-32(s0)
    80006cbc:	8389                	srli	a5,a5,0x2
    80006cbe:	8b9d                	andi	a5,a5,7
    80006cc0:	07a1                	addi	a5,a5,8
    80006cc2:	078e                	slli	a5,a5,0x3
    80006cc4:	0ff7f793          	andi	a5,a5,255
    80006cc8:	853e                	mv	a0,a5
    80006cca:	ffffe797          	auipc	a5,0xffffe
    80006cce:	97aa                	add	a5,a5,a0
    80006cd0:	a54782e7          	jalr	t0,-1452(a5) # 8000471e <get_f64_reg>
    80006cd4:	faf43423          	sd	a5,-88(s0)
    80006cd8:	87aa                	mv	a5,a0
    80006cda:	f4f43c23          	sd	a5,-168(s0)
    80006cde:	a09d                	j	80006d44 <misaligned_store_trap+0x348>
  else if ((insn & MASK_C_FSDSP) == MATCH_C_FSDSP)
    80006ce0:	fe043703          	ld	a4,-32(s0)
    80006ce4:	67b9                	lui	a5,0xe
    80006ce6:	078d                	addi	a5,a5,3
    80006ce8:	8f7d                	and	a4,a4,a5
    80006cea:	67a9                	lui	a5,0xa
    80006cec:	0789                	addi	a5,a5,2
    80006cee:	02f71663          	bne	a4,a5,80006d1a <misaligned_store_trap+0x31e>
    len = 8, val.int64 = GET_F64_RS2C(insn, regs);
    80006cf2:	47a1                	li	a5,8
    80006cf4:	fef42623          	sw	a5,-20(s0)
    80006cf8:	fe043783          	ld	a5,-32(s0)
    80006cfc:	0786                	slli	a5,a5,0x1
    80006cfe:	0f87f793          	andi	a5,a5,248
    80006d02:	853e                	mv	a0,a5
    80006d04:	ffffe797          	auipc	a5,0xffffe
    80006d08:	97aa                	add	a5,a5,a0
    80006d0a:	a1a782e7          	jalr	t0,-1510(a5) # 8000471e <get_f64_reg>
    80006d0e:	faf43023          	sd	a5,-96(s0)
    80006d12:	87aa                	mv	a5,a0
    80006d14:	f4f43c23          	sd	a5,-168(s0)
    80006d18:	a035                	j	80006d44 <misaligned_store_trap+0x348>
    len = 4, val.intx = GET_F32_RS2C(insn, regs);
#  endif
# endif
#endif
  else {
    mcause = CAUSE_STORE_ACCESS;
    80006d1a:	479d                	li	a5,7
    80006d1c:	f4f43023          	sd	a5,-192(s0)
    write_csr(mcause, mcause);
    80006d20:	f4043783          	ld	a5,-192(s0)
    80006d24:	34279073          	csrw	mcause,a5
    return truly_illegal_insn(regs, mcause, mepc, mstatus, insn);
    80006d28:	f5043783          	ld	a5,-176(s0)
    80006d2c:	fe043703          	ld	a4,-32(s0)
    80006d30:	86be                	mv	a3,a5
    80006d32:	f3843603          	ld	a2,-200(s0)
    80006d36:	f4043583          	ld	a1,-192(s0)
    80006d3a:	f4843503          	ld	a0,-184(s0)
    80006d3e:	d5bfd0ef          	jal	ra,80004a98 <truly_illegal_insn>
    80006d42:	a0ad                	j	80006dac <misaligned_store_trap+0x3b0>
  }

  uintptr_t addr = read_csr(mtval);
    80006d44:	343027f3          	csrr	a5,mtval
    80006d48:	f8f43c23          	sd	a5,-104(s0)
    80006d4c:	f9843783          	ld	a5,-104(s0)
    80006d50:	f8f43823          	sd	a5,-112(s0)
#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
  intptr_t offs = (len == 8? 0 : sizeof(val.intx) - len);
#else
  intptr_t offs = 0;
    80006d54:	f8043423          	sd	zero,-120(s0)
#endif
  for (int i = 0; i < len; i++)
    80006d58:	fe042423          	sw	zero,-24(s0)
    80006d5c:	a825                	j	80006d94 <misaligned_store_trap+0x398>
    store_uint8_t((void *)(addr + i), val.bytes[offs + i], mepc);
    80006d5e:	fe842703          	lw	a4,-24(s0)
    80006d62:	f9043783          	ld	a5,-112(s0)
    80006d66:	97ba                	add	a5,a5,a4
    80006d68:	86be                	mv	a3,a5
    80006d6a:	fe842703          	lw	a4,-24(s0)
    80006d6e:	f8843783          	ld	a5,-120(s0)
    80006d72:	97ba                	add	a5,a5,a4
    80006d74:	ff040713          	addi	a4,s0,-16
    80006d78:	97ba                	add	a5,a5,a4
    80006d7a:	f687c783          	lbu	a5,-152(a5)
    80006d7e:	f3843603          	ld	a2,-200(s0)
    80006d82:	85be                	mv	a1,a5
    80006d84:	8536                	mv	a0,a3
    80006d86:	f90ff0ef          	jal	ra,80006516 <store_uint8_t>
  for (int i = 0; i < len; i++)
    80006d8a:	fe842783          	lw	a5,-24(s0)
    80006d8e:	2785                	addiw	a5,a5,1
    80006d90:	fef42423          	sw	a5,-24(s0)
    80006d94:	fe842703          	lw	a4,-24(s0)
    80006d98:	fec42783          	lw	a5,-20(s0)
    80006d9c:	2701                	sext.w	a4,a4
    80006d9e:	2781                	sext.w	a5,a5
    80006da0:	faf74fe3          	blt	a4,a5,80006d5e <misaligned_store_trap+0x362>

  write_csr(mepc, npc);
    80006da4:	fd843783          	ld	a5,-40(s0)
    80006da8:	34179073          	csrw	mepc,a5
}
    80006dac:	60ae                	ld	ra,200(sp)
    80006dae:	640e                	ld	s0,192(sp)
    80006db0:	6169                	addi	sp,sp,208
    80006db2:	8082                	ret

0000000080006db4 <f32_add>:
#include "platform.h"
#include "internals.h"
#include "softfloat.h"

float32_t f32_add( float32_t a, float32_t b )
{
    80006db4:	715d                	addi	sp,sp,-80
    80006db6:	e486                	sd	ra,72(sp)
    80006db8:	e0a2                	sd	s0,64(sp)
    80006dba:	0880                	addi	s0,sp,80
    80006dbc:	faa42c23          	sw	a0,-72(s0)
    80006dc0:	fab42823          	sw	a1,-80(s0)
    uint_fast32_t uiB;
#if ! defined INLINE_LEVEL || (INLINE_LEVEL < 1)
    float32_t (*magsFuncPtr)( uint_fast32_t, uint_fast32_t );
#endif

    uA.f = a;
    80006dc4:	fb842783          	lw	a5,-72(s0)
    80006dc8:	fcf42823          	sw	a5,-48(s0)
    uiA = uA.ui;
    80006dcc:	fd042783          	lw	a5,-48(s0)
    80006dd0:	1782                	slli	a5,a5,0x20
    80006dd2:	9381                	srli	a5,a5,0x20
    80006dd4:	fef43423          	sd	a5,-24(s0)
    uB.f = b;
    80006dd8:	fb042783          	lw	a5,-80(s0)
    80006ddc:	fcf42423          	sw	a5,-56(s0)
    uiB = uB.ui;
    80006de0:	fc842783          	lw	a5,-56(s0)
    80006de4:	1782                	slli	a5,a5,0x20
    80006de6:	9381                	srli	a5,a5,0x20
    80006de8:	fef43023          	sd	a5,-32(s0)
    } else {
        return softfloat_addMagsF32( uiA, uiB );
    }
#else
    magsFuncPtr =
        signF32UI( uiA ^ uiB ) ? softfloat_subMagsF32 : softfloat_addMagsF32;
    80006dec:	fe843783          	ld	a5,-24(s0)
    80006df0:	0007871b          	sext.w	a4,a5
    80006df4:	fe043783          	ld	a5,-32(s0)
    80006df8:	2781                	sext.w	a5,a5
    80006dfa:	8fb9                	xor	a5,a5,a4
    80006dfc:	2781                	sext.w	a5,a5
    80006dfe:	2781                	sext.w	a5,a5
    80006e00:	0007d763          	bgez	a5,80006e0e <f32_add+0x5a>
    80006e04:	00004797          	auipc	a5,0x4
    80006e08:	2fc78793          	addi	a5,a5,764 # 8000b100 <softfloat_subMagsF32>
    80006e0c:	a029                	j	80006e16 <f32_add+0x62>
    80006e0e:	00002797          	auipc	a5,0x2
    80006e12:	f0a78793          	addi	a5,a5,-246 # 80008d18 <softfloat_addMagsF32>
    magsFuncPtr =
    80006e16:	fcf43c23          	sd	a5,-40(s0)
    return (*magsFuncPtr)( uiA, uiB );
    80006e1a:	fd843783          	ld	a5,-40(s0)
    80006e1e:	fe043583          	ld	a1,-32(s0)
    80006e22:	fe843503          	ld	a0,-24(s0)
    80006e26:	9782                	jalr	a5
    80006e28:	87aa                	mv	a5,a0
#endif

}
    80006e2a:	853e                	mv	a0,a5
    80006e2c:	60a6                	ld	ra,72(sp)
    80006e2e:	6406                	ld	s0,64(sp)
    80006e30:	6161                	addi	sp,sp,80
    80006e32:	8082                	ret

0000000080006e34 <f32_div>:
#include "internals.h"
#include "specialize.h"
#include "softfloat.h"

float32_t f32_div( float32_t a, float32_t b )
{
    80006e34:	7131                	addi	sp,sp,-192
    80006e36:	fd06                	sd	ra,184(sp)
    80006e38:	f922                	sd	s0,176(sp)
    80006e3a:	0180                	addi	s0,sp,192
    80006e3c:	f4a42423          	sw	a0,-184(s0)
    80006e40:	f4b42023          	sw	a1,-192(s0)
    uint_fast32_t uiZ;
    union ui32_f32 uZ;

    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    uA.f = a;
    80006e44:	f4842783          	lw	a5,-184(s0)
    80006e48:	f6f42c23          	sw	a5,-136(s0)
    uiA = uA.ui;
    80006e4c:	f7842783          	lw	a5,-136(s0)
    80006e50:	1782                	slli	a5,a5,0x20
    80006e52:	9381                	srli	a5,a5,0x20
    80006e54:	faf43823          	sd	a5,-80(s0)
    signA = signF32UI( uiA );
    80006e58:	fb043783          	ld	a5,-80(s0)
    80006e5c:	2781                	sext.w	a5,a5
    80006e5e:	01f7d79b          	srliw	a5,a5,0x1f
    80006e62:	faf407a3          	sb	a5,-81(s0)
    expA  = expF32UI( uiA );
    80006e66:	fb043783          	ld	a5,-80(s0)
    80006e6a:	83dd                	srli	a5,a5,0x17
    80006e6c:	0ff7f793          	andi	a5,a5,255
    80006e70:	fef43423          	sd	a5,-24(s0)
    sigA  = fracF32UI( uiA );
    80006e74:	fb043703          	ld	a4,-80(s0)
    80006e78:	008007b7          	lui	a5,0x800
    80006e7c:	17fd                	addi	a5,a5,-1
    80006e7e:	8ff9                	and	a5,a5,a4
    80006e80:	fef43023          	sd	a5,-32(s0)
    uB.f = b;
    80006e84:	f4042783          	lw	a5,-192(s0)
    80006e88:	f6f42823          	sw	a5,-144(s0)
    uiB = uB.ui;
    80006e8c:	f7042783          	lw	a5,-144(s0)
    80006e90:	1782                	slli	a5,a5,0x20
    80006e92:	9381                	srli	a5,a5,0x20
    80006e94:	faf43023          	sd	a5,-96(s0)
    signB = signF32UI( uiB );
    80006e98:	fa043783          	ld	a5,-96(s0)
    80006e9c:	2781                	sext.w	a5,a5
    80006e9e:	01f7d79b          	srliw	a5,a5,0x1f
    80006ea2:	f8f40fa3          	sb	a5,-97(s0)
    expB  = expF32UI( uiB );
    80006ea6:	fa043783          	ld	a5,-96(s0)
    80006eaa:	83dd                	srli	a5,a5,0x17
    80006eac:	0ff7f793          	andi	a5,a5,255
    80006eb0:	fcf43c23          	sd	a5,-40(s0)
    sigB  = fracF32UI( uiB );
    80006eb4:	fa043703          	ld	a4,-96(s0)
    80006eb8:	008007b7          	lui	a5,0x800
    80006ebc:	17fd                	addi	a5,a5,-1
    80006ebe:	8ff9                	and	a5,a5,a4
    80006ec0:	fcf43823          	sd	a5,-48(s0)
    signZ = signA ^ signB;
    80006ec4:	faf44703          	lbu	a4,-81(s0)
    80006ec8:	f9f44783          	lbu	a5,-97(s0)
    80006ecc:	8fb9                	xor	a5,a5,a4
    80006ece:	0ff7f793          	andi	a5,a5,255
    80006ed2:	2781                	sext.w	a5,a5
    80006ed4:	00f037b3          	snez	a5,a5
    80006ed8:	f8f40f23          	sb	a5,-98(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( expA == 0xFF ) {
    80006edc:	fe843703          	ld	a4,-24(s0)
    80006ee0:	0ff00793          	li	a5,255
    80006ee4:	02f71163          	bne	a4,a5,80006f06 <f32_div+0xd2>
        if ( sigA ) goto propagateNaN;
    80006ee8:	fe043783          	ld	a5,-32(s0)
    80006eec:	1a079763          	bnez	a5,8000709a <f32_div+0x266>
        if ( expB == 0xFF ) {
    80006ef0:	fd843703          	ld	a4,-40(s0)
    80006ef4:	0ff00793          	li	a5,255
    80006ef8:	1cf71763          	bne	a4,a5,800070c6 <f32_div+0x292>
            if ( sigB ) goto propagateNaN;
    80006efc:	fd043783          	ld	a5,-48(s0)
    80006f00:	1a078763          	beqz	a5,800070ae <f32_div+0x27a>
    80006f04:	aa61                	j	8000709c <f32_div+0x268>
            goto invalid;
        }
        goto infinity;
    }
    if ( expB == 0xFF ) {
    80006f06:	fd843703          	ld	a4,-40(s0)
    80006f0a:	0ff00793          	li	a5,255
    80006f0e:	00f71763          	bne	a4,a5,80006f1c <f32_div+0xe8>
        if ( sigB ) goto propagateNaN;
    80006f12:	fd043783          	ld	a5,-48(s0)
    80006f16:	1c078963          	beqz	a5,800070e8 <f32_div+0x2b4>
    80006f1a:	a249                	j	8000709c <f32_div+0x268>
        goto zero;
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( ! expB ) {
    80006f1c:	fd843783          	ld	a5,-40(s0)
    80006f20:	e3b1                	bnez	a5,80006f64 <f32_div+0x130>
        if ( ! sigB ) {
    80006f22:	fd043783          	ld	a5,-48(s0)
    80006f26:	ef89                	bnez	a5,80006f40 <f32_div+0x10c>
            if ( ! (expA | sigA) ) goto invalid;
    80006f28:	fe843703          	ld	a4,-24(s0)
    80006f2c:	fe043783          	ld	a5,-32(s0)
    80006f30:	8fd9                	or	a5,a5,a4
    80006f32:	18078063          	beqz	a5,800070b2 <f32_div+0x27e>
            softfloat_raiseFlags( softfloat_flag_infinite );
    80006f36:	001467f3          	csrrsi	a5,fflags,8
    80006f3a:	f8f43823          	sd	a5,-112(s0)
            goto infinity;
    80006f3e:	a269                	j	800070c8 <f32_div+0x294>
        }
        normExpSig = softfloat_normSubnormalF32Sig( sigB );
    80006f40:	fd043503          	ld	a0,-48(s0)
    80006f44:	372030ef          	jal	ra,8000a2b6 <softfloat_normSubnormalF32Sig>
    80006f48:	87aa                	mv	a5,a0
    80006f4a:	882e                	mv	a6,a1
    80006f4c:	f6f43023          	sd	a5,-160(s0)
    80006f50:	f7043423          	sd	a6,-152(s0)
        expB = normExpSig.exp;
    80006f54:	f6043783          	ld	a5,-160(s0)
    80006f58:	fcf43c23          	sd	a5,-40(s0)
        sigB = normExpSig.sig;
    80006f5c:	f6843783          	ld	a5,-152(s0)
    80006f60:	fcf43823          	sd	a5,-48(s0)
    }
    if ( ! expA ) {
    80006f64:	fe843783          	ld	a5,-24(s0)
    80006f68:	e79d                	bnez	a5,80006f96 <f32_div+0x162>
        if ( ! sigA ) goto zero;
    80006f6a:	fe043783          	ld	a5,-32(s0)
    80006f6e:	16078f63          	beqz	a5,800070ec <f32_div+0x2b8>
        normExpSig = softfloat_normSubnormalF32Sig( sigA );
    80006f72:	fe043503          	ld	a0,-32(s0)
    80006f76:	340030ef          	jal	ra,8000a2b6 <softfloat_normSubnormalF32Sig>
    80006f7a:	87aa                	mv	a5,a0
    80006f7c:	882e                	mv	a6,a1
    80006f7e:	f6f43023          	sd	a5,-160(s0)
    80006f82:	f7043423          	sd	a6,-152(s0)
        expA = normExpSig.exp;
    80006f86:	f6043783          	ld	a5,-160(s0)
    80006f8a:	fef43423          	sd	a5,-24(s0)
        sigA = normExpSig.sig;
    80006f8e:	f6843783          	ld	a5,-152(s0)
    80006f92:	fef43023          	sd	a5,-32(s0)
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    expZ = expA - expB + 0x7E;
    80006f96:	fe843703          	ld	a4,-24(s0)
    80006f9a:	fd843783          	ld	a5,-40(s0)
    80006f9e:	40f707b3          	sub	a5,a4,a5
    80006fa2:	07e78793          	addi	a5,a5,126 # 80007e <MEM_START-0x7f7fff82>
    80006fa6:	fcf43423          	sd	a5,-56(s0)
    sigA |= 0x00800000;
    80006faa:	fe043703          	ld	a4,-32(s0)
    80006fae:	008007b7          	lui	a5,0x800
    80006fb2:	8fd9                	or	a5,a5,a4
    80006fb4:	fef43023          	sd	a5,-32(s0)
    sigB |= 0x00800000;
    80006fb8:	fd043703          	ld	a4,-48(s0)
    80006fbc:	008007b7          	lui	a5,0x800
    80006fc0:	8fd9                	or	a5,a5,a4
    80006fc2:	fcf43823          	sd	a5,-48(s0)
        sig64A = (uint_fast64_t) sigA<<30;
    }
    sigZ = sig64A / sigB;
    if ( ! (sigZ & 0x3F) ) sigZ |= ((uint_fast64_t) sigB * sigZ != sig64A);
#else
    if ( sigA < sigB ) {
    80006fc6:	fe043703          	ld	a4,-32(s0)
    80006fca:	fd043783          	ld	a5,-48(s0)
    80006fce:	00f77d63          	bleu	a5,a4,80006fe8 <f32_div+0x1b4>
        --expZ;
    80006fd2:	fc843783          	ld	a5,-56(s0)
    80006fd6:	17fd                	addi	a5,a5,-1
    80006fd8:	fcf43423          	sd	a5,-56(s0)
        sigA <<= 8;
    80006fdc:	fe043783          	ld	a5,-32(s0)
    80006fe0:	07a2                	slli	a5,a5,0x8
    80006fe2:	fef43023          	sd	a5,-32(s0)
    80006fe6:	a031                	j	80006ff2 <f32_div+0x1be>
    } else {
        sigA <<= 7;
    80006fe8:	fe043783          	ld	a5,-32(s0)
    80006fec:	079e                	slli	a5,a5,0x7
    80006fee:	fef43023          	sd	a5,-32(s0)
    }
    sigB <<= 8;
    80006ff2:	fd043783          	ld	a5,-48(s0)
    80006ff6:	07a2                	slli	a5,a5,0x8
    80006ff8:	fcf43823          	sd	a5,-48(s0)
    sigZ = ((uint_fast64_t) sigA * softfloat_approxRecip32_1( sigB ))>>32;
    80006ffc:	fd043783          	ld	a5,-48(s0)
    80007000:	2781                	sext.w	a5,a5
    80007002:	853e                	mv	a0,a5
    80007004:	1c6020ef          	jal	ra,800091ca <softfloat_approxRecip32_1>
    80007008:	87aa                	mv	a5,a0
    8000700a:	2781                	sext.w	a5,a5
    8000700c:	02079713          	slli	a4,a5,0x20
    80007010:	9301                	srli	a4,a4,0x20
    80007012:	fe043783          	ld	a5,-32(s0)
    80007016:	02f707b3          	mul	a5,a4,a5
    8000701a:	9381                	srli	a5,a5,0x20
    8000701c:	fcf43023          	sd	a5,-64(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    sigZ += 2;
    80007020:	fc043783          	ld	a5,-64(s0)
    80007024:	0789                	addi	a5,a5,2
    80007026:	fcf43023          	sd	a5,-64(s0)
    if ( (sigZ & 0x3F) < 2 ) {
    8000702a:	fc043783          	ld	a5,-64(s0)
    8000702e:	03e7f793          	andi	a5,a5,62
    80007032:	eba9                	bnez	a5,80007084 <f32_div+0x250>
        sigZ &= ~3;
    80007034:	fc043783          	ld	a5,-64(s0)
    80007038:	9bf1                	andi	a5,a5,-4
    8000703a:	fcf43023          	sd	a5,-64(s0)
#ifdef SOFTFLOAT_FAST_INT64
        rem = ((uint_fast64_t) sigA<<31) - (uint_fast64_t) sigZ * sigB;
#else
        rem = ((uint_fast64_t) sigA<<32) - (uint_fast64_t) (sigZ<<1) * sigB;
    8000703e:	fe043783          	ld	a5,-32(s0)
    80007042:	02079713          	slli	a4,a5,0x20
    80007046:	fc043783          	ld	a5,-64(s0)
    8000704a:	00179693          	slli	a3,a5,0x1
    8000704e:	fd043783          	ld	a5,-48(s0)
    80007052:	02f687b3          	mul	a5,a3,a5
    80007056:	40f707b3          	sub	a5,a4,a5
    8000705a:	f8f43423          	sd	a5,-120(s0)
#endif
        if ( rem & UINT64_C( 0x8000000000000000 ) ) {
    8000705e:	f8843783          	ld	a5,-120(s0)
    80007062:	0007d863          	bgez	a5,80007072 <f32_div+0x23e>
            sigZ -= 4;
    80007066:	fc043783          	ld	a5,-64(s0)
    8000706a:	17f1                	addi	a5,a5,-4
    8000706c:	fcf43023          	sd	a5,-64(s0)
    80007070:	a811                	j	80007084 <f32_div+0x250>
        } else {
            if ( rem ) sigZ |= 1;
    80007072:	f8843783          	ld	a5,-120(s0)
    80007076:	c799                	beqz	a5,80007084 <f32_div+0x250>
    80007078:	fc043783          	ld	a5,-64(s0)
    8000707c:	0017e793          	ori	a5,a5,1
    80007080:	fcf43023          	sd	a5,-64(s0)
        }
    }
#endif
    return softfloat_roundPackToF32( signZ, expZ, sigZ );
    80007084:	f9e44783          	lbu	a5,-98(s0)
    80007088:	fc043603          	ld	a2,-64(s0)
    8000708c:	fc843583          	ld	a1,-56(s0)
    80007090:	853e                	mv	a0,a5
    80007092:	45c030ef          	jal	ra,8000a4ee <softfloat_roundPackToF32>
    80007096:	87aa                	mv	a5,a0
    80007098:	a8a5                	j	80007110 <f32_div+0x2dc>
        if ( sigA ) goto propagateNaN;
    8000709a:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 propagateNaN:
    uiZ = softfloat_propagateNaNF32UI( uiA, uiB );
    8000709c:	fa043583          	ld	a1,-96(s0)
    800070a0:	fb043503          	ld	a0,-80(s0)
    800070a4:	6a6040ef          	jal	ra,8000b74a <softfloat_propagateNaNF32UI>
    800070a8:	faa43c23          	sd	a0,-72(s0)
    goto uiZ;
    800070ac:	a899                	j	80007102 <f32_div+0x2ce>
            goto invalid;
    800070ae:	0001                	nop
    800070b0:	a011                	j	800070b4 <f32_div+0x280>
            if ( ! (expA | sigA) ) goto invalid;
    800070b2:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 invalid:
    softfloat_raiseFlags( softfloat_flag_invalid );
    800070b4:	001867f3          	csrrsi	a5,fflags,16
    800070b8:	f8f43023          	sd	a5,-128(s0)
    uiZ = defaultNaNF32UI;
    800070bc:	7fc007b7          	lui	a5,0x7fc00
    800070c0:	faf43c23          	sd	a5,-72(s0)
    goto uiZ;
    800070c4:	a83d                	j	80007102 <f32_div+0x2ce>
        goto infinity;
    800070c6:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 infinity:
    uiZ = packToF32UI( signZ, 0xFF, 0 );
    800070c8:	f9e44783          	lbu	a5,-98(s0)
    800070cc:	2781                	sext.w	a5,a5
    800070ce:	01f7979b          	slliw	a5,a5,0x1f
    800070d2:	0007871b          	sext.w	a4,a5
    800070d6:	7f8007b7          	lui	a5,0x7f800
    800070da:	9fb9                	addw	a5,a5,a4
    800070dc:	2781                	sext.w	a5,a5
    800070de:	1782                	slli	a5,a5,0x20
    800070e0:	9381                	srli	a5,a5,0x20
    800070e2:	faf43c23          	sd	a5,-72(s0)
    goto uiZ;
    800070e6:	a831                	j	80007102 <f32_div+0x2ce>
        goto zero;
    800070e8:	0001                	nop
    800070ea:	a011                	j	800070ee <f32_div+0x2ba>
        if ( ! sigA ) goto zero;
    800070ec:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 zero:
    uiZ = packToF32UI( signZ, 0, 0 );
    800070ee:	f9e44783          	lbu	a5,-98(s0)
    800070f2:	2781                	sext.w	a5,a5
    800070f4:	01f7979b          	slliw	a5,a5,0x1f
    800070f8:	2781                	sext.w	a5,a5
    800070fa:	1782                	slli	a5,a5,0x20
    800070fc:	9381                	srli	a5,a5,0x20
    800070fe:	faf43c23          	sd	a5,-72(s0)
 uiZ:
    uZ.ui = uiZ;
    80007102:	fb843783          	ld	a5,-72(s0)
    80007106:	2781                	sext.w	a5,a5
    80007108:	f4f42c23          	sw	a5,-168(s0)
    return uZ.f;
    8000710c:	f5842783          	lw	a5,-168(s0)

}
    80007110:	853e                	mv	a0,a5
    80007112:	70ea                	ld	ra,184(sp)
    80007114:	744a                	ld	s0,176(sp)
    80007116:	6129                	addi	sp,sp,192
    80007118:	8082                	ret

000000008000711a <f32_eq>:
#include "internals.h"
#include "specialize.h"
#include "softfloat.h"

bool f32_eq( float32_t a, float32_t b )
{
    8000711a:	715d                	addi	sp,sp,-80
    8000711c:	e4a2                	sd	s0,72(sp)
    8000711e:	0880                	addi	s0,sp,80
    80007120:	faa42c23          	sw	a0,-72(s0)
    80007124:	fab42823          	sw	a1,-80(s0)
    union ui32_f32 uA;
    uint_fast32_t uiA;
    union ui32_f32 uB;
    uint_fast32_t uiB;

    uA.f = a;
    80007128:	fb842783          	lw	a5,-72(s0)
    8000712c:	fcf42823          	sw	a5,-48(s0)
    uiA = uA.ui;
    80007130:	fd042783          	lw	a5,-48(s0)
    80007134:	1782                	slli	a5,a5,0x20
    80007136:	9381                	srli	a5,a5,0x20
    80007138:	fef43423          	sd	a5,-24(s0)
    uB.f = b;
    8000713c:	fb042783          	lw	a5,-80(s0)
    80007140:	fcf42423          	sw	a5,-56(s0)
    uiB = uB.ui;
    80007144:	fc842783          	lw	a5,-56(s0)
    80007148:	1782                	slli	a5,a5,0x20
    8000714a:	9381                	srli	a5,a5,0x20
    8000714c:	fef43023          	sd	a5,-32(s0)
    if ( isNaNF32UI( uiA ) || isNaNF32UI( uiB ) ) {
    80007150:	fe843783          	ld	a5,-24(s0)
    80007154:	fff7c713          	not	a4,a5
    80007158:	7f8007b7          	lui	a5,0x7f800
    8000715c:	8ff9                	and	a5,a5,a4
    8000715e:	eb81                	bnez	a5,8000716e <f32_eq+0x54>
    80007160:	fe843703          	ld	a4,-24(s0)
    80007164:	008007b7          	lui	a5,0x800
    80007168:	17fd                	addi	a5,a5,-1
    8000716a:	8ff9                	and	a5,a5,a4
    8000716c:	e385                	bnez	a5,8000718c <f32_eq+0x72>
    8000716e:	fe043783          	ld	a5,-32(s0)
    80007172:	fff7c713          	not	a4,a5
    80007176:	7f8007b7          	lui	a5,0x7f800
    8000717a:	8ff9                	and	a5,a5,a4
    8000717c:	efb1                	bnez	a5,800071d8 <f32_eq+0xbe>
    8000717e:	fe043703          	ld	a4,-32(s0)
    80007182:	008007b7          	lui	a5,0x800
    80007186:	17fd                	addi	a5,a5,-1
    80007188:	8ff9                	and	a5,a5,a4
    8000718a:	c7b9                	beqz	a5,800071d8 <f32_eq+0xbe>
        if (
            softfloat_isSigNaNF32UI( uiA ) || softfloat_isSigNaNF32UI( uiB )
    8000718c:	fe843703          	ld	a4,-24(s0)
    80007190:	7fc007b7          	lui	a5,0x7fc00
    80007194:	8f7d                	and	a4,a4,a5
        if (
    80007196:	7f8007b7          	lui	a5,0x7f800
    8000719a:	00f71963          	bne	a4,a5,800071ac <f32_eq+0x92>
            softfloat_isSigNaNF32UI( uiA ) || softfloat_isSigNaNF32UI( uiB )
    8000719e:	fe843703          	ld	a4,-24(s0)
    800071a2:	004007b7          	lui	a5,0x400
    800071a6:	17fd                	addi	a5,a5,-1
    800071a8:	8ff9                	and	a5,a5,a4
    800071aa:	e38d                	bnez	a5,800071cc <f32_eq+0xb2>
    800071ac:	fe043703          	ld	a4,-32(s0)
    800071b0:	7fc007b7          	lui	a5,0x7fc00
    800071b4:	8f7d                	and	a4,a4,a5
    800071b6:	7f8007b7          	lui	a5,0x7f800
    800071ba:	00f71d63          	bne	a4,a5,800071d4 <f32_eq+0xba>
    800071be:	fe043703          	ld	a4,-32(s0)
    800071c2:	004007b7          	lui	a5,0x400
    800071c6:	17fd                	addi	a5,a5,-1
    800071c8:	8ff9                	and	a5,a5,a4
    800071ca:	c789                	beqz	a5,800071d4 <f32_eq+0xba>
        ) {
            softfloat_raiseFlags( softfloat_flag_invalid );
    800071cc:	001867f3          	csrrsi	a5,fflags,16
    800071d0:	fcf43c23          	sd	a5,-40(s0)
        }
        return false;
    800071d4:	4781                	li	a5,0
    800071d6:	a815                	j	8000720a <f32_eq+0xf0>
    }
    return (uiA == uiB) || ! (uint32_t) ((uiA | uiB)<<1);
    800071d8:	fe843703          	ld	a4,-24(s0)
    800071dc:	fe043783          	ld	a5,-32(s0)
    800071e0:	00f70f63          	beq	a4,a5,800071fe <f32_eq+0xe4>
    800071e4:	fe843783          	ld	a5,-24(s0)
    800071e8:	0007871b          	sext.w	a4,a5
    800071ec:	fe043783          	ld	a5,-32(s0)
    800071f0:	2781                	sext.w	a5,a5
    800071f2:	8fd9                	or	a5,a5,a4
    800071f4:	2781                	sext.w	a5,a5
    800071f6:	0017979b          	slliw	a5,a5,0x1
    800071fa:	2781                	sext.w	a5,a5
    800071fc:	e399                	bnez	a5,80007202 <f32_eq+0xe8>
    800071fe:	4785                	li	a5,1
    80007200:	a011                	j	80007204 <f32_eq+0xea>
    80007202:	4781                	li	a5,0
    80007204:	8b85                	andi	a5,a5,1
    80007206:	0ff7f793          	andi	a5,a5,255

}
    8000720a:	853e                	mv	a0,a5
    8000720c:	6426                	ld	s0,72(sp)
    8000720e:	6161                	addi	sp,sp,80
    80007210:	8082                	ret

0000000080007212 <f32_lt>:
#include "platform.h"
#include "internals.h"
#include "softfloat.h"

bool f32_lt( float32_t a, float32_t b )
{
    80007212:	715d                	addi	sp,sp,-80
    80007214:	e4a2                	sd	s0,72(sp)
    80007216:	0880                	addi	s0,sp,80
    80007218:	faa42c23          	sw	a0,-72(s0)
    8000721c:	fab42823          	sw	a1,-80(s0)
    uint_fast32_t uiA;
    union ui32_f32 uB;
    uint_fast32_t uiB;
    bool signA, signB;

    uA.f = a;
    80007220:	fb842783          	lw	a5,-72(s0)
    80007224:	fcf42423          	sw	a5,-56(s0)
    uiA = uA.ui;
    80007228:	fc842783          	lw	a5,-56(s0)
    8000722c:	1782                	slli	a5,a5,0x20
    8000722e:	9381                	srli	a5,a5,0x20
    80007230:	fef43423          	sd	a5,-24(s0)
    uB.f = b;
    80007234:	fb042783          	lw	a5,-80(s0)
    80007238:	fcf42023          	sw	a5,-64(s0)
    uiB = uB.ui;
    8000723c:	fc042783          	lw	a5,-64(s0)
    80007240:	1782                	slli	a5,a5,0x20
    80007242:	9381                	srli	a5,a5,0x20
    80007244:	fef43023          	sd	a5,-32(s0)
    if ( isNaNF32UI( uiA ) || isNaNF32UI( uiB ) ) {
    80007248:	fe843783          	ld	a5,-24(s0)
    8000724c:	fff7c713          	not	a4,a5
    80007250:	7f8007b7          	lui	a5,0x7f800
    80007254:	8ff9                	and	a5,a5,a4
    80007256:	eb81                	bnez	a5,80007266 <f32_lt+0x54>
    80007258:	fe843703          	ld	a4,-24(s0)
    8000725c:	008007b7          	lui	a5,0x800
    80007260:	17fd                	addi	a5,a5,-1
    80007262:	8ff9                	and	a5,a5,a4
    80007264:	e385                	bnez	a5,80007284 <f32_lt+0x72>
    80007266:	fe043783          	ld	a5,-32(s0)
    8000726a:	fff7c713          	not	a4,a5
    8000726e:	7f8007b7          	lui	a5,0x7f800
    80007272:	8ff9                	and	a5,a5,a4
    80007274:	ef91                	bnez	a5,80007290 <f32_lt+0x7e>
    80007276:	fe043703          	ld	a4,-32(s0)
    8000727a:	008007b7          	lui	a5,0x800
    8000727e:	17fd                	addi	a5,a5,-1
    80007280:	8ff9                	and	a5,a5,a4
    80007282:	c799                	beqz	a5,80007290 <f32_lt+0x7e>
        softfloat_raiseFlags( softfloat_flag_invalid );
    80007284:	001867f3          	csrrsi	a5,fflags,16
    80007288:	fcf43823          	sd	a5,-48(s0)
        return false;
    8000728c:	4781                	li	a5,0
    8000728e:	a871                	j	8000732a <f32_lt+0x118>
    }
    signA = signF32UI( uiA );
    80007290:	fe843783          	ld	a5,-24(s0)
    80007294:	2781                	sext.w	a5,a5
    80007296:	01f7d79b          	srliw	a5,a5,0x1f
    8000729a:	fcf40fa3          	sb	a5,-33(s0)
    signB = signF32UI( uiB );
    8000729e:	fe043783          	ld	a5,-32(s0)
    800072a2:	2781                	sext.w	a5,a5
    800072a4:	01f7d79b          	srliw	a5,a5,0x1f
    800072a8:	fcf40f23          	sb	a5,-34(s0)
    return
        (signA != signB) ? signA && ((uint32_t) ((uiA | uiB)<<1) != 0)
            : (uiA != uiB) && (signA ^ (uiA < uiB));
    800072ac:	fdf44703          	lbu	a4,-33(s0)
    800072b0:	fde44783          	lbu	a5,-34(s0)
    800072b4:	0ff77713          	andi	a4,a4,255
    800072b8:	0ff7f793          	andi	a5,a5,255
    800072bc:	02f70b63          	beq	a4,a5,800072f2 <f32_lt+0xe0>
        (signA != signB) ? signA && ((uint32_t) ((uiA | uiB)<<1) != 0)
    800072c0:	fdf44783          	lbu	a5,-33(s0)
    800072c4:	0ff7f793          	andi	a5,a5,255
    800072c8:	c385                	beqz	a5,800072e8 <f32_lt+0xd6>
    800072ca:	fe843783          	ld	a5,-24(s0)
    800072ce:	0007871b          	sext.w	a4,a5
    800072d2:	fe043783          	ld	a5,-32(s0)
    800072d6:	2781                	sext.w	a5,a5
    800072d8:	8fd9                	or	a5,a5,a4
    800072da:	2781                	sext.w	a5,a5
    800072dc:	0017979b          	slliw	a5,a5,0x1
    800072e0:	2781                	sext.w	a5,a5
    800072e2:	c399                	beqz	a5,800072e8 <f32_lt+0xd6>
    800072e4:	4785                	li	a5,1
    800072e6:	a011                	j	800072ea <f32_lt+0xd8>
    800072e8:	4781                	li	a5,0
            : (uiA != uiB) && (signA ^ (uiA < uiB));
    800072ea:	8b85                	andi	a5,a5,1
    800072ec:	0ff7f793          	andi	a5,a5,255
    800072f0:	a82d                	j	8000732a <f32_lt+0x118>
    800072f2:	fe843703          	ld	a4,-24(s0)
    800072f6:	fe043783          	ld	a5,-32(s0)
    800072fa:	02f70463          	beq	a4,a5,80007322 <f32_lt+0x110>
    800072fe:	fdf44783          	lbu	a5,-33(s0)
    80007302:	0007869b          	sext.w	a3,a5
    80007306:	fe843703          	ld	a4,-24(s0)
    8000730a:	fe043783          	ld	a5,-32(s0)
    8000730e:	00f737b3          	sltu	a5,a4,a5
    80007312:	0ff7f793          	andi	a5,a5,255
    80007316:	2781                	sext.w	a5,a5
    80007318:	8736                	mv	a4,a3
    8000731a:	00f70463          	beq	a4,a5,80007322 <f32_lt+0x110>
    8000731e:	4785                	li	a5,1
    80007320:	a011                	j	80007324 <f32_lt+0x112>
    80007322:	4781                	li	a5,0
    80007324:	8b85                	andi	a5,a5,1
    80007326:	0ff7f793          	andi	a5,a5,255

}
    8000732a:	853e                	mv	a0,a5
    8000732c:	6426                	ld	s0,72(sp)
    8000732e:	6161                	addi	sp,sp,80
    80007330:	8082                	ret

0000000080007332 <f32_lt_quiet>:
#include "internals.h"
#include "specialize.h"
#include "softfloat.h"

bool f32_lt_quiet( float32_t a, float32_t b )
{
    80007332:	715d                	addi	sp,sp,-80
    80007334:	e4a2                	sd	s0,72(sp)
    80007336:	0880                	addi	s0,sp,80
    80007338:	faa42c23          	sw	a0,-72(s0)
    8000733c:	fab42823          	sw	a1,-80(s0)
    uint_fast32_t uiA;
    union ui32_f32 uB;
    uint_fast32_t uiB;
    bool signA, signB;

    uA.f = a;
    80007340:	fb842783          	lw	a5,-72(s0)
    80007344:	fcf42423          	sw	a5,-56(s0)
    uiA = uA.ui;
    80007348:	fc842783          	lw	a5,-56(s0)
    8000734c:	1782                	slli	a5,a5,0x20
    8000734e:	9381                	srli	a5,a5,0x20
    80007350:	fef43423          	sd	a5,-24(s0)
    uB.f = b;
    80007354:	fb042783          	lw	a5,-80(s0)
    80007358:	fcf42023          	sw	a5,-64(s0)
    uiB = uB.ui;
    8000735c:	fc042783          	lw	a5,-64(s0)
    80007360:	1782                	slli	a5,a5,0x20
    80007362:	9381                	srli	a5,a5,0x20
    80007364:	fef43023          	sd	a5,-32(s0)
    if ( isNaNF32UI( uiA ) || isNaNF32UI( uiB ) ) {
    80007368:	fe843783          	ld	a5,-24(s0)
    8000736c:	fff7c713          	not	a4,a5
    80007370:	7f8007b7          	lui	a5,0x7f800
    80007374:	8ff9                	and	a5,a5,a4
    80007376:	eb81                	bnez	a5,80007386 <f32_lt_quiet+0x54>
    80007378:	fe843703          	ld	a4,-24(s0)
    8000737c:	008007b7          	lui	a5,0x800
    80007380:	17fd                	addi	a5,a5,-1
    80007382:	8ff9                	and	a5,a5,a4
    80007384:	e385                	bnez	a5,800073a4 <f32_lt_quiet+0x72>
    80007386:	fe043783          	ld	a5,-32(s0)
    8000738a:	fff7c713          	not	a4,a5
    8000738e:	7f8007b7          	lui	a5,0x7f800
    80007392:	8ff9                	and	a5,a5,a4
    80007394:	efb1                	bnez	a5,800073f0 <f32_lt_quiet+0xbe>
    80007396:	fe043703          	ld	a4,-32(s0)
    8000739a:	008007b7          	lui	a5,0x800
    8000739e:	17fd                	addi	a5,a5,-1
    800073a0:	8ff9                	and	a5,a5,a4
    800073a2:	c7b9                	beqz	a5,800073f0 <f32_lt_quiet+0xbe>
        if (
            softfloat_isSigNaNF32UI( uiA ) || softfloat_isSigNaNF32UI( uiB )
    800073a4:	fe843703          	ld	a4,-24(s0)
    800073a8:	7fc007b7          	lui	a5,0x7fc00
    800073ac:	8f7d                	and	a4,a4,a5
        if (
    800073ae:	7f8007b7          	lui	a5,0x7f800
    800073b2:	00f71963          	bne	a4,a5,800073c4 <f32_lt_quiet+0x92>
            softfloat_isSigNaNF32UI( uiA ) || softfloat_isSigNaNF32UI( uiB )
    800073b6:	fe843703          	ld	a4,-24(s0)
    800073ba:	004007b7          	lui	a5,0x400
    800073be:	17fd                	addi	a5,a5,-1
    800073c0:	8ff9                	and	a5,a5,a4
    800073c2:	e38d                	bnez	a5,800073e4 <f32_lt_quiet+0xb2>
    800073c4:	fe043703          	ld	a4,-32(s0)
    800073c8:	7fc007b7          	lui	a5,0x7fc00
    800073cc:	8f7d                	and	a4,a4,a5
    800073ce:	7f8007b7          	lui	a5,0x7f800
    800073d2:	00f71d63          	bne	a4,a5,800073ec <f32_lt_quiet+0xba>
    800073d6:	fe043703          	ld	a4,-32(s0)
    800073da:	004007b7          	lui	a5,0x400
    800073de:	17fd                	addi	a5,a5,-1
    800073e0:	8ff9                	and	a5,a5,a4
    800073e2:	c789                	beqz	a5,800073ec <f32_lt_quiet+0xba>
        ) {
            softfloat_raiseFlags( softfloat_flag_invalid );
    800073e4:	001867f3          	csrrsi	a5,fflags,16
    800073e8:	fcf43823          	sd	a5,-48(s0)
        }
        return false;
    800073ec:	4781                	li	a5,0
    800073ee:	a871                	j	8000748a <f32_lt_quiet+0x158>
    }
    signA = signF32UI( uiA );
    800073f0:	fe843783          	ld	a5,-24(s0)
    800073f4:	2781                	sext.w	a5,a5
    800073f6:	01f7d79b          	srliw	a5,a5,0x1f
    800073fa:	fcf40fa3          	sb	a5,-33(s0)
    signB = signF32UI( uiB );
    800073fe:	fe043783          	ld	a5,-32(s0)
    80007402:	2781                	sext.w	a5,a5
    80007404:	01f7d79b          	srliw	a5,a5,0x1f
    80007408:	fcf40f23          	sb	a5,-34(s0)
    return
        (signA != signB) ? signA && ((uint32_t) ((uiA | uiB)<<1) != 0)
            : (uiA != uiB) && (signA ^ (uiA < uiB));
    8000740c:	fdf44703          	lbu	a4,-33(s0)
    80007410:	fde44783          	lbu	a5,-34(s0)
    80007414:	0ff77713          	andi	a4,a4,255
    80007418:	0ff7f793          	andi	a5,a5,255
    8000741c:	02f70b63          	beq	a4,a5,80007452 <f32_lt_quiet+0x120>
        (signA != signB) ? signA && ((uint32_t) ((uiA | uiB)<<1) != 0)
    80007420:	fdf44783          	lbu	a5,-33(s0)
    80007424:	0ff7f793          	andi	a5,a5,255
    80007428:	c385                	beqz	a5,80007448 <f32_lt_quiet+0x116>
    8000742a:	fe843783          	ld	a5,-24(s0)
    8000742e:	0007871b          	sext.w	a4,a5
    80007432:	fe043783          	ld	a5,-32(s0)
    80007436:	2781                	sext.w	a5,a5
    80007438:	8fd9                	or	a5,a5,a4
    8000743a:	2781                	sext.w	a5,a5
    8000743c:	0017979b          	slliw	a5,a5,0x1
    80007440:	2781                	sext.w	a5,a5
    80007442:	c399                	beqz	a5,80007448 <f32_lt_quiet+0x116>
    80007444:	4785                	li	a5,1
    80007446:	a011                	j	8000744a <f32_lt_quiet+0x118>
    80007448:	4781                	li	a5,0
            : (uiA != uiB) && (signA ^ (uiA < uiB));
    8000744a:	8b85                	andi	a5,a5,1
    8000744c:	0ff7f793          	andi	a5,a5,255
    80007450:	a82d                	j	8000748a <f32_lt_quiet+0x158>
    80007452:	fe843703          	ld	a4,-24(s0)
    80007456:	fe043783          	ld	a5,-32(s0)
    8000745a:	02f70463          	beq	a4,a5,80007482 <f32_lt_quiet+0x150>
    8000745e:	fdf44783          	lbu	a5,-33(s0)
    80007462:	0007869b          	sext.w	a3,a5
    80007466:	fe843703          	ld	a4,-24(s0)
    8000746a:	fe043783          	ld	a5,-32(s0)
    8000746e:	00f737b3          	sltu	a5,a4,a5
    80007472:	0ff7f793          	andi	a5,a5,255
    80007476:	2781                	sext.w	a5,a5
    80007478:	8736                	mv	a4,a3
    8000747a:	00f70463          	beq	a4,a5,80007482 <f32_lt_quiet+0x150>
    8000747e:	4785                	li	a5,1
    80007480:	a011                	j	80007484 <f32_lt_quiet+0x152>
    80007482:	4781                	li	a5,0
    80007484:	8b85                	andi	a5,a5,1
    80007486:	0ff7f793          	andi	a5,a5,255

}
    8000748a:	853e                	mv	a0,a5
    8000748c:	6426                	ld	s0,72(sp)
    8000748e:	6161                	addi	sp,sp,80
    80007490:	8082                	ret

0000000080007492 <f32_mul>:
#include "internals.h"
#include "specialize.h"
#include "softfloat.h"

float32_t f32_mul( float32_t a, float32_t b )
{
    80007492:	7171                	addi	sp,sp,-176
    80007494:	f506                	sd	ra,168(sp)
    80007496:	f122                	sd	s0,160(sp)
    80007498:	1900                	addi	s0,sp,176
    8000749a:	f4a42c23          	sw	a0,-168(s0)
    8000749e:	f4b42823          	sw	a1,-176(s0)
    uint_fast32_t sigZ, uiZ;
    union ui32_f32 uZ;

    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    uA.f = a;
    800074a2:	f5842783          	lw	a5,-168(s0)
    800074a6:	f8f42023          	sw	a5,-128(s0)
    uiA = uA.ui;
    800074aa:	f8042783          	lw	a5,-128(s0)
    800074ae:	1782                	slli	a5,a5,0x20
    800074b0:	9381                	srli	a5,a5,0x20
    800074b2:	faf43423          	sd	a5,-88(s0)
    signA = signF32UI( uiA );
    800074b6:	fa843783          	ld	a5,-88(s0)
    800074ba:	2781                	sext.w	a5,a5
    800074bc:	01f7d79b          	srliw	a5,a5,0x1f
    800074c0:	faf403a3          	sb	a5,-89(s0)
    expA  = expF32UI( uiA );
    800074c4:	fa843783          	ld	a5,-88(s0)
    800074c8:	83dd                	srli	a5,a5,0x17
    800074ca:	0ff7f793          	andi	a5,a5,255
    800074ce:	fef43423          	sd	a5,-24(s0)
    sigA  = fracF32UI( uiA );
    800074d2:	fa843703          	ld	a4,-88(s0)
    800074d6:	008007b7          	lui	a5,0x800
    800074da:	17fd                	addi	a5,a5,-1
    800074dc:	8ff9                	and	a5,a5,a4
    800074de:	fef43023          	sd	a5,-32(s0)
    uB.f = b;
    800074e2:	f5042783          	lw	a5,-176(s0)
    800074e6:	f6f42c23          	sw	a5,-136(s0)
    uiB = uB.ui;
    800074ea:	f7842783          	lw	a5,-136(s0)
    800074ee:	1782                	slli	a5,a5,0x20
    800074f0:	9381                	srli	a5,a5,0x20
    800074f2:	f8f43c23          	sd	a5,-104(s0)
    signB = signF32UI( uiB );
    800074f6:	f9843783          	ld	a5,-104(s0)
    800074fa:	2781                	sext.w	a5,a5
    800074fc:	01f7d79b          	srliw	a5,a5,0x1f
    80007500:	f8f40ba3          	sb	a5,-105(s0)
    expB  = expF32UI( uiB );
    80007504:	f9843783          	ld	a5,-104(s0)
    80007508:	83dd                	srli	a5,a5,0x17
    8000750a:	0ff7f793          	andi	a5,a5,255
    8000750e:	fcf43c23          	sd	a5,-40(s0)
    sigB  = fracF32UI( uiB );
    80007512:	f9843703          	ld	a4,-104(s0)
    80007516:	008007b7          	lui	a5,0x800
    8000751a:	17fd                	addi	a5,a5,-1
    8000751c:	8ff9                	and	a5,a5,a4
    8000751e:	fcf43823          	sd	a5,-48(s0)
    signZ = signA ^ signB;
    80007522:	fa744703          	lbu	a4,-89(s0)
    80007526:	f9744783          	lbu	a5,-105(s0)
    8000752a:	8fb9                	xor	a5,a5,a4
    8000752c:	0ff7f793          	andi	a5,a5,255
    80007530:	2781                	sext.w	a5,a5
    80007532:	00f037b3          	snez	a5,a5
    80007536:	f8f40b23          	sb	a5,-106(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( expA == 0xFF ) {
    8000753a:	fe843703          	ld	a4,-24(s0)
    8000753e:	0ff00793          	li	a5,255
    80007542:	02f71863          	bne	a4,a5,80007572 <f32_mul+0xe0>
        if ( sigA || ((expB == 0xFF) && sigB) ) goto propagateNaN;
    80007546:	fe043783          	ld	a5,-32(s0)
    8000754a:	12079b63          	bnez	a5,80007680 <f32_mul+0x1ee>
    8000754e:	fd843703          	ld	a4,-40(s0)
    80007552:	0ff00793          	li	a5,255
    80007556:	00f71663          	bne	a4,a5,80007562 <f32_mul+0xd0>
    8000755a:	fd043783          	ld	a5,-48(s0)
    8000755e:	12079163          	bnez	a5,80007680 <f32_mul+0x1ee>
        magBits = expB | sigB;
    80007562:	fd843783          	ld	a5,-40(s0)
    80007566:	fd043703          	ld	a4,-48(s0)
    8000756a:	8fd9                	or	a5,a5,a4
    8000756c:	fcf43423          	sd	a5,-56(s0)
        goto infArg;
    80007570:	a225                	j	80007698 <f32_mul+0x206>
    }
    if ( expB == 0xFF ) {
    80007572:	fd843703          	ld	a4,-40(s0)
    80007576:	0ff00793          	li	a5,255
    8000757a:	00f71e63          	bne	a4,a5,80007596 <f32_mul+0x104>
        if ( sigB ) goto propagateNaN;
    8000757e:	fd043783          	ld	a5,-48(s0)
    80007582:	10079163          	bnez	a5,80007684 <f32_mul+0x1f2>
        magBits = expA | sigA;
    80007586:	fe843783          	ld	a5,-24(s0)
    8000758a:	fe043703          	ld	a4,-32(s0)
    8000758e:	8fd9                	or	a5,a5,a4
    80007590:	fcf43423          	sd	a5,-56(s0)
        goto infArg;
    80007594:	a211                	j	80007698 <f32_mul+0x206>
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( ! expA ) {
    80007596:	fe843783          	ld	a5,-24(s0)
    8000759a:	e79d                	bnez	a5,800075c8 <f32_mul+0x136>
        if ( ! sigA ) goto zero;
    8000759c:	fe043783          	ld	a5,-32(s0)
    800075a0:	12078863          	beqz	a5,800076d0 <f32_mul+0x23e>
        normExpSig = softfloat_normSubnormalF32Sig( sigA );
    800075a4:	fe043503          	ld	a0,-32(s0)
    800075a8:	50f020ef          	jal	ra,8000a2b6 <softfloat_normSubnormalF32Sig>
    800075ac:	87aa                	mv	a5,a0
    800075ae:	882e                	mv	a6,a1
    800075b0:	f6f43423          	sd	a5,-152(s0)
    800075b4:	f7043823          	sd	a6,-144(s0)
        expA = normExpSig.exp;
    800075b8:	f6843783          	ld	a5,-152(s0)
    800075bc:	fef43423          	sd	a5,-24(s0)
        sigA = normExpSig.sig;
    800075c0:	f7043783          	ld	a5,-144(s0)
    800075c4:	fef43023          	sd	a5,-32(s0)
    }
    if ( ! expB ) {
    800075c8:	fd843783          	ld	a5,-40(s0)
    800075cc:	e79d                	bnez	a5,800075fa <f32_mul+0x168>
        if ( ! sigB ) goto zero;
    800075ce:	fd043783          	ld	a5,-48(s0)
    800075d2:	10078163          	beqz	a5,800076d4 <f32_mul+0x242>
        normExpSig = softfloat_normSubnormalF32Sig( sigB );
    800075d6:	fd043503          	ld	a0,-48(s0)
    800075da:	4dd020ef          	jal	ra,8000a2b6 <softfloat_normSubnormalF32Sig>
    800075de:	87aa                	mv	a5,a0
    800075e0:	882e                	mv	a6,a1
    800075e2:	f6f43423          	sd	a5,-152(s0)
    800075e6:	f7043823          	sd	a6,-144(s0)
        expB = normExpSig.exp;
    800075ea:	f6843783          	ld	a5,-152(s0)
    800075ee:	fcf43c23          	sd	a5,-40(s0)
        sigB = normExpSig.sig;
    800075f2:	f7043783          	ld	a5,-144(s0)
    800075f6:	fcf43823          	sd	a5,-48(s0)
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    expZ = expA + expB - 0x7F;
    800075fa:	fe843703          	ld	a4,-24(s0)
    800075fe:	fd843783          	ld	a5,-40(s0)
    80007602:	97ba                	add	a5,a5,a4
    80007604:	f8178793          	addi	a5,a5,-127 # 7fff81 <MEM_START-0x7f80007f>
    80007608:	fcf43023          	sd	a5,-64(s0)
    sigA = (sigA | 0x00800000)<<7;
    8000760c:	fe043783          	ld	a5,-32(s0)
    80007610:	00779713          	slli	a4,a5,0x7
    80007614:	400007b7          	lui	a5,0x40000
    80007618:	8fd9                	or	a5,a5,a4
    8000761a:	fef43023          	sd	a5,-32(s0)
    sigB = (sigB | 0x00800000)<<8;
    8000761e:	fd043783          	ld	a5,-48(s0)
    80007622:	00879713          	slli	a4,a5,0x8
    80007626:	4785                	li	a5,1
    80007628:	07fe                	slli	a5,a5,0x1f
    8000762a:	8fd9                	or	a5,a5,a4
    8000762c:	fcf43823          	sd	a5,-48(s0)
    sigZ = softfloat_shortShiftRightJam64( (uint_fast64_t) sigA * sigB, 32 );
    80007630:	fe043703          	ld	a4,-32(s0)
    80007634:	fd043783          	ld	a5,-48(s0)
    80007638:	02f707b3          	mul	a5,a4,a5
    8000763c:	02000593          	li	a1,32
    80007640:	853e                	mv	a0,a5
    80007642:	079030ef          	jal	ra,8000aeba <softfloat_shortShiftRightJam64>
    80007646:	faa43c23          	sd	a0,-72(s0)
    if ( sigZ < 0x40000000 ) {
    8000764a:	fb843703          	ld	a4,-72(s0)
    8000764e:	400007b7          	lui	a5,0x40000
    80007652:	00f77c63          	bleu	a5,a4,8000766a <f32_mul+0x1d8>
        --expZ;
    80007656:	fc043783          	ld	a5,-64(s0)
    8000765a:	17fd                	addi	a5,a5,-1
    8000765c:	fcf43023          	sd	a5,-64(s0)
        sigZ <<= 1;
    80007660:	fb843783          	ld	a5,-72(s0)
    80007664:	0786                	slli	a5,a5,0x1
    80007666:	faf43c23          	sd	a5,-72(s0)
    }
    return softfloat_roundPackToF32( signZ, expZ, sigZ );
    8000766a:	f9644783          	lbu	a5,-106(s0)
    8000766e:	fb843603          	ld	a2,-72(s0)
    80007672:	fc043583          	ld	a1,-64(s0)
    80007676:	853e                	mv	a0,a5
    80007678:	677020ef          	jal	ra,8000a4ee <softfloat_roundPackToF32>
    8000767c:	87aa                	mv	a5,a0
    8000767e:	a8ad                	j	800076f8 <f32_mul+0x266>
        if ( sigA || ((expB == 0xFF) && sigB) ) goto propagateNaN;
    80007680:	0001                	nop
    80007682:	a011                	j	80007686 <f32_mul+0x1f4>
        if ( sigB ) goto propagateNaN;
    80007684:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 propagateNaN:
    uiZ = softfloat_propagateNaNF32UI( uiA, uiB );
    80007686:	f9843583          	ld	a1,-104(s0)
    8000768a:	fa843503          	ld	a0,-88(s0)
    8000768e:	0bc040ef          	jal	ra,8000b74a <softfloat_propagateNaNF32UI>
    80007692:	faa43823          	sd	a0,-80(s0)
    goto uiZ;
    80007696:	a891                	j	800076ea <f32_mul+0x258>
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 infArg:
    if ( ! magBits ) {
    80007698:	fc843783          	ld	a5,-56(s0)
    8000769c:	eb91                	bnez	a5,800076b0 <f32_mul+0x21e>
        softfloat_raiseFlags( softfloat_flag_invalid );
    8000769e:	001867f3          	csrrsi	a5,fflags,16
    800076a2:	f8f43423          	sd	a5,-120(s0)
        uiZ = defaultNaNF32UI;
    800076a6:	7fc007b7          	lui	a5,0x7fc00
    800076aa:	faf43823          	sd	a5,-80(s0)
    } else {
        uiZ = packToF32UI( signZ, 0xFF, 0 );
    }
    goto uiZ;
    800076ae:	a835                	j	800076ea <f32_mul+0x258>
        uiZ = packToF32UI( signZ, 0xFF, 0 );
    800076b0:	f9644783          	lbu	a5,-106(s0)
    800076b4:	2781                	sext.w	a5,a5
    800076b6:	01f7979b          	slliw	a5,a5,0x1f
    800076ba:	0007871b          	sext.w	a4,a5
    800076be:	7f8007b7          	lui	a5,0x7f800
    800076c2:	9fb9                	addw	a5,a5,a4
    800076c4:	2781                	sext.w	a5,a5
    800076c6:	1782                	slli	a5,a5,0x20
    800076c8:	9381                	srli	a5,a5,0x20
    800076ca:	faf43823          	sd	a5,-80(s0)
    goto uiZ;
    800076ce:	a831                	j	800076ea <f32_mul+0x258>
        if ( ! sigA ) goto zero;
    800076d0:	0001                	nop
    800076d2:	a011                	j	800076d6 <f32_mul+0x244>
        if ( ! sigB ) goto zero;
    800076d4:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 zero:
    uiZ = packToF32UI( signZ, 0, 0 );
    800076d6:	f9644783          	lbu	a5,-106(s0)
    800076da:	2781                	sext.w	a5,a5
    800076dc:	01f7979b          	slliw	a5,a5,0x1f
    800076e0:	2781                	sext.w	a5,a5
    800076e2:	1782                	slli	a5,a5,0x20
    800076e4:	9381                	srli	a5,a5,0x20
    800076e6:	faf43823          	sd	a5,-80(s0)
 uiZ:
    uZ.ui = uiZ;
    800076ea:	fb043783          	ld	a5,-80(s0)
    800076ee:	2781                	sext.w	a5,a5
    800076f0:	f6f42023          	sw	a5,-160(s0)
    return uZ.f;
    800076f4:	f6042783          	lw	a5,-160(s0)

}
    800076f8:	853e                	mv	a0,a5
    800076fa:	70aa                	ld	ra,168(sp)
    800076fc:	740a                	ld	s0,160(sp)
    800076fe:	614d                	addi	sp,sp,176
    80007700:	8082                	ret

0000000080007702 <f32_sqrt>:
#include "internals.h"
#include "specialize.h"
#include "softfloat.h"

float32_t f32_sqrt( float32_t a )
{
    80007702:	7175                	addi	sp,sp,-144
    80007704:	e506                	sd	ra,136(sp)
    80007706:	e122                	sd	s0,128(sp)
    80007708:	0900                	addi	s0,sp,144
    8000770a:	f6a42c23          	sw	a0,-136(s0)
    uint32_t negRem;
    union ui32_f32 uZ;

    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    uA.f = a;
    8000770e:	f7842783          	lw	a5,-136(s0)
    80007712:	f8f42c23          	sw	a5,-104(s0)
    uiA = uA.ui;
    80007716:	f9842783          	lw	a5,-104(s0)
    8000771a:	1782                	slli	a5,a5,0x20
    8000771c:	9381                	srli	a5,a5,0x20
    8000771e:	fcf43423          	sd	a5,-56(s0)
    signA = signF32UI( uiA );
    80007722:	fc843783          	ld	a5,-56(s0)
    80007726:	2781                	sext.w	a5,a5
    80007728:	01f7d79b          	srliw	a5,a5,0x1f
    8000772c:	fcf403a3          	sb	a5,-57(s0)
    expA  = expF32UI( uiA );
    80007730:	fc843783          	ld	a5,-56(s0)
    80007734:	83dd                	srli	a5,a5,0x17
    80007736:	0ff7f793          	andi	a5,a5,255
    8000773a:	fef43423          	sd	a5,-24(s0)
    sigA  = fracF32UI( uiA );
    8000773e:	fc843703          	ld	a4,-56(s0)
    80007742:	008007b7          	lui	a5,0x800
    80007746:	17fd                	addi	a5,a5,-1
    80007748:	8ff9                	and	a5,a5,a4
    8000774a:	fef43023          	sd	a5,-32(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( expA == 0xFF ) {
    8000774e:	fe843703          	ld	a4,-24(s0)
    80007752:	0ff00793          	li	a5,255
    80007756:	02f71863          	bne	a4,a5,80007786 <f32_sqrt+0x84>
        if ( sigA ) {
    8000775a:	fe043783          	ld	a5,-32(s0)
    8000775e:	cb89                	beqz	a5,80007770 <f32_sqrt+0x6e>
            uiZ = softfloat_propagateNaNF32UI( uiA, 0 );
    80007760:	4581                	li	a1,0
    80007762:	fc843503          	ld	a0,-56(s0)
    80007766:	7e5030ef          	jal	ra,8000b74a <softfloat_propagateNaNF32UI>
    8000776a:	fca43c23          	sd	a0,-40(s0)
            goto uiZ;
    8000776e:	a295                	j	800078d2 <f32_sqrt+0x1d0>
        }
        if ( ! signA ) return a;
    80007770:	fc744783          	lbu	a5,-57(s0)
    80007774:	0017c793          	xori	a5,a5,1
    80007778:	0ff7f793          	andi	a5,a5,255
    8000777c:	14078063          	beqz	a5,800078bc <f32_sqrt+0x1ba>
    80007780:	f7842783          	lw	a5,-136(s0)
    80007784:	aab1                	j	800078e0 <f32_sqrt+0x1de>
        goto invalid;
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( signA ) {
    80007786:	fc744783          	lbu	a5,-57(s0)
    8000778a:	0ff7f793          	andi	a5,a5,255
    8000778e:	cb99                	beqz	a5,800077a4 <f32_sqrt+0xa2>
        if ( ! (expA | sigA) ) return a;
    80007790:	fe843703          	ld	a4,-24(s0)
    80007794:	fe043783          	ld	a5,-32(s0)
    80007798:	8fd9                	or	a5,a5,a4
    8000779a:	12079363          	bnez	a5,800078c0 <f32_sqrt+0x1be>
    8000779e:	f7842783          	lw	a5,-136(s0)
    800077a2:	aa3d                	j	800078e0 <f32_sqrt+0x1de>
        goto invalid;
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( ! expA ) {
    800077a4:	fe843783          	ld	a5,-24(s0)
    800077a8:	eb8d                	bnez	a5,800077da <f32_sqrt+0xd8>
        if ( ! sigA ) return a;
    800077aa:	fe043783          	ld	a5,-32(s0)
    800077ae:	e781                	bnez	a5,800077b6 <f32_sqrt+0xb4>
    800077b0:	f7842783          	lw	a5,-136(s0)
    800077b4:	a235                	j	800078e0 <f32_sqrt+0x1de>
        normExpSig = softfloat_normSubnormalF32Sig( sigA );
    800077b6:	fe043503          	ld	a0,-32(s0)
    800077ba:	2fd020ef          	jal	ra,8000a2b6 <softfloat_normSubnormalF32Sig>
    800077be:	87aa                	mv	a5,a0
    800077c0:	882e                	mv	a6,a1
    800077c2:	f8f43423          	sd	a5,-120(s0)
    800077c6:	f9043823          	sd	a6,-112(s0)
        expA = normExpSig.exp;
    800077ca:	f8843783          	ld	a5,-120(s0)
    800077ce:	fef43423          	sd	a5,-24(s0)
        sigA = normExpSig.sig;
    800077d2:	f9043783          	ld	a5,-112(s0)
    800077d6:	fef43023          	sd	a5,-32(s0)
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    expZ = ((expA - 0x7F)>>1) + 0x7E;
    800077da:	fe843783          	ld	a5,-24(s0)
    800077de:	f8178793          	addi	a5,a5,-127 # 7fff81 <MEM_START-0x7f80007f>
    800077e2:	8785                	srai	a5,a5,0x1
    800077e4:	07e78793          	addi	a5,a5,126
    800077e8:	faf43c23          	sd	a5,-72(s0)
    expA &= 1;
    800077ec:	fe843783          	ld	a5,-24(s0)
    800077f0:	8b85                	andi	a5,a5,1
    800077f2:	fef43423          	sd	a5,-24(s0)
    sigA = (sigA | 0x00800000)<<8;
    800077f6:	fe043783          	ld	a5,-32(s0)
    800077fa:	00879713          	slli	a4,a5,0x8
    800077fe:	4785                	li	a5,1
    80007800:	07fe                	slli	a5,a5,0x1f
    80007802:	8fd9                	or	a5,a5,a4
    80007804:	fef43023          	sd	a5,-32(s0)
    sigZ =
        ((uint_fast64_t) sigA * softfloat_approxRecipSqrt32_1( expA, sigA ))
    80007808:	fe843783          	ld	a5,-24(s0)
    8000780c:	2781                	sext.w	a5,a5
    8000780e:	fe043703          	ld	a4,-32(s0)
    80007812:	2701                	sext.w	a4,a4
    80007814:	85ba                	mv	a1,a4
    80007816:	853e                	mv	a0,a5
    80007818:	293010ef          	jal	ra,800092aa <softfloat_approxRecipSqrt32_1>
    8000781c:	87aa                	mv	a5,a0
    8000781e:	2781                	sext.w	a5,a5
    80007820:	02079713          	slli	a4,a5,0x20
    80007824:	9301                	srli	a4,a4,0x20
    80007826:	fe043783          	ld	a5,-32(s0)
    8000782a:	02f707b3          	mul	a5,a4,a5
    sigZ =
    8000782e:	9381                	srli	a5,a5,0x20
    80007830:	fcf43823          	sd	a5,-48(s0)
            >>32;
    if ( expA ) sigZ >>= 1;
    80007834:	fe843783          	ld	a5,-24(s0)
    80007838:	c791                	beqz	a5,80007844 <f32_sqrt+0x142>
    8000783a:	fd043783          	ld	a5,-48(s0)
    8000783e:	8385                	srli	a5,a5,0x1
    80007840:	fcf43823          	sd	a5,-48(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    sigZ += 2;
    80007844:	fd043783          	ld	a5,-48(s0)
    80007848:	0789                	addi	a5,a5,2
    8000784a:	fcf43823          	sd	a5,-48(s0)
    if ( (sigZ & 0x3F) < 2 ) {
    8000784e:	fd043783          	ld	a5,-48(s0)
    80007852:	03e7f793          	andi	a5,a5,62
    80007856:	ebb1                	bnez	a5,800078aa <f32_sqrt+0x1a8>
        shiftedSigZ = sigZ>>2;
    80007858:	fd043783          	ld	a5,-48(s0)
    8000785c:	8389                	srli	a5,a5,0x2
    8000785e:	faf43823          	sd	a5,-80(s0)
        negRem = shiftedSigZ * shiftedSigZ;
    80007862:	fb043783          	ld	a5,-80(s0)
    80007866:	0007871b          	sext.w	a4,a5
    8000786a:	fb043783          	ld	a5,-80(s0)
    8000786e:	2781                	sext.w	a5,a5
    80007870:	02f707bb          	mulw	a5,a4,a5
    80007874:	faf42623          	sw	a5,-84(s0)
        sigZ &= ~3;
    80007878:	fd043783          	ld	a5,-48(s0)
    8000787c:	9bf1                	andi	a5,a5,-4
    8000787e:	fcf43823          	sd	a5,-48(s0)
        if ( negRem & 0x80000000 ) {
    80007882:	fac42783          	lw	a5,-84(s0)
    80007886:	0007d963          	bgez	a5,80007898 <f32_sqrt+0x196>
            sigZ |= 1;
    8000788a:	fd043783          	ld	a5,-48(s0)
    8000788e:	0017e793          	ori	a5,a5,1
    80007892:	fcf43823          	sd	a5,-48(s0)
    80007896:	a811                	j	800078aa <f32_sqrt+0x1a8>
        } else {
            if ( negRem ) --sigZ;
    80007898:	fac42783          	lw	a5,-84(s0)
    8000789c:	2781                	sext.w	a5,a5
    8000789e:	c791                	beqz	a5,800078aa <f32_sqrt+0x1a8>
    800078a0:	fd043783          	ld	a5,-48(s0)
    800078a4:	17fd                	addi	a5,a5,-1
    800078a6:	fcf43823          	sd	a5,-48(s0)
        }
    }
    return softfloat_roundPackToF32( 0, expZ, sigZ );
    800078aa:	fd043603          	ld	a2,-48(s0)
    800078ae:	fb843583          	ld	a1,-72(s0)
    800078b2:	4501                	li	a0,0
    800078b4:	43b020ef          	jal	ra,8000a4ee <softfloat_roundPackToF32>
    800078b8:	87aa                	mv	a5,a0
    800078ba:	a01d                	j	800078e0 <f32_sqrt+0x1de>
        goto invalid;
    800078bc:	0001                	nop
    800078be:	a011                	j	800078c2 <f32_sqrt+0x1c0>
        goto invalid;
    800078c0:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 invalid:
    softfloat_raiseFlags( softfloat_flag_invalid );
    800078c2:	001867f3          	csrrsi	a5,fflags,16
    800078c6:	faf43023          	sd	a5,-96(s0)
    uiZ = defaultNaNF32UI;
    800078ca:	7fc007b7          	lui	a5,0x7fc00
    800078ce:	fcf43c23          	sd	a5,-40(s0)
 uiZ:
    uZ.ui = uiZ;
    800078d2:	fd843783          	ld	a5,-40(s0)
    800078d6:	2781                	sext.w	a5,a5
    800078d8:	f8f42023          	sw	a5,-128(s0)
    return uZ.f;
    800078dc:	f8042783          	lw	a5,-128(s0)

}
    800078e0:	853e                	mv	a0,a5
    800078e2:	60aa                	ld	ra,136(sp)
    800078e4:	640a                	ld	s0,128(sp)
    800078e6:	6149                	addi	sp,sp,144
    800078e8:	8082                	ret

00000000800078ea <f32_to_f64>:
#include "internals.h"
#include "specialize.h"
#include "softfloat.h"

float64_t f32_to_f64( float32_t a )
{
    800078ea:	7119                	addi	sp,sp,-128
    800078ec:	fc86                	sd	ra,120(sp)
    800078ee:	f8a2                	sd	s0,112(sp)
    800078f0:	0100                	addi	s0,sp,128
    800078f2:	f8a42423          	sw	a0,-120(s0)
    struct exp16_sig32 normExpSig;
    union ui64_f64 uZ;

    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    uA.f = a;
    800078f6:	f8842783          	lw	a5,-120(s0)
    800078fa:	faf42c23          	sw	a5,-72(s0)
    uiA = uA.ui;
    800078fe:	fb842783          	lw	a5,-72(s0)
    80007902:	1782                	slli	a5,a5,0x20
    80007904:	9381                	srli	a5,a5,0x20
    80007906:	fcf43823          	sd	a5,-48(s0)
    sign = signF32UI( uiA );
    8000790a:	fd043783          	ld	a5,-48(s0)
    8000790e:	2781                	sext.w	a5,a5
    80007910:	01f7d79b          	srliw	a5,a5,0x1f
    80007914:	fcf407a3          	sb	a5,-49(s0)
    exp  = expF32UI( uiA );
    80007918:	fd043783          	ld	a5,-48(s0)
    8000791c:	83dd                	srli	a5,a5,0x17
    8000791e:	0ff7f793          	andi	a5,a5,255
    80007922:	fef43423          	sd	a5,-24(s0)
    frac = fracF32UI( uiA );
    80007926:	fd043703          	ld	a4,-48(s0)
    8000792a:	008007b7          	lui	a5,0x800
    8000792e:	17fd                	addi	a5,a5,-1
    80007930:	8ff9                	and	a5,a5,a4
    80007932:	fef43023          	sd	a5,-32(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( exp == 0xFF ) {
    80007936:	fe843703          	ld	a4,-24(s0)
    8000793a:	0ff00793          	li	a5,255
    8000793e:	04f71063          	bne	a4,a5,8000797e <f32_to_f64+0x94>
        if ( frac ) {
    80007942:	fe043783          	ld	a5,-32(s0)
    80007946:	c38d                	beqz	a5,80007968 <f32_to_f64+0x7e>
            softfloat_f32UIToCommonNaN( uiA, &commonNaN );
    80007948:	fd043703          	ld	a4,-48(s0)
    8000794c:	004007b7          	lui	a5,0x400
    80007950:	8ff9                	and	a5,a5,a4
    80007952:	e789                	bnez	a5,8000795c <f32_to_f64+0x72>
    80007954:	001867f3          	csrrsi	a5,fflags,16
    80007958:	fcf43023          	sd	a5,-64(s0)
            uiZ = softfloat_commonNaNToF64UI( &commonNaN );
    8000795c:	00fff7b7          	lui	a5,0xfff
    80007960:	179e                	slli	a5,a5,0x27
    80007962:	fcf43c23          	sd	a5,-40(s0)
        } else {
            uiZ = packToF64UI( sign, 0x7FF, 0 );
        }
        goto uiZ;
    80007966:	a89d                	j	800079dc <f32_to_f64+0xf2>
            uiZ = packToF64UI( sign, 0x7FF, 0 );
    80007968:	fcf44783          	lbu	a5,-49(s0)
    8000796c:	03f79713          	slli	a4,a5,0x3f
    80007970:	7ff00793          	li	a5,2047
    80007974:	17d2                	slli	a5,a5,0x34
    80007976:	97ba                	add	a5,a5,a4
    80007978:	fcf43c23          	sd	a5,-40(s0)
        goto uiZ;
    8000797c:	a085                	j	800079dc <f32_to_f64+0xf2>
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( ! exp ) {
    8000797e:	fe843783          	ld	a5,-24(s0)
    80007982:	ef8d                	bnez	a5,800079bc <f32_to_f64+0xd2>
        if ( ! frac ) {
    80007984:	fe043783          	ld	a5,-32(s0)
    80007988:	e799                	bnez	a5,80007996 <f32_to_f64+0xac>
            uiZ = packToF64UI( sign, 0, 0 );
    8000798a:	fcf44783          	lbu	a5,-49(s0)
    8000798e:	17fe                	slli	a5,a5,0x3f
    80007990:	fcf43c23          	sd	a5,-40(s0)
            goto uiZ;
    80007994:	a0a1                	j	800079dc <f32_to_f64+0xf2>
        }
        normExpSig = softfloat_normSubnormalF32Sig( frac );
    80007996:	fe043503          	ld	a0,-32(s0)
    8000799a:	11d020ef          	jal	ra,8000a2b6 <softfloat_normSubnormalF32Sig>
    8000799e:	87aa                	mv	a5,a0
    800079a0:	882e                	mv	a6,a1
    800079a2:	faf43023          	sd	a5,-96(s0)
    800079a6:	fb043423          	sd	a6,-88(s0)
        exp = normExpSig.exp - 1;
    800079aa:	fa043783          	ld	a5,-96(s0)
    800079ae:	17fd                	addi	a5,a5,-1
    800079b0:	fef43423          	sd	a5,-24(s0)
        frac = normExpSig.sig;
    800079b4:	fa843783          	ld	a5,-88(s0)
    800079b8:	fef43023          	sd	a5,-32(s0)
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    uiZ = packToF64UI( sign, exp + 0x380, (uint_fast64_t) frac<<29 );
    800079bc:	fcf44783          	lbu	a5,-49(s0)
    800079c0:	03f79713          	slli	a4,a5,0x3f
    800079c4:	fe843783          	ld	a5,-24(s0)
    800079c8:	38078793          	addi	a5,a5,896 # fff380 <MEM_START-0x7f000c80>
    800079cc:	17d2                	slli	a5,a5,0x34
    800079ce:	973e                	add	a4,a4,a5
    800079d0:	fe043783          	ld	a5,-32(s0)
    800079d4:	07f6                	slli	a5,a5,0x1d
    800079d6:	97ba                	add	a5,a5,a4
    800079d8:	fcf43c23          	sd	a5,-40(s0)
 uiZ:
    uZ.ui = uiZ;
    800079dc:	fd843783          	ld	a5,-40(s0)
    800079e0:	f8f43c23          	sd	a5,-104(s0)
    return uZ.f;
    800079e4:	f9843783          	ld	a5,-104(s0)

}
    800079e8:	853e                	mv	a0,a5
    800079ea:	70e6                	ld	ra,120(sp)
    800079ec:	7446                	ld	s0,112(sp)
    800079ee:	6109                	addi	sp,sp,128
    800079f0:	8082                	ret

00000000800079f2 <f32_classify>:
#include "internals.h"
#include "specialize.h"
#include "softfloat.h"

uint_fast16_t f32_classify( float32_t a )
{
    800079f2:	7139                	addi	sp,sp,-64
    800079f4:	fc22                	sd	s0,56(sp)
    800079f6:	0080                	addi	s0,sp,64
    800079f8:	fca42423          	sw	a0,-56(s0)
    union ui32_f32 uA;
    uint_fast32_t uiA;

    uA.f = a;
    800079fc:	fc842783          	lw	a5,-56(s0)
    80007a00:	fcf42823          	sw	a5,-48(s0)
    uiA = uA.ui;
    80007a04:	fd042783          	lw	a5,-48(s0)
    80007a08:	1782                	slli	a5,a5,0x20
    80007a0a:	9381                	srli	a5,a5,0x20
    80007a0c:	fef43423          	sd	a5,-24(s0)

    uint_fast16_t infOrNaN = expF32UI( uiA ) == 0xFF;
    80007a10:	fe843783          	ld	a5,-24(s0)
    80007a14:	83dd                	srli	a5,a5,0x17
    80007a16:	0ff7f793          	andi	a5,a5,255
    80007a1a:	f0178793          	addi	a5,a5,-255
    80007a1e:	0017b793          	seqz	a5,a5
    80007a22:	0ff7f793          	andi	a5,a5,255
    80007a26:	fef43023          	sd	a5,-32(s0)
    uint_fast16_t subnormalOrZero = expF32UI( uiA ) == 0;
    80007a2a:	fe843783          	ld	a5,-24(s0)
    80007a2e:	83dd                	srli	a5,a5,0x17
    80007a30:	0ff7f793          	andi	a5,a5,255
    80007a34:	0017b793          	seqz	a5,a5
    80007a38:	0ff7f793          	andi	a5,a5,255
    80007a3c:	fcf43c23          	sd	a5,-40(s0)
    bool sign = signF32UI( uiA );
    80007a40:	fe843783          	ld	a5,-24(s0)
    80007a44:	2781                	sext.w	a5,a5
    80007a46:	01f7d79b          	srliw	a5,a5,0x1f
    80007a4a:	fcf40ba3          	sb	a5,-41(s0)

    return
        (  sign && infOrNaN && fracF32UI( uiA ) == 0 )          << 0 |
    80007a4e:	fd744783          	lbu	a5,-41(s0)
    80007a52:	0ff7f793          	andi	a5,a5,255
    80007a56:	cf89                	beqz	a5,80007a70 <f32_classify+0x7e>
    80007a58:	fe043783          	ld	a5,-32(s0)
    80007a5c:	cb91                	beqz	a5,80007a70 <f32_classify+0x7e>
    80007a5e:	fe843703          	ld	a4,-24(s0)
    80007a62:	008007b7          	lui	a5,0x800
    80007a66:	17fd                	addi	a5,a5,-1
    80007a68:	8ff9                	and	a5,a5,a4
    80007a6a:	e399                	bnez	a5,80007a70 <f32_classify+0x7e>
    80007a6c:	4785                	li	a5,1
    80007a6e:	a011                	j	80007a72 <f32_classify+0x80>
    80007a70:	4781                	li	a5,0
        (  sign && !infOrNaN && !subnormalOrZero )              << 1 |
    80007a72:	fd744703          	lbu	a4,-41(s0)
    80007a76:	0ff77713          	andi	a4,a4,255
    80007a7a:	cb09                	beqz	a4,80007a8c <f32_classify+0x9a>
    80007a7c:	fe043703          	ld	a4,-32(s0)
    80007a80:	e711                	bnez	a4,80007a8c <f32_classify+0x9a>
    80007a82:	fd843703          	ld	a4,-40(s0)
    80007a86:	e319                	bnez	a4,80007a8c <f32_classify+0x9a>
    80007a88:	4705                	li	a4,1
    80007a8a:	a011                	j	80007a8e <f32_classify+0x9c>
    80007a8c:	4701                	li	a4,0
    80007a8e:	0017171b          	slliw	a4,a4,0x1
    80007a92:	2701                	sext.w	a4,a4
        (  sign && infOrNaN && fracF32UI( uiA ) == 0 )          << 0 |
    80007a94:	8fd9                	or	a5,a5,a4
    80007a96:	0007871b          	sext.w	a4,a5
        (  sign && subnormalOrZero && fracF32UI( uiA ) )        << 2 |
    80007a9a:	fd744783          	lbu	a5,-41(s0)
    80007a9e:	0ff7f793          	andi	a5,a5,255
    80007aa2:	cf89                	beqz	a5,80007abc <f32_classify+0xca>
    80007aa4:	fd843783          	ld	a5,-40(s0)
    80007aa8:	cb91                	beqz	a5,80007abc <f32_classify+0xca>
    80007aaa:	fe843683          	ld	a3,-24(s0)
    80007aae:	008007b7          	lui	a5,0x800
    80007ab2:	17fd                	addi	a5,a5,-1
    80007ab4:	8ff5                	and	a5,a5,a3
    80007ab6:	c399                	beqz	a5,80007abc <f32_classify+0xca>
    80007ab8:	4785                	li	a5,1
    80007aba:	a011                	j	80007abe <f32_classify+0xcc>
    80007abc:	4781                	li	a5,0
    80007abe:	0027979b          	slliw	a5,a5,0x2
    80007ac2:	2781                	sext.w	a5,a5
        (  sign && !infOrNaN && !subnormalOrZero )              << 1 |
    80007ac4:	8fd9                	or	a5,a5,a4
    80007ac6:	0007871b          	sext.w	a4,a5
        (  sign && subnormalOrZero && fracF32UI( uiA ) == 0 )   << 3 |
    80007aca:	fd744783          	lbu	a5,-41(s0)
    80007ace:	0ff7f793          	andi	a5,a5,255
    80007ad2:	cf89                	beqz	a5,80007aec <f32_classify+0xfa>
    80007ad4:	fd843783          	ld	a5,-40(s0)
    80007ad8:	cb91                	beqz	a5,80007aec <f32_classify+0xfa>
    80007ada:	fe843683          	ld	a3,-24(s0)
    80007ade:	008007b7          	lui	a5,0x800
    80007ae2:	17fd                	addi	a5,a5,-1
    80007ae4:	8ff5                	and	a5,a5,a3
    80007ae6:	e399                	bnez	a5,80007aec <f32_classify+0xfa>
    80007ae8:	4785                	li	a5,1
    80007aea:	a011                	j	80007aee <f32_classify+0xfc>
    80007aec:	4781                	li	a5,0
    80007aee:	0037979b          	slliw	a5,a5,0x3
    80007af2:	2781                	sext.w	a5,a5
        (  sign && subnormalOrZero && fracF32UI( uiA ) )        << 2 |
    80007af4:	8fd9                	or	a5,a5,a4
    80007af6:	0007871b          	sext.w	a4,a5
        ( !sign && infOrNaN && fracF32UI( uiA ) == 0 )          << 7 |
    80007afa:	fd744783          	lbu	a5,-41(s0)
    80007afe:	0017c793          	xori	a5,a5,1
    80007b02:	0ff7f793          	andi	a5,a5,255
    80007b06:	cf89                	beqz	a5,80007b20 <f32_classify+0x12e>
    80007b08:	fe043783          	ld	a5,-32(s0)
    80007b0c:	cb91                	beqz	a5,80007b20 <f32_classify+0x12e>
    80007b0e:	fe843683          	ld	a3,-24(s0)
    80007b12:	008007b7          	lui	a5,0x800
    80007b16:	17fd                	addi	a5,a5,-1
    80007b18:	8ff5                	and	a5,a5,a3
    80007b1a:	e399                	bnez	a5,80007b20 <f32_classify+0x12e>
    80007b1c:	4785                	li	a5,1
    80007b1e:	a011                	j	80007b22 <f32_classify+0x130>
    80007b20:	4781                	li	a5,0
    80007b22:	0077979b          	slliw	a5,a5,0x7
    80007b26:	2781                	sext.w	a5,a5
        (  sign && subnormalOrZero && fracF32UI( uiA ) == 0 )   << 3 |
    80007b28:	8fd9                	or	a5,a5,a4
    80007b2a:	0007871b          	sext.w	a4,a5
        ( !sign && !infOrNaN && !subnormalOrZero )              << 6 |
    80007b2e:	fd744783          	lbu	a5,-41(s0)
    80007b32:	0017c793          	xori	a5,a5,1
    80007b36:	0ff7f793          	andi	a5,a5,255
    80007b3a:	cb89                	beqz	a5,80007b4c <f32_classify+0x15a>
    80007b3c:	fe043783          	ld	a5,-32(s0)
    80007b40:	e791                	bnez	a5,80007b4c <f32_classify+0x15a>
    80007b42:	fd843783          	ld	a5,-40(s0)
    80007b46:	e399                	bnez	a5,80007b4c <f32_classify+0x15a>
    80007b48:	4785                	li	a5,1
    80007b4a:	a011                	j	80007b4e <f32_classify+0x15c>
    80007b4c:	4781                	li	a5,0
    80007b4e:	0067979b          	slliw	a5,a5,0x6
    80007b52:	2781                	sext.w	a5,a5
        ( !sign && infOrNaN && fracF32UI( uiA ) == 0 )          << 7 |
    80007b54:	8fd9                	or	a5,a5,a4
    80007b56:	0007871b          	sext.w	a4,a5
        ( !sign && subnormalOrZero && fracF32UI( uiA ) )        << 5 |
    80007b5a:	fd744783          	lbu	a5,-41(s0)
    80007b5e:	0017c793          	xori	a5,a5,1
    80007b62:	0ff7f793          	andi	a5,a5,255
    80007b66:	cf89                	beqz	a5,80007b80 <f32_classify+0x18e>
    80007b68:	fd843783          	ld	a5,-40(s0)
    80007b6c:	cb91                	beqz	a5,80007b80 <f32_classify+0x18e>
    80007b6e:	fe843683          	ld	a3,-24(s0)
    80007b72:	008007b7          	lui	a5,0x800
    80007b76:	17fd                	addi	a5,a5,-1
    80007b78:	8ff5                	and	a5,a5,a3
    80007b7a:	c399                	beqz	a5,80007b80 <f32_classify+0x18e>
    80007b7c:	4785                	li	a5,1
    80007b7e:	a011                	j	80007b82 <f32_classify+0x190>
    80007b80:	4781                	li	a5,0
    80007b82:	0057979b          	slliw	a5,a5,0x5
    80007b86:	2781                	sext.w	a5,a5
        ( !sign && !infOrNaN && !subnormalOrZero )              << 6 |
    80007b88:	8fd9                	or	a5,a5,a4
    80007b8a:	0007871b          	sext.w	a4,a5
        ( !sign && subnormalOrZero && fracF32UI( uiA ) == 0 )   << 4 |
    80007b8e:	fd744783          	lbu	a5,-41(s0)
    80007b92:	0017c793          	xori	a5,a5,1
    80007b96:	0ff7f793          	andi	a5,a5,255
    80007b9a:	cf89                	beqz	a5,80007bb4 <f32_classify+0x1c2>
    80007b9c:	fd843783          	ld	a5,-40(s0)
    80007ba0:	cb91                	beqz	a5,80007bb4 <f32_classify+0x1c2>
    80007ba2:	fe843683          	ld	a3,-24(s0)
    80007ba6:	008007b7          	lui	a5,0x800
    80007baa:	17fd                	addi	a5,a5,-1
    80007bac:	8ff5                	and	a5,a5,a3
    80007bae:	e399                	bnez	a5,80007bb4 <f32_classify+0x1c2>
    80007bb0:	4785                	li	a5,1
    80007bb2:	a011                	j	80007bb6 <f32_classify+0x1c4>
    80007bb4:	4781                	li	a5,0
    80007bb6:	0047979b          	slliw	a5,a5,0x4
    80007bba:	2781                	sext.w	a5,a5
        ( !sign && subnormalOrZero && fracF32UI( uiA ) )        << 5 |
    80007bbc:	8fd9                	or	a5,a5,a4
    80007bbe:	0007871b          	sext.w	a4,a5
        ( isNaNF32UI( uiA ) &&  softfloat_isSigNaNF32UI( uiA )) << 8 |
    80007bc2:	fe843783          	ld	a5,-24(s0)
    80007bc6:	fff7c693          	not	a3,a5
    80007bca:	7f8007b7          	lui	a5,0x7f800
    80007bce:	8ff5                	and	a5,a5,a3
    80007bd0:	eb95                	bnez	a5,80007c04 <f32_classify+0x212>
    80007bd2:	fe843683          	ld	a3,-24(s0)
    80007bd6:	008007b7          	lui	a5,0x800
    80007bda:	17fd                	addi	a5,a5,-1
    80007bdc:	8ff5                	and	a5,a5,a3
    80007bde:	c39d                	beqz	a5,80007c04 <f32_classify+0x212>
    80007be0:	fe843683          	ld	a3,-24(s0)
    80007be4:	7fc007b7          	lui	a5,0x7fc00
    80007be8:	8efd                	and	a3,a3,a5
    80007bea:	7f8007b7          	lui	a5,0x7f800
    80007bee:	00f69b63          	bne	a3,a5,80007c04 <f32_classify+0x212>
    80007bf2:	fe843683          	ld	a3,-24(s0)
    80007bf6:	004007b7          	lui	a5,0x400
    80007bfa:	17fd                	addi	a5,a5,-1
    80007bfc:	8ff5                	and	a5,a5,a3
    80007bfe:	c399                	beqz	a5,80007c04 <f32_classify+0x212>
    80007c00:	4785                	li	a5,1
    80007c02:	a011                	j	80007c06 <f32_classify+0x214>
    80007c04:	4781                	li	a5,0
    80007c06:	0087979b          	slliw	a5,a5,0x8
    80007c0a:	2781                	sext.w	a5,a5
        ( !sign && subnormalOrZero && fracF32UI( uiA ) == 0 )   << 4 |
    80007c0c:	8fd9                	or	a5,a5,a4
    80007c0e:	0007871b          	sext.w	a4,a5
        ( isNaNF32UI( uiA ) && !softfloat_isSigNaNF32UI( uiA )) << 9;
    80007c12:	fe843783          	ld	a5,-24(s0)
    80007c16:	fff7c693          	not	a3,a5
    80007c1a:	7f8007b7          	lui	a5,0x7f800
    80007c1e:	8ff5                	and	a5,a5,a3
    80007c20:	eb95                	bnez	a5,80007c54 <f32_classify+0x262>
    80007c22:	fe843683          	ld	a3,-24(s0)
    80007c26:	008007b7          	lui	a5,0x800
    80007c2a:	17fd                	addi	a5,a5,-1
    80007c2c:	8ff5                	and	a5,a5,a3
    80007c2e:	c39d                	beqz	a5,80007c54 <f32_classify+0x262>
    80007c30:	fe843683          	ld	a3,-24(s0)
    80007c34:	7fc007b7          	lui	a5,0x7fc00
    80007c38:	8efd                	and	a3,a3,a5
    80007c3a:	7f8007b7          	lui	a5,0x7f800
    80007c3e:	00f69963          	bne	a3,a5,80007c50 <f32_classify+0x25e>
    80007c42:	fe843683          	ld	a3,-24(s0)
    80007c46:	004007b7          	lui	a5,0x400
    80007c4a:	17fd                	addi	a5,a5,-1
    80007c4c:	8ff5                	and	a5,a5,a3
    80007c4e:	e399                	bnez	a5,80007c54 <f32_classify+0x262>
    80007c50:	4785                	li	a5,1
    80007c52:	a011                	j	80007c56 <f32_classify+0x264>
    80007c54:	4781                	li	a5,0
    80007c56:	0097979b          	slliw	a5,a5,0x9
    80007c5a:	2781                	sext.w	a5,a5
        ( isNaNF32UI( uiA ) &&  softfloat_isSigNaNF32UI( uiA )) << 8 |
    80007c5c:	8fd9                	or	a5,a5,a4
    80007c5e:	2781                	sext.w	a5,a5
}
    80007c60:	853e                	mv	a0,a5
    80007c62:	7462                	ld	s0,56(sp)
    80007c64:	6121                	addi	sp,sp,64
    80007c66:	8082                	ret

0000000080007c68 <f64_add>:
#include "platform.h"
#include "internals.h"
#include "softfloat.h"

float64_t f64_add( float64_t a, float64_t b )
{
    80007c68:	711d                	addi	sp,sp,-96
    80007c6a:	ec86                	sd	ra,88(sp)
    80007c6c:	e8a2                	sd	s0,80(sp)
    80007c6e:	1080                	addi	s0,sp,96
    80007c70:	faa43423          	sd	a0,-88(s0)
    80007c74:	fab43023          	sd	a1,-96(s0)
    bool signB;
#if ! defined INLINE_LEVEL || (INLINE_LEVEL < 2)
    float64_t (*magsFuncPtr)( uint_fast64_t, uint_fast64_t, bool );
#endif

    uA.f = a;
    80007c78:	fa843783          	ld	a5,-88(s0)
    80007c7c:	fcf43023          	sd	a5,-64(s0)
    uiA = uA.ui;
    80007c80:	fc043783          	ld	a5,-64(s0)
    80007c84:	fef43423          	sd	a5,-24(s0)
    signA = signF64UI( uiA );
    80007c88:	fe843783          	ld	a5,-24(s0)
    80007c8c:	93fd                	srli	a5,a5,0x3f
    80007c8e:	fef403a3          	sb	a5,-25(s0)
    uB.f = b;
    80007c92:	fa043783          	ld	a5,-96(s0)
    80007c96:	faf43c23          	sd	a5,-72(s0)
    uiB = uB.ui;
    80007c9a:	fb843783          	ld	a5,-72(s0)
    80007c9e:	fcf43c23          	sd	a5,-40(s0)
    signB = signF64UI( uiB );
    80007ca2:	fd843783          	ld	a5,-40(s0)
    80007ca6:	93fd                	srli	a5,a5,0x3f
    80007ca8:	fcf40ba3          	sb	a5,-41(s0)
    } else {
        return softfloat_subMagsF64( uiA, uiB, signA );
    }
#else
    magsFuncPtr =
        (signA == signB) ? softfloat_addMagsF64 : softfloat_subMagsF64;
    80007cac:	fe744703          	lbu	a4,-25(s0)
    80007cb0:	fd744783          	lbu	a5,-41(s0)
    80007cb4:	0ff77713          	andi	a4,a4,255
    80007cb8:	0ff7f793          	andi	a5,a5,255
    80007cbc:	00f71763          	bne	a4,a5,80007cca <f64_add+0x62>
    80007cc0:	00001797          	auipc	a5,0x1
    80007cc4:	2ee78793          	addi	a5,a5,750 # 80008fae <softfloat_addMagsF64>
    80007cc8:	a029                	j	80007cd2 <f64_add+0x6a>
    80007cca:	00003797          	auipc	a5,0x3
    80007cce:	73a78793          	addi	a5,a5,1850 # 8000b404 <softfloat_subMagsF64>
    magsFuncPtr =
    80007cd2:	fcf43423          	sd	a5,-56(s0)
    return (*magsFuncPtr)( uiA, uiB, signA );
    80007cd6:	fe744783          	lbu	a5,-25(s0)
    80007cda:	fc843703          	ld	a4,-56(s0)
    80007cde:	863e                	mv	a2,a5
    80007ce0:	fd843583          	ld	a1,-40(s0)
    80007ce4:	fe843503          	ld	a0,-24(s0)
    80007ce8:	9702                	jalr	a4
    80007cea:	87aa                	mv	a5,a0
#endif

}
    80007cec:	853e                	mv	a0,a5
    80007cee:	60e6                	ld	ra,88(sp)
    80007cf0:	6446                	ld	s0,80(sp)
    80007cf2:	6125                	addi	sp,sp,96
    80007cf4:	8082                	ret

0000000080007cf6 <f64_div>:
#include "internals.h"
#include "specialize.h"
#include "softfloat.h"

float64_t f64_div( float64_t a, float64_t b )
{
    80007cf6:	7155                	addi	sp,sp,-208
    80007cf8:	e586                	sd	ra,200(sp)
    80007cfa:	e1a2                	sd	s0,192(sp)
    80007cfc:	0980                	addi	s0,sp,208
    80007cfe:	f2a43c23          	sd	a0,-200(s0)
    80007d02:	f2b43823          	sd	a1,-208(s0)
    uint_fast64_t uiZ;
    union ui64_f64 uZ;

    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    uA.f = a;
    80007d06:	f3843783          	ld	a5,-200(s0)
    80007d0a:	f6f43023          	sd	a5,-160(s0)
    uiA = uA.ui;
    80007d0e:	f6043783          	ld	a5,-160(s0)
    80007d12:	faf43823          	sd	a5,-80(s0)
    signA = signF64UI( uiA );
    80007d16:	fb043783          	ld	a5,-80(s0)
    80007d1a:	93fd                	srli	a5,a5,0x3f
    80007d1c:	faf407a3          	sb	a5,-81(s0)
    expA  = expF64UI( uiA );
    80007d20:	fb043783          	ld	a5,-80(s0)
    80007d24:	93d1                	srli	a5,a5,0x34
    80007d26:	7ff7f793          	andi	a5,a5,2047
    80007d2a:	fef43423          	sd	a5,-24(s0)
    sigA  = fracF64UI( uiA );
    80007d2e:	fb043703          	ld	a4,-80(s0)
    80007d32:	57fd                	li	a5,-1
    80007d34:	83b1                	srli	a5,a5,0xc
    80007d36:	8ff9                	and	a5,a5,a4
    80007d38:	fef43023          	sd	a5,-32(s0)
    uB.f = b;
    80007d3c:	f3043783          	ld	a5,-208(s0)
    80007d40:	f4f43c23          	sd	a5,-168(s0)
    uiB = uB.ui;
    80007d44:	f5843783          	ld	a5,-168(s0)
    80007d48:	faf43023          	sd	a5,-96(s0)
    signB = signF64UI( uiB );
    80007d4c:	fa043783          	ld	a5,-96(s0)
    80007d50:	93fd                	srli	a5,a5,0x3f
    80007d52:	f8f40fa3          	sb	a5,-97(s0)
    expB  = expF64UI( uiB );
    80007d56:	fa043783          	ld	a5,-96(s0)
    80007d5a:	93d1                	srli	a5,a5,0x34
    80007d5c:	7ff7f793          	andi	a5,a5,2047
    80007d60:	fcf43c23          	sd	a5,-40(s0)
    sigB  = fracF64UI( uiB );
    80007d64:	fa043703          	ld	a4,-96(s0)
    80007d68:	57fd                	li	a5,-1
    80007d6a:	83b1                	srli	a5,a5,0xc
    80007d6c:	8ff9                	and	a5,a5,a4
    80007d6e:	fcf43823          	sd	a5,-48(s0)
    signZ = signA ^ signB;
    80007d72:	faf44703          	lbu	a4,-81(s0)
    80007d76:	f9f44783          	lbu	a5,-97(s0)
    80007d7a:	8fb9                	xor	a5,a5,a4
    80007d7c:	0ff7f793          	andi	a5,a5,255
    80007d80:	2781                	sext.w	a5,a5
    80007d82:	00f037b3          	snez	a5,a5
    80007d86:	f8f40f23          	sb	a5,-98(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( expA == 0x7FF ) {
    80007d8a:	fe843703          	ld	a4,-24(s0)
    80007d8e:	7ff00793          	li	a5,2047
    80007d92:	02f71163          	bne	a4,a5,80007db4 <f64_div+0xbe>
        if ( sigA ) goto propagateNaN;
    80007d96:	fe043783          	ld	a5,-32(s0)
    80007d9a:	26079763          	bnez	a5,80008008 <f64_div+0x312>
        if ( expB == 0x7FF ) {
    80007d9e:	fd843703          	ld	a4,-40(s0)
    80007da2:	7ff00793          	li	a5,2047
    80007da6:	28f71863          	bne	a4,a5,80008036 <f64_div+0x340>
            if ( sigB ) goto propagateNaN;
    80007daa:	fd043783          	ld	a5,-48(s0)
    80007dae:	26078763          	beqz	a5,8000801c <f64_div+0x326>
    80007db2:	aca1                	j	8000800a <f64_div+0x314>
            goto invalid;
        }
        goto infinity;
    }
    if ( expB == 0x7FF ) {
    80007db4:	fd843703          	ld	a4,-40(s0)
    80007db8:	7ff00793          	li	a5,2047
    80007dbc:	00f71763          	bne	a4,a5,80007dca <f64_div+0xd4>
        if ( sigB ) goto propagateNaN;
    80007dc0:	fd043783          	ld	a5,-48(s0)
    80007dc4:	28078563          	beqz	a5,8000804e <f64_div+0x358>
    80007dc8:	a489                	j	8000800a <f64_div+0x314>
        goto zero;
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( ! expB ) {
    80007dca:	fd843783          	ld	a5,-40(s0)
    80007dce:	e3b1                	bnez	a5,80007e12 <f64_div+0x11c>
        if ( ! sigB ) {
    80007dd0:	fd043783          	ld	a5,-48(s0)
    80007dd4:	ef89                	bnez	a5,80007dee <f64_div+0xf8>
            if ( ! (expA | sigA) ) goto invalid;
    80007dd6:	fe843703          	ld	a4,-24(s0)
    80007dda:	fe043783          	ld	a5,-32(s0)
    80007dde:	8fd9                	or	a5,a5,a4
    80007de0:	24078063          	beqz	a5,80008020 <f64_div+0x32a>
            softfloat_raiseFlags( softfloat_flag_infinite );
    80007de4:	001467f3          	csrrsi	a5,fflags,8
    80007de8:	f8f43823          	sd	a5,-112(s0)
            goto infinity;
    80007dec:	a4b1                	j	80008038 <f64_div+0x342>
        }
        normExpSig = softfloat_normSubnormalF64Sig( sigB );
    80007dee:	fd043503          	ld	a0,-48(s0)
    80007df2:	546020ef          	jal	ra,8000a338 <softfloat_normSubnormalF64Sig>
    80007df6:	87aa                	mv	a5,a0
    80007df8:	882e                	mv	a6,a1
    80007dfa:	f4f43423          	sd	a5,-184(s0)
    80007dfe:	f5043823          	sd	a6,-176(s0)
        expB = normExpSig.exp;
    80007e02:	f4843783          	ld	a5,-184(s0)
    80007e06:	fcf43c23          	sd	a5,-40(s0)
        sigB = normExpSig.sig;
    80007e0a:	f5043783          	ld	a5,-176(s0)
    80007e0e:	fcf43823          	sd	a5,-48(s0)
    }
    if ( ! expA ) {
    80007e12:	fe843783          	ld	a5,-24(s0)
    80007e16:	e79d                	bnez	a5,80007e44 <f64_div+0x14e>
        if ( ! sigA ) goto zero;
    80007e18:	fe043783          	ld	a5,-32(s0)
    80007e1c:	22078b63          	beqz	a5,80008052 <f64_div+0x35c>
        normExpSig = softfloat_normSubnormalF64Sig( sigA );
    80007e20:	fe043503          	ld	a0,-32(s0)
    80007e24:	514020ef          	jal	ra,8000a338 <softfloat_normSubnormalF64Sig>
    80007e28:	87aa                	mv	a5,a0
    80007e2a:	882e                	mv	a6,a1
    80007e2c:	f4f43423          	sd	a5,-184(s0)
    80007e30:	f5043823          	sd	a6,-176(s0)
        expA = normExpSig.exp;
    80007e34:	f4843783          	ld	a5,-184(s0)
    80007e38:	fef43423          	sd	a5,-24(s0)
        sigA = normExpSig.sig;
    80007e3c:	f5043783          	ld	a5,-176(s0)
    80007e40:	fef43023          	sd	a5,-32(s0)
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    expZ = expA - expB + 0x3FE;
    80007e44:	fe843703          	ld	a4,-24(s0)
    80007e48:	fd843783          	ld	a5,-40(s0)
    80007e4c:	40f707b3          	sub	a5,a4,a5
    80007e50:	3fe78793          	addi	a5,a5,1022
    80007e54:	fcf43423          	sd	a5,-56(s0)
    sigA |= UINT64_C( 0x0010000000000000 );
    80007e58:	fe043703          	ld	a4,-32(s0)
    80007e5c:	4785                	li	a5,1
    80007e5e:	17d2                	slli	a5,a5,0x34
    80007e60:	8fd9                	or	a5,a5,a4
    80007e62:	fef43023          	sd	a5,-32(s0)
    sigB |= UINT64_C( 0x0010000000000000 );
    80007e66:	fd043703          	ld	a4,-48(s0)
    80007e6a:	4785                	li	a5,1
    80007e6c:	17d2                	slli	a5,a5,0x34
    80007e6e:	8fd9                	or	a5,a5,a4
    80007e70:	fcf43823          	sd	a5,-48(s0)
    if ( sigA < sigB ) {
    80007e74:	fe043703          	ld	a4,-32(s0)
    80007e78:	fd043783          	ld	a5,-48(s0)
    80007e7c:	00f77d63          	bleu	a5,a4,80007e96 <f64_div+0x1a0>
        --expZ;
    80007e80:	fc843783          	ld	a5,-56(s0)
    80007e84:	17fd                	addi	a5,a5,-1
    80007e86:	fcf43423          	sd	a5,-56(s0)
        sigA <<= 11;
    80007e8a:	fe043783          	ld	a5,-32(s0)
    80007e8e:	07ae                	slli	a5,a5,0xb
    80007e90:	fef43023          	sd	a5,-32(s0)
    80007e94:	a031                	j	80007ea0 <f64_div+0x1aa>
    } else {
        sigA <<= 10;
    80007e96:	fe043783          	ld	a5,-32(s0)
    80007e9a:	07aa                	slli	a5,a5,0xa
    80007e9c:	fef43023          	sd	a5,-32(s0)
    }
    sigB <<= 11;
    80007ea0:	fd043783          	ld	a5,-48(s0)
    80007ea4:	07ae                	slli	a5,a5,0xb
    80007ea6:	fcf43823          	sd	a5,-48(s0)
    recip32 = softfloat_approxRecip32_1( sigB>>32 ) - 2;
    80007eaa:	fd043783          	ld	a5,-48(s0)
    80007eae:	9381                	srli	a5,a5,0x20
    80007eb0:	2781                	sext.w	a5,a5
    80007eb2:	853e                	mv	a0,a5
    80007eb4:	316010ef          	jal	ra,800091ca <softfloat_approxRecip32_1>
    80007eb8:	87aa                	mv	a5,a0
    80007eba:	2781                	sext.w	a5,a5
    80007ebc:	37f9                	addiw	a5,a5,-2
    80007ebe:	f8f42623          	sw	a5,-116(s0)
    sig32Z = ((uint32_t) (sigA>>32) * (uint_fast64_t) recip32)>>32;
    80007ec2:	fe043783          	ld	a5,-32(s0)
    80007ec6:	9381                	srli	a5,a5,0x20
    80007ec8:	2781                	sext.w	a5,a5
    80007eca:	02079713          	slli	a4,a5,0x20
    80007ece:	9301                	srli	a4,a4,0x20
    80007ed0:	f8c46783          	lwu	a5,-116(s0)
    80007ed4:	02f707b3          	mul	a5,a4,a5
    80007ed8:	9381                	srli	a5,a5,0x20
    80007eda:	f8f42423          	sw	a5,-120(s0)
    doubleTerm = sig32Z<<1;
    80007ede:	f8842783          	lw	a5,-120(s0)
    80007ee2:	0017979b          	slliw	a5,a5,0x1
    80007ee6:	f8f42223          	sw	a5,-124(s0)
    rem =
        ((sigA - (uint_fast64_t) doubleTerm * (uint32_t) (sigB>>32))<<28)
    80007eea:	f8446703          	lwu	a4,-124(s0)
    80007eee:	fd043783          	ld	a5,-48(s0)
    80007ef2:	9381                	srli	a5,a5,0x20
    80007ef4:	2781                	sext.w	a5,a5
    80007ef6:	1782                	slli	a5,a5,0x20
    80007ef8:	9381                	srli	a5,a5,0x20
    80007efa:	02f707b3          	mul	a5,a4,a5
    80007efe:	fe043703          	ld	a4,-32(s0)
    80007f02:	40f707b3          	sub	a5,a4,a5
    80007f06:	01c79713          	slli	a4,a5,0x1c
            - (uint_fast64_t) doubleTerm * ((uint32_t) sigB>>4);
    80007f0a:	f8446683          	lwu	a3,-124(s0)
    80007f0e:	fd043783          	ld	a5,-48(s0)
    80007f12:	2781                	sext.w	a5,a5
    80007f14:	0047d79b          	srliw	a5,a5,0x4
    80007f18:	2781                	sext.w	a5,a5
    80007f1a:	1782                	slli	a5,a5,0x20
    80007f1c:	9381                	srli	a5,a5,0x20
    80007f1e:	02f687b3          	mul	a5,a3,a5
    rem =
    80007f22:	40f707b3          	sub	a5,a4,a5
    80007f26:	f6f43c23          	sd	a5,-136(s0)
    q = (((uint32_t) (rem>>32) * (uint_fast64_t) recip32)>>32) + 4;
    80007f2a:	f7843783          	ld	a5,-136(s0)
    80007f2e:	9381                	srli	a5,a5,0x20
    80007f30:	2781                	sext.w	a5,a5
    80007f32:	02079713          	slli	a4,a5,0x20
    80007f36:	9301                	srli	a4,a4,0x20
    80007f38:	f8c46783          	lwu	a5,-116(s0)
    80007f3c:	02f707b3          	mul	a5,a4,a5
    80007f40:	9381                	srli	a5,a5,0x20
    80007f42:	2781                	sext.w	a5,a5
    80007f44:	2791                	addiw	a5,a5,4
    80007f46:	f6f42a23          	sw	a5,-140(s0)
    sigZ = ((uint_fast64_t) sig32Z<<32) + ((uint_fast64_t) q<<4);
    80007f4a:	f8846783          	lwu	a5,-120(s0)
    80007f4e:	02079713          	slli	a4,a5,0x20
    80007f52:	f7446783          	lwu	a5,-140(s0)
    80007f56:	0792                	slli	a5,a5,0x4
    80007f58:	97ba                	add	a5,a5,a4
    80007f5a:	fcf43023          	sd	a5,-64(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( (sigZ & 0x1FF) < 4<<4 ) {
    80007f5e:	fc043783          	ld	a5,-64(s0)
    80007f62:	1c07f793          	andi	a5,a5,448
    80007f66:	e7d1                	bnez	a5,80007ff2 <f64_div+0x2fc>
        q &= ~7;
    80007f68:	f7442783          	lw	a5,-140(s0)
    80007f6c:	9be1                	andi	a5,a5,-8
    80007f6e:	f6f42a23          	sw	a5,-140(s0)
        sigZ &= ~(uint_fast64_t) 0x7F;
    80007f72:	fc043783          	ld	a5,-64(s0)
    80007f76:	f807f793          	andi	a5,a5,-128
    80007f7a:	fcf43023          	sd	a5,-64(s0)
        doubleTerm = q<<1;
    80007f7e:	f7442783          	lw	a5,-140(s0)
    80007f82:	0017979b          	slliw	a5,a5,0x1
    80007f86:	f8f42223          	sw	a5,-124(s0)
        rem =
            ((rem - (uint_fast64_t) doubleTerm * (uint32_t) (sigB>>32))<<28)
    80007f8a:	f8446703          	lwu	a4,-124(s0)
    80007f8e:	fd043783          	ld	a5,-48(s0)
    80007f92:	9381                	srli	a5,a5,0x20
    80007f94:	2781                	sext.w	a5,a5
    80007f96:	1782                	slli	a5,a5,0x20
    80007f98:	9381                	srli	a5,a5,0x20
    80007f9a:	02f707b3          	mul	a5,a4,a5
    80007f9e:	f7843703          	ld	a4,-136(s0)
    80007fa2:	40f707b3          	sub	a5,a4,a5
    80007fa6:	01c79713          	slli	a4,a5,0x1c
                - (uint_fast64_t) doubleTerm * ((uint32_t) sigB>>4);
    80007faa:	f8446683          	lwu	a3,-124(s0)
    80007fae:	fd043783          	ld	a5,-48(s0)
    80007fb2:	2781                	sext.w	a5,a5
    80007fb4:	0047d79b          	srliw	a5,a5,0x4
    80007fb8:	2781                	sext.w	a5,a5
    80007fba:	1782                	slli	a5,a5,0x20
    80007fbc:	9381                	srli	a5,a5,0x20
    80007fbe:	02f687b3          	mul	a5,a3,a5
        rem =
    80007fc2:	40f707b3          	sub	a5,a4,a5
    80007fc6:	f6f43c23          	sd	a5,-136(s0)
        if ( rem & UINT64_C( 0x8000000000000000 ) ) {
    80007fca:	f7843783          	ld	a5,-136(s0)
    80007fce:	0007d963          	bgez	a5,80007fe0 <f64_div+0x2ea>
            sigZ -= 1<<7;
    80007fd2:	fc043783          	ld	a5,-64(s0)
    80007fd6:	f8078793          	addi	a5,a5,-128
    80007fda:	fcf43023          	sd	a5,-64(s0)
    80007fde:	a811                	j	80007ff2 <f64_div+0x2fc>
        } else {
            if ( rem ) sigZ |= 1;
    80007fe0:	f7843783          	ld	a5,-136(s0)
    80007fe4:	c799                	beqz	a5,80007ff2 <f64_div+0x2fc>
    80007fe6:	fc043783          	ld	a5,-64(s0)
    80007fea:	0017e793          	ori	a5,a5,1
    80007fee:	fcf43023          	sd	a5,-64(s0)
        }
    }
    return softfloat_roundPackToF64( signZ, expZ, sigZ );
    80007ff2:	f9e44783          	lbu	a5,-98(s0)
    80007ff6:	fc043603          	ld	a2,-64(s0)
    80007ffa:	fc843583          	ld	a1,-56(s0)
    80007ffe:	853e                	mv	a0,a5
    80008000:	724020ef          	jal	ra,8000a724 <softfloat_roundPackToF64>
    80008004:	87aa                	mv	a5,a0
    80008006:	a095                	j	8000806a <f64_div+0x374>
        if ( sigA ) goto propagateNaN;
    80008008:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 propagateNaN:
    uiZ = softfloat_propagateNaNF64UI( uiA, uiB );
    8000800a:	fa043583          	ld	a1,-96(s0)
    8000800e:	fb043503          	ld	a0,-80(s0)
    80008012:	79a030ef          	jal	ra,8000b7ac <softfloat_propagateNaNF64UI>
    80008016:	faa43c23          	sd	a0,-72(s0)
    goto uiZ;
    8000801a:	a091                	j	8000805e <f64_div+0x368>
            goto invalid;
    8000801c:	0001                	nop
    8000801e:	a011                	j	80008022 <f64_div+0x32c>
            if ( ! (expA | sigA) ) goto invalid;
    80008020:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 invalid:
    softfloat_raiseFlags( softfloat_flag_invalid );
    80008022:	001867f3          	csrrsi	a5,fflags,16
    80008026:	f6f43423          	sd	a5,-152(s0)
    uiZ = defaultNaNF64UI;
    8000802a:	00fff7b7          	lui	a5,0xfff
    8000802e:	179e                	slli	a5,a5,0x27
    80008030:	faf43c23          	sd	a5,-72(s0)
    goto uiZ;
    80008034:	a02d                	j	8000805e <f64_div+0x368>
        goto infinity;
    80008036:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 infinity:
    uiZ = packToF64UI( signZ, 0x7FF, 0 );
    80008038:	f9e44783          	lbu	a5,-98(s0)
    8000803c:	03f79713          	slli	a4,a5,0x3f
    80008040:	7ff00793          	li	a5,2047
    80008044:	17d2                	slli	a5,a5,0x34
    80008046:	97ba                	add	a5,a5,a4
    80008048:	faf43c23          	sd	a5,-72(s0)
    goto uiZ;
    8000804c:	a809                	j	8000805e <f64_div+0x368>
        goto zero;
    8000804e:	0001                	nop
    80008050:	a011                	j	80008054 <f64_div+0x35e>
        if ( ! sigA ) goto zero;
    80008052:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 zero:
    uiZ = packToF64UI( signZ, 0, 0 );
    80008054:	f9e44783          	lbu	a5,-98(s0)
    80008058:	17fe                	slli	a5,a5,0x3f
    8000805a:	faf43c23          	sd	a5,-72(s0)
 uiZ:
    uZ.ui = uiZ;
    8000805e:	fb843783          	ld	a5,-72(s0)
    80008062:	f4f43023          	sd	a5,-192(s0)
    return uZ.f;
    80008066:	f4043783          	ld	a5,-192(s0)

}
    8000806a:	853e                	mv	a0,a5
    8000806c:	60ae                	ld	ra,200(sp)
    8000806e:	640e                	ld	s0,192(sp)
    80008070:	6169                	addi	sp,sp,208
    80008072:	8082                	ret

0000000080008074 <f64_eq>:
#include "internals.h"
#include "specialize.h"
#include "softfloat.h"

bool f64_eq( float64_t a, float64_t b )
{
    80008074:	715d                	addi	sp,sp,-80
    80008076:	e4a2                	sd	s0,72(sp)
    80008078:	0880                	addi	s0,sp,80
    8000807a:	faa43c23          	sd	a0,-72(s0)
    8000807e:	fab43823          	sd	a1,-80(s0)
    union ui64_f64 uA;
    uint_fast64_t uiA;
    union ui64_f64 uB;
    uint_fast64_t uiB;

    uA.f = a;
    80008082:	fb843783          	ld	a5,-72(s0)
    80008086:	fcf43823          	sd	a5,-48(s0)
    uiA = uA.ui;
    8000808a:	fd043783          	ld	a5,-48(s0)
    8000808e:	fef43423          	sd	a5,-24(s0)
    uB.f = b;
    80008092:	fb043783          	ld	a5,-80(s0)
    80008096:	fcf43423          	sd	a5,-56(s0)
    uiB = uB.ui;
    8000809a:	fc843783          	ld	a5,-56(s0)
    8000809e:	fef43023          	sd	a5,-32(s0)
    if ( isNaNF64UI( uiA ) || isNaNF64UI( uiB ) ) {
    800080a2:	fe843783          	ld	a5,-24(s0)
    800080a6:	fff7c713          	not	a4,a5
    800080aa:	7ff00793          	li	a5,2047
    800080ae:	17d2                	slli	a5,a5,0x34
    800080b0:	8ff9                	and	a5,a5,a4
    800080b2:	e799                	bnez	a5,800080c0 <f64_eq+0x4c>
    800080b4:	fe843703          	ld	a4,-24(s0)
    800080b8:	57fd                	li	a5,-1
    800080ba:	83b1                	srli	a5,a5,0xc
    800080bc:	8ff9                	and	a5,a5,a4
    800080be:	e385                	bnez	a5,800080de <f64_eq+0x6a>
    800080c0:	fe043783          	ld	a5,-32(s0)
    800080c4:	fff7c713          	not	a4,a5
    800080c8:	7ff00793          	li	a5,2047
    800080cc:	17d2                	slli	a5,a5,0x34
    800080ce:	8ff9                	and	a5,a5,a4
    800080d0:	efb9                	bnez	a5,8000812e <f64_eq+0xba>
    800080d2:	fe043703          	ld	a4,-32(s0)
    800080d6:	57fd                	li	a5,-1
    800080d8:	83b1                	srli	a5,a5,0xc
    800080da:	8ff9                	and	a5,a5,a4
    800080dc:	cba9                	beqz	a5,8000812e <f64_eq+0xba>
        if (
            softfloat_isSigNaNF64UI( uiA ) || softfloat_isSigNaNF64UI( uiB )
    800080de:	fe843703          	ld	a4,-24(s0)
    800080e2:	00fff7b7          	lui	a5,0xfff
    800080e6:	179e                	slli	a5,a5,0x27
    800080e8:	8f7d                	and	a4,a4,a5
        if (
    800080ea:	7ff00793          	li	a5,2047
    800080ee:	17d2                	slli	a5,a5,0x34
    800080f0:	00f71863          	bne	a4,a5,80008100 <f64_eq+0x8c>
            softfloat_isSigNaNF64UI( uiA ) || softfloat_isSigNaNF64UI( uiB )
    800080f4:	fe843703          	ld	a4,-24(s0)
    800080f8:	57fd                	li	a5,-1
    800080fa:	83b5                	srli	a5,a5,0xd
    800080fc:	8ff9                	and	a5,a5,a4
    800080fe:	e395                	bnez	a5,80008122 <f64_eq+0xae>
    80008100:	fe043703          	ld	a4,-32(s0)
    80008104:	00fff7b7          	lui	a5,0xfff
    80008108:	179e                	slli	a5,a5,0x27
    8000810a:	8f7d                	and	a4,a4,a5
    8000810c:	7ff00793          	li	a5,2047
    80008110:	17d2                	slli	a5,a5,0x34
    80008112:	00f71c63          	bne	a4,a5,8000812a <f64_eq+0xb6>
    80008116:	fe043703          	ld	a4,-32(s0)
    8000811a:	57fd                	li	a5,-1
    8000811c:	83b5                	srli	a5,a5,0xd
    8000811e:	8ff9                	and	a5,a5,a4
    80008120:	c789                	beqz	a5,8000812a <f64_eq+0xb6>
        ) {
            softfloat_raiseFlags( softfloat_flag_invalid );
    80008122:	001867f3          	csrrsi	a5,fflags,16
    80008126:	fcf43c23          	sd	a5,-40(s0)
        }
        return false;
    8000812a:	4781                	li	a5,0
    8000812c:	a035                	j	80008158 <f64_eq+0xe4>
    }
    return (uiA == uiB) || ! ((uiA | uiB) & UINT64_C( 0x7FFFFFFFFFFFFFFF ));
    8000812e:	fe843703          	ld	a4,-24(s0)
    80008132:	fe043783          	ld	a5,-32(s0)
    80008136:	00f70b63          	beq	a4,a5,8000814c <f64_eq+0xd8>
    8000813a:	fe843703          	ld	a4,-24(s0)
    8000813e:	fe043783          	ld	a5,-32(s0)
    80008142:	8f5d                	or	a4,a4,a5
    80008144:	57fd                	li	a5,-1
    80008146:	8385                	srli	a5,a5,0x1
    80008148:	8ff9                	and	a5,a5,a4
    8000814a:	e399                	bnez	a5,80008150 <f64_eq+0xdc>
    8000814c:	4785                	li	a5,1
    8000814e:	a011                	j	80008152 <f64_eq+0xde>
    80008150:	4781                	li	a5,0
    80008152:	8b85                	andi	a5,a5,1
    80008154:	0ff7f793          	andi	a5,a5,255

}
    80008158:	853e                	mv	a0,a5
    8000815a:	6426                	ld	s0,72(sp)
    8000815c:	6161                	addi	sp,sp,80
    8000815e:	8082                	ret

0000000080008160 <f64_lt>:
#include "platform.h"
#include "internals.h"
#include "softfloat.h"

bool f64_lt( float64_t a, float64_t b )
{
    80008160:	715d                	addi	sp,sp,-80
    80008162:	e4a2                	sd	s0,72(sp)
    80008164:	0880                	addi	s0,sp,80
    80008166:	faa43c23          	sd	a0,-72(s0)
    8000816a:	fab43823          	sd	a1,-80(s0)
    uint_fast64_t uiA;
    union ui64_f64 uB;
    uint_fast64_t uiB;
    bool signA, signB;

    uA.f = a;
    8000816e:	fb843783          	ld	a5,-72(s0)
    80008172:	fcf43423          	sd	a5,-56(s0)
    uiA = uA.ui;
    80008176:	fc843783          	ld	a5,-56(s0)
    8000817a:	fef43423          	sd	a5,-24(s0)
    uB.f = b;
    8000817e:	fb043783          	ld	a5,-80(s0)
    80008182:	fcf43023          	sd	a5,-64(s0)
    uiB = uB.ui;
    80008186:	fc043783          	ld	a5,-64(s0)
    8000818a:	fef43023          	sd	a5,-32(s0)
    if ( isNaNF64UI( uiA ) || isNaNF64UI( uiB ) ) {
    8000818e:	fe843783          	ld	a5,-24(s0)
    80008192:	fff7c713          	not	a4,a5
    80008196:	7ff00793          	li	a5,2047
    8000819a:	17d2                	slli	a5,a5,0x34
    8000819c:	8ff9                	and	a5,a5,a4
    8000819e:	e799                	bnez	a5,800081ac <f64_lt+0x4c>
    800081a0:	fe843703          	ld	a4,-24(s0)
    800081a4:	57fd                	li	a5,-1
    800081a6:	83b1                	srli	a5,a5,0xc
    800081a8:	8ff9                	and	a5,a5,a4
    800081aa:	e385                	bnez	a5,800081ca <f64_lt+0x6a>
    800081ac:	fe043783          	ld	a5,-32(s0)
    800081b0:	fff7c713          	not	a4,a5
    800081b4:	7ff00793          	li	a5,2047
    800081b8:	17d2                	slli	a5,a5,0x34
    800081ba:	8ff9                	and	a5,a5,a4
    800081bc:	ef89                	bnez	a5,800081d6 <f64_lt+0x76>
    800081be:	fe043703          	ld	a4,-32(s0)
    800081c2:	57fd                	li	a5,-1
    800081c4:	83b1                	srli	a5,a5,0xc
    800081c6:	8ff9                	and	a5,a5,a4
    800081c8:	c799                	beqz	a5,800081d6 <f64_lt+0x76>
        softfloat_raiseFlags( softfloat_flag_invalid );
    800081ca:	001867f3          	csrrsi	a5,fflags,16
    800081ce:	fcf43823          	sd	a5,-48(s0)
        return false;
    800081d2:	4781                	li	a5,0
    800081d4:	a071                	j	80008260 <f64_lt+0x100>
    }
    signA = signF64UI( uiA );
    800081d6:	fe843783          	ld	a5,-24(s0)
    800081da:	93fd                	srli	a5,a5,0x3f
    800081dc:	fcf40fa3          	sb	a5,-33(s0)
    signB = signF64UI( uiB );
    800081e0:	fe043783          	ld	a5,-32(s0)
    800081e4:	93fd                	srli	a5,a5,0x3f
    800081e6:	fcf40f23          	sb	a5,-34(s0)
    return
        (signA != signB)
            ? signA && ((uiA | uiB) & UINT64_C( 0x7FFFFFFFFFFFFFFF ))
            : (uiA != uiB) && (signA ^ (uiA < uiB));
    800081ea:	fdf44703          	lbu	a4,-33(s0)
    800081ee:	fde44783          	lbu	a5,-34(s0)
    800081f2:	0ff77713          	andi	a4,a4,255
    800081f6:	0ff7f793          	andi	a5,a5,255
    800081fa:	02f70763          	beq	a4,a5,80008228 <f64_lt+0xc8>
            ? signA && ((uiA | uiB) & UINT64_C( 0x7FFFFFFFFFFFFFFF ))
    800081fe:	fdf44783          	lbu	a5,-33(s0)
    80008202:	0ff7f793          	andi	a5,a5,255
    80008206:	cf81                	beqz	a5,8000821e <f64_lt+0xbe>
    80008208:	fe843703          	ld	a4,-24(s0)
    8000820c:	fe043783          	ld	a5,-32(s0)
    80008210:	8f5d                	or	a4,a4,a5
    80008212:	57fd                	li	a5,-1
    80008214:	8385                	srli	a5,a5,0x1
    80008216:	8ff9                	and	a5,a5,a4
    80008218:	c399                	beqz	a5,8000821e <f64_lt+0xbe>
    8000821a:	4785                	li	a5,1
    8000821c:	a011                	j	80008220 <f64_lt+0xc0>
    8000821e:	4781                	li	a5,0
            : (uiA != uiB) && (signA ^ (uiA < uiB));
    80008220:	8b85                	andi	a5,a5,1
    80008222:	0ff7f793          	andi	a5,a5,255
    80008226:	a82d                	j	80008260 <f64_lt+0x100>
    80008228:	fe843703          	ld	a4,-24(s0)
    8000822c:	fe043783          	ld	a5,-32(s0)
    80008230:	02f70463          	beq	a4,a5,80008258 <f64_lt+0xf8>
    80008234:	fdf44783          	lbu	a5,-33(s0)
    80008238:	0007869b          	sext.w	a3,a5
    8000823c:	fe843703          	ld	a4,-24(s0)
    80008240:	fe043783          	ld	a5,-32(s0)
    80008244:	00f737b3          	sltu	a5,a4,a5
    80008248:	0ff7f793          	andi	a5,a5,255
    8000824c:	2781                	sext.w	a5,a5
    8000824e:	8736                	mv	a4,a3
    80008250:	00f70463          	beq	a4,a5,80008258 <f64_lt+0xf8>
    80008254:	4785                	li	a5,1
    80008256:	a011                	j	8000825a <f64_lt+0xfa>
    80008258:	4781                	li	a5,0
    8000825a:	8b85                	andi	a5,a5,1
    8000825c:	0ff7f793          	andi	a5,a5,255

}
    80008260:	853e                	mv	a0,a5
    80008262:	6426                	ld	s0,72(sp)
    80008264:	6161                	addi	sp,sp,80
    80008266:	8082                	ret

0000000080008268 <f64_lt_quiet>:
#include "internals.h"
#include "specialize.h"
#include "softfloat.h"

bool f64_lt_quiet( float64_t a, float64_t b )
{
    80008268:	715d                	addi	sp,sp,-80
    8000826a:	e4a2                	sd	s0,72(sp)
    8000826c:	0880                	addi	s0,sp,80
    8000826e:	faa43c23          	sd	a0,-72(s0)
    80008272:	fab43823          	sd	a1,-80(s0)
    uint_fast64_t uiA;
    union ui64_f64 uB;
    uint_fast64_t uiB;
    bool signA, signB;

    uA.f = a;
    80008276:	fb843783          	ld	a5,-72(s0)
    8000827a:	fcf43423          	sd	a5,-56(s0)
    uiA = uA.ui;
    8000827e:	fc843783          	ld	a5,-56(s0)
    80008282:	fef43423          	sd	a5,-24(s0)
    uB.f = b;
    80008286:	fb043783          	ld	a5,-80(s0)
    8000828a:	fcf43023          	sd	a5,-64(s0)
    uiB = uB.ui;
    8000828e:	fc043783          	ld	a5,-64(s0)
    80008292:	fef43023          	sd	a5,-32(s0)
    if ( isNaNF64UI( uiA ) || isNaNF64UI( uiB ) ) {
    80008296:	fe843783          	ld	a5,-24(s0)
    8000829a:	fff7c713          	not	a4,a5
    8000829e:	7ff00793          	li	a5,2047
    800082a2:	17d2                	slli	a5,a5,0x34
    800082a4:	8ff9                	and	a5,a5,a4
    800082a6:	e799                	bnez	a5,800082b4 <f64_lt_quiet+0x4c>
    800082a8:	fe843703          	ld	a4,-24(s0)
    800082ac:	57fd                	li	a5,-1
    800082ae:	83b1                	srli	a5,a5,0xc
    800082b0:	8ff9                	and	a5,a5,a4
    800082b2:	e385                	bnez	a5,800082d2 <f64_lt_quiet+0x6a>
    800082b4:	fe043783          	ld	a5,-32(s0)
    800082b8:	fff7c713          	not	a4,a5
    800082bc:	7ff00793          	li	a5,2047
    800082c0:	17d2                	slli	a5,a5,0x34
    800082c2:	8ff9                	and	a5,a5,a4
    800082c4:	efb9                	bnez	a5,80008322 <f64_lt_quiet+0xba>
    800082c6:	fe043703          	ld	a4,-32(s0)
    800082ca:	57fd                	li	a5,-1
    800082cc:	83b1                	srli	a5,a5,0xc
    800082ce:	8ff9                	and	a5,a5,a4
    800082d0:	cba9                	beqz	a5,80008322 <f64_lt_quiet+0xba>
        if (
            softfloat_isSigNaNF64UI( uiA ) || softfloat_isSigNaNF64UI( uiB )
    800082d2:	fe843703          	ld	a4,-24(s0)
    800082d6:	00fff7b7          	lui	a5,0xfff
    800082da:	179e                	slli	a5,a5,0x27
    800082dc:	8f7d                	and	a4,a4,a5
        if (
    800082de:	7ff00793          	li	a5,2047
    800082e2:	17d2                	slli	a5,a5,0x34
    800082e4:	00f71863          	bne	a4,a5,800082f4 <f64_lt_quiet+0x8c>
            softfloat_isSigNaNF64UI( uiA ) || softfloat_isSigNaNF64UI( uiB )
    800082e8:	fe843703          	ld	a4,-24(s0)
    800082ec:	57fd                	li	a5,-1
    800082ee:	83b5                	srli	a5,a5,0xd
    800082f0:	8ff9                	and	a5,a5,a4
    800082f2:	e395                	bnez	a5,80008316 <f64_lt_quiet+0xae>
    800082f4:	fe043703          	ld	a4,-32(s0)
    800082f8:	00fff7b7          	lui	a5,0xfff
    800082fc:	179e                	slli	a5,a5,0x27
    800082fe:	8f7d                	and	a4,a4,a5
    80008300:	7ff00793          	li	a5,2047
    80008304:	17d2                	slli	a5,a5,0x34
    80008306:	00f71c63          	bne	a4,a5,8000831e <f64_lt_quiet+0xb6>
    8000830a:	fe043703          	ld	a4,-32(s0)
    8000830e:	57fd                	li	a5,-1
    80008310:	83b5                	srli	a5,a5,0xd
    80008312:	8ff9                	and	a5,a5,a4
    80008314:	c789                	beqz	a5,8000831e <f64_lt_quiet+0xb6>
        ) {
            softfloat_raiseFlags( softfloat_flag_invalid );
    80008316:	001867f3          	csrrsi	a5,fflags,16
    8000831a:	fcf43823          	sd	a5,-48(s0)
        }
        return false;
    8000831e:	4781                	li	a5,0
    80008320:	a071                	j	800083ac <f64_lt_quiet+0x144>
    }
    signA = signF64UI( uiA );
    80008322:	fe843783          	ld	a5,-24(s0)
    80008326:	93fd                	srli	a5,a5,0x3f
    80008328:	fcf40fa3          	sb	a5,-33(s0)
    signB = signF64UI( uiB );
    8000832c:	fe043783          	ld	a5,-32(s0)
    80008330:	93fd                	srli	a5,a5,0x3f
    80008332:	fcf40f23          	sb	a5,-34(s0)
    return
        (signA != signB)
            ? signA && ((uiA | uiB) & UINT64_C( 0x7FFFFFFFFFFFFFFF ))
            : (uiA != uiB) && (signA ^ (uiA < uiB));
    80008336:	fdf44703          	lbu	a4,-33(s0)
    8000833a:	fde44783          	lbu	a5,-34(s0)
    8000833e:	0ff77713          	andi	a4,a4,255
    80008342:	0ff7f793          	andi	a5,a5,255
    80008346:	02f70763          	beq	a4,a5,80008374 <f64_lt_quiet+0x10c>
            ? signA && ((uiA | uiB) & UINT64_C( 0x7FFFFFFFFFFFFFFF ))
    8000834a:	fdf44783          	lbu	a5,-33(s0)
    8000834e:	0ff7f793          	andi	a5,a5,255
    80008352:	cf81                	beqz	a5,8000836a <f64_lt_quiet+0x102>
    80008354:	fe843703          	ld	a4,-24(s0)
    80008358:	fe043783          	ld	a5,-32(s0)
    8000835c:	8f5d                	or	a4,a4,a5
    8000835e:	57fd                	li	a5,-1
    80008360:	8385                	srli	a5,a5,0x1
    80008362:	8ff9                	and	a5,a5,a4
    80008364:	c399                	beqz	a5,8000836a <f64_lt_quiet+0x102>
    80008366:	4785                	li	a5,1
    80008368:	a011                	j	8000836c <f64_lt_quiet+0x104>
    8000836a:	4781                	li	a5,0
            : (uiA != uiB) && (signA ^ (uiA < uiB));
    8000836c:	8b85                	andi	a5,a5,1
    8000836e:	0ff7f793          	andi	a5,a5,255
    80008372:	a82d                	j	800083ac <f64_lt_quiet+0x144>
    80008374:	fe843703          	ld	a4,-24(s0)
    80008378:	fe043783          	ld	a5,-32(s0)
    8000837c:	02f70463          	beq	a4,a5,800083a4 <f64_lt_quiet+0x13c>
    80008380:	fdf44783          	lbu	a5,-33(s0)
    80008384:	0007869b          	sext.w	a3,a5
    80008388:	fe843703          	ld	a4,-24(s0)
    8000838c:	fe043783          	ld	a5,-32(s0)
    80008390:	00f737b3          	sltu	a5,a4,a5
    80008394:	0ff7f793          	andi	a5,a5,255
    80008398:	2781                	sext.w	a5,a5
    8000839a:	8736                	mv	a4,a3
    8000839c:	00f70463          	beq	a4,a5,800083a4 <f64_lt_quiet+0x13c>
    800083a0:	4785                	li	a5,1
    800083a2:	a011                	j	800083a6 <f64_lt_quiet+0x13e>
    800083a4:	4781                	li	a5,0
    800083a6:	8b85                	andi	a5,a5,1
    800083a8:	0ff7f793          	andi	a5,a5,255

}
    800083ac:	853e                	mv	a0,a5
    800083ae:	6426                	ld	s0,72(sp)
    800083b0:	6161                	addi	sp,sp,80
    800083b2:	8082                	ret

00000000800083b4 <f64_mul>:
#include "internals.h"
#include "specialize.h"
#include "softfloat.h"

float64_t f64_mul( float64_t a, float64_t b )
{
    800083b4:	7131                	addi	sp,sp,-192
    800083b6:	fd06                	sd	ra,184(sp)
    800083b8:	f922                	sd	s0,176(sp)
    800083ba:	0180                	addi	s0,sp,192
    800083bc:	f4a43423          	sd	a0,-184(s0)
    800083c0:	f4b43023          	sd	a1,-192(s0)
    uint_fast64_t sigZ, uiZ;
    union ui64_f64 uZ;

    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    uA.f = a;
    800083c4:	f4843783          	ld	a5,-184(s0)
    800083c8:	f8f43023          	sd	a5,-128(s0)
    uiA = uA.ui;
    800083cc:	f8043783          	ld	a5,-128(s0)
    800083d0:	faf43423          	sd	a5,-88(s0)
    signA = signF64UI( uiA );
    800083d4:	fa843783          	ld	a5,-88(s0)
    800083d8:	93fd                	srli	a5,a5,0x3f
    800083da:	faf403a3          	sb	a5,-89(s0)
    expA  = expF64UI( uiA );
    800083de:	fa843783          	ld	a5,-88(s0)
    800083e2:	93d1                	srli	a5,a5,0x34
    800083e4:	7ff7f793          	andi	a5,a5,2047
    800083e8:	fef43423          	sd	a5,-24(s0)
    sigA  = fracF64UI( uiA );
    800083ec:	fa843703          	ld	a4,-88(s0)
    800083f0:	57fd                	li	a5,-1
    800083f2:	83b1                	srli	a5,a5,0xc
    800083f4:	8ff9                	and	a5,a5,a4
    800083f6:	fef43023          	sd	a5,-32(s0)
    uB.f = b;
    800083fa:	f4043783          	ld	a5,-192(s0)
    800083fe:	f6f43c23          	sd	a5,-136(s0)
    uiB = uB.ui;
    80008402:	f7843783          	ld	a5,-136(s0)
    80008406:	f8f43c23          	sd	a5,-104(s0)
    signB = signF64UI( uiB );
    8000840a:	f9843783          	ld	a5,-104(s0)
    8000840e:	93fd                	srli	a5,a5,0x3f
    80008410:	f8f40ba3          	sb	a5,-105(s0)
    expB  = expF64UI( uiB );
    80008414:	f9843783          	ld	a5,-104(s0)
    80008418:	93d1                	srli	a5,a5,0x34
    8000841a:	7ff7f793          	andi	a5,a5,2047
    8000841e:	fcf43c23          	sd	a5,-40(s0)
    sigB  = fracF64UI( uiB );
    80008422:	f9843703          	ld	a4,-104(s0)
    80008426:	57fd                	li	a5,-1
    80008428:	83b1                	srli	a5,a5,0xc
    8000842a:	8ff9                	and	a5,a5,a4
    8000842c:	fcf43823          	sd	a5,-48(s0)
    signZ = signA ^ signB;
    80008430:	fa744703          	lbu	a4,-89(s0)
    80008434:	f9744783          	lbu	a5,-105(s0)
    80008438:	8fb9                	xor	a5,a5,a4
    8000843a:	0ff7f793          	andi	a5,a5,255
    8000843e:	2781                	sext.w	a5,a5
    80008440:	00f037b3          	snez	a5,a5
    80008444:	f8f40b23          	sb	a5,-106(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( expA == 0x7FF ) {
    80008448:	fe843703          	ld	a4,-24(s0)
    8000844c:	7ff00793          	li	a5,2047
    80008450:	02f71863          	bne	a4,a5,80008480 <f64_mul+0xcc>
        if ( sigA || ((expB == 0x7FF) && sigB) ) goto propagateNaN;
    80008454:	fe043783          	ld	a5,-32(s0)
    80008458:	16079063          	bnez	a5,800085b8 <f64_mul+0x204>
    8000845c:	fd843703          	ld	a4,-40(s0)
    80008460:	7ff00793          	li	a5,2047
    80008464:	00f71663          	bne	a4,a5,80008470 <f64_mul+0xbc>
    80008468:	fd043783          	ld	a5,-48(s0)
    8000846c:	14079663          	bnez	a5,800085b8 <f64_mul+0x204>
        magBits = expB | sigB;
    80008470:	fd843783          	ld	a5,-40(s0)
    80008474:	fd043703          	ld	a4,-48(s0)
    80008478:	8fd9                	or	a5,a5,a4
    8000847a:	fcf43423          	sd	a5,-56(s0)
        goto infArg;
    8000847e:	aa89                	j	800085d0 <f64_mul+0x21c>
    }
    if ( expB == 0x7FF ) {
    80008480:	fd843703          	ld	a4,-40(s0)
    80008484:	7ff00793          	li	a5,2047
    80008488:	00f71e63          	bne	a4,a5,800084a4 <f64_mul+0xf0>
        if ( sigB ) goto propagateNaN;
    8000848c:	fd043783          	ld	a5,-48(s0)
    80008490:	12079663          	bnez	a5,800085bc <f64_mul+0x208>
        magBits = expA | sigA;
    80008494:	fe843783          	ld	a5,-24(s0)
    80008498:	fe043703          	ld	a4,-32(s0)
    8000849c:	8fd9                	or	a5,a5,a4
    8000849e:	fcf43423          	sd	a5,-56(s0)
        goto infArg;
    800084a2:	a23d                	j	800085d0 <f64_mul+0x21c>
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( ! expA ) {
    800084a4:	fe843783          	ld	a5,-24(s0)
    800084a8:	e79d                	bnez	a5,800084d6 <f64_mul+0x122>
        if ( ! sigA ) goto zero;
    800084aa:	fe043783          	ld	a5,-32(s0)
    800084ae:	14078963          	beqz	a5,80008600 <f64_mul+0x24c>
        normExpSig = softfloat_normSubnormalF64Sig( sigA );
    800084b2:	fe043503          	ld	a0,-32(s0)
    800084b6:	683010ef          	jal	ra,8000a338 <softfloat_normSubnormalF64Sig>
    800084ba:	87aa                	mv	a5,a0
    800084bc:	882e                	mv	a6,a1
    800084be:	f6f43423          	sd	a5,-152(s0)
    800084c2:	f7043823          	sd	a6,-144(s0)
        expA = normExpSig.exp;
    800084c6:	f6843783          	ld	a5,-152(s0)
    800084ca:	fef43423          	sd	a5,-24(s0)
        sigA = normExpSig.sig;
    800084ce:	f7043783          	ld	a5,-144(s0)
    800084d2:	fef43023          	sd	a5,-32(s0)
    }
    if ( ! expB ) {
    800084d6:	fd843783          	ld	a5,-40(s0)
    800084da:	e79d                	bnez	a5,80008508 <f64_mul+0x154>
        if ( ! sigB ) goto zero;
    800084dc:	fd043783          	ld	a5,-48(s0)
    800084e0:	12078263          	beqz	a5,80008604 <f64_mul+0x250>
        normExpSig = softfloat_normSubnormalF64Sig( sigB );
    800084e4:	fd043503          	ld	a0,-48(s0)
    800084e8:	651010ef          	jal	ra,8000a338 <softfloat_normSubnormalF64Sig>
    800084ec:	87aa                	mv	a5,a0
    800084ee:	882e                	mv	a6,a1
    800084f0:	f6f43423          	sd	a5,-152(s0)
    800084f4:	f7043823          	sd	a6,-144(s0)
        expB = normExpSig.exp;
    800084f8:	f6843783          	ld	a5,-152(s0)
    800084fc:	fcf43c23          	sd	a5,-40(s0)
        sigB = normExpSig.sig;
    80008500:	f7043783          	ld	a5,-144(s0)
    80008504:	fcf43823          	sd	a5,-48(s0)
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    expZ = expA + expB - 0x3FF;
    80008508:	fe843703          	ld	a4,-24(s0)
    8000850c:	fd843783          	ld	a5,-40(s0)
    80008510:	97ba                	add	a5,a5,a4
    80008512:	c0178793          	addi	a5,a5,-1023 # ffec01 <MEM_START-0x7f0013ff>
    80008516:	fcf43023          	sd	a5,-64(s0)
    sigA = (sigA | UINT64_C( 0x0010000000000000 ))<<10;
    8000851a:	fe043783          	ld	a5,-32(s0)
    8000851e:	00a79713          	slli	a4,a5,0xa
    80008522:	4785                	li	a5,1
    80008524:	17fa                	slli	a5,a5,0x3e
    80008526:	8fd9                	or	a5,a5,a4
    80008528:	fef43023          	sd	a5,-32(s0)
    sigB = (sigB | UINT64_C( 0x0010000000000000 ))<<11;
    8000852c:	fd043783          	ld	a5,-48(s0)
    80008530:	00b79713          	slli	a4,a5,0xb
    80008534:	57fd                	li	a5,-1
    80008536:	17fe                	slli	a5,a5,0x3f
    80008538:	8fd9                	or	a5,a5,a4
    8000853a:	fcf43823          	sd	a5,-48(s0)
#ifdef SOFTFLOAT_FAST_INT64
    sig128Z = softfloat_mul64To128( sigA, sigB );
    sigZ = sig128Z.v64 | (sig128Z.v0 != 0);
#else
    softfloat_mul64To128M( sigA, sigB, sig128Z );
    8000853e:	f5840793          	addi	a5,s0,-168
    80008542:	863e                	mv	a2,a5
    80008544:	fd043583          	ld	a1,-48(s0)
    80008548:	fe043503          	ld	a0,-32(s0)
    8000854c:	6b1000ef          	jal	ra,800093fc <softfloat_mul64To128M>
    sigZ =
        (uint64_t) sig128Z[indexWord( 4, 3 )]<<32 | sig128Z[indexWord( 4, 2 )];
    80008550:	f6442783          	lw	a5,-156(s0)
    80008554:	1782                	slli	a5,a5,0x20
    80008556:	9381                	srli	a5,a5,0x20
    80008558:	02079713          	slli	a4,a5,0x20
    8000855c:	f6042783          	lw	a5,-160(s0)
    80008560:	1782                	slli	a5,a5,0x20
    80008562:	9381                	srli	a5,a5,0x20
    sigZ =
    80008564:	8fd9                	or	a5,a5,a4
    80008566:	faf43c23          	sd	a5,-72(s0)
    if ( sig128Z[indexWord( 4, 1 )] || sig128Z[indexWord( 4, 0 )] ) sigZ |= 1;
    8000856a:	f5c42783          	lw	a5,-164(s0)
    8000856e:	e781                	bnez	a5,80008576 <f64_mul+0x1c2>
    80008570:	f5842783          	lw	a5,-168(s0)
    80008574:	c799                	beqz	a5,80008582 <f64_mul+0x1ce>
    80008576:	fb843783          	ld	a5,-72(s0)
    8000857a:	0017e793          	ori	a5,a5,1
    8000857e:	faf43c23          	sd	a5,-72(s0)
#endif
    if ( sigZ < UINT64_C( 0x4000000000000000 ) ) {
    80008582:	fb843703          	ld	a4,-72(s0)
    80008586:	57fd                	li	a5,-1
    80008588:	8389                	srli	a5,a5,0x2
    8000858a:	00e7ec63          	bltu	a5,a4,800085a2 <f64_mul+0x1ee>
        --expZ;
    8000858e:	fc043783          	ld	a5,-64(s0)
    80008592:	17fd                	addi	a5,a5,-1
    80008594:	fcf43023          	sd	a5,-64(s0)
        sigZ <<= 1;
    80008598:	fb843783          	ld	a5,-72(s0)
    8000859c:	0786                	slli	a5,a5,0x1
    8000859e:	faf43c23          	sd	a5,-72(s0)
    }
    return softfloat_roundPackToF64( signZ, expZ, sigZ );
    800085a2:	f9644783          	lbu	a5,-106(s0)
    800085a6:	fb843603          	ld	a2,-72(s0)
    800085aa:	fc043583          	ld	a1,-64(s0)
    800085ae:	853e                	mv	a0,a5
    800085b0:	174020ef          	jal	ra,8000a724 <softfloat_roundPackToF64>
    800085b4:	87aa                	mv	a5,a0
    800085b6:	a09d                	j	8000861c <f64_mul+0x268>
        if ( sigA || ((expB == 0x7FF) && sigB) ) goto propagateNaN;
    800085b8:	0001                	nop
    800085ba:	a011                	j	800085be <f64_mul+0x20a>
        if ( sigB ) goto propagateNaN;
    800085bc:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 propagateNaN:
    uiZ = softfloat_propagateNaNF64UI( uiA, uiB );
    800085be:	f9843583          	ld	a1,-104(s0)
    800085c2:	fa843503          	ld	a0,-88(s0)
    800085c6:	1e6030ef          	jal	ra,8000b7ac <softfloat_propagateNaNF64UI>
    800085ca:	faa43823          	sd	a0,-80(s0)
    goto uiZ;
    800085ce:	a089                	j	80008610 <f64_mul+0x25c>
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 infArg:
    if ( ! magBits ) {
    800085d0:	fc843783          	ld	a5,-56(s0)
    800085d4:	eb99                	bnez	a5,800085ea <f64_mul+0x236>
        softfloat_raiseFlags( softfloat_flag_invalid );
    800085d6:	001867f3          	csrrsi	a5,fflags,16
    800085da:	f8f43423          	sd	a5,-120(s0)
        uiZ = defaultNaNF64UI;
    800085de:	00fff7b7          	lui	a5,0xfff
    800085e2:	179e                	slli	a5,a5,0x27
    800085e4:	faf43823          	sd	a5,-80(s0)
    } else {
        uiZ = packToF64UI( signZ, 0x7FF, 0 );
    }
    goto uiZ;
    800085e8:	a025                	j	80008610 <f64_mul+0x25c>
        uiZ = packToF64UI( signZ, 0x7FF, 0 );
    800085ea:	f9644783          	lbu	a5,-106(s0)
    800085ee:	03f79713          	slli	a4,a5,0x3f
    800085f2:	7ff00793          	li	a5,2047
    800085f6:	17d2                	slli	a5,a5,0x34
    800085f8:	97ba                	add	a5,a5,a4
    800085fa:	faf43823          	sd	a5,-80(s0)
    goto uiZ;
    800085fe:	a809                	j	80008610 <f64_mul+0x25c>
        if ( ! sigA ) goto zero;
    80008600:	0001                	nop
    80008602:	a011                	j	80008606 <f64_mul+0x252>
        if ( ! sigB ) goto zero;
    80008604:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 zero:
    uiZ = packToF64UI( signZ, 0, 0 );
    80008606:	f9644783          	lbu	a5,-106(s0)
    8000860a:	17fe                	slli	a5,a5,0x3f
    8000860c:	faf43823          	sd	a5,-80(s0)
 uiZ:
    uZ.ui = uiZ;
    80008610:	fb043783          	ld	a5,-80(s0)
    80008614:	f4f43823          	sd	a5,-176(s0)
    return uZ.f;
    80008618:	f5043783          	ld	a5,-176(s0)

}
    8000861c:	853e                	mv	a0,a5
    8000861e:	70ea                	ld	ra,184(sp)
    80008620:	744a                	ld	s0,176(sp)
    80008622:	6129                	addi	sp,sp,192
    80008624:	8082                	ret

0000000080008626 <f64_sqrt>:
#include "internals.h"
#include "specialize.h"
#include "softfloat.h"

float64_t f64_sqrt( float64_t a )
{
    80008626:	7171                	addi	sp,sp,-176
    80008628:	f506                	sd	ra,168(sp)
    8000862a:	f122                	sd	s0,160(sp)
    8000862c:	1900                	addi	s0,sp,176
    8000862e:	f4a43c23          	sd	a0,-168(s0)
    uint_fast64_t sigZ, shiftedSigZ;
    union ui64_f64 uZ;

    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    uA.f = a;
    80008632:	f5843783          	ld	a5,-168(s0)
    80008636:	f8f43023          	sd	a5,-128(s0)
    uiA = uA.ui;
    8000863a:	f8043783          	ld	a5,-128(s0)
    8000863e:	fcf43023          	sd	a5,-64(s0)
    signA = signF64UI( uiA );
    80008642:	fc043783          	ld	a5,-64(s0)
    80008646:	93fd                	srli	a5,a5,0x3f
    80008648:	faf40fa3          	sb	a5,-65(s0)
    expA  = expF64UI( uiA );
    8000864c:	fc043783          	ld	a5,-64(s0)
    80008650:	93d1                	srli	a5,a5,0x34
    80008652:	7ff7f793          	andi	a5,a5,2047
    80008656:	fef43423          	sd	a5,-24(s0)
    sigA  = fracF64UI( uiA );
    8000865a:	fc043703          	ld	a4,-64(s0)
    8000865e:	57fd                	li	a5,-1
    80008660:	83b1                	srli	a5,a5,0xc
    80008662:	8ff9                	and	a5,a5,a4
    80008664:	fef43023          	sd	a5,-32(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( expA == 0x7FF ) {
    80008668:	fe843703          	ld	a4,-24(s0)
    8000866c:	7ff00793          	li	a5,2047
    80008670:	02f71863          	bne	a4,a5,800086a0 <f64_sqrt+0x7a>
        if ( sigA ) {
    80008674:	fe043783          	ld	a5,-32(s0)
    80008678:	cb89                	beqz	a5,8000868a <f64_sqrt+0x64>
            uiZ = softfloat_propagateNaNF64UI( uiA, 0 );
    8000867a:	4581                	li	a1,0
    8000867c:	fc043503          	ld	a0,-64(s0)
    80008680:	12c030ef          	jal	ra,8000b7ac <softfloat_propagateNaNF64UI>
    80008684:	fca43c23          	sd	a0,-40(s0)
            goto uiZ;
    80008688:	a2f9                	j	80008856 <f64_sqrt+0x230>
        }
        if ( ! signA ) return a;
    8000868a:	fbf44783          	lbu	a5,-65(s0)
    8000868e:	0017c793          	xori	a5,a5,1
    80008692:	0ff7f793          	andi	a5,a5,255
    80008696:	1a078463          	beqz	a5,8000883e <f64_sqrt+0x218>
    8000869a:	f5843783          	ld	a5,-168(s0)
    8000869e:	a2d1                	j	80008862 <f64_sqrt+0x23c>
        goto invalid;
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( signA ) {
    800086a0:	fbf44783          	lbu	a5,-65(s0)
    800086a4:	0ff7f793          	andi	a5,a5,255
    800086a8:	cb99                	beqz	a5,800086be <f64_sqrt+0x98>
        if ( ! (expA | sigA) ) return a;
    800086aa:	fe843703          	ld	a4,-24(s0)
    800086ae:	fe043783          	ld	a5,-32(s0)
    800086b2:	8fd9                	or	a5,a5,a4
    800086b4:	18079763          	bnez	a5,80008842 <f64_sqrt+0x21c>
    800086b8:	f5843783          	ld	a5,-168(s0)
    800086bc:	a25d                	j	80008862 <f64_sqrt+0x23c>
        goto invalid;
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( ! expA ) {
    800086be:	fe843783          	ld	a5,-24(s0)
    800086c2:	eb8d                	bnez	a5,800086f4 <f64_sqrt+0xce>
        if ( ! sigA ) return a;
    800086c4:	fe043783          	ld	a5,-32(s0)
    800086c8:	e781                	bnez	a5,800086d0 <f64_sqrt+0xaa>
    800086ca:	f5843783          	ld	a5,-168(s0)
    800086ce:	aa51                	j	80008862 <f64_sqrt+0x23c>
        normExpSig = softfloat_normSubnormalF64Sig( sigA );
    800086d0:	fe043503          	ld	a0,-32(s0)
    800086d4:	465010ef          	jal	ra,8000a338 <softfloat_normSubnormalF64Sig>
    800086d8:	87aa                	mv	a5,a0
    800086da:	882e                	mv	a6,a1
    800086dc:	f6f43823          	sd	a5,-144(s0)
    800086e0:	f7043c23          	sd	a6,-136(s0)
        expA = normExpSig.exp;
    800086e4:	f7043783          	ld	a5,-144(s0)
    800086e8:	fef43423          	sd	a5,-24(s0)
        sigA = normExpSig.sig;
    800086ec:	f7843783          	ld	a5,-136(s0)
    800086f0:	fef43023          	sd	a5,-32(s0)
    /*------------------------------------------------------------------------
    | (`sig32Z' is guaranteed to be a lower bound on the square root of
    | `sig32A', which makes `sig32Z' also a lower bound on the square root of
    | `sigA'.)
    *------------------------------------------------------------------------*/
    expZ = ((expA - 0x3FF)>>1) + 0x3FE;
    800086f4:	fe843783          	ld	a5,-24(s0)
    800086f8:	c0178793          	addi	a5,a5,-1023 # ffec01 <MEM_START-0x7f0013ff>
    800086fc:	8785                	srai	a5,a5,0x1
    800086fe:	3fe78793          	addi	a5,a5,1022
    80008702:	faf43823          	sd	a5,-80(s0)
    expA &= 1;
    80008706:	fe843783          	ld	a5,-24(s0)
    8000870a:	8b85                	andi	a5,a5,1
    8000870c:	fef43423          	sd	a5,-24(s0)
    sigA |= UINT64_C( 0x0010000000000000 );
    80008710:	fe043703          	ld	a4,-32(s0)
    80008714:	4785                	li	a5,1
    80008716:	17d2                	slli	a5,a5,0x34
    80008718:	8fd9                	or	a5,a5,a4
    8000871a:	fef43023          	sd	a5,-32(s0)
    sig32A = sigA>>21;
    8000871e:	fe043783          	ld	a5,-32(s0)
    80008722:	83d5                	srli	a5,a5,0x15
    80008724:	faf42623          	sw	a5,-84(s0)
    recipSqrt32 = softfloat_approxRecipSqrt32_1( expA, sig32A );
    80008728:	fe843783          	ld	a5,-24(s0)
    8000872c:	2781                	sext.w	a5,a5
    8000872e:	fac42703          	lw	a4,-84(s0)
    80008732:	85ba                	mv	a1,a4
    80008734:	853e                	mv	a0,a5
    80008736:	375000ef          	jal	ra,800092aa <softfloat_approxRecipSqrt32_1>
    8000873a:	87aa                	mv	a5,a0
    8000873c:	faf42423          	sw	a5,-88(s0)
    sig32Z = ((uint_fast64_t) sig32A * recipSqrt32)>>32;
    80008740:	fac46703          	lwu	a4,-84(s0)
    80008744:	fa846783          	lwu	a5,-88(s0)
    80008748:	02f707b3          	mul	a5,a4,a5
    8000874c:	9381                	srli	a5,a5,0x20
    8000874e:	fcf42a23          	sw	a5,-44(s0)
    if ( expA ) {
    80008752:	fe843783          	ld	a5,-24(s0)
    80008756:	cf89                	beqz	a5,80008770 <f64_sqrt+0x14a>
        sigA <<= 8;
    80008758:	fe043783          	ld	a5,-32(s0)
    8000875c:	07a2                	slli	a5,a5,0x8
    8000875e:	fef43023          	sd	a5,-32(s0)
        sig32Z >>= 1;
    80008762:	fd442783          	lw	a5,-44(s0)
    80008766:	0017d79b          	srliw	a5,a5,0x1
    8000876a:	fcf42a23          	sw	a5,-44(s0)
    8000876e:	a031                	j	8000877a <f64_sqrt+0x154>
    } else {
        sigA <<= 9;
    80008770:	fe043783          	ld	a5,-32(s0)
    80008774:	07a6                	slli	a5,a5,0x9
    80008776:	fef43023          	sd	a5,-32(s0)
    }
    rem = sigA - (uint_fast64_t) sig32Z * sig32Z;
    8000877a:	fd446703          	lwu	a4,-44(s0)
    8000877e:	fd446783          	lwu	a5,-44(s0)
    80008782:	02f707b3          	mul	a5,a4,a5
    80008786:	fe043703          	ld	a4,-32(s0)
    8000878a:	40f707b3          	sub	a5,a4,a5
    8000878e:	faf43023          	sd	a5,-96(s0)
    q = ((uint32_t) (rem>>2) * (uint_fast64_t) recipSqrt32)>>32;
    80008792:	fa043783          	ld	a5,-96(s0)
    80008796:	8389                	srli	a5,a5,0x2
    80008798:	2781                	sext.w	a5,a5
    8000879a:	02079713          	slli	a4,a5,0x20
    8000879e:	9301                	srli	a4,a4,0x20
    800087a0:	fa846783          	lwu	a5,-88(s0)
    800087a4:	02f707b3          	mul	a5,a4,a5
    800087a8:	9381                	srli	a5,a5,0x20
    800087aa:	f8f42e23          	sw	a5,-100(s0)
    sigZ = ((uint_fast64_t) sig32Z<<32 | 1<<5) + ((uint_fast64_t) q<<3);
    800087ae:	fd446783          	lwu	a5,-44(s0)
    800087b2:	1782                	slli	a5,a5,0x20
    800087b4:	0207e713          	ori	a4,a5,32
    800087b8:	f9c46783          	lwu	a5,-100(s0)
    800087bc:	078e                	slli	a5,a5,0x3
    800087be:	97ba                	add	a5,a5,a4
    800087c0:	fcf43423          	sd	a5,-56(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( (sigZ & 0x1FF) < 0x22 ) {
    800087c4:	fc843783          	ld	a5,-56(s0)
    800087c8:	1ff7f713          	andi	a4,a5,511
    800087cc:	02100793          	li	a5,33
    800087d0:	04e7ee63          	bltu	a5,a4,8000882c <f64_sqrt+0x206>
        sigZ &= ~(uint_fast64_t) 0x3F;
    800087d4:	fc843783          	ld	a5,-56(s0)
    800087d8:	fc07f793          	andi	a5,a5,-64
    800087dc:	fcf43423          	sd	a5,-56(s0)
        shiftedSigZ = sigZ>>6;
    800087e0:	fc843783          	ld	a5,-56(s0)
    800087e4:	8399                	srli	a5,a5,0x6
    800087e6:	f8f43823          	sd	a5,-112(s0)
        rem = (sigA<<52) - shiftedSigZ * shiftedSigZ;
    800087ea:	fe043783          	ld	a5,-32(s0)
    800087ee:	03479713          	slli	a4,a5,0x34
    800087f2:	f9043683          	ld	a3,-112(s0)
    800087f6:	f9043783          	ld	a5,-112(s0)
    800087fa:	02f687b3          	mul	a5,a3,a5
    800087fe:	40f707b3          	sub	a5,a4,a5
    80008802:	faf43023          	sd	a5,-96(s0)
        if ( rem & UINT64_C( 0x8000000000000000 ) ) {
    80008806:	fa043783          	ld	a5,-96(s0)
    8000880a:	0007d863          	bgez	a5,8000881a <f64_sqrt+0x1f4>
            --sigZ;
    8000880e:	fc843783          	ld	a5,-56(s0)
    80008812:	17fd                	addi	a5,a5,-1
    80008814:	fcf43423          	sd	a5,-56(s0)
    80008818:	a811                	j	8000882c <f64_sqrt+0x206>
        } else {
            if ( rem ) sigZ |= 1;
    8000881a:	fa043783          	ld	a5,-96(s0)
    8000881e:	c799                	beqz	a5,8000882c <f64_sqrt+0x206>
    80008820:	fc843783          	ld	a5,-56(s0)
    80008824:	0017e793          	ori	a5,a5,1
    80008828:	fcf43423          	sd	a5,-56(s0)
        }
    }
    return softfloat_roundPackToF64( 0, expZ, sigZ );
    8000882c:	fc843603          	ld	a2,-56(s0)
    80008830:	fb043583          	ld	a1,-80(s0)
    80008834:	4501                	li	a0,0
    80008836:	6ef010ef          	jal	ra,8000a724 <softfloat_roundPackToF64>
    8000883a:	87aa                	mv	a5,a0
    8000883c:	a01d                	j	80008862 <f64_sqrt+0x23c>
        goto invalid;
    8000883e:	0001                	nop
    80008840:	a011                	j	80008844 <f64_sqrt+0x21e>
        goto invalid;
    80008842:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 invalid:
    softfloat_raiseFlags( softfloat_flag_invalid );
    80008844:	001867f3          	csrrsi	a5,fflags,16
    80008848:	f8f43423          	sd	a5,-120(s0)
    uiZ = defaultNaNF64UI;
    8000884c:	00fff7b7          	lui	a5,0xfff
    80008850:	179e                	slli	a5,a5,0x27
    80008852:	fcf43c23          	sd	a5,-40(s0)
 uiZ:
    uZ.ui = uiZ;
    80008856:	fd843783          	ld	a5,-40(s0)
    8000885a:	f6f43423          	sd	a5,-152(s0)
    return uZ.f;
    8000885e:	f6843783          	ld	a5,-152(s0)

}
    80008862:	853e                	mv	a0,a5
    80008864:	70aa                	ld	ra,168(sp)
    80008866:	740a                	ld	s0,160(sp)
    80008868:	614d                	addi	sp,sp,176
    8000886a:	8082                	ret

000000008000886c <f64_to_f32>:
#include "internals.h"
#include "specialize.h"
#include "softfloat.h"

float32_t f64_to_f32( float64_t a )
{
    8000886c:	7159                	addi	sp,sp,-112
    8000886e:	f486                	sd	ra,104(sp)
    80008870:	f0a2                	sd	s0,96(sp)
    80008872:	1880                	addi	s0,sp,112
    80008874:	f8a43c23          	sd	a0,-104(s0)
    uint_fast32_t uiZ, frac32;
    union ui32_f32 uZ;

    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    uA.f = a;
    80008878:	f9843783          	ld	a5,-104(s0)
    8000887c:	faf43823          	sd	a5,-80(s0)
    uiA = uA.ui;
    80008880:	fb043783          	ld	a5,-80(s0)
    80008884:	fef43023          	sd	a5,-32(s0)
    sign = signF64UI( uiA );
    80008888:	fe043783          	ld	a5,-32(s0)
    8000888c:	93fd                	srli	a5,a5,0x3f
    8000888e:	fcf40fa3          	sb	a5,-33(s0)
    exp  = expF64UI( uiA );
    80008892:	fe043783          	ld	a5,-32(s0)
    80008896:	93d1                	srli	a5,a5,0x34
    80008898:	7ff7f793          	andi	a5,a5,2047
    8000889c:	fcf43823          	sd	a5,-48(s0)
    frac = fracF64UI( uiA );
    800088a0:	fe043703          	ld	a4,-32(s0)
    800088a4:	57fd                	li	a5,-1
    800088a6:	83b1                	srli	a5,a5,0xc
    800088a8:	8ff9                	and	a5,a5,a4
    800088aa:	fcf43423          	sd	a5,-56(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( exp == 0x7FF ) {
    800088ae:	fd043703          	ld	a4,-48(s0)
    800088b2:	7ff00793          	li	a5,2047
    800088b6:	04f71463          	bne	a4,a5,800088fe <f64_to_f32+0x92>
        if ( frac ) {
    800088ba:	fc843783          	ld	a5,-56(s0)
    800088be:	c385                	beqz	a5,800088de <f64_to_f32+0x72>
            softfloat_f64UIToCommonNaN( uiA, &commonNaN );
    800088c0:	fe043703          	ld	a4,-32(s0)
    800088c4:	4785                	li	a5,1
    800088c6:	17ce                	slli	a5,a5,0x33
    800088c8:	8ff9                	and	a5,a5,a4
    800088ca:	e789                	bnez	a5,800088d4 <f64_to_f32+0x68>
    800088cc:	001867f3          	csrrsi	a5,fflags,16
    800088d0:	fcf43023          	sd	a5,-64(s0)
            uiZ = softfloat_commonNaNToF32UI( &commonNaN );
    800088d4:	7fc007b7          	lui	a5,0x7fc00
    800088d8:	fef43423          	sd	a5,-24(s0)
        } else {
            uiZ = packToF32UI( sign, 0xFF, 0 );
        }
        goto uiZ;
    800088dc:	a89d                	j	80008952 <f64_to_f32+0xe6>
            uiZ = packToF32UI( sign, 0xFF, 0 );
    800088de:	fdf44783          	lbu	a5,-33(s0)
    800088e2:	2781                	sext.w	a5,a5
    800088e4:	01f7979b          	slliw	a5,a5,0x1f
    800088e8:	0007871b          	sext.w	a4,a5
    800088ec:	7f8007b7          	lui	a5,0x7f800
    800088f0:	9fb9                	addw	a5,a5,a4
    800088f2:	2781                	sext.w	a5,a5
    800088f4:	1782                	slli	a5,a5,0x20
    800088f6:	9381                	srli	a5,a5,0x20
    800088f8:	fef43423          	sd	a5,-24(s0)
        goto uiZ;
    800088fc:	a899                	j	80008952 <f64_to_f32+0xe6>
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    frac32 = softfloat_shortShiftRightJam64( frac, 22 );
    800088fe:	45d9                	li	a1,22
    80008900:	fc843503          	ld	a0,-56(s0)
    80008904:	5b6020ef          	jal	ra,8000aeba <softfloat_shortShiftRightJam64>
    80008908:	faa43c23          	sd	a0,-72(s0)
    if ( ! (exp | frac32) ) {
    8000890c:	fd043703          	ld	a4,-48(s0)
    80008910:	fb843783          	ld	a5,-72(s0)
    80008914:	8fd9                	or	a5,a5,a4
    80008916:	ef81                	bnez	a5,8000892e <f64_to_f32+0xc2>
        uiZ = packToF32UI( sign, 0, 0 );
    80008918:	fdf44783          	lbu	a5,-33(s0)
    8000891c:	2781                	sext.w	a5,a5
    8000891e:	01f7979b          	slliw	a5,a5,0x1f
    80008922:	2781                	sext.w	a5,a5
    80008924:	1782                	slli	a5,a5,0x20
    80008926:	9381                	srli	a5,a5,0x20
    80008928:	fef43423          	sd	a5,-24(s0)
        goto uiZ;
    8000892c:	a01d                	j	80008952 <f64_to_f32+0xe6>
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    return softfloat_roundPackToF32( sign, exp - 0x381, frac32 | 0x40000000 );
    8000892e:	fd043783          	ld	a5,-48(s0)
    80008932:	c7f78693          	addi	a3,a5,-897 # 7f7ffc7f <MEM_START-0x800381>
    80008936:	fb843703          	ld	a4,-72(s0)
    8000893a:	400007b7          	lui	a5,0x40000
    8000893e:	8f5d                	or	a4,a4,a5
    80008940:	fdf44783          	lbu	a5,-33(s0)
    80008944:	863a                	mv	a2,a4
    80008946:	85b6                	mv	a1,a3
    80008948:	853e                	mv	a0,a5
    8000894a:	3a5010ef          	jal	ra,8000a4ee <softfloat_roundPackToF32>
    8000894e:	87aa                	mv	a5,a0
    80008950:	a801                	j	80008960 <f64_to_f32+0xf4>
 uiZ:
    uZ.ui = uiZ;
    80008952:	fe843783          	ld	a5,-24(s0)
    80008956:	2781                	sext.w	a5,a5
    80008958:	faf42023          	sw	a5,-96(s0)
    return uZ.f;
    8000895c:	fa042783          	lw	a5,-96(s0)

}
    80008960:	853e                	mv	a0,a5
    80008962:	70a6                	ld	ra,104(sp)
    80008964:	7406                	ld	s0,96(sp)
    80008966:	6165                	addi	sp,sp,112
    80008968:	8082                	ret

000000008000896a <f64_to_ui64>:
#include "internals.h"
#include "specialize.h"
#include "softfloat.h"

uint_fast64_t f64_to_ui64( float64_t a, uint_fast8_t roundingMode, bool exact )
{
    8000896a:	7159                	addi	sp,sp,-112
    8000896c:	f486                	sd	ra,104(sp)
    8000896e:	f0a2                	sd	s0,96(sp)
    80008970:	1880                	addi	s0,sp,112
    80008972:	f8a43c23          	sd	a0,-104(s0)
    80008976:	87ae                	mv	a5,a1
    80008978:	8732                	mv	a4,a2
    8000897a:	f8f40ba3          	sb	a5,-105(s0)
    8000897e:	87ba                	mv	a5,a4
    80008980:	f8f40b23          	sb	a5,-106(s0)
    uint32_t extSig[3];
#endif

    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    uA.f = a;
    80008984:	f9843783          	ld	a5,-104(s0)
    80008988:	faf43c23          	sd	a5,-72(s0)
    uiA = uA.ui;
    8000898c:	fb843783          	ld	a5,-72(s0)
    80008990:	fef43023          	sd	a5,-32(s0)
    sign = signF64UI( uiA );
    80008994:	fe043783          	ld	a5,-32(s0)
    80008998:	93fd                	srli	a5,a5,0x3f
    8000899a:	fcf40fa3          	sb	a5,-33(s0)
    exp  = expF64UI( uiA );
    8000899e:	fe043783          	ld	a5,-32(s0)
    800089a2:	93d1                	srli	a5,a5,0x34
    800089a4:	7ff7f793          	andi	a5,a5,2047
    800089a8:	fcf43823          	sd	a5,-48(s0)
    sig  = fracF64UI( uiA );
    800089ac:	fe043703          	ld	a4,-32(s0)
    800089b0:	57fd                	li	a5,-1
    800089b2:	83b1                	srli	a5,a5,0xc
    800089b4:	8ff9                	and	a5,a5,a4
    800089b6:	fef43423          	sd	a5,-24(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( exp ) sig |= UINT64_C( 0x0010000000000000 );
    800089ba:	fd043783          	ld	a5,-48(s0)
    800089be:	cb81                	beqz	a5,800089ce <f64_to_ui64+0x64>
    800089c0:	fe843703          	ld	a4,-24(s0)
    800089c4:	4785                	li	a5,1
    800089c6:	17d2                	slli	a5,a5,0x34
    800089c8:	8fd9                	or	a5,a5,a4
    800089ca:	fef43423          	sd	a5,-24(s0)
    shiftDist = 0x433 - exp;
    800089ce:	43300713          	li	a4,1075
    800089d2:	fd043783          	ld	a5,-48(s0)
    800089d6:	40f707b3          	sub	a5,a4,a5
    800089da:	fcf43423          	sd	a5,-56(s0)
    }
    return
        softfloat_roundToUI64(
            sign, sigExtra.v, sigExtra.extra, roundingMode, exact );
#else
    extSig[indexWord( 3, 0 )] = 0;
    800089de:	fa042423          	sw	zero,-88(s0)
    if ( shiftDist <= 0 ) {
    800089e2:	fc843783          	ld	a5,-56(s0)
    800089e6:	04f04063          	bgtz	a5,80008a26 <f64_to_ui64+0xbc>
        if ( shiftDist < -11 ) goto invalid;
    800089ea:	fc843703          	ld	a4,-56(s0)
    800089ee:	57d5                	li	a5,-11
    800089f0:	08f74163          	blt	a4,a5,80008a72 <f64_to_ui64+0x108>
        sig <<= -shiftDist;
    800089f4:	fc843783          	ld	a5,-56(s0)
    800089f8:	2781                	sext.w	a5,a5
    800089fa:	40f007bb          	negw	a5,a5
    800089fe:	2781                	sext.w	a5,a5
    80008a00:	873e                	mv	a4,a5
    80008a02:	fe843783          	ld	a5,-24(s0)
    80008a06:	00e797b3          	sll	a5,a5,a4
    80008a0a:	fef43423          	sd	a5,-24(s0)
        extSig[indexWord( 3, 2 )] = sig>>32;
    80008a0e:	fe843783          	ld	a5,-24(s0)
    80008a12:	9381                	srli	a5,a5,0x20
    80008a14:	2781                	sext.w	a5,a5
    80008a16:	faf42823          	sw	a5,-80(s0)
        extSig[indexWord( 3, 1 )] = sig;
    80008a1a:	fe843783          	ld	a5,-24(s0)
    80008a1e:	2781                	sext.w	a5,a5
    80008a20:	faf42623          	sw	a5,-84(s0)
    80008a24:	a80d                	j	80008a56 <f64_to_ui64+0xec>
    } else {
        extSig[indexWord( 3, 2 )] = sig>>32;
    80008a26:	fe843783          	ld	a5,-24(s0)
    80008a2a:	9381                	srli	a5,a5,0x20
    80008a2c:	2781                	sext.w	a5,a5
    80008a2e:	faf42823          	sw	a5,-80(s0)
        extSig[indexWord( 3, 1 )] = sig;
    80008a32:	fe843783          	ld	a5,-24(s0)
    80008a36:	2781                	sext.w	a5,a5
    80008a38:	faf42623          	sw	a5,-84(s0)
        softfloat_shiftRightJam96M( extSig, shiftDist, extSig );
    80008a3c:	fc843783          	ld	a5,-56(s0)
    80008a40:	0007871b          	sext.w	a4,a5
    80008a44:	fa840693          	addi	a3,s0,-88
    80008a48:	fa840793          	addi	a5,s0,-88
    80008a4c:	863a                	mv	a2,a4
    80008a4e:	85be                	mv	a1,a5
    80008a50:	450d                	li	a0,3
    80008a52:	0d0020ef          	jal	ra,8000ab22 <softfloat_shiftRightJamM>
    }
    return softfloat_roundMToUI64( sign, extSig, roundingMode, exact );
    80008a56:	f9644683          	lbu	a3,-106(s0)
    80008a5a:	f9744603          	lbu	a2,-105(s0)
    80008a5e:	fa840713          	addi	a4,s0,-88
    80008a62:	fdf44783          	lbu	a5,-33(s0)
    80008a66:	85ba                	mv	a1,a4
    80008a68:	853e                	mv	a0,a5
    80008a6a:	14d010ef          	jal	ra,8000a3b6 <softfloat_roundMToUI64>
    80008a6e:	87aa                	mv	a5,a0
    80008a70:	a825                	j	80008aa8 <f64_to_ui64+0x13e>
        if ( shiftDist < -11 ) goto invalid;
    80008a72:	0001                	nop
#endif
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 invalid:
    softfloat_raiseFlags( softfloat_flag_invalid );
    80008a74:	001867f3          	csrrsi	a5,fflags,16
    80008a78:	fcf43023          	sd	a5,-64(s0)
    return
        (exp == 0x7FF) && fracF64UI( uiA ) ? ui64_fromNaN
            : sign ? ui64_fromNegOverflow : ui64_fromPosOverflow;
    80008a7c:	fd043703          	ld	a4,-48(s0)
    80008a80:	7ff00793          	li	a5,2047
    80008a84:	00f71863          	bne	a4,a5,80008a94 <f64_to_ui64+0x12a>
        (exp == 0x7FF) && fracF64UI( uiA ) ? ui64_fromNaN
    80008a88:	fe043703          	ld	a4,-32(s0)
    80008a8c:	57fd                	li	a5,-1
    80008a8e:	83b1                	srli	a5,a5,0xc
    80008a90:	8ff9                	and	a5,a5,a4
    80008a92:	eb91                	bnez	a5,80008aa6 <f64_to_ui64+0x13c>
            : sign ? ui64_fromNegOverflow : ui64_fromPosOverflow;
    80008a94:	fdf44783          	lbu	a5,-33(s0)
    80008a98:	0ff7f793          	andi	a5,a5,255
    80008a9c:	c399                	beqz	a5,80008aa2 <f64_to_ui64+0x138>
    80008a9e:	4781                	li	a5,0
    80008aa0:	a021                	j	80008aa8 <f64_to_ui64+0x13e>
    80008aa2:	57fd                	li	a5,-1
    80008aa4:	a011                	j	80008aa8 <f64_to_ui64+0x13e>
    80008aa6:	57fd                	li	a5,-1

}
    80008aa8:	853e                	mv	a0,a5
    80008aaa:	70a6                	ld	ra,104(sp)
    80008aac:	7406                	ld	s0,96(sp)
    80008aae:	6165                	addi	sp,sp,112
    80008ab0:	8082                	ret

0000000080008ab2 <f64_classify>:
#include "internals.h"
#include "specialize.h"
#include "softfloat.h"

uint_fast16_t f64_classify( float64_t a )
{
    80008ab2:	715d                	addi	sp,sp,-80
    80008ab4:	e4a2                	sd	s0,72(sp)
    80008ab6:	0880                	addi	s0,sp,80
    80008ab8:	faa43c23          	sd	a0,-72(s0)
    union ui64_f64 uA;
    uint_fast64_t uiA;

    uA.f = a;
    80008abc:	fb843783          	ld	a5,-72(s0)
    80008ac0:	fcf43423          	sd	a5,-56(s0)
    uiA = uA.ui;
    80008ac4:	fc843783          	ld	a5,-56(s0)
    80008ac8:	fef43423          	sd	a5,-24(s0)

    uint_fast16_t infOrNaN = expF64UI( uiA ) == 0x7FF;
    80008acc:	fe843783          	ld	a5,-24(s0)
    80008ad0:	93d1                	srli	a5,a5,0x34
    80008ad2:	7ff7f793          	andi	a5,a5,2047
    80008ad6:	80178793          	addi	a5,a5,-2047 # 3ffff801 <MEM_START-0x400007ff>
    80008ada:	0017b793          	seqz	a5,a5
    80008ade:	0ff7f793          	andi	a5,a5,255
    80008ae2:	fef43023          	sd	a5,-32(s0)
    uint_fast16_t subnormalOrZero = expF64UI( uiA ) == 0;
    80008ae6:	fe843783          	ld	a5,-24(s0)
    80008aea:	93d1                	srli	a5,a5,0x34
    80008aec:	7ff7f793          	andi	a5,a5,2047
    80008af0:	0017b793          	seqz	a5,a5
    80008af4:	0ff7f793          	andi	a5,a5,255
    80008af8:	fcf43c23          	sd	a5,-40(s0)
    bool sign = signF64UI( uiA );
    80008afc:	fe843783          	ld	a5,-24(s0)
    80008b00:	93fd                	srli	a5,a5,0x3f
    80008b02:	fcf40ba3          	sb	a5,-41(s0)

    return
        (  sign && infOrNaN && fracF64UI( uiA ) == 0 )          << 0 |
    80008b06:	fd744783          	lbu	a5,-41(s0)
    80008b0a:	0ff7f793          	andi	a5,a5,255
    80008b0e:	cf81                	beqz	a5,80008b26 <f64_classify+0x74>
    80008b10:	fe043783          	ld	a5,-32(s0)
    80008b14:	cb89                	beqz	a5,80008b26 <f64_classify+0x74>
    80008b16:	fe843703          	ld	a4,-24(s0)
    80008b1a:	57fd                	li	a5,-1
    80008b1c:	83b1                	srli	a5,a5,0xc
    80008b1e:	8ff9                	and	a5,a5,a4
    80008b20:	e399                	bnez	a5,80008b26 <f64_classify+0x74>
    80008b22:	4785                	li	a5,1
    80008b24:	a011                	j	80008b28 <f64_classify+0x76>
    80008b26:	4781                	li	a5,0
        (  sign && !infOrNaN && !subnormalOrZero )              << 1 |
    80008b28:	fd744703          	lbu	a4,-41(s0)
    80008b2c:	0ff77713          	andi	a4,a4,255
    80008b30:	cb09                	beqz	a4,80008b42 <f64_classify+0x90>
    80008b32:	fe043703          	ld	a4,-32(s0)
    80008b36:	e711                	bnez	a4,80008b42 <f64_classify+0x90>
    80008b38:	fd843703          	ld	a4,-40(s0)
    80008b3c:	e319                	bnez	a4,80008b42 <f64_classify+0x90>
    80008b3e:	4705                	li	a4,1
    80008b40:	a011                	j	80008b44 <f64_classify+0x92>
    80008b42:	4701                	li	a4,0
    80008b44:	0017171b          	slliw	a4,a4,0x1
    80008b48:	2701                	sext.w	a4,a4
        (  sign && infOrNaN && fracF64UI( uiA ) == 0 )          << 0 |
    80008b4a:	8fd9                	or	a5,a5,a4
    80008b4c:	0007871b          	sext.w	a4,a5
        (  sign && subnormalOrZero && fracF64UI( uiA ) )        << 2 |
    80008b50:	fd744783          	lbu	a5,-41(s0)
    80008b54:	0ff7f793          	andi	a5,a5,255
    80008b58:	cf81                	beqz	a5,80008b70 <f64_classify+0xbe>
    80008b5a:	fd843783          	ld	a5,-40(s0)
    80008b5e:	cb89                	beqz	a5,80008b70 <f64_classify+0xbe>
    80008b60:	fe843683          	ld	a3,-24(s0)
    80008b64:	57fd                	li	a5,-1
    80008b66:	83b1                	srli	a5,a5,0xc
    80008b68:	8ff5                	and	a5,a5,a3
    80008b6a:	c399                	beqz	a5,80008b70 <f64_classify+0xbe>
    80008b6c:	4785                	li	a5,1
    80008b6e:	a011                	j	80008b72 <f64_classify+0xc0>
    80008b70:	4781                	li	a5,0
    80008b72:	0027979b          	slliw	a5,a5,0x2
    80008b76:	2781                	sext.w	a5,a5
        (  sign && !infOrNaN && !subnormalOrZero )              << 1 |
    80008b78:	8fd9                	or	a5,a5,a4
    80008b7a:	0007871b          	sext.w	a4,a5
        (  sign && subnormalOrZero && fracF64UI( uiA ) == 0 )   << 3 |
    80008b7e:	fd744783          	lbu	a5,-41(s0)
    80008b82:	0ff7f793          	andi	a5,a5,255
    80008b86:	cf81                	beqz	a5,80008b9e <f64_classify+0xec>
    80008b88:	fd843783          	ld	a5,-40(s0)
    80008b8c:	cb89                	beqz	a5,80008b9e <f64_classify+0xec>
    80008b8e:	fe843683          	ld	a3,-24(s0)
    80008b92:	57fd                	li	a5,-1
    80008b94:	83b1                	srli	a5,a5,0xc
    80008b96:	8ff5                	and	a5,a5,a3
    80008b98:	e399                	bnez	a5,80008b9e <f64_classify+0xec>
    80008b9a:	4785                	li	a5,1
    80008b9c:	a011                	j	80008ba0 <f64_classify+0xee>
    80008b9e:	4781                	li	a5,0
    80008ba0:	0037979b          	slliw	a5,a5,0x3
    80008ba4:	2781                	sext.w	a5,a5
        (  sign && subnormalOrZero && fracF64UI( uiA ) )        << 2 |
    80008ba6:	8fd9                	or	a5,a5,a4
    80008ba8:	0007871b          	sext.w	a4,a5
        ( !sign && infOrNaN && fracF64UI( uiA ) == 0 )          << 7 |
    80008bac:	fd744783          	lbu	a5,-41(s0)
    80008bb0:	0017c793          	xori	a5,a5,1
    80008bb4:	0ff7f793          	andi	a5,a5,255
    80008bb8:	cf81                	beqz	a5,80008bd0 <f64_classify+0x11e>
    80008bba:	fe043783          	ld	a5,-32(s0)
    80008bbe:	cb89                	beqz	a5,80008bd0 <f64_classify+0x11e>
    80008bc0:	fe843683          	ld	a3,-24(s0)
    80008bc4:	57fd                	li	a5,-1
    80008bc6:	83b1                	srli	a5,a5,0xc
    80008bc8:	8ff5                	and	a5,a5,a3
    80008bca:	e399                	bnez	a5,80008bd0 <f64_classify+0x11e>
    80008bcc:	4785                	li	a5,1
    80008bce:	a011                	j	80008bd2 <f64_classify+0x120>
    80008bd0:	4781                	li	a5,0
    80008bd2:	0077979b          	slliw	a5,a5,0x7
    80008bd6:	2781                	sext.w	a5,a5
        (  sign && subnormalOrZero && fracF64UI( uiA ) == 0 )   << 3 |
    80008bd8:	8fd9                	or	a5,a5,a4
    80008bda:	0007871b          	sext.w	a4,a5
        ( !sign && !infOrNaN && !subnormalOrZero )              << 6 |
    80008bde:	fd744783          	lbu	a5,-41(s0)
    80008be2:	0017c793          	xori	a5,a5,1
    80008be6:	0ff7f793          	andi	a5,a5,255
    80008bea:	cb89                	beqz	a5,80008bfc <f64_classify+0x14a>
    80008bec:	fe043783          	ld	a5,-32(s0)
    80008bf0:	e791                	bnez	a5,80008bfc <f64_classify+0x14a>
    80008bf2:	fd843783          	ld	a5,-40(s0)
    80008bf6:	e399                	bnez	a5,80008bfc <f64_classify+0x14a>
    80008bf8:	4785                	li	a5,1
    80008bfa:	a011                	j	80008bfe <f64_classify+0x14c>
    80008bfc:	4781                	li	a5,0
    80008bfe:	0067979b          	slliw	a5,a5,0x6
    80008c02:	2781                	sext.w	a5,a5
        ( !sign && infOrNaN && fracF64UI( uiA ) == 0 )          << 7 |
    80008c04:	8fd9                	or	a5,a5,a4
    80008c06:	0007871b          	sext.w	a4,a5
        ( !sign && subnormalOrZero && fracF64UI( uiA ) )        << 5 |
    80008c0a:	fd744783          	lbu	a5,-41(s0)
    80008c0e:	0017c793          	xori	a5,a5,1
    80008c12:	0ff7f793          	andi	a5,a5,255
    80008c16:	cf81                	beqz	a5,80008c2e <f64_classify+0x17c>
    80008c18:	fd843783          	ld	a5,-40(s0)
    80008c1c:	cb89                	beqz	a5,80008c2e <f64_classify+0x17c>
    80008c1e:	fe843683          	ld	a3,-24(s0)
    80008c22:	57fd                	li	a5,-1
    80008c24:	83b1                	srli	a5,a5,0xc
    80008c26:	8ff5                	and	a5,a5,a3
    80008c28:	c399                	beqz	a5,80008c2e <f64_classify+0x17c>
    80008c2a:	4785                	li	a5,1
    80008c2c:	a011                	j	80008c30 <f64_classify+0x17e>
    80008c2e:	4781                	li	a5,0
    80008c30:	0057979b          	slliw	a5,a5,0x5
    80008c34:	2781                	sext.w	a5,a5
        ( !sign && !infOrNaN && !subnormalOrZero )              << 6 |
    80008c36:	8fd9                	or	a5,a5,a4
    80008c38:	0007871b          	sext.w	a4,a5
        ( !sign && subnormalOrZero && fracF64UI( uiA ) == 0 )   << 4 |
    80008c3c:	fd744783          	lbu	a5,-41(s0)
    80008c40:	0017c793          	xori	a5,a5,1
    80008c44:	0ff7f793          	andi	a5,a5,255
    80008c48:	cf81                	beqz	a5,80008c60 <f64_classify+0x1ae>
    80008c4a:	fd843783          	ld	a5,-40(s0)
    80008c4e:	cb89                	beqz	a5,80008c60 <f64_classify+0x1ae>
    80008c50:	fe843683          	ld	a3,-24(s0)
    80008c54:	57fd                	li	a5,-1
    80008c56:	83b1                	srli	a5,a5,0xc
    80008c58:	8ff5                	and	a5,a5,a3
    80008c5a:	e399                	bnez	a5,80008c60 <f64_classify+0x1ae>
    80008c5c:	4785                	li	a5,1
    80008c5e:	a011                	j	80008c62 <f64_classify+0x1b0>
    80008c60:	4781                	li	a5,0
    80008c62:	0047979b          	slliw	a5,a5,0x4
    80008c66:	2781                	sext.w	a5,a5
        ( !sign && subnormalOrZero && fracF64UI( uiA ) )        << 5 |
    80008c68:	8fd9                	or	a5,a5,a4
    80008c6a:	0007871b          	sext.w	a4,a5
        ( isNaNF64UI( uiA ) &&  softfloat_isSigNaNF64UI( uiA )) << 8 |
    80008c6e:	fe843783          	ld	a5,-24(s0)
    80008c72:	fff7c693          	not	a3,a5
    80008c76:	7ff00793          	li	a5,2047
    80008c7a:	17d2                	slli	a5,a5,0x34
    80008c7c:	8ff5                	and	a5,a5,a3
    80008c7e:	eb95                	bnez	a5,80008cb2 <f64_classify+0x200>
    80008c80:	fe843683          	ld	a3,-24(s0)
    80008c84:	57fd                	li	a5,-1
    80008c86:	83b1                	srli	a5,a5,0xc
    80008c88:	8ff5                	and	a5,a5,a3
    80008c8a:	c785                	beqz	a5,80008cb2 <f64_classify+0x200>
    80008c8c:	fe843683          	ld	a3,-24(s0)
    80008c90:	00fff7b7          	lui	a5,0xfff
    80008c94:	179e                	slli	a5,a5,0x27
    80008c96:	8efd                	and	a3,a3,a5
    80008c98:	7ff00793          	li	a5,2047
    80008c9c:	17d2                	slli	a5,a5,0x34
    80008c9e:	00f69a63          	bne	a3,a5,80008cb2 <f64_classify+0x200>
    80008ca2:	fe843683          	ld	a3,-24(s0)
    80008ca6:	57fd                	li	a5,-1
    80008ca8:	83b5                	srli	a5,a5,0xd
    80008caa:	8ff5                	and	a5,a5,a3
    80008cac:	c399                	beqz	a5,80008cb2 <f64_classify+0x200>
    80008cae:	4785                	li	a5,1
    80008cb0:	a011                	j	80008cb4 <f64_classify+0x202>
    80008cb2:	4781                	li	a5,0
    80008cb4:	0087979b          	slliw	a5,a5,0x8
    80008cb8:	2781                	sext.w	a5,a5
        ( !sign && subnormalOrZero && fracF64UI( uiA ) == 0 )   << 4 |
    80008cba:	8fd9                	or	a5,a5,a4
    80008cbc:	0007871b          	sext.w	a4,a5
        ( isNaNF64UI( uiA ) && !softfloat_isSigNaNF64UI( uiA )) << 9;
    80008cc0:	fe843783          	ld	a5,-24(s0)
    80008cc4:	fff7c693          	not	a3,a5
    80008cc8:	7ff00793          	li	a5,2047
    80008ccc:	17d2                	slli	a5,a5,0x34
    80008cce:	8ff5                	and	a5,a5,a3
    80008cd0:	eb95                	bnez	a5,80008d04 <f64_classify+0x252>
    80008cd2:	fe843683          	ld	a3,-24(s0)
    80008cd6:	57fd                	li	a5,-1
    80008cd8:	83b1                	srli	a5,a5,0xc
    80008cda:	8ff5                	and	a5,a5,a3
    80008cdc:	c785                	beqz	a5,80008d04 <f64_classify+0x252>
    80008cde:	fe843683          	ld	a3,-24(s0)
    80008ce2:	00fff7b7          	lui	a5,0xfff
    80008ce6:	179e                	slli	a5,a5,0x27
    80008ce8:	8efd                	and	a3,a3,a5
    80008cea:	7ff00793          	li	a5,2047
    80008cee:	17d2                	slli	a5,a5,0x34
    80008cf0:	00f69863          	bne	a3,a5,80008d00 <f64_classify+0x24e>
    80008cf4:	fe843683          	ld	a3,-24(s0)
    80008cf8:	57fd                	li	a5,-1
    80008cfa:	83b5                	srli	a5,a5,0xd
    80008cfc:	8ff5                	and	a5,a5,a3
    80008cfe:	e399                	bnez	a5,80008d04 <f64_classify+0x252>
    80008d00:	4785                	li	a5,1
    80008d02:	a011                	j	80008d06 <f64_classify+0x254>
    80008d04:	4781                	li	a5,0
    80008d06:	0097979b          	slliw	a5,a5,0x9
    80008d0a:	2781                	sext.w	a5,a5
        ( isNaNF64UI( uiA ) &&  softfloat_isSigNaNF64UI( uiA )) << 8 |
    80008d0c:	8fd9                	or	a5,a5,a4
    80008d0e:	2781                	sext.w	a5,a5
}
    80008d10:	853e                	mv	a0,a5
    80008d12:	6426                	ld	s0,72(sp)
    80008d14:	6161                	addi	sp,sp,80
    80008d16:	8082                	ret

0000000080008d18 <softfloat_addMagsF32>:
#include "platform.h"
#include "internals.h"
#include "specialize.h"

float32_t softfloat_addMagsF32( uint_fast32_t uiA, uint_fast32_t uiB )
{
    80008d18:	7159                	addi	sp,sp,-112
    80008d1a:	f486                	sd	ra,104(sp)
    80008d1c:	f0a2                	sd	s0,96(sp)
    80008d1e:	1880                	addi	s0,sp,112
    80008d20:	f8a43c23          	sd	a0,-104(s0)
    80008d24:	f8b43823          	sd	a1,-112(s0)
    uint_fast32_t sigZ;
    union ui32_f32 uZ;

    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    expA = expF32UI( uiA );
    80008d28:	f9843783          	ld	a5,-104(s0)
    80008d2c:	83dd                	srli	a5,a5,0x17
    80008d2e:	0ff7f793          	andi	a5,a5,255
    80008d32:	faf43c23          	sd	a5,-72(s0)
    sigA = fracF32UI( uiA );
    80008d36:	f9843703          	ld	a4,-104(s0)
    80008d3a:	008007b7          	lui	a5,0x800
    80008d3e:	17fd                	addi	a5,a5,-1
    80008d40:	8ff9                	and	a5,a5,a4
    80008d42:	fef43423          	sd	a5,-24(s0)
    expB = expF32UI( uiB );
    80008d46:	f9043783          	ld	a5,-112(s0)
    80008d4a:	83dd                	srli	a5,a5,0x17
    80008d4c:	0ff7f793          	andi	a5,a5,255
    80008d50:	faf43823          	sd	a5,-80(s0)
    sigB = fracF32UI( uiB );
    80008d54:	f9043703          	ld	a4,-112(s0)
    80008d58:	008007b7          	lui	a5,0x800
    80008d5c:	17fd                	addi	a5,a5,-1
    80008d5e:	8ff9                	and	a5,a5,a4
    80008d60:	fef43023          	sd	a5,-32(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    expDiff = expA - expB;
    80008d64:	fb843703          	ld	a4,-72(s0)
    80008d68:	fb043783          	ld	a5,-80(s0)
    80008d6c:	40f707b3          	sub	a5,a4,a5
    80008d70:	faf43423          	sd	a5,-88(s0)
    if ( ! expDiff ) {
    80008d74:	fa843783          	ld	a5,-88(s0)
    80008d78:	efc5                	bnez	a5,80008e30 <softfloat_addMagsF32+0x118>
        /*--------------------------------------------------------------------
        *--------------------------------------------------------------------*/
        if ( ! expA ) {
    80008d7a:	fb843783          	ld	a5,-72(s0)
    80008d7e:	eb89                	bnez	a5,80008d90 <softfloat_addMagsF32+0x78>
            uiZ = uiA + sigB;
    80008d80:	f9843703          	ld	a4,-104(s0)
    80008d84:	fe043783          	ld	a5,-32(s0)
    80008d88:	97ba                	add	a5,a5,a4
    80008d8a:	fcf43c23          	sd	a5,-40(s0)
            goto uiZ;
    80008d8e:	a421                	j	80008f96 <softfloat_addMagsF32+0x27e>
        }
        if ( expA == 0xFF ) {
    80008d90:	fb843703          	ld	a4,-72(s0)
    80008d94:	0ff00793          	li	a5,255
    80008d98:	00f71e63          	bne	a4,a5,80008db4 <softfloat_addMagsF32+0x9c>
            if ( sigA | sigB ) goto propagateNaN;
    80008d9c:	fe843703          	ld	a4,-24(s0)
    80008da0:	fe043783          	ld	a5,-32(s0)
    80008da4:	8fd9                	or	a5,a5,a4
    80008da6:	1c079b63          	bnez	a5,80008f7c <softfloat_addMagsF32+0x264>
            uiZ = uiA;
    80008daa:	f9843783          	ld	a5,-104(s0)
    80008dae:	fcf43c23          	sd	a5,-40(s0)
            goto uiZ;
    80008db2:	a2d5                	j	80008f96 <softfloat_addMagsF32+0x27e>
        }
        signZ = signF32UI( uiA );
    80008db4:	f9843783          	ld	a5,-104(s0)
    80008db8:	2781                	sext.w	a5,a5
    80008dba:	01f7d79b          	srliw	a5,a5,0x1f
    80008dbe:	fcf40ba3          	sb	a5,-41(s0)
        expZ = expA;
    80008dc2:	fb843783          	ld	a5,-72(s0)
    80008dc6:	fcf43423          	sd	a5,-56(s0)
        sigZ = 0x01000000 + sigA + sigB;
    80008dca:	fe843703          	ld	a4,-24(s0)
    80008dce:	fe043783          	ld	a5,-32(s0)
    80008dd2:	973e                	add	a4,a4,a5
    80008dd4:	010007b7          	lui	a5,0x1000
    80008dd8:	97ba                	add	a5,a5,a4
    80008dda:	fcf43023          	sd	a5,-64(s0)
        if ( ! (sigZ & 1) && (expZ < 0xFE) ) {
    80008dde:	fc043783          	ld	a5,-64(s0)
    80008de2:	8b85                	andi	a5,a5,1
    80008de4:	e3a1                	bnez	a5,80008e24 <softfloat_addMagsF32+0x10c>
    80008de6:	fc843703          	ld	a4,-56(s0)
    80008dea:	0fd00793          	li	a5,253
    80008dee:	02e7cb63          	blt	a5,a4,80008e24 <softfloat_addMagsF32+0x10c>
            uiZ = packToF32UI( signZ, expZ, sigZ>>1 );
    80008df2:	fd744783          	lbu	a5,-41(s0)
    80008df6:	2781                	sext.w	a5,a5
    80008df8:	01f7979b          	slliw	a5,a5,0x1f
    80008dfc:	0007871b          	sext.w	a4,a5
    80008e00:	fc843783          	ld	a5,-56(s0)
    80008e04:	2781                	sext.w	a5,a5
    80008e06:	0177979b          	slliw	a5,a5,0x17
    80008e0a:	2781                	sext.w	a5,a5
    80008e0c:	9fb9                	addw	a5,a5,a4
    80008e0e:	2781                	sext.w	a5,a5
    80008e10:	02079713          	slli	a4,a5,0x20
    80008e14:	9301                	srli	a4,a4,0x20
    80008e16:	fc043783          	ld	a5,-64(s0)
    80008e1a:	8385                	srli	a5,a5,0x1
    80008e1c:	97ba                	add	a5,a5,a4
    80008e1e:	fcf43c23          	sd	a5,-40(s0)
            goto uiZ;
    80008e22:	aa95                	j	80008f96 <softfloat_addMagsF32+0x27e>
        }
        sigZ <<= 6;
    80008e24:	fc043783          	ld	a5,-64(s0)
    80008e28:	079a                	slli	a5,a5,0x6
    80008e2a:	fcf43023          	sd	a5,-64(s0)
    80008e2e:	aa25                	j	80008f66 <softfloat_addMagsF32+0x24e>
    } else {
        /*--------------------------------------------------------------------
        *--------------------------------------------------------------------*/
        signZ = signF32UI( uiA );
    80008e30:	f9843783          	ld	a5,-104(s0)
    80008e34:	2781                	sext.w	a5,a5
    80008e36:	01f7d79b          	srliw	a5,a5,0x1f
    80008e3a:	fcf40ba3          	sb	a5,-41(s0)
        sigA <<= 6;
    80008e3e:	fe843783          	ld	a5,-24(s0)
    80008e42:	079a                	slli	a5,a5,0x6
    80008e44:	fef43423          	sd	a5,-24(s0)
        sigB <<= 6;
    80008e48:	fe043783          	ld	a5,-32(s0)
    80008e4c:	079a                	slli	a5,a5,0x6
    80008e4e:	fef43023          	sd	a5,-32(s0)
        if ( expDiff < 0 ) {
    80008e52:	fa843783          	ld	a5,-88(s0)
    80008e56:	0807d063          	bgez	a5,80008ed6 <softfloat_addMagsF32+0x1be>
            if ( expB == 0xFF ) {
    80008e5a:	fb043703          	ld	a4,-80(s0)
    80008e5e:	0ff00793          	li	a5,255
    80008e62:	02f71663          	bne	a4,a5,80008e8e <softfloat_addMagsF32+0x176>
                if ( sigB ) goto propagateNaN;
    80008e66:	fe043783          	ld	a5,-32(s0)
    80008e6a:	10079b63          	bnez	a5,80008f80 <softfloat_addMagsF32+0x268>
                uiZ = packToF32UI( signZ, 0xFF, 0 );
    80008e6e:	fd744783          	lbu	a5,-41(s0)
    80008e72:	2781                	sext.w	a5,a5
    80008e74:	01f7979b          	slliw	a5,a5,0x1f
    80008e78:	0007871b          	sext.w	a4,a5
    80008e7c:	7f8007b7          	lui	a5,0x7f800
    80008e80:	9fb9                	addw	a5,a5,a4
    80008e82:	2781                	sext.w	a5,a5
    80008e84:	1782                	slli	a5,a5,0x20
    80008e86:	9381                	srli	a5,a5,0x20
    80008e88:	fcf43c23          	sd	a5,-40(s0)
                goto uiZ;
    80008e8c:	a229                	j	80008f96 <softfloat_addMagsF32+0x27e>
            }
            expZ = expB;
    80008e8e:	fb043783          	ld	a5,-80(s0)
    80008e92:	fcf43423          	sd	a5,-56(s0)
            sigA += expA ? 0x20000000 : sigA;
    80008e96:	fb843783          	ld	a5,-72(s0)
    80008e9a:	e781                	bnez	a5,80008ea2 <softfloat_addMagsF32+0x18a>
    80008e9c:	fe843783          	ld	a5,-24(s0)
    80008ea0:	a019                	j	80008ea6 <softfloat_addMagsF32+0x18e>
    80008ea2:	200007b7          	lui	a5,0x20000
    80008ea6:	fe843703          	ld	a4,-24(s0)
    80008eaa:	97ba                	add	a5,a5,a4
    80008eac:	fef43423          	sd	a5,-24(s0)
            sigA = softfloat_shiftRightJam32( sigA, -expDiff );
    80008eb0:	fe843783          	ld	a5,-24(s0)
    80008eb4:	0007871b          	sext.w	a4,a5
    80008eb8:	fa843783          	ld	a5,-88(s0)
    80008ebc:	40f007b3          	neg	a5,a5
    80008ec0:	85be                	mv	a1,a5
    80008ec2:	853a                	mv	a0,a4
    80008ec4:	381010ef          	jal	ra,8000aa44 <softfloat_shiftRightJam32>
    80008ec8:	87aa                	mv	a5,a0
    80008eca:	2781                	sext.w	a5,a5
    80008ecc:	1782                	slli	a5,a5,0x20
    80008ece:	9381                	srli	a5,a5,0x20
    80008ed0:	fef43423          	sd	a5,-24(s0)
    80008ed4:	a8b9                	j	80008f32 <softfloat_addMagsF32+0x21a>
        } else {
            if ( expA == 0xFF ) {
    80008ed6:	fb843703          	ld	a4,-72(s0)
    80008eda:	0ff00793          	li	a5,255
    80008ede:	00f71a63          	bne	a4,a5,80008ef2 <softfloat_addMagsF32+0x1da>
                if ( sigA ) goto propagateNaN;
    80008ee2:	fe843783          	ld	a5,-24(s0)
    80008ee6:	efd9                	bnez	a5,80008f84 <softfloat_addMagsF32+0x26c>
                uiZ = uiA;
    80008ee8:	f9843783          	ld	a5,-104(s0)
    80008eec:	fcf43c23          	sd	a5,-40(s0)
                goto uiZ;
    80008ef0:	a05d                	j	80008f96 <softfloat_addMagsF32+0x27e>
            }
            expZ = expA;
    80008ef2:	fb843783          	ld	a5,-72(s0)
    80008ef6:	fcf43423          	sd	a5,-56(s0)
            sigB += expB ? 0x20000000 : sigB;
    80008efa:	fb043783          	ld	a5,-80(s0)
    80008efe:	e781                	bnez	a5,80008f06 <softfloat_addMagsF32+0x1ee>
    80008f00:	fe043783          	ld	a5,-32(s0)
    80008f04:	a019                	j	80008f0a <softfloat_addMagsF32+0x1f2>
    80008f06:	200007b7          	lui	a5,0x20000
    80008f0a:	fe043703          	ld	a4,-32(s0)
    80008f0e:	97ba                	add	a5,a5,a4
    80008f10:	fef43023          	sd	a5,-32(s0)
            sigB = softfloat_shiftRightJam32( sigB, expDiff );
    80008f14:	fe043783          	ld	a5,-32(s0)
    80008f18:	2781                	sext.w	a5,a5
    80008f1a:	fa843703          	ld	a4,-88(s0)
    80008f1e:	85ba                	mv	a1,a4
    80008f20:	853e                	mv	a0,a5
    80008f22:	323010ef          	jal	ra,8000aa44 <softfloat_shiftRightJam32>
    80008f26:	87aa                	mv	a5,a0
    80008f28:	2781                	sext.w	a5,a5
    80008f2a:	1782                	slli	a5,a5,0x20
    80008f2c:	9381                	srli	a5,a5,0x20
    80008f2e:	fef43023          	sd	a5,-32(s0)
        }
        sigZ = 0x20000000 + sigA + sigB;
    80008f32:	fe843703          	ld	a4,-24(s0)
    80008f36:	fe043783          	ld	a5,-32(s0)
    80008f3a:	973e                	add	a4,a4,a5
    80008f3c:	200007b7          	lui	a5,0x20000
    80008f40:	97ba                	add	a5,a5,a4
    80008f42:	fcf43023          	sd	a5,-64(s0)
        if ( sigZ < 0x40000000 ) {
    80008f46:	fc043703          	ld	a4,-64(s0)
    80008f4a:	400007b7          	lui	a5,0x40000
    80008f4e:	00f77c63          	bleu	a5,a4,80008f66 <softfloat_addMagsF32+0x24e>
            --expZ;
    80008f52:	fc843783          	ld	a5,-56(s0)
    80008f56:	17fd                	addi	a5,a5,-1
    80008f58:	fcf43423          	sd	a5,-56(s0)
            sigZ <<= 1;
    80008f5c:	fc043783          	ld	a5,-64(s0)
    80008f60:	0786                	slli	a5,a5,0x1
    80008f62:	fcf43023          	sd	a5,-64(s0)
        }
    }
    return softfloat_roundPackToF32( signZ, expZ, sigZ );
    80008f66:	fd744783          	lbu	a5,-41(s0)
    80008f6a:	fc043603          	ld	a2,-64(s0)
    80008f6e:	fc843583          	ld	a1,-56(s0)
    80008f72:	853e                	mv	a0,a5
    80008f74:	57a010ef          	jal	ra,8000a4ee <softfloat_roundPackToF32>
    80008f78:	87aa                	mv	a5,a0
    80008f7a:	a02d                	j	80008fa4 <softfloat_addMagsF32+0x28c>
            if ( sigA | sigB ) goto propagateNaN;
    80008f7c:	0001                	nop
    80008f7e:	a021                	j	80008f86 <softfloat_addMagsF32+0x26e>
                if ( sigB ) goto propagateNaN;
    80008f80:	0001                	nop
    80008f82:	a011                	j	80008f86 <softfloat_addMagsF32+0x26e>
                if ( sigA ) goto propagateNaN;
    80008f84:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 propagateNaN:
    uiZ = softfloat_propagateNaNF32UI( uiA, uiB );
    80008f86:	f9043583          	ld	a1,-112(s0)
    80008f8a:	f9843503          	ld	a0,-104(s0)
    80008f8e:	7bc020ef          	jal	ra,8000b74a <softfloat_propagateNaNF32UI>
    80008f92:	fca43c23          	sd	a0,-40(s0)
 uiZ:
    uZ.ui = uiZ;
    80008f96:	fd843783          	ld	a5,-40(s0)
    80008f9a:	2781                	sext.w	a5,a5
    80008f9c:	faf42023          	sw	a5,-96(s0)
    return uZ.f;
    80008fa0:	fa042783          	lw	a5,-96(s0)

}
    80008fa4:	853e                	mv	a0,a5
    80008fa6:	70a6                	ld	ra,104(sp)
    80008fa8:	7406                	ld	s0,96(sp)
    80008faa:	6165                	addi	sp,sp,112
    80008fac:	8082                	ret

0000000080008fae <softfloat_addMagsF64>:
#include "internals.h"
#include "specialize.h"

float64_t
 softfloat_addMagsF64( uint_fast64_t uiA, uint_fast64_t uiB, bool signZ )
{
    80008fae:	7119                	addi	sp,sp,-128
    80008fb0:	fc86                	sd	ra,120(sp)
    80008fb2:	f8a2                	sd	s0,112(sp)
    80008fb4:	0100                	addi	s0,sp,128
    80008fb6:	f8a43c23          	sd	a0,-104(s0)
    80008fba:	f8b43823          	sd	a1,-112(s0)
    80008fbe:	87b2                	mv	a5,a2
    80008fc0:	f8f407a3          	sb	a5,-113(s0)
    uint_fast64_t sigZ;
    union ui64_f64 uZ;

    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    expA = expF64UI( uiA );
    80008fc4:	f9843783          	ld	a5,-104(s0)
    80008fc8:	93d1                	srli	a5,a5,0x34
    80008fca:	7ff7f793          	andi	a5,a5,2047
    80008fce:	fcf43023          	sd	a5,-64(s0)
    sigA = fracF64UI( uiA );
    80008fd2:	f9843703          	ld	a4,-104(s0)
    80008fd6:	57fd                	li	a5,-1
    80008fd8:	83b1                	srli	a5,a5,0xc
    80008fda:	8ff9                	and	a5,a5,a4
    80008fdc:	fef43423          	sd	a5,-24(s0)
    expB = expF64UI( uiB );
    80008fe0:	f9043783          	ld	a5,-112(s0)
    80008fe4:	93d1                	srli	a5,a5,0x34
    80008fe6:	7ff7f793          	andi	a5,a5,2047
    80008fea:	faf43c23          	sd	a5,-72(s0)
    sigB = fracF64UI( uiB );
    80008fee:	f9043703          	ld	a4,-112(s0)
    80008ff2:	57fd                	li	a5,-1
    80008ff4:	83b1                	srli	a5,a5,0xc
    80008ff6:	8ff9                	and	a5,a5,a4
    80008ff8:	fef43023          	sd	a5,-32(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    expDiff = expA - expB;
    80008ffc:	fc043703          	ld	a4,-64(s0)
    80009000:	fb843783          	ld	a5,-72(s0)
    80009004:	40f707b3          	sub	a5,a4,a5
    80009008:	faf43823          	sd	a5,-80(s0)
    if ( ! expDiff ) {
    8000900c:	fb043783          	ld	a5,-80(s0)
    80009010:	e3b5                	bnez	a5,80009074 <softfloat_addMagsF64+0xc6>
        /*--------------------------------------------------------------------
        *--------------------------------------------------------------------*/
        if ( ! expA ) {
    80009012:	fc043783          	ld	a5,-64(s0)
    80009016:	eb89                	bnez	a5,80009028 <softfloat_addMagsF64+0x7a>
            uiZ = uiA + sigB;
    80009018:	f9843703          	ld	a4,-104(s0)
    8000901c:	fe043783          	ld	a5,-32(s0)
    80009020:	97ba                	add	a5,a5,a4
    80009022:	fcf43c23          	sd	a5,-40(s0)
            goto uiZ;
    80009026:	a279                	j	800091b4 <softfloat_addMagsF64+0x206>
        }
        if ( expA == 0x7FF ) {
    80009028:	fc043703          	ld	a4,-64(s0)
    8000902c:	7ff00793          	li	a5,2047
    80009030:	00f71e63          	bne	a4,a5,8000904c <softfloat_addMagsF64+0x9e>
            if ( sigA | sigB ) goto propagateNaN;
    80009034:	fe843703          	ld	a4,-24(s0)
    80009038:	fe043783          	ld	a5,-32(s0)
    8000903c:	8fd9                	or	a5,a5,a4
    8000903e:	14079e63          	bnez	a5,8000919a <softfloat_addMagsF64+0x1ec>
            uiZ = uiA;
    80009042:	f9843783          	ld	a5,-104(s0)
    80009046:	fcf43c23          	sd	a5,-40(s0)
            goto uiZ;
    8000904a:	a2ad                	j	800091b4 <softfloat_addMagsF64+0x206>
        }
        expZ = expA;
    8000904c:	fc043783          	ld	a5,-64(s0)
    80009050:	fcf43823          	sd	a5,-48(s0)
        sigZ = UINT64_C( 0x0020000000000000 ) + sigA + sigB;
    80009054:	fe843703          	ld	a4,-24(s0)
    80009058:	fe043783          	ld	a5,-32(s0)
    8000905c:	973e                	add	a4,a4,a5
    8000905e:	4785                	li	a5,1
    80009060:	17d6                	slli	a5,a5,0x35
    80009062:	97ba                	add	a5,a5,a4
    80009064:	fcf43423          	sd	a5,-56(s0)
        sigZ <<= 9;
    80009068:	fc843783          	ld	a5,-56(s0)
    8000906c:	07a6                	slli	a5,a5,0x9
    8000906e:	fcf43423          	sd	a5,-56(s0)
    80009072:	aa09                	j	80009184 <softfloat_addMagsF64+0x1d6>
    } else {
        /*--------------------------------------------------------------------
        *--------------------------------------------------------------------*/
        sigA <<= 9;
    80009074:	fe843783          	ld	a5,-24(s0)
    80009078:	07a6                	slli	a5,a5,0x9
    8000907a:	fef43423          	sd	a5,-24(s0)
        sigB <<= 9;
    8000907e:	fe043783          	ld	a5,-32(s0)
    80009082:	07a6                	slli	a5,a5,0x9
    80009084:	fef43023          	sd	a5,-32(s0)
        if ( expDiff < 0 ) {
    80009088:	fb043783          	ld	a5,-80(s0)
    8000908c:	0607d763          	bgez	a5,800090fa <softfloat_addMagsF64+0x14c>
            if ( expB == 0x7FF ) {
    80009090:	fb843703          	ld	a4,-72(s0)
    80009094:	7ff00793          	li	a5,2047
    80009098:	02f71163          	bne	a4,a5,800090ba <softfloat_addMagsF64+0x10c>
                if ( sigB ) goto propagateNaN;
    8000909c:	fe043783          	ld	a5,-32(s0)
    800090a0:	0e079f63          	bnez	a5,8000919e <softfloat_addMagsF64+0x1f0>
                uiZ = packToF64UI( signZ, 0x7FF, 0 );
    800090a4:	f8f44783          	lbu	a5,-113(s0)
    800090a8:	03f79713          	slli	a4,a5,0x3f
    800090ac:	7ff00793          	li	a5,2047
    800090b0:	17d2                	slli	a5,a5,0x34
    800090b2:	97ba                	add	a5,a5,a4
    800090b4:	fcf43c23          	sd	a5,-40(s0)
                goto uiZ;
    800090b8:	a8f5                	j	800091b4 <softfloat_addMagsF64+0x206>
            }
            expZ = expB;
    800090ba:	fb843783          	ld	a5,-72(s0)
    800090be:	fcf43823          	sd	a5,-48(s0)
            if ( expA ) {
    800090c2:	fc043783          	ld	a5,-64(s0)
    800090c6:	cb89                	beqz	a5,800090d8 <softfloat_addMagsF64+0x12a>
                sigA += UINT64_C( 0x2000000000000000 );
    800090c8:	fe843703          	ld	a4,-24(s0)
    800090cc:	4785                	li	a5,1
    800090ce:	17f6                	slli	a5,a5,0x3d
    800090d0:	97ba                	add	a5,a5,a4
    800090d2:	fef43423          	sd	a5,-24(s0)
    800090d6:	a031                	j	800090e2 <softfloat_addMagsF64+0x134>
            } else {
                sigA <<= 1;
    800090d8:	fe843783          	ld	a5,-24(s0)
    800090dc:	0786                	slli	a5,a5,0x1
    800090de:	fef43423          	sd	a5,-24(s0)
            }
            sigA = softfloat_shiftRightJam64( sigA, -expDiff );
    800090e2:	fb043783          	ld	a5,-80(s0)
    800090e6:	40f007b3          	neg	a5,a5
    800090ea:	85be                	mv	a1,a5
    800090ec:	fe843503          	ld	a0,-24(s0)
    800090f0:	1cb010ef          	jal	ra,8000aaba <softfloat_shiftRightJam64>
    800090f4:	fea43423          	sd	a0,-24(s0)
    800090f8:	a8a1                	j	80009150 <softfloat_addMagsF64+0x1a2>
        } else {
            if ( expA == 0x7FF ) {
    800090fa:	fc043703          	ld	a4,-64(s0)
    800090fe:	7ff00793          	li	a5,2047
    80009102:	00f71a63          	bne	a4,a5,80009116 <softfloat_addMagsF64+0x168>
                if ( sigA ) goto propagateNaN;
    80009106:	fe843783          	ld	a5,-24(s0)
    8000910a:	efc1                	bnez	a5,800091a2 <softfloat_addMagsF64+0x1f4>
                uiZ = uiA;
    8000910c:	f9843783          	ld	a5,-104(s0)
    80009110:	fcf43c23          	sd	a5,-40(s0)
                goto uiZ;
    80009114:	a045                	j	800091b4 <softfloat_addMagsF64+0x206>
            }
            expZ = expA;
    80009116:	fc043783          	ld	a5,-64(s0)
    8000911a:	fcf43823          	sd	a5,-48(s0)
            if ( expB ) {
    8000911e:	fb843783          	ld	a5,-72(s0)
    80009122:	cb89                	beqz	a5,80009134 <softfloat_addMagsF64+0x186>
                sigB += UINT64_C( 0x2000000000000000 );
    80009124:	fe043703          	ld	a4,-32(s0)
    80009128:	4785                	li	a5,1
    8000912a:	17f6                	slli	a5,a5,0x3d
    8000912c:	97ba                	add	a5,a5,a4
    8000912e:	fef43023          	sd	a5,-32(s0)
    80009132:	a031                	j	8000913e <softfloat_addMagsF64+0x190>
            } else {
                sigB <<= 1;
    80009134:	fe043783          	ld	a5,-32(s0)
    80009138:	0786                	slli	a5,a5,0x1
    8000913a:	fef43023          	sd	a5,-32(s0)
            }
            sigB = softfloat_shiftRightJam64( sigB, expDiff );
    8000913e:	fb043783          	ld	a5,-80(s0)
    80009142:	85be                	mv	a1,a5
    80009144:	fe043503          	ld	a0,-32(s0)
    80009148:	173010ef          	jal	ra,8000aaba <softfloat_shiftRightJam64>
    8000914c:	fea43023          	sd	a0,-32(s0)
        }
        sigZ = UINT64_C( 0x2000000000000000 ) + sigA + sigB;
    80009150:	fe843703          	ld	a4,-24(s0)
    80009154:	fe043783          	ld	a5,-32(s0)
    80009158:	973e                	add	a4,a4,a5
    8000915a:	4785                	li	a5,1
    8000915c:	17f6                	slli	a5,a5,0x3d
    8000915e:	97ba                	add	a5,a5,a4
    80009160:	fcf43423          	sd	a5,-56(s0)
        if ( sigZ < UINT64_C( 0x4000000000000000 ) ) {
    80009164:	fc843703          	ld	a4,-56(s0)
    80009168:	57fd                	li	a5,-1
    8000916a:	8389                	srli	a5,a5,0x2
    8000916c:	00e7ec63          	bltu	a5,a4,80009184 <softfloat_addMagsF64+0x1d6>
            --expZ;
    80009170:	fd043783          	ld	a5,-48(s0)
    80009174:	17fd                	addi	a5,a5,-1
    80009176:	fcf43823          	sd	a5,-48(s0)
            sigZ <<= 1;
    8000917a:	fc843783          	ld	a5,-56(s0)
    8000917e:	0786                	slli	a5,a5,0x1
    80009180:	fcf43423          	sd	a5,-56(s0)
        }
    }
    return softfloat_roundPackToF64( signZ, expZ, sigZ );
    80009184:	f8f44783          	lbu	a5,-113(s0)
    80009188:	fc843603          	ld	a2,-56(s0)
    8000918c:	fd043583          	ld	a1,-48(s0)
    80009190:	853e                	mv	a0,a5
    80009192:	592010ef          	jal	ra,8000a724 <softfloat_roundPackToF64>
    80009196:	87aa                	mv	a5,a0
    80009198:	a025                	j	800091c0 <softfloat_addMagsF64+0x212>
            if ( sigA | sigB ) goto propagateNaN;
    8000919a:	0001                	nop
    8000919c:	a021                	j	800091a4 <softfloat_addMagsF64+0x1f6>
                if ( sigB ) goto propagateNaN;
    8000919e:	0001                	nop
    800091a0:	a011                	j	800091a4 <softfloat_addMagsF64+0x1f6>
                if ( sigA ) goto propagateNaN;
    800091a2:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 propagateNaN:
    uiZ = softfloat_propagateNaNF64UI( uiA, uiB );
    800091a4:	f9043583          	ld	a1,-112(s0)
    800091a8:	f9843503          	ld	a0,-104(s0)
    800091ac:	600020ef          	jal	ra,8000b7ac <softfloat_propagateNaNF64UI>
    800091b0:	fca43c23          	sd	a0,-40(s0)
 uiZ:
    uZ.ui = uiZ;
    800091b4:	fd843783          	ld	a5,-40(s0)
    800091b8:	faf43423          	sd	a5,-88(s0)
    return uZ.f;
    800091bc:	fa843783          	ld	a5,-88(s0)

}
    800091c0:	853e                	mv	a0,a5
    800091c2:	70e6                	ld	ra,120(sp)
    800091c4:	7446                	ld	s0,112(sp)
    800091c6:	6109                	addi	sp,sp,128
    800091c8:	8082                	ret

00000000800091ca <softfloat_approxRecip32_1>:

extern const uint16_t softfloat_approxRecip_1k0s[16];
extern const uint16_t softfloat_approxRecip_1k1s[16];

uint32_t softfloat_approxRecip32_1( uint32_t a )
{
    800091ca:	7139                	addi	sp,sp,-64
    800091cc:	fc22                	sd	s0,56(sp)
    800091ce:	0080                	addi	s0,sp,64
    800091d0:	87aa                	mv	a5,a0
    800091d2:	fcf42623          	sw	a5,-52(s0)
    uint16_t eps, r0;
    uint32_t sigma0;
    uint_fast32_t r;
    uint32_t sqrSigma0;

    index = a>>27 & 0xF;
    800091d6:	fcc42783          	lw	a5,-52(s0)
    800091da:	01b7d79b          	srliw	a5,a5,0x1b
    800091de:	2781                	sext.w	a5,a5
    800091e0:	2781                	sext.w	a5,a5
    800091e2:	8bbd                	andi	a5,a5,15
    800091e4:	fef42623          	sw	a5,-20(s0)
    eps = (uint16_t) (a>>11);
    800091e8:	fcc42783          	lw	a5,-52(s0)
    800091ec:	00b7d79b          	srliw	a5,a5,0xb
    800091f0:	2781                	sext.w	a5,a5
    800091f2:	fef41523          	sh	a5,-22(s0)
    r0 = softfloat_approxRecip_1k0s[index]
    800091f6:	00004717          	auipc	a4,0x4
    800091fa:	eaa70713          	addi	a4,a4,-342 # 8000d0a0 <softfloat_approxRecip_1k0s>
    800091fe:	fec42783          	lw	a5,-20(s0)
    80009202:	0786                	slli	a5,a5,0x1
    80009204:	97ba                	add	a5,a5,a4
    80009206:	0007d703          	lhu	a4,0(a5) # 40000000 <MEM_START-0x40000000>
             - ((softfloat_approxRecip_1k1s[index] * (uint_fast32_t) eps)>>20);
    8000920a:	00004697          	auipc	a3,0x4
    8000920e:	eb668693          	addi	a3,a3,-330 # 8000d0c0 <softfloat_approxRecip_1k1s>
    80009212:	fec42783          	lw	a5,-20(s0)
    80009216:	0786                	slli	a5,a5,0x1
    80009218:	97b6                	add	a5,a5,a3
    8000921a:	0007d783          	lhu	a5,0(a5)
    8000921e:	86be                	mv	a3,a5
    80009220:	fea45783          	lhu	a5,-22(s0)
    80009224:	02f687b3          	mul	a5,a3,a5
    80009228:	83d1                	srli	a5,a5,0x14
    8000922a:	17c2                	slli	a5,a5,0x30
    8000922c:	93c1                	srli	a5,a5,0x30
    r0 = softfloat_approxRecip_1k0s[index]
    8000922e:	40f707bb          	subw	a5,a4,a5
    80009232:	fef41423          	sh	a5,-24(s0)
    sigma0 = ~(uint_fast32_t) ((r0 * (uint_fast64_t) a)>>7);
    80009236:	fe845703          	lhu	a4,-24(s0)
    8000923a:	fcc46783          	lwu	a5,-52(s0)
    8000923e:	02f707b3          	mul	a5,a4,a5
    80009242:	839d                	srli	a5,a5,0x7
    80009244:	2781                	sext.w	a5,a5
    80009246:	fff7c793          	not	a5,a5
    8000924a:	fef42223          	sw	a5,-28(s0)
    r = ((uint_fast32_t) r0<<16) + ((r0 * (uint_fast64_t) sigma0)>>24);
    8000924e:	fe845783          	lhu	a5,-24(s0)
    80009252:	01079713          	slli	a4,a5,0x10
    80009256:	fe845683          	lhu	a3,-24(s0)
    8000925a:	fe446783          	lwu	a5,-28(s0)
    8000925e:	02f687b3          	mul	a5,a3,a5
    80009262:	83e1                	srli	a5,a5,0x18
    80009264:	97ba                	add	a5,a5,a4
    80009266:	fcf43c23          	sd	a5,-40(s0)
    sqrSigma0 = ((uint_fast64_t) sigma0 * sigma0)>>32;
    8000926a:	fe446703          	lwu	a4,-28(s0)
    8000926e:	fe446783          	lwu	a5,-28(s0)
    80009272:	02f707b3          	mul	a5,a4,a5
    80009276:	9381                	srli	a5,a5,0x20
    80009278:	fcf42a23          	sw	a5,-44(s0)
    r += ((uint32_t) r * (uint_fast64_t) sqrSigma0)>>48;
    8000927c:	fd843783          	ld	a5,-40(s0)
    80009280:	2781                	sext.w	a5,a5
    80009282:	02079713          	slli	a4,a5,0x20
    80009286:	9301                	srli	a4,a4,0x20
    80009288:	fd446783          	lwu	a5,-44(s0)
    8000928c:	02f707b3          	mul	a5,a4,a5
    80009290:	93c1                	srli	a5,a5,0x30
    80009292:	fd843703          	ld	a4,-40(s0)
    80009296:	97ba                	add	a5,a5,a4
    80009298:	fcf43c23          	sd	a5,-40(s0)
    return r;
    8000929c:	fd843783          	ld	a5,-40(s0)
    800092a0:	2781                	sext.w	a5,a5

}
    800092a2:	853e                	mv	a0,a5
    800092a4:	7462                	ld	s0,56(sp)
    800092a6:	6121                	addi	sp,sp,64
    800092a8:	8082                	ret

00000000800092aa <softfloat_approxRecipSqrt32_1>:

extern const uint16_t softfloat_approxRecipSqrt_1k0s[];
extern const uint16_t softfloat_approxRecipSqrt_1k1s[];

uint32_t softfloat_approxRecipSqrt32_1( unsigned int oddExpA, uint32_t a )
{
    800092aa:	7139                	addi	sp,sp,-64
    800092ac:	fc22                	sd	s0,56(sp)
    800092ae:	0080                	addi	s0,sp,64
    800092b0:	87aa                	mv	a5,a0
    800092b2:	872e                	mv	a4,a1
    800092b4:	fcf42623          	sw	a5,-52(s0)
    800092b8:	87ba                	mv	a5,a4
    800092ba:	fcf42423          	sw	a5,-56(s0)
    uint_fast32_t ESqrR0;
    uint32_t sigma0;
    uint_fast32_t r;
    uint32_t sqrSigma0;

    index = (a>>27 & 0xE) + oddExpA;
    800092be:	fc842783          	lw	a5,-56(s0)
    800092c2:	01b7d79b          	srliw	a5,a5,0x1b
    800092c6:	2781                	sext.w	a5,a5
    800092c8:	8bb9                	andi	a5,a5,14
    800092ca:	2781                	sext.w	a5,a5
    800092cc:	fcc42703          	lw	a4,-52(s0)
    800092d0:	9fb9                	addw	a5,a5,a4
    800092d2:	2781                	sext.w	a5,a5
    800092d4:	fcf42e23          	sw	a5,-36(s0)
    eps = (uint16_t) (a>>12);
    800092d8:	fc842783          	lw	a5,-56(s0)
    800092dc:	00c7d79b          	srliw	a5,a5,0xc
    800092e0:	2781                	sext.w	a5,a5
    800092e2:	fcf41d23          	sh	a5,-38(s0)
    r0 = softfloat_approxRecipSqrt_1k0s[index]
    800092e6:	00004717          	auipc	a4,0x4
    800092ea:	dfa70713          	addi	a4,a4,-518 # 8000d0e0 <softfloat_approxRecipSqrt_1k0s>
    800092ee:	fdc42783          	lw	a5,-36(s0)
    800092f2:	0786                	slli	a5,a5,0x1
    800092f4:	97ba                	add	a5,a5,a4
    800092f6:	0007d703          	lhu	a4,0(a5)
             - ((softfloat_approxRecipSqrt_1k1s[index] * (uint_fast32_t) eps)
    800092fa:	00004697          	auipc	a3,0x4
    800092fe:	e0668693          	addi	a3,a3,-506 # 8000d100 <softfloat_approxRecipSqrt_1k1s>
    80009302:	fdc42783          	lw	a5,-36(s0)
    80009306:	0786                	slli	a5,a5,0x1
    80009308:	97b6                	add	a5,a5,a3
    8000930a:	0007d783          	lhu	a5,0(a5)
    8000930e:	86be                	mv	a3,a5
    80009310:	fda45783          	lhu	a5,-38(s0)
    80009314:	02f687b3          	mul	a5,a3,a5
                    >>20);
    80009318:	83d1                	srli	a5,a5,0x14
             - ((softfloat_approxRecipSqrt_1k1s[index] * (uint_fast32_t) eps)
    8000931a:	17c2                	slli	a5,a5,0x30
    8000931c:	93c1                	srli	a5,a5,0x30
    r0 = softfloat_approxRecipSqrt_1k0s[index]
    8000931e:	40f707bb          	subw	a5,a4,a5
    80009322:	fcf41c23          	sh	a5,-40(s0)
    ESqrR0 = (uint_fast32_t) r0 * r0;
    80009326:	fd845703          	lhu	a4,-40(s0)
    8000932a:	fd845783          	lhu	a5,-40(s0)
    8000932e:	02f707b3          	mul	a5,a4,a5
    80009332:	fef43423          	sd	a5,-24(s0)
    if ( ! oddExpA ) ESqrR0 <<= 1;
    80009336:	fcc42783          	lw	a5,-52(s0)
    8000933a:	2781                	sext.w	a5,a5
    8000933c:	e791                	bnez	a5,80009348 <softfloat_approxRecipSqrt32_1+0x9e>
    8000933e:	fe843783          	ld	a5,-24(s0)
    80009342:	0786                	slli	a5,a5,0x1
    80009344:	fef43423          	sd	a5,-24(s0)
    sigma0 = ~(uint_fast32_t) (((uint32_t) ESqrR0 * (uint_fast64_t) a)>>23);
    80009348:	fe843783          	ld	a5,-24(s0)
    8000934c:	2781                	sext.w	a5,a5
    8000934e:	02079713          	slli	a4,a5,0x20
    80009352:	9301                	srli	a4,a4,0x20
    80009354:	fc846783          	lwu	a5,-56(s0)
    80009358:	02f707b3          	mul	a5,a4,a5
    8000935c:	83dd                	srli	a5,a5,0x17
    8000935e:	2781                	sext.w	a5,a5
    80009360:	fff7c793          	not	a5,a5
    80009364:	fcf42a23          	sw	a5,-44(s0)
    r = ((uint_fast32_t) r0<<16) + ((r0 * (uint_fast64_t) sigma0)>>25);
    80009368:	fd845783          	lhu	a5,-40(s0)
    8000936c:	01079713          	slli	a4,a5,0x10
    80009370:	fd845683          	lhu	a3,-40(s0)
    80009374:	fd446783          	lwu	a5,-44(s0)
    80009378:	02f687b3          	mul	a5,a3,a5
    8000937c:	83e5                	srli	a5,a5,0x19
    8000937e:	97ba                	add	a5,a5,a4
    80009380:	fef43023          	sd	a5,-32(s0)
    sqrSigma0 = ((uint_fast64_t) sigma0 * sigma0)>>32;
    80009384:	fd446703          	lwu	a4,-44(s0)
    80009388:	fd446783          	lwu	a5,-44(s0)
    8000938c:	02f707b3          	mul	a5,a4,a5
    80009390:	9381                	srli	a5,a5,0x20
    80009392:	fcf42823          	sw	a5,-48(s0)
    r += ((uint32_t) ((r>>1) + (r>>3) - ((uint_fast32_t) r0<<14))
    80009396:	fe043783          	ld	a5,-32(s0)
    8000939a:	8385                	srli	a5,a5,0x1
    8000939c:	0007871b          	sext.w	a4,a5
    800093a0:	fe043783          	ld	a5,-32(s0)
    800093a4:	838d                	srli	a5,a5,0x3
    800093a6:	2781                	sext.w	a5,a5
    800093a8:	9fb9                	addw	a5,a5,a4
    800093aa:	0007871b          	sext.w	a4,a5
    800093ae:	fd845783          	lhu	a5,-40(s0)
    800093b2:	2781                	sext.w	a5,a5
    800093b4:	00e7979b          	slliw	a5,a5,0xe
    800093b8:	2781                	sext.w	a5,a5
    800093ba:	40f707bb          	subw	a5,a4,a5
    800093be:	2781                	sext.w	a5,a5
    800093c0:	02079713          	slli	a4,a5,0x20
    800093c4:	9301                	srli	a4,a4,0x20
              * (uint_fast64_t) sqrSigma0)
    800093c6:	fd046783          	lwu	a5,-48(s0)
    800093ca:	02f707b3          	mul	a5,a4,a5
             >>48;
    800093ce:	93c1                	srli	a5,a5,0x30
    r += ((uint32_t) ((r>>1) + (r>>3) - ((uint_fast32_t) r0<<14))
    800093d0:	fe043703          	ld	a4,-32(s0)
    800093d4:	97ba                	add	a5,a5,a4
    800093d6:	fef43023          	sd	a5,-32(s0)
    if ( ! (r & 0x80000000) ) r = 0x80000000;
    800093da:	fe043703          	ld	a4,-32(s0)
    800093de:	4785                	li	a5,1
    800093e0:	07fe                	slli	a5,a5,0x1f
    800093e2:	8ff9                	and	a5,a5,a4
    800093e4:	e789                	bnez	a5,800093ee <softfloat_approxRecipSqrt32_1+0x144>
    800093e6:	4785                	li	a5,1
    800093e8:	07fe                	slli	a5,a5,0x1f
    800093ea:	fef43023          	sd	a5,-32(s0)
    return r;
    800093ee:	fe043783          	ld	a5,-32(s0)
    800093f2:	2781                	sext.w	a5,a5

}
    800093f4:	853e                	mv	a0,a5
    800093f6:	7462                	ld	s0,56(sp)
    800093f8:	6121                	addi	sp,sp,64
    800093fa:	8082                	ret

00000000800093fc <softfloat_mul64To128M>:
#include "primitiveTypes.h"

#ifndef softfloat_mul64To128M

void softfloat_mul64To128M( uint64_t a, uint64_t b, uint32_t *zPtr )
{
    800093fc:	711d                	addi	sp,sp,-96
    800093fe:	eca2                	sd	s0,88(sp)
    80009400:	1080                	addi	s0,sp,96
    80009402:	faa43c23          	sd	a0,-72(s0)
    80009406:	fab43823          	sd	a1,-80(s0)
    8000940a:	fac43423          	sd	a2,-88(s0)
    uint32_t a32, a0, b32, b0;
    uint64_t z0, mid1, z64, mid;

    a32 = a>>32;
    8000940e:	fb843783          	ld	a5,-72(s0)
    80009412:	9381                	srli	a5,a5,0x20
    80009414:	fef42623          	sw	a5,-20(s0)
    a0 = a;
    80009418:	fb843783          	ld	a5,-72(s0)
    8000941c:	fef42423          	sw	a5,-24(s0)
    b32 = b>>32;
    80009420:	fb043783          	ld	a5,-80(s0)
    80009424:	9381                	srli	a5,a5,0x20
    80009426:	fef42223          	sw	a5,-28(s0)
    b0 = b;
    8000942a:	fb043783          	ld	a5,-80(s0)
    8000942e:	fef42023          	sw	a5,-32(s0)
    z0 = (uint64_t) a0 * b0;
    80009432:	fe846703          	lwu	a4,-24(s0)
    80009436:	fe046783          	lwu	a5,-32(s0)
    8000943a:	02f707b3          	mul	a5,a4,a5
    8000943e:	fcf43c23          	sd	a5,-40(s0)
    mid1 = (uint64_t) a32 * b0;
    80009442:	fec46703          	lwu	a4,-20(s0)
    80009446:	fe046783          	lwu	a5,-32(s0)
    8000944a:	02f707b3          	mul	a5,a4,a5
    8000944e:	fcf43823          	sd	a5,-48(s0)
    mid = mid1 + (uint64_t) a0 * b32;
    80009452:	fe846703          	lwu	a4,-24(s0)
    80009456:	fe446783          	lwu	a5,-28(s0)
    8000945a:	02f707b3          	mul	a5,a4,a5
    8000945e:	fd043703          	ld	a4,-48(s0)
    80009462:	97ba                	add	a5,a5,a4
    80009464:	fcf43423          	sd	a5,-56(s0)
    z64 = (uint64_t) a32 * b32;
    80009468:	fec46703          	lwu	a4,-20(s0)
    8000946c:	fe446783          	lwu	a5,-28(s0)
    80009470:	02f707b3          	mul	a5,a4,a5
    80009474:	fcf43023          	sd	a5,-64(s0)
    z64 += (uint64_t) (mid < mid1)<<32 | mid>>32;
    80009478:	fc843703          	ld	a4,-56(s0)
    8000947c:	fd043783          	ld	a5,-48(s0)
    80009480:	00f77563          	bleu	a5,a4,8000948a <softfloat_mul64To128M+0x8e>
    80009484:	4785                	li	a5,1
    80009486:	1782                	slli	a5,a5,0x20
    80009488:	a011                	j	8000948c <softfloat_mul64To128M+0x90>
    8000948a:	4781                	li	a5,0
    8000948c:	fc843703          	ld	a4,-56(s0)
    80009490:	9301                	srli	a4,a4,0x20
    80009492:	8fd9                	or	a5,a5,a4
    80009494:	fc043703          	ld	a4,-64(s0)
    80009498:	97ba                	add	a5,a5,a4
    8000949a:	fcf43023          	sd	a5,-64(s0)
    mid <<= 32;
    8000949e:	fc843783          	ld	a5,-56(s0)
    800094a2:	1782                	slli	a5,a5,0x20
    800094a4:	fcf43423          	sd	a5,-56(s0)
    z0 += mid;
    800094a8:	fd843703          	ld	a4,-40(s0)
    800094ac:	fc843783          	ld	a5,-56(s0)
    800094b0:	97ba                	add	a5,a5,a4
    800094b2:	fcf43c23          	sd	a5,-40(s0)
    zPtr[indexWord( 4, 1 )] = z0>>32;
    800094b6:	fd843783          	ld	a5,-40(s0)
    800094ba:	0207d713          	srli	a4,a5,0x20
    800094be:	fa843783          	ld	a5,-88(s0)
    800094c2:	0791                	addi	a5,a5,4
    800094c4:	2701                	sext.w	a4,a4
    800094c6:	c398                	sw	a4,0(a5)
    zPtr[indexWord( 4, 0 )] = z0;
    800094c8:	fd843783          	ld	a5,-40(s0)
    800094cc:	0007871b          	sext.w	a4,a5
    800094d0:	fa843783          	ld	a5,-88(s0)
    800094d4:	c398                	sw	a4,0(a5)
    z64 += (z0 < mid);
    800094d6:	fd843703          	ld	a4,-40(s0)
    800094da:	fc843783          	ld	a5,-56(s0)
    800094de:	00f737b3          	sltu	a5,a4,a5
    800094e2:	0ff7f793          	andi	a5,a5,255
    800094e6:	873e                	mv	a4,a5
    800094e8:	fc043783          	ld	a5,-64(s0)
    800094ec:	97ba                	add	a5,a5,a4
    800094ee:	fcf43023          	sd	a5,-64(s0)
    zPtr[indexWord( 4, 3 )] = z64>>32;
    800094f2:	fc043783          	ld	a5,-64(s0)
    800094f6:	0207d713          	srli	a4,a5,0x20
    800094fa:	fa843783          	ld	a5,-88(s0)
    800094fe:	07b1                	addi	a5,a5,12
    80009500:	2701                	sext.w	a4,a4
    80009502:	c398                	sw	a4,0(a5)
    zPtr[indexWord( 4, 2 )] = z64;
    80009504:	fa843783          	ld	a5,-88(s0)
    80009508:	07a1                	addi	a5,a5,8
    8000950a:	fc043703          	ld	a4,-64(s0)
    8000950e:	2701                	sext.w	a4,a4
    80009510:	c398                	sw	a4,0(a5)

}
    80009512:	0001                	nop
    80009514:	6466                	ld	s0,88(sp)
    80009516:	6125                	addi	sp,sp,96
    80009518:	8082                	ret

000000008000951a <softfloat_mulAddF32>:
#include "softfloat.h"

float32_t
 softfloat_mulAddF32(
     uint_fast32_t uiA, uint_fast32_t uiB, uint_fast32_t uiC, uint_fast8_t op )
{
    8000951a:	7115                	addi	sp,sp,-224
    8000951c:	ed86                	sd	ra,216(sp)
    8000951e:	e9a2                	sd	s0,208(sp)
    80009520:	1180                	addi	s0,sp,224
    80009522:	f2a43c23          	sd	a0,-200(s0)
    80009526:	f2b43823          	sd	a1,-208(s0)
    8000952a:	f2c43423          	sd	a2,-216(s0)
    8000952e:	87b6                	mv	a5,a3
    80009530:	f2f403a3          	sb	a5,-217(s0)
    int_fast8_t shiftDist;
    union ui32_f32 uZ;

    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    signA = signF32UI( uiA );
    80009534:	f3843783          	ld	a5,-200(s0)
    80009538:	2781                	sext.w	a5,a5
    8000953a:	01f7d79b          	srliw	a5,a5,0x1f
    8000953e:	f6f40fa3          	sb	a5,-129(s0)
    expA  = expF32UI( uiA );
    80009542:	f3843783          	ld	a5,-200(s0)
    80009546:	83dd                	srli	a5,a5,0x17
    80009548:	0ff7f793          	andi	a5,a5,255
    8000954c:	fef43423          	sd	a5,-24(s0)
    sigA  = fracF32UI( uiA );
    80009550:	f3843703          	ld	a4,-200(s0)
    80009554:	008007b7          	lui	a5,0x800
    80009558:	17fd                	addi	a5,a5,-1
    8000955a:	8ff9                	and	a5,a5,a4
    8000955c:	fef43023          	sd	a5,-32(s0)
    signB = signF32UI( uiB );
    80009560:	f3043783          	ld	a5,-208(s0)
    80009564:	2781                	sext.w	a5,a5
    80009566:	01f7d79b          	srliw	a5,a5,0x1f
    8000956a:	f6f40f23          	sb	a5,-130(s0)
    expB  = expF32UI( uiB );
    8000956e:	f3043783          	ld	a5,-208(s0)
    80009572:	83dd                	srli	a5,a5,0x17
    80009574:	0ff7f793          	andi	a5,a5,255
    80009578:	fcf43c23          	sd	a5,-40(s0)
    sigB  = fracF32UI( uiB );
    8000957c:	f3043703          	ld	a4,-208(s0)
    80009580:	008007b7          	lui	a5,0x800
    80009584:	17fd                	addi	a5,a5,-1
    80009586:	8ff9                	and	a5,a5,a4
    80009588:	fcf43823          	sd	a5,-48(s0)
    signC = signF32UI( uiC ) ^ (op == softfloat_mulAdd_subC);
    8000958c:	f2843783          	ld	a5,-216(s0)
    80009590:	2781                	sext.w	a5,a5
    80009592:	01f7d79b          	srliw	a5,a5,0x1f
    80009596:	0ff7f793          	andi	a5,a5,255
    8000959a:	0007871b          	sext.w	a4,a5
    8000959e:	f2744783          	lbu	a5,-217(s0)
    800095a2:	0007869b          	sext.w	a3,a5
    800095a6:	4785                	li	a5,1
    800095a8:	40f687b3          	sub	a5,a3,a5
    800095ac:	0017b793          	seqz	a5,a5
    800095b0:	0ff7f793          	andi	a5,a5,255
    800095b4:	2781                	sext.w	a5,a5
    800095b6:	8fb9                	xor	a5,a5,a4
    800095b8:	2781                	sext.w	a5,a5
    800095ba:	00f037b3          	snez	a5,a5
    800095be:	f6f40ea3          	sb	a5,-131(s0)
    expC  = expF32UI( uiC );
    800095c2:	f2843783          	ld	a5,-216(s0)
    800095c6:	83dd                	srli	a5,a5,0x17
    800095c8:	0ff7f793          	andi	a5,a5,255
    800095cc:	fcf43423          	sd	a5,-56(s0)
    sigC  = fracF32UI( uiC );
    800095d0:	f2843703          	ld	a4,-216(s0)
    800095d4:	008007b7          	lui	a5,0x800
    800095d8:	17fd                	addi	a5,a5,-1
    800095da:	8ff9                	and	a5,a5,a4
    800095dc:	fcf43023          	sd	a5,-64(s0)
    signProd = signA ^ signB ^ (op == softfloat_mulAdd_subProd);
    800095e0:	f7f44703          	lbu	a4,-129(s0)
    800095e4:	f7e44783          	lbu	a5,-130(s0)
    800095e8:	8fb9                	xor	a5,a5,a4
    800095ea:	0ff7f793          	andi	a5,a5,255
    800095ee:	0007871b          	sext.w	a4,a5
    800095f2:	f2744783          	lbu	a5,-217(s0)
    800095f6:	0007869b          	sext.w	a3,a5
    800095fa:	4789                	li	a5,2
    800095fc:	40f687b3          	sub	a5,a3,a5
    80009600:	0017b793          	seqz	a5,a5
    80009604:	0ff7f793          	andi	a5,a5,255
    80009608:	2781                	sext.w	a5,a5
    8000960a:	8fb9                	xor	a5,a5,a4
    8000960c:	2781                	sext.w	a5,a5
    8000960e:	00f037b3          	snez	a5,a5
    80009612:	f6f40e23          	sb	a5,-132(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( expA == 0xFF ) {
    80009616:	fe843703          	ld	a4,-24(s0)
    8000961a:	0ff00793          	li	a5,255
    8000961e:	02f71863          	bne	a4,a5,8000964e <softfloat_mulAddF32+0x134>
        if ( sigA || ((expB == 0xFF) && sigB) ) goto propagateNaN_ABC;
    80009622:	fe043783          	ld	a5,-32(s0)
    80009626:	38079d63          	bnez	a5,800099c0 <softfloat_mulAddF32+0x4a6>
    8000962a:	fd843703          	ld	a4,-40(s0)
    8000962e:	0ff00793          	li	a5,255
    80009632:	00f71663          	bne	a4,a5,8000963e <softfloat_mulAddF32+0x124>
    80009636:	fd043783          	ld	a5,-48(s0)
    8000963a:	38079363          	bnez	a5,800099c0 <softfloat_mulAddF32+0x4a6>
        magBits = expB | sigB;
    8000963e:	fd843783          	ld	a5,-40(s0)
    80009642:	fd043703          	ld	a4,-48(s0)
    80009646:	8fd9                	or	a5,a5,a4
    80009648:	faf43c23          	sd	a5,-72(s0)
        goto infProdArg;
    8000964c:	a671                	j	800099d8 <softfloat_mulAddF32+0x4be>
    }
    if ( expB == 0xFF ) {
    8000964e:	fd843703          	ld	a4,-40(s0)
    80009652:	0ff00793          	li	a5,255
    80009656:	00f71e63          	bne	a4,a5,80009672 <softfloat_mulAddF32+0x158>
        if ( sigB ) goto propagateNaN_ABC;
    8000965a:	fd043783          	ld	a5,-48(s0)
    8000965e:	36079363          	bnez	a5,800099c4 <softfloat_mulAddF32+0x4aa>
        magBits = expA | sigA;
    80009662:	fe843783          	ld	a5,-24(s0)
    80009666:	fe043703          	ld	a4,-32(s0)
    8000966a:	8fd9                	or	a5,a5,a4
    8000966c:	faf43c23          	sd	a5,-72(s0)
        goto infProdArg;
    80009670:	a6a5                	j	800099d8 <softfloat_mulAddF32+0x4be>
    }
    if ( expC == 0xFF ) {
    80009672:	fc843703          	ld	a4,-56(s0)
    80009676:	0ff00793          	li	a5,255
    8000967a:	00f71d63          	bne	a4,a5,80009694 <softfloat_mulAddF32+0x17a>
        if ( sigC ) {
    8000967e:	fc043783          	ld	a5,-64(s0)
    80009682:	c781                	beqz	a5,8000968a <softfloat_mulAddF32+0x170>
            uiZ = 0;
    80009684:	fa043823          	sd	zero,-80(s0)
            goto propagateNaN_ZC;
    80009688:	a67d                	j	80009a36 <softfloat_mulAddF32+0x51c>
        }
        uiZ = uiC;
    8000968a:	f2843783          	ld	a5,-216(s0)
    8000968e:	faf43823          	sd	a5,-80(s0)
        goto uiZ;
    80009692:	a131                	j	80009a9e <softfloat_mulAddF32+0x584>
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( ! expA ) {
    80009694:	fe843783          	ld	a5,-24(s0)
    80009698:	e79d                	bnez	a5,800096c6 <softfloat_mulAddF32+0x1ac>
        if ( ! sigA ) goto zeroProd;
    8000969a:	fe043783          	ld	a5,-32(s0)
    8000969e:	3a078563          	beqz	a5,80009a48 <softfloat_mulAddF32+0x52e>
        normExpSig = softfloat_normSubnormalF32Sig( sigA );
    800096a2:	fe043503          	ld	a0,-32(s0)
    800096a6:	411000ef          	jal	ra,8000a2b6 <softfloat_normSubnormalF32Sig>
    800096aa:	87aa                	mv	a5,a0
    800096ac:	882e                	mv	a6,a1
    800096ae:	f4f43423          	sd	a5,-184(s0)
    800096b2:	f5043823          	sd	a6,-176(s0)
        expA = normExpSig.exp;
    800096b6:	f4843783          	ld	a5,-184(s0)
    800096ba:	fef43423          	sd	a5,-24(s0)
        sigA = normExpSig.sig;
    800096be:	f5043783          	ld	a5,-176(s0)
    800096c2:	fef43023          	sd	a5,-32(s0)
    }
    if ( ! expB ) {
    800096c6:	fd843783          	ld	a5,-40(s0)
    800096ca:	e79d                	bnez	a5,800096f8 <softfloat_mulAddF32+0x1de>
        if ( ! sigB ) goto zeroProd;
    800096cc:	fd043783          	ld	a5,-48(s0)
    800096d0:	36078e63          	beqz	a5,80009a4c <softfloat_mulAddF32+0x532>
        normExpSig = softfloat_normSubnormalF32Sig( sigB );
    800096d4:	fd043503          	ld	a0,-48(s0)
    800096d8:	3df000ef          	jal	ra,8000a2b6 <softfloat_normSubnormalF32Sig>
    800096dc:	87aa                	mv	a5,a0
    800096de:	882e                	mv	a6,a1
    800096e0:	f4f43423          	sd	a5,-184(s0)
    800096e4:	f5043823          	sd	a6,-176(s0)
        expB = normExpSig.exp;
    800096e8:	f4843783          	ld	a5,-184(s0)
    800096ec:	fcf43c23          	sd	a5,-40(s0)
        sigB = normExpSig.sig;
    800096f0:	f5043783          	ld	a5,-176(s0)
    800096f4:	fcf43823          	sd	a5,-48(s0)
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    expProd = expA + expB - 0x7E;
    800096f8:	fe843703          	ld	a4,-24(s0)
    800096fc:	fd843783          	ld	a5,-40(s0)
    80009700:	97ba                	add	a5,a5,a4
    80009702:	f8278793          	addi	a5,a5,-126 # 7fff82 <MEM_START-0x7f80007e>
    80009706:	faf43423          	sd	a5,-88(s0)
    sigA = (sigA | 0x00800000)<<7;
    8000970a:	fe043783          	ld	a5,-32(s0)
    8000970e:	00779713          	slli	a4,a5,0x7
    80009712:	400007b7          	lui	a5,0x40000
    80009716:	8fd9                	or	a5,a5,a4
    80009718:	fef43023          	sd	a5,-32(s0)
    sigB = (sigB | 0x00800000)<<7;
    8000971c:	fd043783          	ld	a5,-48(s0)
    80009720:	00779713          	slli	a4,a5,0x7
    80009724:	400007b7          	lui	a5,0x40000
    80009728:	8fd9                	or	a5,a5,a4
    8000972a:	fcf43823          	sd	a5,-48(s0)
    sigProd = (uint_fast64_t) sigA * sigB;
    8000972e:	fe043703          	ld	a4,-32(s0)
    80009732:	fd043783          	ld	a5,-48(s0)
    80009736:	02f707b3          	mul	a5,a4,a5
    8000973a:	faf43023          	sd	a5,-96(s0)
    if ( sigProd < UINT64_C( 0x2000000000000000 ) ) {
    8000973e:	fa043703          	ld	a4,-96(s0)
    80009742:	57fd                	li	a5,-1
    80009744:	838d                	srli	a5,a5,0x3
    80009746:	00e7ec63          	bltu	a5,a4,8000975e <softfloat_mulAddF32+0x244>
        --expProd;
    8000974a:	fa843783          	ld	a5,-88(s0)
    8000974e:	17fd                	addi	a5,a5,-1
    80009750:	faf43423          	sd	a5,-88(s0)
        sigProd <<= 1;
    80009754:	fa043783          	ld	a5,-96(s0)
    80009758:	0786                	slli	a5,a5,0x1
    8000975a:	faf43023          	sd	a5,-96(s0)
    }
    signZ = signProd;
    8000975e:	f7c44783          	lbu	a5,-132(s0)
    80009762:	f8f40fa3          	sb	a5,-97(s0)
    if ( ! expC ) {
    80009766:	fc843783          	ld	a5,-56(s0)
    8000976a:	e3b9                	bnez	a5,800097b0 <softfloat_mulAddF32+0x296>
        if ( ! sigC ) {
    8000976c:	fc043783          	ld	a5,-64(s0)
    80009770:	ef91                	bnez	a5,8000978c <softfloat_mulAddF32+0x272>
            expZ = expProd - 1;
    80009772:	fa843783          	ld	a5,-88(s0)
    80009776:	17fd                	addi	a5,a5,-1
    80009778:	f8f43823          	sd	a5,-112(s0)
            sigZ = softfloat_shortShiftRightJam64( sigProd, 31 );
    8000977c:	45fd                	li	a1,31
    8000977e:	fa043503          	ld	a0,-96(s0)
    80009782:	738010ef          	jal	ra,8000aeba <softfloat_shortShiftRightJam64>
    80009786:	f8a43423          	sd	a0,-120(s0)
            goto roundPack;
    8000978a:	a405                	j	800099aa <softfloat_mulAddF32+0x490>
        }
        normExpSig = softfloat_normSubnormalF32Sig( sigC );
    8000978c:	fc043503          	ld	a0,-64(s0)
    80009790:	327000ef          	jal	ra,8000a2b6 <softfloat_normSubnormalF32Sig>
    80009794:	87aa                	mv	a5,a0
    80009796:	882e                	mv	a6,a1
    80009798:	f4f43423          	sd	a5,-184(s0)
    8000979c:	f5043823          	sd	a6,-176(s0)
        expC = normExpSig.exp;
    800097a0:	f4843783          	ld	a5,-184(s0)
    800097a4:	fcf43423          	sd	a5,-56(s0)
        sigC = normExpSig.sig;
    800097a8:	f5043783          	ld	a5,-176(s0)
    800097ac:	fcf43023          	sd	a5,-64(s0)
    }
    sigC = (sigC | 0x00800000)<<6;
    800097b0:	fc043783          	ld	a5,-64(s0)
    800097b4:	00679713          	slli	a4,a5,0x6
    800097b8:	200007b7          	lui	a5,0x20000
    800097bc:	8fd9                	or	a5,a5,a4
    800097be:	fcf43023          	sd	a5,-64(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    expDiff = expProd - expC;
    800097c2:	fa843703          	ld	a4,-88(s0)
    800097c6:	fc843783          	ld	a5,-56(s0)
    800097ca:	40f707b3          	sub	a5,a4,a5
    800097ce:	f6f43823          	sd	a5,-144(s0)
    if ( signProd == signC ) {
    800097d2:	f7c44703          	lbu	a4,-132(s0)
    800097d6:	f7d44783          	lbu	a5,-131(s0)
    800097da:	0ff77713          	andi	a4,a4,255
    800097de:	0ff7f793          	andi	a5,a5,255
    800097e2:	08f71863          	bne	a4,a5,80009872 <softfloat_mulAddF32+0x358>
        /*--------------------------------------------------------------------
        *--------------------------------------------------------------------*/
        if ( expDiff <= 0 ) {
    800097e6:	f7043783          	ld	a5,-144(s0)
    800097ea:	02f04863          	bgtz	a5,8000981a <softfloat_mulAddF32+0x300>
            expZ = expC;
    800097ee:	fc843783          	ld	a5,-56(s0)
    800097f2:	f8f43823          	sd	a5,-112(s0)
            sigZ = sigC + softfloat_shiftRightJam64( sigProd, 32 - expDiff );
    800097f6:	02000713          	li	a4,32
    800097fa:	f7043783          	ld	a5,-144(s0)
    800097fe:	40f707b3          	sub	a5,a4,a5
    80009802:	85be                	mv	a1,a5
    80009804:	fa043503          	ld	a0,-96(s0)
    80009808:	2b2010ef          	jal	ra,8000aaba <softfloat_shiftRightJam64>
    8000980c:	872a                	mv	a4,a0
    8000980e:	fc043783          	ld	a5,-64(s0)
    80009812:	97ba                	add	a5,a5,a4
    80009814:	f8f43423          	sd	a5,-120(s0)
    80009818:	a825                	j	80009850 <softfloat_mulAddF32+0x336>
        } else {
            expZ = expProd;
    8000981a:	fa843783          	ld	a5,-88(s0)
    8000981e:	f8f43823          	sd	a5,-112(s0)
            sig64Z =
                sigProd
                    + softfloat_shiftRightJam64(
    80009822:	fc043783          	ld	a5,-64(s0)
    80009826:	1782                	slli	a5,a5,0x20
    80009828:	f7043703          	ld	a4,-144(s0)
    8000982c:	85ba                	mv	a1,a4
    8000982e:	853e                	mv	a0,a5
    80009830:	28a010ef          	jal	ra,8000aaba <softfloat_shiftRightJam64>
    80009834:	872a                	mv	a4,a0
            sig64Z =
    80009836:	fa043783          	ld	a5,-96(s0)
    8000983a:	97ba                	add	a5,a5,a4
    8000983c:	f8f43023          	sd	a5,-128(s0)
                          (uint_fast64_t) sigC<<32, expDiff );
            sigZ = softfloat_shortShiftRightJam64( sig64Z, 32 );
    80009840:	02000593          	li	a1,32
    80009844:	f8043503          	ld	a0,-128(s0)
    80009848:	672010ef          	jal	ra,8000aeba <softfloat_shortShiftRightJam64>
    8000984c:	f8a43423          	sd	a0,-120(s0)
        }
        if ( sigZ < 0x40000000 ) {
    80009850:	f8843703          	ld	a4,-120(s0)
    80009854:	400007b7          	lui	a5,0x40000
    80009858:	14f77963          	bleu	a5,a4,800099aa <softfloat_mulAddF32+0x490>
            --expZ;
    8000985c:	f9043783          	ld	a5,-112(s0)
    80009860:	17fd                	addi	a5,a5,-1
    80009862:	f8f43823          	sd	a5,-112(s0)
            sigZ <<= 1;
    80009866:	f8843783          	ld	a5,-120(s0)
    8000986a:	0786                	slli	a5,a5,0x1
    8000986c:	f8f43423          	sd	a5,-120(s0)
    80009870:	aa2d                	j	800099aa <softfloat_mulAddF32+0x490>
        }
    } else {
        /*--------------------------------------------------------------------
        *--------------------------------------------------------------------*/
        sig64C = (uint_fast64_t) sigC<<32;
    80009872:	fc043783          	ld	a5,-64(s0)
    80009876:	1782                	slli	a5,a5,0x20
    80009878:	f6f43423          	sd	a5,-152(s0)
        if ( expDiff < 0 ) {
    8000987c:	f7043783          	ld	a5,-144(s0)
    80009880:	0207da63          	bgez	a5,800098b4 <softfloat_mulAddF32+0x39a>
            signZ = signC;
    80009884:	f7d44783          	lbu	a5,-131(s0)
    80009888:	f8f40fa3          	sb	a5,-97(s0)
            expZ = expC;
    8000988c:	fc843783          	ld	a5,-56(s0)
    80009890:	f8f43823          	sd	a5,-112(s0)
            sig64Z = sig64C - softfloat_shiftRightJam64( sigProd, -expDiff );
    80009894:	f7043783          	ld	a5,-144(s0)
    80009898:	40f007b3          	neg	a5,a5
    8000989c:	85be                	mv	a1,a5
    8000989e:	fa043503          	ld	a0,-96(s0)
    800098a2:	218010ef          	jal	ra,8000aaba <softfloat_shiftRightJam64>
    800098a6:	872a                	mv	a4,a0
    800098a8:	f6843783          	ld	a5,-152(s0)
    800098ac:	8f99                	sub	a5,a5,a4
    800098ae:	f8f43023          	sd	a5,-128(s0)
    800098b2:	a059                	j	80009938 <softfloat_mulAddF32+0x41e>
        } else if ( ! expDiff ) {
    800098b4:	f7043783          	ld	a5,-144(s0)
    800098b8:	efb9                	bnez	a5,80009916 <softfloat_mulAddF32+0x3fc>
            expZ = expProd;
    800098ba:	fa843783          	ld	a5,-88(s0)
    800098be:	f8f43823          	sd	a5,-112(s0)
            sig64Z = sigProd - sig64C;
    800098c2:	fa043703          	ld	a4,-96(s0)
    800098c6:	f6843783          	ld	a5,-152(s0)
    800098ca:	40f707b3          	sub	a5,a4,a5
    800098ce:	f8f43023          	sd	a5,-128(s0)
            if ( ! sig64Z ) goto completeCancellation;
    800098d2:	f8043783          	ld	a5,-128(s0)
    800098d6:	1a078163          	beqz	a5,80009a78 <softfloat_mulAddF32+0x55e>
            if ( sig64Z & UINT64_C( 0x8000000000000000 ) ) {
    800098da:	f8043783          	ld	a5,-128(s0)
    800098de:	0407dd63          	bgez	a5,80009938 <softfloat_mulAddF32+0x41e>
                signZ = ! signZ;
    800098e2:	f9f44783          	lbu	a5,-97(s0)
    800098e6:	2781                	sext.w	a5,a5
    800098e8:	00f037b3          	snez	a5,a5
    800098ec:	0ff7f793          	andi	a5,a5,255
    800098f0:	0017c793          	xori	a5,a5,1
    800098f4:	0ff7f793          	andi	a5,a5,255
    800098f8:	2781                	sext.w	a5,a5
    800098fa:	f8f40fa3          	sb	a5,-97(s0)
    800098fe:	f9f44783          	lbu	a5,-97(s0)
    80009902:	8b85                	andi	a5,a5,1
    80009904:	f8f40fa3          	sb	a5,-97(s0)
                sig64Z = -sig64Z;
    80009908:	f8043783          	ld	a5,-128(s0)
    8000990c:	40f007b3          	neg	a5,a5
    80009910:	f8f43023          	sd	a5,-128(s0)
    80009914:	a015                	j	80009938 <softfloat_mulAddF32+0x41e>
            }
        } else {
            expZ = expProd;
    80009916:	fa843783          	ld	a5,-88(s0)
    8000991a:	f8f43823          	sd	a5,-112(s0)
            sig64Z = sigProd - softfloat_shiftRightJam64( sig64C, expDiff );
    8000991e:	f7043783          	ld	a5,-144(s0)
    80009922:	85be                	mv	a1,a5
    80009924:	f6843503          	ld	a0,-152(s0)
    80009928:	192010ef          	jal	ra,8000aaba <softfloat_shiftRightJam64>
    8000992c:	872a                	mv	a4,a0
    8000992e:	fa043783          	ld	a5,-96(s0)
    80009932:	8f99                	sub	a5,a5,a4
    80009934:	f8f43023          	sd	a5,-128(s0)
        }
        shiftDist = softfloat_countLeadingZeros64( sig64Z ) - 1;
    80009938:	f8043503          	ld	a0,-128(s0)
    8000993c:	024020ef          	jal	ra,8000b960 <softfloat_countLeadingZeros64>
    80009940:	87aa                	mv	a5,a0
    80009942:	37fd                	addiw	a5,a5,-1
    80009944:	0ff7f793          	andi	a5,a5,255
    80009948:	f6f403a3          	sb	a5,-153(s0)
        expZ -= shiftDist;
    8000994c:	f6740783          	lb	a5,-153(s0)
    80009950:	f9043703          	ld	a4,-112(s0)
    80009954:	40f707b3          	sub	a5,a4,a5
    80009958:	f8f43823          	sd	a5,-112(s0)
        shiftDist -= 32;
    8000995c:	f6744783          	lbu	a5,-153(s0)
    80009960:	3781                	addiw	a5,a5,-32
    80009962:	0ff7f793          	andi	a5,a5,255
    80009966:	f6f403a3          	sb	a5,-153(s0)
        if ( shiftDist < 0 ) {
    8000996a:	f6744783          	lbu	a5,-153(s0)
    8000996e:	0187979b          	slliw	a5,a5,0x18
    80009972:	4187d79b          	sraiw	a5,a5,0x18
    80009976:	0207d063          	bgez	a5,80009996 <softfloat_mulAddF32+0x47c>
            sigZ = softfloat_shortShiftRightJam64( sig64Z, -shiftDist );
    8000997a:	f6744783          	lbu	a5,-153(s0)
    8000997e:	40f007b3          	neg	a5,a5
    80009982:	0ff7f793          	andi	a5,a5,255
    80009986:	85be                	mv	a1,a5
    80009988:	f8043503          	ld	a0,-128(s0)
    8000998c:	52e010ef          	jal	ra,8000aeba <softfloat_shortShiftRightJam64>
    80009990:	f8a43423          	sd	a0,-120(s0)
    80009994:	a819                	j	800099aa <softfloat_mulAddF32+0x490>
        } else {
            sigZ = (uint_fast32_t) sig64Z<<shiftDist;
    80009996:	f6740783          	lb	a5,-153(s0)
    8000999a:	2781                	sext.w	a5,a5
    8000999c:	873e                	mv	a4,a5
    8000999e:	f8043783          	ld	a5,-128(s0)
    800099a2:	00e797b3          	sll	a5,a5,a4
    800099a6:	f8f43423          	sd	a5,-120(s0)
        }
    }
 roundPack:
    return softfloat_roundPackToF32( signZ, expZ, sigZ );
    800099aa:	f9f44783          	lbu	a5,-97(s0)
    800099ae:	f8843603          	ld	a2,-120(s0)
    800099b2:	f9043583          	ld	a1,-112(s0)
    800099b6:	853e                	mv	a0,a5
    800099b8:	337000ef          	jal	ra,8000a4ee <softfloat_roundPackToF32>
    800099bc:	87aa                	mv	a5,a0
    800099be:	a0fd                	j	80009aac <softfloat_mulAddF32+0x592>
        if ( sigA || ((expB == 0xFF) && sigB) ) goto propagateNaN_ABC;
    800099c0:	0001                	nop
    800099c2:	a011                	j	800099c6 <softfloat_mulAddF32+0x4ac>
        if ( sigB ) goto propagateNaN_ABC;
    800099c4:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 propagateNaN_ABC:
    uiZ = softfloat_propagateNaNF32UI( uiA, uiB );
    800099c6:	f3043583          	ld	a1,-208(s0)
    800099ca:	f3843503          	ld	a0,-200(s0)
    800099ce:	57d010ef          	jal	ra,8000b74a <softfloat_propagateNaNF32UI>
    800099d2:	faa43823          	sd	a0,-80(s0)
    goto propagateNaN_ZC;
    800099d6:	a085                	j	80009a36 <softfloat_mulAddF32+0x51c>
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 infProdArg:
    if ( magBits ) {
    800099d8:	fb843783          	ld	a5,-72(s0)
    800099dc:	c3b9                	beqz	a5,80009a22 <softfloat_mulAddF32+0x508>
        uiZ = packToF32UI( signProd, 0xFF, 0 );
    800099de:	f7c44783          	lbu	a5,-132(s0)
    800099e2:	2781                	sext.w	a5,a5
    800099e4:	01f7979b          	slliw	a5,a5,0x1f
    800099e8:	0007871b          	sext.w	a4,a5
    800099ec:	7f8007b7          	lui	a5,0x7f800
    800099f0:	9fb9                	addw	a5,a5,a4
    800099f2:	2781                	sext.w	a5,a5
    800099f4:	1782                	slli	a5,a5,0x20
    800099f6:	9381                	srli	a5,a5,0x20
    800099f8:	faf43823          	sd	a5,-80(s0)
        if ( expC != 0xFF ) goto uiZ;
    800099fc:	fc843703          	ld	a4,-56(s0)
    80009a00:	0ff00793          	li	a5,255
    80009a04:	08f71863          	bne	a4,a5,80009a94 <softfloat_mulAddF32+0x57a>
        if ( sigC ) goto propagateNaN_ZC;
    80009a08:	fc043783          	ld	a5,-64(s0)
    80009a0c:	e785                	bnez	a5,80009a34 <softfloat_mulAddF32+0x51a>
        if ( signProd == signC ) goto uiZ;
    80009a0e:	f7c44703          	lbu	a4,-132(s0)
    80009a12:	f7d44783          	lbu	a5,-131(s0)
    80009a16:	0ff77713          	andi	a4,a4,255
    80009a1a:	0ff7f793          	andi	a5,a5,255
    80009a1e:	06f70d63          	beq	a4,a5,80009a98 <softfloat_mulAddF32+0x57e>
    }
    softfloat_raiseFlags( softfloat_flag_invalid );
    80009a22:	001867f3          	csrrsi	a5,fflags,16
    80009a26:	f4f43c23          	sd	a5,-168(s0)
    uiZ = defaultNaNF32UI;
    80009a2a:	7fc007b7          	lui	a5,0x7fc00
    80009a2e:	faf43823          	sd	a5,-80(s0)
    80009a32:	a011                	j	80009a36 <softfloat_mulAddF32+0x51c>
        if ( sigC ) goto propagateNaN_ZC;
    80009a34:	0001                	nop
 propagateNaN_ZC:
    uiZ = softfloat_propagateNaNF32UI( uiZ, uiC );
    80009a36:	f2843583          	ld	a1,-216(s0)
    80009a3a:	fb043503          	ld	a0,-80(s0)
    80009a3e:	50d010ef          	jal	ra,8000b74a <softfloat_propagateNaNF32UI>
    80009a42:	faa43823          	sd	a0,-80(s0)
    goto uiZ;
    80009a46:	a8a1                	j	80009a9e <softfloat_mulAddF32+0x584>
        if ( ! sigA ) goto zeroProd;
    80009a48:	0001                	nop
    80009a4a:	a011                	j	80009a4e <softfloat_mulAddF32+0x534>
        if ( ! sigB ) goto zeroProd;
    80009a4c:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 zeroProd:
    uiZ = uiC;
    80009a4e:	f2843783          	ld	a5,-216(s0)
    80009a52:	faf43823          	sd	a5,-80(s0)
    if ( ! (expC | sigC) && (signProd != signC) ) {
    80009a56:	fc843703          	ld	a4,-56(s0)
    80009a5a:	fc043783          	ld	a5,-64(s0)
    80009a5e:	8fd9                	or	a5,a5,a4
    80009a60:	ef95                	bnez	a5,80009a9c <softfloat_mulAddF32+0x582>
    80009a62:	f7c44703          	lbu	a4,-132(s0)
    80009a66:	f7d44783          	lbu	a5,-131(s0)
    80009a6a:	0ff77713          	andi	a4,a4,255
    80009a6e:	0ff7f793          	andi	a5,a5,255
    80009a72:	02f70563          	beq	a4,a5,80009a9c <softfloat_mulAddF32+0x582>
 completeCancellation:
    80009a76:	a011                	j	80009a7a <softfloat_mulAddF32+0x560>
            if ( ! sig64Z ) goto completeCancellation;
    80009a78:	0001                	nop
        uiZ =
            packToF32UI(
    80009a7a:	8792                	mv	a5,tp
    80009a7c:	2781                	sext.w	a5,a5
    80009a7e:	873e                	mv	a4,a5
    80009a80:	4789                	li	a5,2
    80009a82:	00f71563          	bne	a4,a5,80009a8c <softfloat_mulAddF32+0x572>
    80009a86:	4785                	li	a5,1
    80009a88:	07fe                	slli	a5,a5,0x1f
    80009a8a:	a011                	j	80009a8e <softfloat_mulAddF32+0x574>
    80009a8c:	4781                	li	a5,0
        uiZ =
    80009a8e:	faf43823          	sd	a5,-80(s0)
    80009a92:	a031                	j	80009a9e <softfloat_mulAddF32+0x584>
        if ( expC != 0xFF ) goto uiZ;
    80009a94:	0001                	nop
    80009a96:	a021                	j	80009a9e <softfloat_mulAddF32+0x584>
        if ( signProd == signC ) goto uiZ;
    80009a98:	0001                	nop
    80009a9a:	a011                	j	80009a9e <softfloat_mulAddF32+0x584>
                (softfloat_roundingMode == softfloat_round_min), 0, 0 );
    }
 uiZ:
    80009a9c:	0001                	nop
    uZ.ui = uiZ;
    80009a9e:	fb043783          	ld	a5,-80(s0)
    80009aa2:	2781                	sext.w	a5,a5
    80009aa4:	f4f42023          	sw	a5,-192(s0)
    return uZ.f;
    80009aa8:	f4042783          	lw	a5,-192(s0)

}
    80009aac:	853e                	mv	a0,a5
    80009aae:	60ee                	ld	ra,216(sp)
    80009ab0:	644e                	ld	s0,208(sp)
    80009ab2:	612d                	addi	sp,sp,224
    80009ab4:	8082                	ret

0000000080009ab6 <softfloat_mulAddF64>:
#else

float64_t
 softfloat_mulAddF64(
     uint_fast64_t uiA, uint_fast64_t uiB, uint_fast64_t uiC, uint_fast8_t op )
{
    80009ab6:	7115                	addi	sp,sp,-224
    80009ab8:	ed86                	sd	ra,216(sp)
    80009aba:	e9a2                	sd	s0,208(sp)
    80009abc:	1180                	addi	s0,sp,224
    80009abe:	f2a43c23          	sd	a0,-200(s0)
    80009ac2:	f2b43823          	sd	a1,-208(s0)
    80009ac6:	f2c43423          	sd	a2,-216(s0)
    80009aca:	87b6                	mv	a5,a3
    80009acc:	f2f403a3          	sb	a5,-217(s0)
    uint32_t sig128C[4];
    union ui64_f64 uZ;

    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    signA = signF64UI( uiA );
    80009ad0:	f3843783          	ld	a5,-200(s0)
    80009ad4:	93fd                	srli	a5,a5,0x3f
    80009ad6:	f8f407a3          	sb	a5,-113(s0)
    expA  = expF64UI( uiA );
    80009ada:	f3843783          	ld	a5,-200(s0)
    80009ade:	93d1                	srli	a5,a5,0x34
    80009ae0:	7ff7f793          	andi	a5,a5,2047
    80009ae4:	fef43423          	sd	a5,-24(s0)
    sigA  = fracF64UI( uiA );
    80009ae8:	f3843703          	ld	a4,-200(s0)
    80009aec:	57fd                	li	a5,-1
    80009aee:	83b1                	srli	a5,a5,0xc
    80009af0:	8ff9                	and	a5,a5,a4
    80009af2:	fef43023          	sd	a5,-32(s0)
    signB = signF64UI( uiB );
    80009af6:	f3043783          	ld	a5,-208(s0)
    80009afa:	93fd                	srli	a5,a5,0x3f
    80009afc:	f8f40723          	sb	a5,-114(s0)
    expB  = expF64UI( uiB );
    80009b00:	f3043783          	ld	a5,-208(s0)
    80009b04:	93d1                	srli	a5,a5,0x34
    80009b06:	7ff7f793          	andi	a5,a5,2047
    80009b0a:	fcf43c23          	sd	a5,-40(s0)
    sigB  = fracF64UI( uiB );
    80009b0e:	f3043703          	ld	a4,-208(s0)
    80009b12:	57fd                	li	a5,-1
    80009b14:	83b1                	srli	a5,a5,0xc
    80009b16:	8ff9                	and	a5,a5,a4
    80009b18:	fcf43823          	sd	a5,-48(s0)
    signC = signF64UI( uiC ) ^ (op == softfloat_mulAdd_subC);
    80009b1c:	f2843783          	ld	a5,-216(s0)
    80009b20:	93fd                	srli	a5,a5,0x3f
    80009b22:	0ff7f793          	andi	a5,a5,255
    80009b26:	0007871b          	sext.w	a4,a5
    80009b2a:	f2744783          	lbu	a5,-217(s0)
    80009b2e:	0007869b          	sext.w	a3,a5
    80009b32:	4785                	li	a5,1
    80009b34:	40f687b3          	sub	a5,a3,a5
    80009b38:	0017b793          	seqz	a5,a5
    80009b3c:	0ff7f793          	andi	a5,a5,255
    80009b40:	2781                	sext.w	a5,a5
    80009b42:	8fb9                	xor	a5,a5,a4
    80009b44:	2781                	sext.w	a5,a5
    80009b46:	00f037b3          	snez	a5,a5
    80009b4a:	f8f406a3          	sb	a5,-115(s0)
    expC  = expF64UI( uiC );
    80009b4e:	f2843783          	ld	a5,-216(s0)
    80009b52:	93d1                	srli	a5,a5,0x34
    80009b54:	7ff7f793          	andi	a5,a5,2047
    80009b58:	fcf43423          	sd	a5,-56(s0)
    sigC  = fracF64UI( uiC );
    80009b5c:	f2843703          	ld	a4,-216(s0)
    80009b60:	57fd                	li	a5,-1
    80009b62:	83b1                	srli	a5,a5,0xc
    80009b64:	8ff9                	and	a5,a5,a4
    80009b66:	fcf43023          	sd	a5,-64(s0)
    signZ = signA ^ signB ^ (op == softfloat_mulAdd_subProd);
    80009b6a:	f8f44703          	lbu	a4,-113(s0)
    80009b6e:	f8e44783          	lbu	a5,-114(s0)
    80009b72:	8fb9                	xor	a5,a5,a4
    80009b74:	0ff7f793          	andi	a5,a5,255
    80009b78:	0007871b          	sext.w	a4,a5
    80009b7c:	f2744783          	lbu	a5,-217(s0)
    80009b80:	0007869b          	sext.w	a3,a5
    80009b84:	4789                	li	a5,2
    80009b86:	40f687b3          	sub	a5,a3,a5
    80009b8a:	0017b793          	seqz	a5,a5
    80009b8e:	0ff7f793          	andi	a5,a5,255
    80009b92:	2781                	sext.w	a5,a5
    80009b94:	8fb9                	xor	a5,a5,a4
    80009b96:	2781                	sext.w	a5,a5
    80009b98:	00f037b3          	snez	a5,a5
    80009b9c:	faf40fa3          	sb	a5,-65(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( expA == 0x7FF ) {
    80009ba0:	fe843703          	ld	a4,-24(s0)
    80009ba4:	7ff00793          	li	a5,2047
    80009ba8:	02f71863          	bne	a4,a5,80009bd8 <softfloat_mulAddF64+0x122>
        if ( sigA || ((expB == 0x7FF) && sigB) ) goto propagateNaN_ABC;
    80009bac:	fe043783          	ld	a5,-32(s0)
    80009bb0:	58079663          	bnez	a5,8000a13c <softfloat_mulAddF64+0x686>
    80009bb4:	fd843703          	ld	a4,-40(s0)
    80009bb8:	7ff00793          	li	a5,2047
    80009bbc:	00f71663          	bne	a4,a5,80009bc8 <softfloat_mulAddF64+0x112>
    80009bc0:	fd043783          	ld	a5,-48(s0)
    80009bc4:	56079c63          	bnez	a5,8000a13c <softfloat_mulAddF64+0x686>
        magBits = expB | sigB;
    80009bc8:	fd843783          	ld	a5,-40(s0)
    80009bcc:	fd043703          	ld	a4,-48(s0)
    80009bd0:	8fd9                	or	a5,a5,a4
    80009bd2:	faf43823          	sd	a5,-80(s0)
        goto infProdArg;
    80009bd6:	abbd                	j	8000a154 <softfloat_mulAddF64+0x69e>
    }
    if ( expB == 0x7FF ) {
    80009bd8:	fd843703          	ld	a4,-40(s0)
    80009bdc:	7ff00793          	li	a5,2047
    80009be0:	00f71e63          	bne	a4,a5,80009bfc <softfloat_mulAddF64+0x146>
        if ( sigB ) goto propagateNaN_ABC;
    80009be4:	fd043783          	ld	a5,-48(s0)
    80009be8:	54079c63          	bnez	a5,8000a140 <softfloat_mulAddF64+0x68a>
        magBits = expA | sigA;
    80009bec:	fe843783          	ld	a5,-24(s0)
    80009bf0:	fe043703          	ld	a4,-32(s0)
    80009bf4:	8fd9                	or	a5,a5,a4
    80009bf6:	faf43823          	sd	a5,-80(s0)
        goto infProdArg;
    80009bfa:	aba9                	j	8000a154 <softfloat_mulAddF64+0x69e>
    }
    if ( expC == 0x7FF ) {
    80009bfc:	fc843703          	ld	a4,-56(s0)
    80009c00:	7ff00793          	li	a5,2047
    80009c04:	00f71d63          	bne	a4,a5,80009c1e <softfloat_mulAddF64+0x168>
        if ( sigC ) {
    80009c08:	fc043783          	ld	a5,-64(s0)
    80009c0c:	c781                	beqz	a5,80009c14 <softfloat_mulAddF64+0x15e>
            uiZ = 0;
    80009c0e:	fa043423          	sd	zero,-88(s0)
            goto propagateNaN_ZC;
    80009c12:	ab61                	j	8000a1aa <softfloat_mulAddF64+0x6f4>
        }
        uiZ = uiC;
    80009c14:	f2843783          	ld	a5,-216(s0)
    80009c18:	faf43423          	sd	a5,-88(s0)
        goto uiZ;
    80009c1c:	abdd                	j	8000a212 <softfloat_mulAddF64+0x75c>
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( ! expA ) {
    80009c1e:	fe843783          	ld	a5,-24(s0)
    80009c22:	e79d                	bnez	a5,80009c50 <softfloat_mulAddF64+0x19a>
        if ( ! sigA ) goto zeroProd;
    80009c24:	fe043783          	ld	a5,-32(s0)
    80009c28:	58078a63          	beqz	a5,8000a1bc <softfloat_mulAddF64+0x706>
        normExpSig = softfloat_normSubnormalF64Sig( sigA );
    80009c2c:	fe043503          	ld	a0,-32(s0)
    80009c30:	708000ef          	jal	ra,8000a338 <softfloat_normSubnormalF64Sig>
    80009c34:	87aa                	mv	a5,a0
    80009c36:	882e                	mv	a6,a1
    80009c38:	f6f43423          	sd	a5,-152(s0)
    80009c3c:	f7043823          	sd	a6,-144(s0)
        expA = normExpSig.exp;
    80009c40:	f6843783          	ld	a5,-152(s0)
    80009c44:	fef43423          	sd	a5,-24(s0)
        sigA = normExpSig.sig;
    80009c48:	f7043783          	ld	a5,-144(s0)
    80009c4c:	fef43023          	sd	a5,-32(s0)
    }
    if ( ! expB ) {
    80009c50:	fd843783          	ld	a5,-40(s0)
    80009c54:	e79d                	bnez	a5,80009c82 <softfloat_mulAddF64+0x1cc>
        if ( ! sigB ) goto zeroProd;
    80009c56:	fd043783          	ld	a5,-48(s0)
    80009c5a:	56078363          	beqz	a5,8000a1c0 <softfloat_mulAddF64+0x70a>
        normExpSig = softfloat_normSubnormalF64Sig( sigB );
    80009c5e:	fd043503          	ld	a0,-48(s0)
    80009c62:	6d6000ef          	jal	ra,8000a338 <softfloat_normSubnormalF64Sig>
    80009c66:	87aa                	mv	a5,a0
    80009c68:	882e                	mv	a6,a1
    80009c6a:	f6f43423          	sd	a5,-152(s0)
    80009c6e:	f7043823          	sd	a6,-144(s0)
        expB = normExpSig.exp;
    80009c72:	f6843783          	ld	a5,-152(s0)
    80009c76:	fcf43c23          	sd	a5,-40(s0)
        sigB = normExpSig.sig;
    80009c7a:	f7043783          	ld	a5,-144(s0)
    80009c7e:	fcf43823          	sd	a5,-48(s0)
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    expZ = expA + expB - 0x3FE;
    80009c82:	fe843703          	ld	a4,-24(s0)
    80009c86:	fd843783          	ld	a5,-40(s0)
    80009c8a:	97ba                	add	a5,a5,a4
    80009c8c:	c0278793          	addi	a5,a5,-1022 # 7fbffc02 <MEM_START-0x4003fe>
    80009c90:	faf43023          	sd	a5,-96(s0)
    sigA = (sigA | UINT64_C( 0x0010000000000000 ))<<10;
    80009c94:	fe043783          	ld	a5,-32(s0)
    80009c98:	00a79713          	slli	a4,a5,0xa
    80009c9c:	4785                	li	a5,1
    80009c9e:	17fa                	slli	a5,a5,0x3e
    80009ca0:	8fd9                	or	a5,a5,a4
    80009ca2:	fef43023          	sd	a5,-32(s0)
    sigB = (sigB | UINT64_C( 0x0010000000000000 ))<<11;
    80009ca6:	fd043783          	ld	a5,-48(s0)
    80009caa:	00b79713          	slli	a4,a5,0xb
    80009cae:	57fd                	li	a5,-1
    80009cb0:	17fe                	slli	a5,a5,0x3f
    80009cb2:	8fd9                	or	a5,a5,a4
    80009cb4:	fcf43823          	sd	a5,-48(s0)
    softfloat_mul64To128M( sigA, sigB, sig128Z );
    80009cb8:	f5840793          	addi	a5,s0,-168
    80009cbc:	863e                	mv	a2,a5
    80009cbe:	fd043583          	ld	a1,-48(s0)
    80009cc2:	fe043503          	ld	a0,-32(s0)
    80009cc6:	f36ff0ef          	jal	ra,800093fc <softfloat_mul64To128M>
    sigZ =
        (uint64_t) sig128Z[indexWord( 4, 3 )]<<32 | sig128Z[indexWord( 4, 2 )];
    80009cca:	f6442783          	lw	a5,-156(s0)
    80009cce:	1782                	slli	a5,a5,0x20
    80009cd0:	9381                	srli	a5,a5,0x20
    80009cd2:	02079713          	slli	a4,a5,0x20
    80009cd6:	f6042783          	lw	a5,-160(s0)
    80009cda:	1782                	slli	a5,a5,0x20
    80009cdc:	9381                	srli	a5,a5,0x20
    sigZ =
    80009cde:	8fd9                	or	a5,a5,a4
    80009ce0:	f8f43c23          	sd	a5,-104(s0)
    shiftDist = 0;
    80009ce4:	f8043823          	sd	zero,-112(s0)
    if ( ! (sigZ & UINT64_C( 0x4000000000000000 )) ) {
    80009ce8:	f9843703          	ld	a4,-104(s0)
    80009cec:	4785                	li	a5,1
    80009cee:	17fa                	slli	a5,a5,0x3e
    80009cf0:	8ff9                	and	a5,a5,a4
    80009cf2:	eb89                	bnez	a5,80009d04 <softfloat_mulAddF64+0x24e>
        --expZ;
    80009cf4:	fa043783          	ld	a5,-96(s0)
    80009cf8:	17fd                	addi	a5,a5,-1
    80009cfa:	faf43023          	sd	a5,-96(s0)
        shiftDist = -1;
    80009cfe:	57fd                	li	a5,-1
    80009d00:	f8f43823          	sd	a5,-112(s0)
    }
    if ( ! expC ) {
    80009d04:	fc843783          	ld	a5,-56(s0)
    80009d08:	e3a1                	bnez	a5,80009d48 <softfloat_mulAddF64+0x292>
        if ( ! sigC ) {
    80009d0a:	fc043783          	ld	a5,-64(s0)
    80009d0e:	eb99                	bnez	a5,80009d24 <softfloat_mulAddF64+0x26e>
            if ( shiftDist ) sigZ <<= 1;
    80009d10:	f9043783          	ld	a5,-112(s0)
    80009d14:	3e078163          	beqz	a5,8000a0f6 <softfloat_mulAddF64+0x640>
    80009d18:	f9843783          	ld	a5,-104(s0)
    80009d1c:	0786                	slli	a5,a5,0x1
    80009d1e:	f8f43c23          	sd	a5,-104(s0)
            goto sigZ;
    80009d22:	aed1                	j	8000a0f6 <softfloat_mulAddF64+0x640>
        }
        normExpSig = softfloat_normSubnormalF64Sig( sigC );
    80009d24:	fc043503          	ld	a0,-64(s0)
    80009d28:	610000ef          	jal	ra,8000a338 <softfloat_normSubnormalF64Sig>
    80009d2c:	87aa                	mv	a5,a0
    80009d2e:	882e                	mv	a6,a1
    80009d30:	f6f43423          	sd	a5,-152(s0)
    80009d34:	f7043823          	sd	a6,-144(s0)
        expC = normExpSig.exp;
    80009d38:	f6843783          	ld	a5,-152(s0)
    80009d3c:	fcf43423          	sd	a5,-56(s0)
        sigC = normExpSig.sig;
    80009d40:	f7043783          	ld	a5,-144(s0)
    80009d44:	fcf43023          	sd	a5,-64(s0)
    }
    sigC = (sigC | UINT64_C( 0x0010000000000000 ))<<10;
    80009d48:	fc043783          	ld	a5,-64(s0)
    80009d4c:	00a79713          	slli	a4,a5,0xa
    80009d50:	4785                	li	a5,1
    80009d52:	17fa                	slli	a5,a5,0x3e
    80009d54:	8fd9                	or	a5,a5,a4
    80009d56:	fcf43023          	sd	a5,-64(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    expDiff = expZ - expC;
    80009d5a:	fa043703          	ld	a4,-96(s0)
    80009d5e:	fc843783          	ld	a5,-56(s0)
    80009d62:	40f707b3          	sub	a5,a4,a5
    80009d66:	f8f43023          	sd	a5,-128(s0)
    if ( expDiff < 0 ) {
    80009d6a:	f8043783          	ld	a5,-128(s0)
    80009d6e:	0607d863          	bgez	a5,80009dde <softfloat_mulAddF64+0x328>
        expZ = expC;
    80009d72:	fc843783          	ld	a5,-56(s0)
    80009d76:	faf43023          	sd	a5,-96(s0)
        if ( (signZ == signC) || (expDiff < -1) ) {
    80009d7a:	fbf44703          	lbu	a4,-65(s0)
    80009d7e:	f8d44783          	lbu	a5,-115(s0)
    80009d82:	0ff77713          	andi	a4,a4,255
    80009d86:	0ff7f793          	andi	a5,a5,255
    80009d8a:	00f70763          	beq	a4,a5,80009d98 <softfloat_mulAddF64+0x2e2>
    80009d8e:	f8043703          	ld	a4,-128(s0)
    80009d92:	57fd                	li	a5,-1
    80009d94:	02f75763          	ble	a5,a4,80009dc2 <softfloat_mulAddF64+0x30c>
            shiftDist -= expDiff;
    80009d98:	f9043703          	ld	a4,-112(s0)
    80009d9c:	f8043783          	ld	a5,-128(s0)
    80009da0:	40f707b3          	sub	a5,a4,a5
    80009da4:	f8f43823          	sd	a5,-112(s0)
            if ( shiftDist) {
    80009da8:	f9043783          	ld	a5,-112(s0)
    80009dac:	c7c5                	beqz	a5,80009e54 <softfloat_mulAddF64+0x39e>
                sigZ = softfloat_shiftRightJam64( sigZ, shiftDist );
    80009dae:	f9043783          	ld	a5,-112(s0)
    80009db2:	85be                	mv	a1,a5
    80009db4:	f9843503          	ld	a0,-104(s0)
    80009db8:	503000ef          	jal	ra,8000aaba <softfloat_shiftRightJam64>
    80009dbc:	f8a43c23          	sd	a0,-104(s0)
            if ( shiftDist) {
    80009dc0:	a851                	j	80009e54 <softfloat_mulAddF64+0x39e>
            }
        } else {
            if ( ! shiftDist ) {
    80009dc2:	f9043783          	ld	a5,-112(s0)
    80009dc6:	e7d9                	bnez	a5,80009e54 <softfloat_mulAddF64+0x39e>
                softfloat_shortShiftRight128M( sig128Z, 1, sig128Z );
    80009dc8:	f5840713          	addi	a4,s0,-168
    80009dcc:	f5840793          	addi	a5,s0,-168
    80009dd0:	86ba                	mv	a3,a4
    80009dd2:	4605                	li	a2,1
    80009dd4:	85be                	mv	a1,a5
    80009dd6:	4511                	li	a0,4
    80009dd8:	7fb000ef          	jal	ra,8000add2 <softfloat_shortShiftRightM>
    80009ddc:	a8a5                	j	80009e54 <softfloat_mulAddF64+0x39e>
            }
        }
    } else {
        if ( shiftDist ) softfloat_add128M( sig128Z, sig128Z, sig128Z );
    80009dde:	f9043783          	ld	a5,-112(s0)
    80009de2:	cf81                	beqz	a5,80009dfa <softfloat_mulAddF64+0x344>
    80009de4:	f5840693          	addi	a3,s0,-168
    80009de8:	f5840713          	addi	a4,s0,-168
    80009dec:	f5840793          	addi	a5,s0,-168
    80009df0:	863a                	mv	a2,a4
    80009df2:	85be                	mv	a1,a5
    80009df4:	4511                	li	a0,4
    80009df6:	21f010ef          	jal	ra,8000b814 <softfloat_addM>
        if ( ! expDiff ) {
    80009dfa:	f8043783          	ld	a5,-128(s0)
    80009dfe:	ef99                	bnez	a5,80009e1c <softfloat_mulAddF64+0x366>
            sigZ =
                (uint64_t) sig128Z[indexWord( 4, 3 )]<<32
    80009e00:	f6442783          	lw	a5,-156(s0)
    80009e04:	1782                	slli	a5,a5,0x20
    80009e06:	9381                	srli	a5,a5,0x20
    80009e08:	02079713          	slli	a4,a5,0x20
                    | sig128Z[indexWord( 4, 2 )];
    80009e0c:	f6042783          	lw	a5,-160(s0)
    80009e10:	1782                	slli	a5,a5,0x20
    80009e12:	9381                	srli	a5,a5,0x20
            sigZ =
    80009e14:	8fd9                	or	a5,a5,a4
    80009e16:	f8f43c23          	sd	a5,-104(s0)
    80009e1a:	a82d                	j	80009e54 <softfloat_mulAddF64+0x39e>
        } else {
            sig128C[indexWord( 4, 3 )] = sigC>>32;
    80009e1c:	fc043783          	ld	a5,-64(s0)
    80009e20:	9381                	srli	a5,a5,0x20
    80009e22:	2781                	sext.w	a5,a5
    80009e24:	f4f42a23          	sw	a5,-172(s0)
            sig128C[indexWord( 4, 2 )] = sigC;
    80009e28:	fc043783          	ld	a5,-64(s0)
    80009e2c:	2781                	sext.w	a5,a5
    80009e2e:	f4f42823          	sw	a5,-176(s0)
            sig128C[indexWord( 4, 1 )] = 0;
    80009e32:	f4042623          	sw	zero,-180(s0)
            sig128C[indexWord( 4, 0 )] = 0;
    80009e36:	f4042423          	sw	zero,-184(s0)
            softfloat_shiftRightJam128M( sig128C, expDiff, sig128C );
    80009e3a:	f8043783          	ld	a5,-128(s0)
    80009e3e:	0007871b          	sext.w	a4,a5
    80009e42:	f4840693          	addi	a3,s0,-184
    80009e46:	f4840793          	addi	a5,s0,-184
    80009e4a:	863a                	mv	a2,a4
    80009e4c:	85be                	mv	a1,a5
    80009e4e:	4511                	li	a0,4
    80009e50:	4d3000ef          	jal	ra,8000ab22 <softfloat_shiftRightJamM>
        }
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( signZ == signC ) {
    80009e54:	fbf44703          	lbu	a4,-65(s0)
    80009e58:	f8d44783          	lbu	a5,-115(s0)
    80009e5c:	0ff77713          	andi	a4,a4,255
    80009e60:	0ff7f793          	andi	a5,a5,255
    80009e64:	06f71763          	bne	a4,a5,80009ed2 <softfloat_mulAddF64+0x41c>
        /*--------------------------------------------------------------------
        *--------------------------------------------------------------------*/
        if ( expDiff <= 0 ) {
    80009e68:	f8043783          	ld	a5,-128(s0)
    80009e6c:	00f04a63          	bgtz	a5,80009e80 <softfloat_mulAddF64+0x3ca>
            sigZ += sigC;
    80009e70:	f9843703          	ld	a4,-104(s0)
    80009e74:	fc043783          	ld	a5,-64(s0)
    80009e78:	97ba                	add	a5,a5,a4
    80009e7a:	f8f43c23          	sd	a5,-104(s0)
    80009e7e:	a80d                	j	80009eb0 <softfloat_mulAddF64+0x3fa>
        } else {
            softfloat_add128M( sig128Z, sig128C, sig128Z );
    80009e80:	f5840693          	addi	a3,s0,-168
    80009e84:	f4840713          	addi	a4,s0,-184
    80009e88:	f5840793          	addi	a5,s0,-168
    80009e8c:	863a                	mv	a2,a4
    80009e8e:	85be                	mv	a1,a5
    80009e90:	4511                	li	a0,4
    80009e92:	183010ef          	jal	ra,8000b814 <softfloat_addM>
            sigZ =
                (uint64_t) sig128Z[indexWord( 4, 3 )]<<32
    80009e96:	f6442783          	lw	a5,-156(s0)
    80009e9a:	1782                	slli	a5,a5,0x20
    80009e9c:	9381                	srli	a5,a5,0x20
    80009e9e:	02079713          	slli	a4,a5,0x20
                    | sig128Z[indexWord( 4, 2 )];
    80009ea2:	f6042783          	lw	a5,-160(s0)
    80009ea6:	1782                	slli	a5,a5,0x20
    80009ea8:	9381                	srli	a5,a5,0x20
            sigZ =
    80009eaa:	8fd9                	or	a5,a5,a4
    80009eac:	f8f43c23          	sd	a5,-104(s0)
        }
        if ( sigZ & UINT64_C( 0x8000000000000000 ) ) {
    80009eb0:	f9843783          	ld	a5,-104(s0)
    80009eb4:	2407d663          	bgez	a5,8000a100 <softfloat_mulAddF64+0x64a>
            ++expZ;
    80009eb8:	fa043783          	ld	a5,-96(s0)
    80009ebc:	0785                	addi	a5,a5,1
    80009ebe:	faf43023          	sd	a5,-96(s0)
            sigZ = softfloat_shortShiftRightJam64( sigZ, 1 );
    80009ec2:	4585                	li	a1,1
    80009ec4:	f9843503          	ld	a0,-104(s0)
    80009ec8:	7f3000ef          	jal	ra,8000aeba <softfloat_shortShiftRightJam64>
    80009ecc:	f8a43c23          	sd	a0,-104(s0)
    80009ed0:	ac05                	j	8000a100 <softfloat_mulAddF64+0x64a>
        }
    } else {
        /*--------------------------------------------------------------------
        *--------------------------------------------------------------------*/
        if ( expDiff < 0 ) {
    80009ed2:	f8043783          	ld	a5,-128(s0)
    80009ed6:	0807dd63          	bgez	a5,80009f70 <softfloat_mulAddF64+0x4ba>
            signZ = signC;
    80009eda:	f8d44783          	lbu	a5,-115(s0)
    80009ede:	faf40fa3          	sb	a5,-65(s0)
            if ( expDiff < -1 ) {
    80009ee2:	f8043703          	ld	a4,-128(s0)
    80009ee6:	57fd                	li	a5,-1
    80009ee8:	04f75963          	ble	a5,a4,80009f3a <softfloat_mulAddF64+0x484>
                sigZ = sigC - sigZ;
    80009eec:	fc043703          	ld	a4,-64(s0)
    80009ef0:	f9843783          	ld	a5,-104(s0)
    80009ef4:	40f707b3          	sub	a5,a4,a5
    80009ef8:	f8f43c23          	sd	a5,-104(s0)
                if (
                    sig128Z[indexWord( 4, 1 )] || sig128Z[indexWord( 4, 0 )]
    80009efc:	f5c42783          	lw	a5,-164(s0)
                if (
    80009f00:	e781                	bnez	a5,80009f08 <softfloat_mulAddF64+0x452>
                    sig128Z[indexWord( 4, 1 )] || sig128Z[indexWord( 4, 0 )]
    80009f02:	f5842783          	lw	a5,-168(s0)
    80009f06:	cb81                	beqz	a5,80009f16 <softfloat_mulAddF64+0x460>
                ) {
                    sigZ = (sigZ - 1) | 1;
    80009f08:	f9843783          	ld	a5,-104(s0)
    80009f0c:	17fd                	addi	a5,a5,-1
    80009f0e:	0017e793          	ori	a5,a5,1
    80009f12:	f8f43c23          	sd	a5,-104(s0)
                }
                if ( ! (sigZ & UINT64_C( 0x4000000000000000 )) ) {
    80009f16:	f9843703          	ld	a4,-104(s0)
    80009f1a:	4785                	li	a5,1
    80009f1c:	17fa                	slli	a5,a5,0x3e
    80009f1e:	8ff9                	and	a5,a5,a4
    80009f20:	1e079d63          	bnez	a5,8000a11a <softfloat_mulAddF64+0x664>
                    --expZ;
    80009f24:	fa043783          	ld	a5,-96(s0)
    80009f28:	17fd                	addi	a5,a5,-1
    80009f2a:	faf43023          	sd	a5,-96(s0)
                    sigZ <<= 1;
    80009f2e:	f9843783          	ld	a5,-104(s0)
    80009f32:	0786                	slli	a5,a5,0x1
    80009f34:	f8f43c23          	sd	a5,-104(s0)
                }
                goto roundPack;
    80009f38:	a2cd                	j	8000a11a <softfloat_mulAddF64+0x664>
            } else {
                sig128C[indexWord( 4, 3 )] = sigC>>32;
    80009f3a:	fc043783          	ld	a5,-64(s0)
    80009f3e:	9381                	srli	a5,a5,0x20
    80009f40:	2781                	sext.w	a5,a5
    80009f42:	f4f42a23          	sw	a5,-172(s0)
                sig128C[indexWord( 4, 2 )] = sigC;
    80009f46:	fc043783          	ld	a5,-64(s0)
    80009f4a:	2781                	sext.w	a5,a5
    80009f4c:	f4f42823          	sw	a5,-176(s0)
                sig128C[indexWord( 4, 1 )] = 0;
    80009f50:	f4042623          	sw	zero,-180(s0)
                sig128C[indexWord( 4, 0 )] = 0;
    80009f54:	f4042423          	sw	zero,-184(s0)
                softfloat_sub128M( sig128C, sig128Z, sig128Z );
    80009f58:	f5840693          	addi	a3,s0,-168
    80009f5c:	f5840713          	addi	a4,s0,-168
    80009f60:	f4840793          	addi	a5,s0,-184
    80009f64:	863a                	mv	a2,a4
    80009f66:	85be                	mv	a1,a5
    80009f68:	4511                	li	a0,4
    80009f6a:	0b6010ef          	jal	ra,8000b020 <softfloat_subM>
    80009f6e:	a8e9                	j	8000a048 <softfloat_mulAddF64+0x592>
            }
        } else if ( ! expDiff ) {
    80009f70:	f8043783          	ld	a5,-128(s0)
    80009f74:	efa5                	bnez	a5,80009fec <softfloat_mulAddF64+0x536>
            sigZ -= sigC;
    80009f76:	f9843703          	ld	a4,-104(s0)
    80009f7a:	fc043783          	ld	a5,-64(s0)
    80009f7e:	40f707b3          	sub	a5,a4,a5
    80009f82:	f8f43c23          	sd	a5,-104(s0)
            if (
    80009f86:	f9843783          	ld	a5,-104(s0)
    80009f8a:	eb81                	bnez	a5,80009f9a <softfloat_mulAddF64+0x4e4>
                ! sigZ && ! sig128Z[indexWord( 4, 1 )]
    80009f8c:	f5c42783          	lw	a5,-164(s0)
    80009f90:	e789                	bnez	a5,80009f9a <softfloat_mulAddF64+0x4e4>
                    && ! sig128Z[indexWord( 4, 0 )]
    80009f92:	f5842783          	lw	a5,-168(s0)
    80009f96:	24078b63          	beqz	a5,8000a1ec <softfloat_mulAddF64+0x736>
            ) {
                goto completeCancellation;
            }
            sig128Z[indexWord( 4, 3 )] = sigZ>>32;
    80009f9a:	f9843783          	ld	a5,-104(s0)
    80009f9e:	9381                	srli	a5,a5,0x20
    80009fa0:	2781                	sext.w	a5,a5
    80009fa2:	f6f42223          	sw	a5,-156(s0)
            sig128Z[indexWord( 4, 2 )] = sigZ;
    80009fa6:	f9843783          	ld	a5,-104(s0)
    80009faa:	2781                	sext.w	a5,a5
    80009fac:	f6f42023          	sw	a5,-160(s0)
            if ( sigZ & UINT64_C( 0x8000000000000000 ) ) {
    80009fb0:	f9843783          	ld	a5,-104(s0)
    80009fb4:	0807da63          	bgez	a5,8000a048 <softfloat_mulAddF64+0x592>
                signZ = ! signZ;
    80009fb8:	fbf44783          	lbu	a5,-65(s0)
    80009fbc:	2781                	sext.w	a5,a5
    80009fbe:	00f037b3          	snez	a5,a5
    80009fc2:	0ff7f793          	andi	a5,a5,255
    80009fc6:	0017c793          	xori	a5,a5,1
    80009fca:	0ff7f793          	andi	a5,a5,255
    80009fce:	2781                	sext.w	a5,a5
    80009fd0:	faf40fa3          	sb	a5,-65(s0)
    80009fd4:	fbf44783          	lbu	a5,-65(s0)
    80009fd8:	8b85                	andi	a5,a5,1
    80009fda:	faf40fa3          	sb	a5,-65(s0)
                softfloat_negX128M( sig128Z );
    80009fde:	f5840793          	addi	a5,s0,-168
    80009fe2:	85be                	mv	a1,a5
    80009fe4:	4511                	li	a0,4
    80009fe6:	242000ef          	jal	ra,8000a228 <softfloat_negXM>
    80009fea:	a8b9                	j	8000a048 <softfloat_mulAddF64+0x592>
            }
        } else {
            softfloat_sub128M( sig128Z, sig128C, sig128Z );
    80009fec:	f5840693          	addi	a3,s0,-168
    80009ff0:	f4840713          	addi	a4,s0,-184
    80009ff4:	f5840793          	addi	a5,s0,-168
    80009ff8:	863a                	mv	a2,a4
    80009ffa:	85be                	mv	a1,a5
    80009ffc:	4511                	li	a0,4
    80009ffe:	022010ef          	jal	ra,8000b020 <softfloat_subM>
            if ( 1 < expDiff ) {
    8000a002:	f8043703          	ld	a4,-128(s0)
    8000a006:	4785                	li	a5,1
    8000a008:	04e7d063          	ble	a4,a5,8000a048 <softfloat_mulAddF64+0x592>
                sigZ =
                    (uint64_t) sig128Z[indexWord( 4, 3 )]<<32
    8000a00c:	f6442783          	lw	a5,-156(s0)
    8000a010:	1782                	slli	a5,a5,0x20
    8000a012:	9381                	srli	a5,a5,0x20
    8000a014:	02079713          	slli	a4,a5,0x20
                        | sig128Z[indexWord( 4, 2 )];
    8000a018:	f6042783          	lw	a5,-160(s0)
    8000a01c:	1782                	slli	a5,a5,0x20
    8000a01e:	9381                	srli	a5,a5,0x20
                sigZ =
    8000a020:	8fd9                	or	a5,a5,a4
    8000a022:	f8f43c23          	sd	a5,-104(s0)
                if ( ! (sigZ & UINT64_C( 0x4000000000000000 )) ) {
    8000a026:	f9843703          	ld	a4,-104(s0)
    8000a02a:	4785                	li	a5,1
    8000a02c:	17fa                	slli	a5,a5,0x3e
    8000a02e:	8ff9                	and	a5,a5,a4
    8000a030:	e7e9                	bnez	a5,8000a0fa <softfloat_mulAddF64+0x644>
                    --expZ;
    8000a032:	fa043783          	ld	a5,-96(s0)
    8000a036:	17fd                	addi	a5,a5,-1
    8000a038:	faf43023          	sd	a5,-96(s0)
                    sigZ <<= 1;
    8000a03c:	f9843783          	ld	a5,-104(s0)
    8000a040:	0786                	slli	a5,a5,0x1
    8000a042:	f8f43c23          	sd	a5,-104(s0)
                }
                goto sigZ;
    8000a046:	a855                	j	8000a0fa <softfloat_mulAddF64+0x644>
            }
        }
        /*--------------------------------------------------------------------
        *--------------------------------------------------------------------*/
        shiftDist = 0;
    8000a048:	f8043823          	sd	zero,-112(s0)
        sigZ =
            (uint64_t) sig128Z[indexWord( 4, 3 )]<<32
    8000a04c:	f6442783          	lw	a5,-156(s0)
    8000a050:	1782                	slli	a5,a5,0x20
    8000a052:	9381                	srli	a5,a5,0x20
    8000a054:	02079713          	slli	a4,a5,0x20
                | sig128Z[indexWord( 4, 2 )];
    8000a058:	f6042783          	lw	a5,-160(s0)
    8000a05c:	1782                	slli	a5,a5,0x20
    8000a05e:	9381                	srli	a5,a5,0x20
        sigZ =
    8000a060:	8fd9                	or	a5,a5,a4
    8000a062:	f8f43c23          	sd	a5,-104(s0)
        if ( ! sigZ ) {
    8000a066:	f9843783          	ld	a5,-104(s0)
    8000a06a:	e395                	bnez	a5,8000a08e <softfloat_mulAddF64+0x5d8>
            shiftDist = 64;
    8000a06c:	04000793          	li	a5,64
    8000a070:	f8f43823          	sd	a5,-112(s0)
            sigZ =
                (uint64_t) sig128Z[indexWord( 4, 1 )]<<32
    8000a074:	f5c42783          	lw	a5,-164(s0)
    8000a078:	1782                	slli	a5,a5,0x20
    8000a07a:	9381                	srli	a5,a5,0x20
    8000a07c:	02079713          	slli	a4,a5,0x20
                    | sig128Z[indexWord( 4, 0 )];
    8000a080:	f5842783          	lw	a5,-168(s0)
    8000a084:	1782                	slli	a5,a5,0x20
    8000a086:	9381                	srli	a5,a5,0x20
            sigZ =
    8000a088:	8fd9                	or	a5,a5,a4
    8000a08a:	f8f43c23          	sd	a5,-104(s0)
        }
        shiftDist += softfloat_countLeadingZeros64( sigZ ) - 1;
    8000a08e:	f9843503          	ld	a0,-104(s0)
    8000a092:	0cf010ef          	jal	ra,8000b960 <softfloat_countLeadingZeros64>
    8000a096:	87aa                	mv	a5,a0
    8000a098:	2781                	sext.w	a5,a5
    8000a09a:	37fd                	addiw	a5,a5,-1
    8000a09c:	2781                	sext.w	a5,a5
    8000a09e:	873e                	mv	a4,a5
    8000a0a0:	f9043783          	ld	a5,-112(s0)
    8000a0a4:	97ba                	add	a5,a5,a4
    8000a0a6:	f8f43823          	sd	a5,-112(s0)
        if ( shiftDist ) {
    8000a0aa:	f9043783          	ld	a5,-112(s0)
    8000a0ae:	cba1                	beqz	a5,8000a0fe <softfloat_mulAddF64+0x648>
            expZ -= shiftDist;
    8000a0b0:	fa043703          	ld	a4,-96(s0)
    8000a0b4:	f9043783          	ld	a5,-112(s0)
    8000a0b8:	40f707b3          	sub	a5,a4,a5
    8000a0bc:	faf43023          	sd	a5,-96(s0)
            softfloat_shiftLeft128M( sig128Z, shiftDist, sig128Z );
    8000a0c0:	f9043783          	ld	a5,-112(s0)
    8000a0c4:	0007871b          	sext.w	a4,a5
    8000a0c8:	f5840693          	addi	a3,s0,-168
    8000a0cc:	f5840793          	addi	a5,s0,-168
    8000a0d0:	863a                	mv	a2,a4
    8000a0d2:	85be                	mv	a1,a5
    8000a0d4:	4511                	li	a0,4
    8000a0d6:	02b000ef          	jal	ra,8000a900 <softfloat_shiftLeftM>
            sigZ =
                (uint64_t) sig128Z[indexWord( 4, 3 )]<<32
    8000a0da:	f6442783          	lw	a5,-156(s0)
    8000a0de:	1782                	slli	a5,a5,0x20
    8000a0e0:	9381                	srli	a5,a5,0x20
    8000a0e2:	02079713          	slli	a4,a5,0x20
                    | sig128Z[indexWord( 4, 2 )];
    8000a0e6:	f6042783          	lw	a5,-160(s0)
    8000a0ea:	1782                	slli	a5,a5,0x20
    8000a0ec:	9381                	srli	a5,a5,0x20
            sigZ =
    8000a0ee:	8fd9                	or	a5,a5,a4
    8000a0f0:	f8f43c23          	sd	a5,-104(s0)
    8000a0f4:	a031                	j	8000a100 <softfloat_mulAddF64+0x64a>
            goto sigZ;
    8000a0f6:	0001                	nop
    8000a0f8:	a021                	j	8000a100 <softfloat_mulAddF64+0x64a>
                goto sigZ;
    8000a0fa:	0001                	nop
    8000a0fc:	a011                	j	8000a100 <softfloat_mulAddF64+0x64a>
        }
    }
 sigZ:
    8000a0fe:	0001                	nop
    if ( sig128Z[indexWord( 4, 1 )] || sig128Z[indexWord( 4, 0 )] ) sigZ |= 1;
    8000a100:	f5c42783          	lw	a5,-164(s0)
    8000a104:	e781                	bnez	a5,8000a10c <softfloat_mulAddF64+0x656>
    8000a106:	f5842783          	lw	a5,-168(s0)
    8000a10a:	cb91                	beqz	a5,8000a11e <softfloat_mulAddF64+0x668>
    8000a10c:	f9843783          	ld	a5,-104(s0)
    8000a110:	0017e793          	ori	a5,a5,1
    8000a114:	f8f43c23          	sd	a5,-104(s0)
    8000a118:	a021                	j	8000a120 <softfloat_mulAddF64+0x66a>
                goto roundPack;
    8000a11a:	0001                	nop
    8000a11c:	a011                	j	8000a120 <softfloat_mulAddF64+0x66a>
 roundPack:
    8000a11e:	0001                	nop
    return softfloat_roundPackToF64( signZ, expZ - 1, sigZ );
    8000a120:	fa043783          	ld	a5,-96(s0)
    8000a124:	fff78713          	addi	a4,a5,-1
    8000a128:	fbf44783          	lbu	a5,-65(s0)
    8000a12c:	f9843603          	ld	a2,-104(s0)
    8000a130:	85ba                	mv	a1,a4
    8000a132:	853e                	mv	a0,a5
    8000a134:	5f0000ef          	jal	ra,8000a724 <softfloat_roundPackToF64>
    8000a138:	87aa                	mv	a5,a0
    8000a13a:	a0d5                	j	8000a21e <softfloat_mulAddF64+0x768>
        if ( sigA || ((expB == 0x7FF) && sigB) ) goto propagateNaN_ABC;
    8000a13c:	0001                	nop
    8000a13e:	a011                	j	8000a142 <softfloat_mulAddF64+0x68c>
        if ( sigB ) goto propagateNaN_ABC;
    8000a140:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 propagateNaN_ABC:
    uiZ = softfloat_propagateNaNF64UI( uiA, uiB );
    8000a142:	f3043583          	ld	a1,-208(s0)
    8000a146:	f3843503          	ld	a0,-200(s0)
    8000a14a:	662010ef          	jal	ra,8000b7ac <softfloat_propagateNaNF64UI>
    8000a14e:	faa43423          	sd	a0,-88(s0)
    goto propagateNaN_ZC;
    8000a152:	a8a1                	j	8000a1aa <softfloat_mulAddF64+0x6f4>
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 infProdArg:
    if ( magBits ) {
    8000a154:	fb043783          	ld	a5,-80(s0)
    8000a158:	cf95                	beqz	a5,8000a194 <softfloat_mulAddF64+0x6de>
        uiZ = packToF64UI( signZ, 0x7FF, 0 );
    8000a15a:	fbf44783          	lbu	a5,-65(s0)
    8000a15e:	03f79713          	slli	a4,a5,0x3f
    8000a162:	7ff00793          	li	a5,2047
    8000a166:	17d2                	slli	a5,a5,0x34
    8000a168:	97ba                	add	a5,a5,a4
    8000a16a:	faf43423          	sd	a5,-88(s0)
        if ( expC != 0x7FF ) goto uiZ;
    8000a16e:	fc843703          	ld	a4,-56(s0)
    8000a172:	7ff00793          	li	a5,2047
    8000a176:	08f71963          	bne	a4,a5,8000a208 <softfloat_mulAddF64+0x752>
        if ( sigC ) goto propagateNaN_ZC;
    8000a17a:	fc043783          	ld	a5,-64(s0)
    8000a17e:	e78d                	bnez	a5,8000a1a8 <softfloat_mulAddF64+0x6f2>
        if ( signZ == signC ) goto uiZ;
    8000a180:	fbf44703          	lbu	a4,-65(s0)
    8000a184:	f8d44783          	lbu	a5,-115(s0)
    8000a188:	0ff77713          	andi	a4,a4,255
    8000a18c:	0ff7f793          	andi	a5,a5,255
    8000a190:	06f70e63          	beq	a4,a5,8000a20c <softfloat_mulAddF64+0x756>
    }
    softfloat_raiseFlags( softfloat_flag_invalid );
    8000a194:	001867f3          	csrrsi	a5,fflags,16
    8000a198:	f6f43c23          	sd	a5,-136(s0)
    uiZ = defaultNaNF64UI;
    8000a19c:	00fff7b7          	lui	a5,0xfff
    8000a1a0:	179e                	slli	a5,a5,0x27
    8000a1a2:	faf43423          	sd	a5,-88(s0)
    8000a1a6:	a011                	j	8000a1aa <softfloat_mulAddF64+0x6f4>
        if ( sigC ) goto propagateNaN_ZC;
    8000a1a8:	0001                	nop
 propagateNaN_ZC:
    uiZ = softfloat_propagateNaNF64UI( uiZ, uiC );
    8000a1aa:	f2843583          	ld	a1,-216(s0)
    8000a1ae:	fa843503          	ld	a0,-88(s0)
    8000a1b2:	5fa010ef          	jal	ra,8000b7ac <softfloat_propagateNaNF64UI>
    8000a1b6:	faa43423          	sd	a0,-88(s0)
    goto uiZ;
    8000a1ba:	a8a1                	j	8000a212 <softfloat_mulAddF64+0x75c>
        if ( ! sigA ) goto zeroProd;
    8000a1bc:	0001                	nop
    8000a1be:	a011                	j	8000a1c2 <softfloat_mulAddF64+0x70c>
        if ( ! sigB ) goto zeroProd;
    8000a1c0:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 zeroProd:
    uiZ = uiC;
    8000a1c2:	f2843783          	ld	a5,-216(s0)
    8000a1c6:	faf43423          	sd	a5,-88(s0)
    if ( ! (expC | sigC) && (signZ != signC) ) {
    8000a1ca:	fc843703          	ld	a4,-56(s0)
    8000a1ce:	fc043783          	ld	a5,-64(s0)
    8000a1d2:	8fd9                	or	a5,a5,a4
    8000a1d4:	ef95                	bnez	a5,8000a210 <softfloat_mulAddF64+0x75a>
    8000a1d6:	fbf44703          	lbu	a4,-65(s0)
    8000a1da:	f8d44783          	lbu	a5,-115(s0)
    8000a1de:	0ff77713          	andi	a4,a4,255
    8000a1e2:	0ff7f793          	andi	a5,a5,255
    8000a1e6:	02f70563          	beq	a4,a5,8000a210 <softfloat_mulAddF64+0x75a>
 completeCancellation:
    8000a1ea:	a011                	j	8000a1ee <softfloat_mulAddF64+0x738>
                goto completeCancellation;
    8000a1ec:	0001                	nop
        uiZ =
            packToF64UI(
    8000a1ee:	8792                	mv	a5,tp
    8000a1f0:	2781                	sext.w	a5,a5
    8000a1f2:	873e                	mv	a4,a5
    8000a1f4:	4789                	li	a5,2
    8000a1f6:	00f71563          	bne	a4,a5,8000a200 <softfloat_mulAddF64+0x74a>
    8000a1fa:	57fd                	li	a5,-1
    8000a1fc:	17fe                	slli	a5,a5,0x3f
    8000a1fe:	a011                	j	8000a202 <softfloat_mulAddF64+0x74c>
    8000a200:	4781                	li	a5,0
        uiZ =
    8000a202:	faf43423          	sd	a5,-88(s0)
    8000a206:	a031                	j	8000a212 <softfloat_mulAddF64+0x75c>
        if ( expC != 0x7FF ) goto uiZ;
    8000a208:	0001                	nop
    8000a20a:	a021                	j	8000a212 <softfloat_mulAddF64+0x75c>
        if ( signZ == signC ) goto uiZ;
    8000a20c:	0001                	nop
    8000a20e:	a011                	j	8000a212 <softfloat_mulAddF64+0x75c>
                (softfloat_roundingMode == softfloat_round_min), 0, 0 );
    }
 uiZ:
    8000a210:	0001                	nop
    uZ.ui = uiZ;
    8000a212:	fa843783          	ld	a5,-88(s0)
    8000a216:	f4f43023          	sd	a5,-192(s0)
    return uZ.f;
    8000a21a:	f4043783          	ld	a5,-192(s0)

}
    8000a21e:	853e                	mv	a0,a5
    8000a220:	60ee                	ld	ra,216(sp)
    8000a222:	644e                	ld	s0,208(sp)
    8000a224:	612d                	addi	sp,sp,224
    8000a226:	8082                	ret

000000008000a228 <softfloat_negXM>:
#include "primitiveTypes.h"

#ifndef softfloat_negXM

void softfloat_negXM( uint_fast8_t size_words, uint32_t *zPtr )
{
    8000a228:	7179                	addi	sp,sp,-48
    8000a22a:	f422                	sd	s0,40(sp)
    8000a22c:	1800                	addi	s0,sp,48
    8000a22e:	87aa                	mv	a5,a0
    8000a230:	fcb43823          	sd	a1,-48(s0)
    8000a234:	fcf40fa3          	sb	a5,-33(s0)
    unsigned int index, lastIndex;
    uint_fast8_t carry;
    uint32_t word;

    index = indexWordLo( size_words );
    8000a238:	fe042623          	sw	zero,-20(s0)
    lastIndex = indexWordHi( size_words );
    8000a23c:	fdf44783          	lbu	a5,-33(s0)
    8000a240:	2781                	sext.w	a5,a5
    8000a242:	37fd                	addiw	a5,a5,-1
    8000a244:	2781                	sext.w	a5,a5
    8000a246:	fef42223          	sw	a5,-28(s0)
    carry = 1;
    8000a24a:	4785                	li	a5,1
    8000a24c:	fef405a3          	sb	a5,-21(s0)
    for (;;) {
        word = ~zPtr[index] + carry;
    8000a250:	feb44783          	lbu	a5,-21(s0)
    8000a254:	0007871b          	sext.w	a4,a5
    8000a258:	fec46783          	lwu	a5,-20(s0)
    8000a25c:	078a                	slli	a5,a5,0x2
    8000a25e:	fd043683          	ld	a3,-48(s0)
    8000a262:	97b6                	add	a5,a5,a3
    8000a264:	439c                	lw	a5,0(a5)
    8000a266:	40f707bb          	subw	a5,a4,a5
    8000a26a:	2781                	sext.w	a5,a5
    8000a26c:	37fd                	addiw	a5,a5,-1
    8000a26e:	fef42023          	sw	a5,-32(s0)
        zPtr[index] = word;
    8000a272:	fec46783          	lwu	a5,-20(s0)
    8000a276:	078a                	slli	a5,a5,0x2
    8000a278:	fd043703          	ld	a4,-48(s0)
    8000a27c:	97ba                	add	a5,a5,a4
    8000a27e:	fe042703          	lw	a4,-32(s0)
    8000a282:	c398                	sw	a4,0(a5)
        if ( index == lastIndex ) break;
    8000a284:	fec42703          	lw	a4,-20(s0)
    8000a288:	fe442783          	lw	a5,-28(s0)
    8000a28c:	2701                	sext.w	a4,a4
    8000a28e:	2781                	sext.w	a5,a5
    8000a290:	00f70e63          	beq	a4,a5,8000a2ac <softfloat_negXM+0x84>
        index += wordIncr;
    8000a294:	fec42783          	lw	a5,-20(s0)
    8000a298:	2785                	addiw	a5,a5,1
    8000a29a:	fef42623          	sw	a5,-20(s0)
        if ( word ) carry = 0;
    8000a29e:	fe042783          	lw	a5,-32(s0)
    8000a2a2:	2781                	sext.w	a5,a5
    8000a2a4:	d7d5                	beqz	a5,8000a250 <softfloat_negXM+0x28>
    8000a2a6:	fe0405a3          	sb	zero,-21(s0)
        word = ~zPtr[index] + carry;
    8000a2aa:	b75d                	j	8000a250 <softfloat_negXM+0x28>
        if ( index == lastIndex ) break;
    8000a2ac:	0001                	nop
    }

}
    8000a2ae:	0001                	nop
    8000a2b0:	7422                	ld	s0,40(sp)
    8000a2b2:	6145                	addi	sp,sp,48
    8000a2b4:	8082                	ret

000000008000a2b6 <softfloat_normSubnormalF32Sig>:
#include <stdint.h>
#include "platform.h"
#include "internals.h"

struct exp16_sig32 softfloat_normSubnormalF32Sig( uint_fast32_t sig )
{
    8000a2b6:	711d                	addi	sp,sp,-96
    8000a2b8:	ec86                	sd	ra,88(sp)
    8000a2ba:	e8a2                	sd	s0,80(sp)
    8000a2bc:	e4ca                	sd	s2,72(sp)
    8000a2be:	e0ce                	sd	s3,64(sp)
    8000a2c0:	1080                	addi	s0,sp,96
    8000a2c2:	faa43423          	sd	a0,-88(s0)
    int_fast8_t shiftDist;
    struct exp16_sig32 z;

    shiftDist = softfloat_countLeadingZeros32( sig ) - 8;
    8000a2c6:	fa843783          	ld	a5,-88(s0)
    8000a2ca:	2781                	sext.w	a5,a5
    8000a2cc:	853e                	mv	a0,a5
    8000a2ce:	60a010ef          	jal	ra,8000b8d8 <softfloat_countLeadingZeros32>
    8000a2d2:	87aa                	mv	a5,a0
    8000a2d4:	37e1                	addiw	a5,a5,-8
    8000a2d6:	0ff7f793          	andi	a5,a5,255
    8000a2da:	fcf40fa3          	sb	a5,-33(s0)
    z.exp = 1 - shiftDist;
    8000a2de:	fdf40783          	lb	a5,-33(s0)
    8000a2e2:	2781                	sext.w	a5,a5
    8000a2e4:	4705                	li	a4,1
    8000a2e6:	40f707bb          	subw	a5,a4,a5
    8000a2ea:	2781                	sext.w	a5,a5
    8000a2ec:	faf43c23          	sd	a5,-72(s0)
    z.sig = sig<<shiftDist;
    8000a2f0:	fdf40783          	lb	a5,-33(s0)
    8000a2f4:	2781                	sext.w	a5,a5
    8000a2f6:	873e                	mv	a4,a5
    8000a2f8:	fa843783          	ld	a5,-88(s0)
    8000a2fc:	00e797b3          	sll	a5,a5,a4
    8000a300:	fcf43023          	sd	a5,-64(s0)
    return z;
    8000a304:	fb843783          	ld	a5,-72(s0)
    8000a308:	fcf43423          	sd	a5,-56(s0)
    8000a30c:	fc043783          	ld	a5,-64(s0)
    8000a310:	fcf43823          	sd	a5,-48(s0)
    8000a314:	4701                	li	a4,0
    8000a316:	fc843703          	ld	a4,-56(s0)
    8000a31a:	4781                	li	a5,0
    8000a31c:	fd043783          	ld	a5,-48(s0)
    8000a320:	893a                	mv	s2,a4
    8000a322:	89be                	mv	s3,a5
    8000a324:	87ca                	mv	a5,s2
    8000a326:	884e                	mv	a6,s3

}
    8000a328:	853e                	mv	a0,a5
    8000a32a:	85c2                	mv	a1,a6
    8000a32c:	60e6                	ld	ra,88(sp)
    8000a32e:	6446                	ld	s0,80(sp)
    8000a330:	6926                	ld	s2,72(sp)
    8000a332:	6986                	ld	s3,64(sp)
    8000a334:	6125                	addi	sp,sp,96
    8000a336:	8082                	ret

000000008000a338 <softfloat_normSubnormalF64Sig>:
#include <stdint.h>
#include "platform.h"
#include "internals.h"

struct exp16_sig64 softfloat_normSubnormalF64Sig( uint_fast64_t sig )
{
    8000a338:	711d                	addi	sp,sp,-96
    8000a33a:	ec86                	sd	ra,88(sp)
    8000a33c:	e8a2                	sd	s0,80(sp)
    8000a33e:	e4ca                	sd	s2,72(sp)
    8000a340:	e0ce                	sd	s3,64(sp)
    8000a342:	1080                	addi	s0,sp,96
    8000a344:	faa43423          	sd	a0,-88(s0)
    int_fast8_t shiftDist;
    struct exp16_sig64 z;

    shiftDist = softfloat_countLeadingZeros64( sig ) - 11;
    8000a348:	fa843503          	ld	a0,-88(s0)
    8000a34c:	614010ef          	jal	ra,8000b960 <softfloat_countLeadingZeros64>
    8000a350:	87aa                	mv	a5,a0
    8000a352:	37d5                	addiw	a5,a5,-11
    8000a354:	0ff7f793          	andi	a5,a5,255
    8000a358:	fcf40fa3          	sb	a5,-33(s0)
    z.exp = 1 - shiftDist;
    8000a35c:	fdf40783          	lb	a5,-33(s0)
    8000a360:	2781                	sext.w	a5,a5
    8000a362:	4705                	li	a4,1
    8000a364:	40f707bb          	subw	a5,a4,a5
    8000a368:	2781                	sext.w	a5,a5
    8000a36a:	faf43c23          	sd	a5,-72(s0)
    z.sig = sig<<shiftDist;
    8000a36e:	fdf40783          	lb	a5,-33(s0)
    8000a372:	2781                	sext.w	a5,a5
    8000a374:	873e                	mv	a4,a5
    8000a376:	fa843783          	ld	a5,-88(s0)
    8000a37a:	00e797b3          	sll	a5,a5,a4
    8000a37e:	fcf43023          	sd	a5,-64(s0)
    return z;
    8000a382:	fb843783          	ld	a5,-72(s0)
    8000a386:	fcf43423          	sd	a5,-56(s0)
    8000a38a:	fc043783          	ld	a5,-64(s0)
    8000a38e:	fcf43823          	sd	a5,-48(s0)
    8000a392:	4701                	li	a4,0
    8000a394:	fc843703          	ld	a4,-56(s0)
    8000a398:	4781                	li	a5,0
    8000a39a:	fd043783          	ld	a5,-48(s0)
    8000a39e:	893a                	mv	s2,a4
    8000a3a0:	89be                	mv	s3,a5
    8000a3a2:	87ca                	mv	a5,s2
    8000a3a4:	884e                	mv	a6,s3

}
    8000a3a6:	853e                	mv	a0,a5
    8000a3a8:	85c2                	mv	a1,a6
    8000a3aa:	60e6                	ld	ra,88(sp)
    8000a3ac:	6446                	ld	s0,80(sp)
    8000a3ae:	6926                	ld	s2,72(sp)
    8000a3b0:	6986                	ld	s3,64(sp)
    8000a3b2:	6125                	addi	sp,sp,96
    8000a3b4:	8082                	ret

000000008000a3b6 <softfloat_roundMToUI64>:
#include "softfloat.h"

uint_fast64_t
 softfloat_roundMToUI64(
     bool sign, uint32_t *extSigPtr, uint_fast8_t roundingMode, bool exact )
{
    8000a3b6:	7139                	addi	sp,sp,-64
    8000a3b8:	fc22                	sd	s0,56(sp)
    8000a3ba:	0080                	addi	s0,sp,64
    8000a3bc:	87aa                	mv	a5,a0
    8000a3be:	fcb43023          	sd	a1,-64(s0)
    8000a3c2:	8736                	mv	a4,a3
    8000a3c4:	fcf407a3          	sb	a5,-49(s0)
    8000a3c8:	87b2                	mv	a5,a2
    8000a3ca:	fcf40723          	sb	a5,-50(s0)
    8000a3ce:	87ba                	mv	a5,a4
    8000a3d0:	fcf406a3          	sb	a5,-51(s0)
    uint32_t sigExtra;

    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    sig =
        (uint64_t) extSigPtr[indexWord( 3, 2 )]<<32
    8000a3d4:	fc043783          	ld	a5,-64(s0)
    8000a3d8:	07a1                	addi	a5,a5,8
    8000a3da:	439c                	lw	a5,0(a5)
    8000a3dc:	1782                	slli	a5,a5,0x20
    8000a3de:	9381                	srli	a5,a5,0x20
    8000a3e0:	02079713          	slli	a4,a5,0x20
            | extSigPtr[indexWord( 3, 1 )];
    8000a3e4:	fc043783          	ld	a5,-64(s0)
    8000a3e8:	0791                	addi	a5,a5,4
    8000a3ea:	439c                	lw	a5,0(a5)
    8000a3ec:	1782                	slli	a5,a5,0x20
    8000a3ee:	9381                	srli	a5,a5,0x20
    sig =
    8000a3f0:	8fd9                	or	a5,a5,a4
    8000a3f2:	fef43423          	sd	a5,-24(s0)
    sigExtra = extSigPtr[indexWordLo( 3 )];
    8000a3f6:	fc043783          	ld	a5,-64(s0)
    8000a3fa:	439c                	lw	a5,0(a5)
    8000a3fc:	fef42223          	sw	a5,-28(s0)
    if (
    8000a400:	fce44783          	lbu	a5,-50(s0)
    8000a404:	0ff7f713          	andi	a4,a5,255
    8000a408:	4791                	li	a5,4
    8000a40a:	00f70763          	beq	a4,a5,8000a418 <softfloat_roundMToUI64+0x62>
        (roundingMode == softfloat_round_near_maxMag)
            || (roundingMode == softfloat_round_near_even)
    8000a40e:	fce44783          	lbu	a5,-50(s0)
    8000a412:	0ff7f793          	andi	a5,a5,255
    8000a416:	e791                	bnez	a5,8000a422 <softfloat_roundMToUI64+0x6c>
    ) {
        if ( 0x80000000 <= sigExtra ) goto increment;
    8000a418:	fe442783          	lw	a5,-28(s0)
    8000a41c:	0607de63          	bgez	a5,8000a498 <softfloat_roundMToUI64+0xe2>
    8000a420:	a091                	j	8000a464 <softfloat_roundMToUI64+0xae>
    } else {
        if ( sign ) {
    8000a422:	fcf44783          	lbu	a5,-49(s0)
    8000a426:	0ff7f793          	andi	a5,a5,255
    8000a42a:	c38d                	beqz	a5,8000a44c <softfloat_roundMToUI64+0x96>
            if ( !(sig | sigExtra) ) return 0;
    8000a42c:	fe446703          	lwu	a4,-28(s0)
    8000a430:	fe843783          	ld	a5,-24(s0)
    8000a434:	8fd9                	or	a5,a5,a4
    8000a436:	e399                	bnez	a5,8000a43c <softfloat_roundMToUI64+0x86>
    8000a438:	4781                	li	a5,0
    8000a43a:	a075                	j	8000a4e6 <softfloat_roundMToUI64+0x130>
            if ( roundingMode == softfloat_round_min ) goto invalid;
    8000a43c:	fce44783          	lbu	a5,-50(s0)
    8000a440:	0ff7f713          	andi	a4,a5,255
    8000a444:	4789                	li	a5,2
    8000a446:	04f71963          	bne	a4,a5,8000a498 <softfloat_roundMToUI64+0xe2>
    8000a44a:	a051                	j	8000a4ce <softfloat_roundMToUI64+0x118>
#ifdef SOFTFLOAT_ROUND_ODD
            if ( roundingMode == softfloat_round_odd ) goto invalid;
#endif
        } else {
            if ( (roundingMode == softfloat_round_max) && sigExtra ) {
    8000a44c:	fce44783          	lbu	a5,-50(s0)
    8000a450:	0ff7f713          	andi	a4,a5,255
    8000a454:	478d                	li	a5,3
    8000a456:	04f71163          	bne	a4,a5,8000a498 <softfloat_roundMToUI64+0xe2>
    8000a45a:	fe442783          	lw	a5,-28(s0)
    8000a45e:	2781                	sext.w	a5,a5
    8000a460:	cf85                	beqz	a5,8000a498 <softfloat_roundMToUI64+0xe2>
 increment:
    8000a462:	0001                	nop
                ++sig;
    8000a464:	fe843783          	ld	a5,-24(s0)
    8000a468:	0785                	addi	a5,a5,1
    8000a46a:	fef43423          	sd	a5,-24(s0)
                if ( !sig ) goto invalid;
    8000a46e:	fe843783          	ld	a5,-24(s0)
    8000a472:	cbb9                	beqz	a5,8000a4c8 <softfloat_roundMToUI64+0x112>
                if (
    8000a474:	fe442783          	lw	a5,-28(s0)
    8000a478:	0007871b          	sext.w	a4,a5
    8000a47c:	800007b7          	lui	a5,0x80000
    8000a480:	00f71c63          	bne	a4,a5,8000a498 <softfloat_roundMToUI64+0xe2>
                    (sigExtra == 0x80000000)
                        && (roundingMode == softfloat_round_near_even)
    8000a484:	fce44783          	lbu	a5,-50(s0)
    8000a488:	0ff7f793          	andi	a5,a5,255
    8000a48c:	e791                	bnez	a5,8000a498 <softfloat_roundMToUI64+0xe2>
                ) {
                    sig &= ~(uint_fast64_t) 1;
    8000a48e:	fe843783          	ld	a5,-24(s0)
    8000a492:	9bf9                	andi	a5,a5,-2
    8000a494:	fef43423          	sd	a5,-24(s0)
                }
            }
        }
    }
    if ( sign && sig ) goto invalid;
    8000a498:	fcf44783          	lbu	a5,-49(s0)
    8000a49c:	0ff7f793          	andi	a5,a5,255
    8000a4a0:	c781                	beqz	a5,8000a4a8 <softfloat_roundMToUI64+0xf2>
    8000a4a2:	fe843783          	ld	a5,-24(s0)
    8000a4a6:	e39d                	bnez	a5,8000a4cc <softfloat_roundMToUI64+0x116>
    if ( sigExtra ) {
    8000a4a8:	fe442783          	lw	a5,-28(s0)
    8000a4ac:	2781                	sext.w	a5,a5
    8000a4ae:	cb91                	beqz	a5,8000a4c2 <softfloat_roundMToUI64+0x10c>
#ifdef SOFTFLOAT_ROUND_ODD
        if ( roundingMode == softfloat_round_odd ) sig |= 1;
#endif
        if ( exact ) softfloat_raiseFlags( softfloat_flag_inexact );
    8000a4b0:	fcd44783          	lbu	a5,-51(s0)
    8000a4b4:	0ff7f793          	andi	a5,a5,255
    8000a4b8:	c789                	beqz	a5,8000a4c2 <softfloat_roundMToUI64+0x10c>
    8000a4ba:	0010e7f3          	csrrsi	a5,fflags,1
    8000a4be:	fcf43c23          	sd	a5,-40(s0)
    }
    return sig;
    8000a4c2:	fe843783          	ld	a5,-24(s0)
    8000a4c6:	a005                	j	8000a4e6 <softfloat_roundMToUI64+0x130>
                if ( !sig ) goto invalid;
    8000a4c8:	0001                	nop
    8000a4ca:	a011                	j	8000a4ce <softfloat_roundMToUI64+0x118>
    if ( sign && sig ) goto invalid;
    8000a4cc:	0001                	nop
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 invalid:
    softfloat_raiseFlags( softfloat_flag_invalid );
    8000a4ce:	001867f3          	csrrsi	a5,fflags,16
    8000a4d2:	fcf43823          	sd	a5,-48(s0)
    return sign ? ui64_fromNegOverflow : ui64_fromPosOverflow;
    8000a4d6:	fcf44783          	lbu	a5,-49(s0)
    8000a4da:	0ff7f793          	andi	a5,a5,255
    8000a4de:	c399                	beqz	a5,8000a4e4 <softfloat_roundMToUI64+0x12e>
    8000a4e0:	4781                	li	a5,0
    8000a4e2:	a011                	j	8000a4e6 <softfloat_roundMToUI64+0x130>
    8000a4e4:	57fd                	li	a5,-1

}
    8000a4e6:	853e                	mv	a0,a5
    8000a4e8:	7462                	ld	s0,56(sp)
    8000a4ea:	6121                	addi	sp,sp,64
    8000a4ec:	8082                	ret

000000008000a4ee <softfloat_roundPackToF32>:
#include "internals.h"
#include "softfloat.h"

float32_t
 softfloat_roundPackToF32( bool sign, int_fast16_t exp, uint_fast32_t sig )
{
    8000a4ee:	7159                	addi	sp,sp,-112
    8000a4f0:	f486                	sd	ra,104(sp)
    8000a4f2:	f0a2                	sd	s0,96(sp)
    8000a4f4:	1880                	addi	s0,sp,112
    8000a4f6:	87aa                	mv	a5,a0
    8000a4f8:	fab43023          	sd	a1,-96(s0)
    8000a4fc:	f8c43c23          	sd	a2,-104(s0)
    8000a500:	faf407a3          	sb	a5,-81(s0)
    uint_fast32_t uiZ;
    union ui32_f32 uZ;

    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    roundingMode = softfloat_roundingMode;
    8000a504:	8792                	mv	a5,tp
    8000a506:	fcf40fa3          	sb	a5,-33(s0)
    roundNearEven = (roundingMode == softfloat_round_near_even);
    8000a50a:	fdf44783          	lbu	a5,-33(s0)
    8000a50e:	2781                	sext.w	a5,a5
    8000a510:	0017b793          	seqz	a5,a5
    8000a514:	fcf40f23          	sb	a5,-34(s0)
    roundIncrement = 0x40;
    8000a518:	04000793          	li	a5,64
    8000a51c:	fef407a3          	sb	a5,-17(s0)
    if ( ! roundNearEven && (roundingMode != softfloat_round_near_maxMag) ) {
    8000a520:	fde44783          	lbu	a5,-34(s0)
    8000a524:	0017c793          	xori	a5,a5,1
    8000a528:	0ff7f793          	andi	a5,a5,255
    8000a52c:	cf95                	beqz	a5,8000a568 <softfloat_roundPackToF32+0x7a>
    8000a52e:	fdf44783          	lbu	a5,-33(s0)
    8000a532:	0ff7f713          	andi	a4,a5,255
    8000a536:	4791                	li	a5,4
    8000a538:	02f70863          	beq	a4,a5,8000a568 <softfloat_roundPackToF32+0x7a>
        roundIncrement =
            (roundingMode
                 == (sign ? softfloat_round_min : softfloat_round_max))
    8000a53c:	fdf44783          	lbu	a5,-33(s0)
    8000a540:	0007869b          	sext.w	a3,a5
    8000a544:	faf44783          	lbu	a5,-81(s0)
    8000a548:	0ff7f793          	andi	a5,a5,255
    8000a54c:	c399                	beqz	a5,8000a552 <softfloat_roundPackToF32+0x64>
    8000a54e:	4789                	li	a5,2
    8000a550:	a011                	j	8000a554 <softfloat_roundPackToF32+0x66>
    8000a552:	478d                	li	a5,3
        roundIncrement =
    8000a554:	873e                	mv	a4,a5
    8000a556:	87b6                	mv	a5,a3
    8000a558:	00f71563          	bne	a4,a5,8000a562 <softfloat_roundPackToF32+0x74>
    8000a55c:	07f00793          	li	a5,127
    8000a560:	a011                	j	8000a564 <softfloat_roundPackToF32+0x76>
    8000a562:	4781                	li	a5,0
    8000a564:	fef407a3          	sb	a5,-17(s0)
                ? 0x7F
                : 0;
    }
    roundBits = sig & 0x7F;
    8000a568:	f9843783          	ld	a5,-104(s0)
    8000a56c:	0ff7f793          	andi	a5,a5,255
    8000a570:	07f7f793          	andi	a5,a5,127
    8000a574:	fef40723          	sb	a5,-18(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( 0xFD <= (unsigned int) exp ) {
    8000a578:	fa043783          	ld	a5,-96(s0)
    8000a57c:	2781                	sext.w	a5,a5
    8000a57e:	873e                	mv	a4,a5
    8000a580:	0fc00793          	li	a5,252
    8000a584:	0ee7fc63          	bleu	a4,a5,8000a67c <softfloat_roundPackToF32+0x18e>
        if ( exp < 0 ) {
    8000a588:	fa043783          	ld	a5,-96(s0)
    8000a58c:	0807d763          	bgez	a5,8000a61a <softfloat_roundPackToF32+0x12c>
            /*----------------------------------------------------------------
            *----------------------------------------------------------------*/
            isTiny =
                (softfloat_detectTininess == softfloat_tininess_beforeRounding)
                    || (exp < -1) || (sig + roundIncrement < 0x80000000);
    8000a590:	fa043703          	ld	a4,-96(s0)
    8000a594:	57fd                	li	a5,-1
    8000a596:	00f74d63          	blt	a4,a5,8000a5b0 <softfloat_roundPackToF32+0xc2>
    8000a59a:	fef44703          	lbu	a4,-17(s0)
    8000a59e:	f9843783          	ld	a5,-104(s0)
    8000a5a2:	973e                	add	a4,a4,a5
    8000a5a4:	800007b7          	lui	a5,0x80000
    8000a5a8:	fff7c793          	not	a5,a5
    8000a5ac:	00e7e463          	bltu	a5,a4,8000a5b4 <softfloat_roundPackToF32+0xc6>
    8000a5b0:	4785                	li	a5,1
    8000a5b2:	a011                	j	8000a5b6 <softfloat_roundPackToF32+0xc8>
    8000a5b4:	4781                	li	a5,0
            isTiny =
    8000a5b6:	fcf40ea3          	sb	a5,-35(s0)
    8000a5ba:	fdd44783          	lbu	a5,-35(s0)
    8000a5be:	8b85                	andi	a5,a5,1
    8000a5c0:	fcf40ea3          	sb	a5,-35(s0)
            sig = softfloat_shiftRightJam32( sig, -exp );
    8000a5c4:	f9843783          	ld	a5,-104(s0)
    8000a5c8:	0007871b          	sext.w	a4,a5
    8000a5cc:	fa043783          	ld	a5,-96(s0)
    8000a5d0:	40f007b3          	neg	a5,a5
    8000a5d4:	85be                	mv	a1,a5
    8000a5d6:	853a                	mv	a0,a4
    8000a5d8:	46c000ef          	jal	ra,8000aa44 <softfloat_shiftRightJam32>
    8000a5dc:	87aa                	mv	a5,a0
    8000a5de:	2781                	sext.w	a5,a5
    8000a5e0:	1782                	slli	a5,a5,0x20
    8000a5e2:	9381                	srli	a5,a5,0x20
    8000a5e4:	f8f43c23          	sd	a5,-104(s0)
            exp = 0;
    8000a5e8:	fa043023          	sd	zero,-96(s0)
            roundBits = sig & 0x7F;
    8000a5ec:	f9843783          	ld	a5,-104(s0)
    8000a5f0:	0ff7f793          	andi	a5,a5,255
    8000a5f4:	07f7f793          	andi	a5,a5,127
    8000a5f8:	fef40723          	sb	a5,-18(s0)
            if ( isTiny && roundBits ) {
    8000a5fc:	fdd44783          	lbu	a5,-35(s0)
    8000a600:	0ff7f793          	andi	a5,a5,255
    8000a604:	cfa5                	beqz	a5,8000a67c <softfloat_roundPackToF32+0x18e>
    8000a606:	fee44783          	lbu	a5,-18(s0)
    8000a60a:	0ff7f793          	andi	a5,a5,255
    8000a60e:	c7bd                	beqz	a5,8000a67c <softfloat_roundPackToF32+0x18e>
                softfloat_raiseFlags( softfloat_flag_underflow );
    8000a610:	001167f3          	csrrsi	a5,fflags,2
    8000a614:	fcf43823          	sd	a5,-48(s0)
    8000a618:	a095                	j	8000a67c <softfloat_roundPackToF32+0x18e>
            }
        } else if ( (0xFD < exp) || (0x80000000 <= sig + roundIncrement) ) {
    8000a61a:	fa043703          	ld	a4,-96(s0)
    8000a61e:	0fd00793          	li	a5,253
    8000a622:	00e7cd63          	blt	a5,a4,8000a63c <softfloat_roundPackToF32+0x14e>
    8000a626:	fef44703          	lbu	a4,-17(s0)
    8000a62a:	f9843783          	ld	a5,-104(s0)
    8000a62e:	973e                	add	a4,a4,a5
    8000a630:	800007b7          	lui	a5,0x80000
    8000a634:	fff7c793          	not	a5,a5
    8000a638:	04e7f263          	bleu	a4,a5,8000a67c <softfloat_roundPackToF32+0x18e>
            /*----------------------------------------------------------------
            *----------------------------------------------------------------*/
            softfloat_raiseFlags(
    8000a63c:	0012e7f3          	csrrsi	a5,fflags,5
    8000a640:	fcf43423          	sd	a5,-56(s0)
                softfloat_flag_overflow | softfloat_flag_inexact );
            uiZ = packToF32UI( sign, 0xFF, 0 ) - ! roundIncrement;
    8000a644:	faf44783          	lbu	a5,-81(s0)
    8000a648:	2781                	sext.w	a5,a5
    8000a64a:	01f7979b          	slliw	a5,a5,0x1f
    8000a64e:	0007871b          	sext.w	a4,a5
    8000a652:	fef44783          	lbu	a5,-17(s0)
    8000a656:	2781                	sext.w	a5,a5
    8000a658:	0017b793          	seqz	a5,a5
    8000a65c:	0ff7f793          	andi	a5,a5,255
    8000a660:	2781                	sext.w	a5,a5
    8000a662:	40f707bb          	subw	a5,a4,a5
    8000a666:	0007871b          	sext.w	a4,a5
    8000a66a:	7f8007b7          	lui	a5,0x7f800
    8000a66e:	9fb9                	addw	a5,a5,a4
    8000a670:	2781                	sext.w	a5,a5
    8000a672:	1782                	slli	a5,a5,0x20
    8000a674:	9381                	srli	a5,a5,0x20
    8000a676:	fef43023          	sd	a5,-32(s0)
            goto uiZ;
    8000a67a:	a849                	j	8000a70c <softfloat_roundPackToF32+0x21e>
        }
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    sig = (sig + roundIncrement)>>7;
    8000a67c:	fef44703          	lbu	a4,-17(s0)
    8000a680:	f9843783          	ld	a5,-104(s0)
    8000a684:	97ba                	add	a5,a5,a4
    8000a686:	839d                	srli	a5,a5,0x7
    8000a688:	f8f43c23          	sd	a5,-104(s0)
    if ( roundBits ) {
    8000a68c:	fee44783          	lbu	a5,-18(s0)
    8000a690:	0ff7f793          	andi	a5,a5,255
    8000a694:	c789                	beqz	a5,8000a69e <softfloat_roundPackToF32+0x1b0>
        softfloat_raiseFlags( softfloat_flag_inexact );
    8000a696:	0010e7f3          	csrrsi	a5,fflags,1
    8000a69a:	fcf43023          	sd	a5,-64(s0)
            sig |= 1;
            goto packReturn;
        }
#endif
    }
    sig &= ~(uint_fast32_t) (! (roundBits ^ 0x40) & roundNearEven);
    8000a69e:	fee44783          	lbu	a5,-18(s0)
    8000a6a2:	0007871b          	sext.w	a4,a5
    8000a6a6:	04000793          	li	a5,64
    8000a6aa:	40f707b3          	sub	a5,a4,a5
    8000a6ae:	0017b793          	seqz	a5,a5
    8000a6b2:	0ff7f793          	andi	a5,a5,255
    8000a6b6:	0007871b          	sext.w	a4,a5
    8000a6ba:	fde44783          	lbu	a5,-34(s0)
    8000a6be:	2781                	sext.w	a5,a5
    8000a6c0:	8ff9                	and	a5,a5,a4
    8000a6c2:	2781                	sext.w	a5,a5
    8000a6c4:	fff7c793          	not	a5,a5
    8000a6c8:	f9843703          	ld	a4,-104(s0)
    8000a6cc:	8ff9                	and	a5,a5,a4
    8000a6ce:	f8f43c23          	sd	a5,-104(s0)
    if ( ! sig ) exp = 0;
    8000a6d2:	f9843783          	ld	a5,-104(s0)
    8000a6d6:	e781                	bnez	a5,8000a6de <softfloat_roundPackToF32+0x1f0>
    8000a6d8:	fa043023          	sd	zero,-96(s0)
    8000a6dc:	a011                	j	8000a6e0 <softfloat_roundPackToF32+0x1f2>
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 packReturn:
    8000a6de:	0001                	nop
    uiZ = packToF32UI( sign, exp, sig );
    8000a6e0:	faf44783          	lbu	a5,-81(s0)
    8000a6e4:	2781                	sext.w	a5,a5
    8000a6e6:	01f7979b          	slliw	a5,a5,0x1f
    8000a6ea:	0007871b          	sext.w	a4,a5
    8000a6ee:	fa043783          	ld	a5,-96(s0)
    8000a6f2:	2781                	sext.w	a5,a5
    8000a6f4:	0177979b          	slliw	a5,a5,0x17
    8000a6f8:	2781                	sext.w	a5,a5
    8000a6fa:	9fb9                	addw	a5,a5,a4
    8000a6fc:	2781                	sext.w	a5,a5
    8000a6fe:	1782                	slli	a5,a5,0x20
    8000a700:	9381                	srli	a5,a5,0x20
    8000a702:	f9843703          	ld	a4,-104(s0)
    8000a706:	97ba                	add	a5,a5,a4
    8000a708:	fef43023          	sd	a5,-32(s0)
 uiZ:
    uZ.ui = uiZ;
    8000a70c:	fe043783          	ld	a5,-32(s0)
    8000a710:	2781                	sext.w	a5,a5
    8000a712:	faf42c23          	sw	a5,-72(s0)
    return uZ.f;
    8000a716:	fb842783          	lw	a5,-72(s0)

}
    8000a71a:	853e                	mv	a0,a5
    8000a71c:	70a6                	ld	ra,104(sp)
    8000a71e:	7406                	ld	s0,96(sp)
    8000a720:	6165                	addi	sp,sp,112
    8000a722:	8082                	ret

000000008000a724 <softfloat_roundPackToF64>:
#include "internals.h"
#include "softfloat.h"

float64_t
 softfloat_roundPackToF64( bool sign, int_fast16_t exp, uint_fast64_t sig )
{
    8000a724:	7159                	addi	sp,sp,-112
    8000a726:	f486                	sd	ra,104(sp)
    8000a728:	f0a2                	sd	s0,96(sp)
    8000a72a:	1880                	addi	s0,sp,112
    8000a72c:	87aa                	mv	a5,a0
    8000a72e:	fab43023          	sd	a1,-96(s0)
    8000a732:	f8c43c23          	sd	a2,-104(s0)
    8000a736:	faf407a3          	sb	a5,-81(s0)
    uint_fast64_t uiZ;
    union ui64_f64 uZ;

    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    roundingMode = softfloat_roundingMode;
    8000a73a:	8792                	mv	a5,tp
    8000a73c:	fcf40ba3          	sb	a5,-41(s0)
    roundNearEven = (roundingMode == softfloat_round_near_even);
    8000a740:	fd744783          	lbu	a5,-41(s0)
    8000a744:	2781                	sext.w	a5,a5
    8000a746:	0017b793          	seqz	a5,a5
    8000a74a:	fcf40b23          	sb	a5,-42(s0)
    roundIncrement = 0x200;
    8000a74e:	20000793          	li	a5,512
    8000a752:	fef43423          	sd	a5,-24(s0)
    if ( ! roundNearEven && (roundingMode != softfloat_round_near_maxMag) ) {
    8000a756:	fd644783          	lbu	a5,-42(s0)
    8000a75a:	0017c793          	xori	a5,a5,1
    8000a75e:	0ff7f793          	andi	a5,a5,255
    8000a762:	cf95                	beqz	a5,8000a79e <softfloat_roundPackToF64+0x7a>
    8000a764:	fd744783          	lbu	a5,-41(s0)
    8000a768:	0ff7f713          	andi	a4,a5,255
    8000a76c:	4791                	li	a5,4
    8000a76e:	02f70863          	beq	a4,a5,8000a79e <softfloat_roundPackToF64+0x7a>
        roundIncrement =
            (roundingMode
                 == (sign ? softfloat_round_min : softfloat_round_max))
    8000a772:	fd744783          	lbu	a5,-41(s0)
    8000a776:	0007869b          	sext.w	a3,a5
    8000a77a:	faf44783          	lbu	a5,-81(s0)
    8000a77e:	0ff7f793          	andi	a5,a5,255
    8000a782:	c399                	beqz	a5,8000a788 <softfloat_roundPackToF64+0x64>
    8000a784:	4789                	li	a5,2
    8000a786:	a011                	j	8000a78a <softfloat_roundPackToF64+0x66>
    8000a788:	478d                	li	a5,3
                ? 0x3FF
                : 0;
    8000a78a:	873e                	mv	a4,a5
    8000a78c:	87b6                	mv	a5,a3
    8000a78e:	00f71563          	bne	a4,a5,8000a798 <softfloat_roundPackToF64+0x74>
    8000a792:	3ff00793          	li	a5,1023
    8000a796:	a011                	j	8000a79a <softfloat_roundPackToF64+0x76>
    8000a798:	4781                	li	a5,0
        roundIncrement =
    8000a79a:	fef43423          	sd	a5,-24(s0)
    }
    roundBits = sig & 0x3FF;
    8000a79e:	f9843783          	ld	a5,-104(s0)
    8000a7a2:	3ff7f793          	andi	a5,a5,1023
    8000a7a6:	fef43023          	sd	a5,-32(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    if ( 0x7FD <= (uint16_t) exp ) {
    8000a7aa:	fa043783          	ld	a5,-96(s0)
    8000a7ae:	17c2                	slli	a5,a5,0x30
    8000a7b0:	93c1                	srli	a5,a5,0x30
    8000a7b2:	0007871b          	sext.w	a4,a5
    8000a7b6:	7fc00793          	li	a5,2044
    8000a7ba:	0ae7ff63          	bleu	a4,a5,8000a878 <softfloat_roundPackToF64+0x154>
        if ( exp < 0 ) {
    8000a7be:	fa043783          	ld	a5,-96(s0)
    8000a7c2:	0607d863          	bgez	a5,8000a832 <softfloat_roundPackToF64+0x10e>
            /*----------------------------------------------------------------
            *----------------------------------------------------------------*/
            isTiny =
                (softfloat_detectTininess == softfloat_tininess_beforeRounding)
                    || (exp < -1)
                    || (sig + roundIncrement < UINT64_C( 0x8000000000000000 ));
    8000a7c6:	fa043703          	ld	a4,-96(s0)
    8000a7ca:	57fd                	li	a5,-1
    8000a7cc:	00f74963          	blt	a4,a5,8000a7de <softfloat_roundPackToF64+0xba>
    8000a7d0:	f9843703          	ld	a4,-104(s0)
    8000a7d4:	fe843783          	ld	a5,-24(s0)
    8000a7d8:	97ba                	add	a5,a5,a4
    8000a7da:	0007c463          	bltz	a5,8000a7e2 <softfloat_roundPackToF64+0xbe>
    8000a7de:	4785                	li	a5,1
    8000a7e0:	a011                	j	8000a7e4 <softfloat_roundPackToF64+0xc0>
    8000a7e2:	4781                	li	a5,0
            isTiny =
    8000a7e4:	fcf40aa3          	sb	a5,-43(s0)
    8000a7e8:	fd544783          	lbu	a5,-43(s0)
    8000a7ec:	8b85                	andi	a5,a5,1
    8000a7ee:	fcf40aa3          	sb	a5,-43(s0)
            sig = softfloat_shiftRightJam64( sig, -exp );
    8000a7f2:	fa043783          	ld	a5,-96(s0)
    8000a7f6:	40f007b3          	neg	a5,a5
    8000a7fa:	85be                	mv	a1,a5
    8000a7fc:	f9843503          	ld	a0,-104(s0)
    8000a800:	2ba000ef          	jal	ra,8000aaba <softfloat_shiftRightJam64>
    8000a804:	f8a43c23          	sd	a0,-104(s0)
            exp = 0;
    8000a808:	fa043023          	sd	zero,-96(s0)
            roundBits = sig & 0x3FF;
    8000a80c:	f9843783          	ld	a5,-104(s0)
    8000a810:	3ff7f793          	andi	a5,a5,1023
    8000a814:	fef43023          	sd	a5,-32(s0)
            if ( isTiny && roundBits ) {
    8000a818:	fd544783          	lbu	a5,-43(s0)
    8000a81c:	0ff7f793          	andi	a5,a5,255
    8000a820:	cfa1                	beqz	a5,8000a878 <softfloat_roundPackToF64+0x154>
    8000a822:	fe043783          	ld	a5,-32(s0)
    8000a826:	cba9                	beqz	a5,8000a878 <softfloat_roundPackToF64+0x154>
                softfloat_raiseFlags( softfloat_flag_underflow );
    8000a828:	001167f3          	csrrsi	a5,fflags,2
    8000a82c:	fcf43423          	sd	a5,-56(s0)
    8000a830:	a0a1                	j	8000a878 <softfloat_roundPackToF64+0x154>
            }
        } else if (
    8000a832:	fa043703          	ld	a4,-96(s0)
    8000a836:	7fd00793          	li	a5,2045
    8000a83a:	00e7c963          	blt	a5,a4,8000a84c <softfloat_roundPackToF64+0x128>
            (0x7FD < exp)
                || (UINT64_C( 0x8000000000000000 ) <= sig + roundIncrement)
    8000a83e:	f9843703          	ld	a4,-104(s0)
    8000a842:	fe843783          	ld	a5,-24(s0)
    8000a846:	97ba                	add	a5,a5,a4
    8000a848:	0207d863          	bgez	a5,8000a878 <softfloat_roundPackToF64+0x154>
        ) {
            /*----------------------------------------------------------------
            *----------------------------------------------------------------*/
            softfloat_raiseFlags(
    8000a84c:	0012e7f3          	csrrsi	a5,fflags,5
    8000a850:	fcf43023          	sd	a5,-64(s0)
                softfloat_flag_overflow | softfloat_flag_inexact );
            uiZ = packToF64UI( sign, 0x7FF, 0 ) - ! roundIncrement;
    8000a854:	faf44783          	lbu	a5,-81(s0)
    8000a858:	17fe                	slli	a5,a5,0x3f
    8000a85a:	fe843703          	ld	a4,-24(s0)
    8000a85e:	00173713          	seqz	a4,a4
    8000a862:	0ff77713          	andi	a4,a4,255
    8000a866:	40e78733          	sub	a4,a5,a4
    8000a86a:	7ff00793          	li	a5,2047
    8000a86e:	17d2                	slli	a5,a5,0x34
    8000a870:	97ba                	add	a5,a5,a4
    8000a872:	fcf43c23          	sd	a5,-40(s0)
            goto uiZ;
    8000a876:	a895                	j	8000a8ea <softfloat_roundPackToF64+0x1c6>
        }
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    sig = (sig + roundIncrement)>>10;
    8000a878:	f9843703          	ld	a4,-104(s0)
    8000a87c:	fe843783          	ld	a5,-24(s0)
    8000a880:	97ba                	add	a5,a5,a4
    8000a882:	83a9                	srli	a5,a5,0xa
    8000a884:	f8f43c23          	sd	a5,-104(s0)
    if ( roundBits ) {
    8000a888:	fe043783          	ld	a5,-32(s0)
    8000a88c:	c789                	beqz	a5,8000a896 <softfloat_roundPackToF64+0x172>
        softfloat_raiseFlags( softfloat_flag_inexact );
    8000a88e:	0010e7f3          	csrrsi	a5,fflags,1
    8000a892:	faf43c23          	sd	a5,-72(s0)
            sig |= 1;
            goto packReturn;
        }
#endif
    }
    sig &= ~(uint_fast64_t) (! (roundBits ^ 0x200) & roundNearEven);
    8000a896:	fe043783          	ld	a5,-32(s0)
    8000a89a:	e0078793          	addi	a5,a5,-512 # 7f7ffe00 <MEM_START-0x800200>
    8000a89e:	0017b793          	seqz	a5,a5
    8000a8a2:	0ff7f793          	andi	a5,a5,255
    8000a8a6:	0007871b          	sext.w	a4,a5
    8000a8aa:	fd644783          	lbu	a5,-42(s0)
    8000a8ae:	2781                	sext.w	a5,a5
    8000a8b0:	8ff9                	and	a5,a5,a4
    8000a8b2:	2781                	sext.w	a5,a5
    8000a8b4:	fff7c793          	not	a5,a5
    8000a8b8:	f9843703          	ld	a4,-104(s0)
    8000a8bc:	8ff9                	and	a5,a5,a4
    8000a8be:	f8f43c23          	sd	a5,-104(s0)
    if ( ! sig ) exp = 0;
    8000a8c2:	f9843783          	ld	a5,-104(s0)
    8000a8c6:	e781                	bnez	a5,8000a8ce <softfloat_roundPackToF64+0x1aa>
    8000a8c8:	fa043023          	sd	zero,-96(s0)
    8000a8cc:	a011                	j	8000a8d0 <softfloat_roundPackToF64+0x1ac>
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 packReturn:
    8000a8ce:	0001                	nop
    uiZ = packToF64UI( sign, exp, sig );
    8000a8d0:	faf44783          	lbu	a5,-81(s0)
    8000a8d4:	03f79713          	slli	a4,a5,0x3f
    8000a8d8:	fa043783          	ld	a5,-96(s0)
    8000a8dc:	17d2                	slli	a5,a5,0x34
    8000a8de:	97ba                	add	a5,a5,a4
    8000a8e0:	f9843703          	ld	a4,-104(s0)
    8000a8e4:	97ba                	add	a5,a5,a4
    8000a8e6:	fcf43c23          	sd	a5,-40(s0)
 uiZ:
    uZ.ui = uiZ;
    8000a8ea:	fd843783          	ld	a5,-40(s0)
    8000a8ee:	faf43823          	sd	a5,-80(s0)
    return uZ.f;
    8000a8f2:	fb043783          	ld	a5,-80(s0)

}
    8000a8f6:	853e                	mv	a0,a5
    8000a8f8:	70a6                	ld	ra,104(sp)
    8000a8fa:	7406                	ld	s0,96(sp)
    8000a8fc:	6165                	addi	sp,sp,112
    8000a8fe:	8082                	ret

000000008000a900 <softfloat_shiftLeftM>:
     uint_fast8_t size_words,
     const uint32_t *aPtr,
     uint32_t dist,
     uint32_t *zPtr
 )
{
    8000a900:	715d                	addi	sp,sp,-80
    8000a902:	e486                	sd	ra,72(sp)
    8000a904:	e0a2                	sd	s0,64(sp)
    8000a906:	0880                	addi	s0,sp,80
    8000a908:	87aa                	mv	a5,a0
    8000a90a:	fcb43023          	sd	a1,-64(s0)
    8000a90e:	8732                	mv	a4,a2
    8000a910:	fad43c23          	sd	a3,-72(s0)
    8000a914:	fcf407a3          	sb	a5,-49(s0)
    8000a918:	87ba                	mv	a5,a4
    8000a91a:	fcf42423          	sw	a5,-56(s0)
    uint32_t wordDist;
    uint_fast8_t innerDist;
    uint32_t *destPtr;
    uint_fast8_t i;

    wordDist = dist>>5;
    8000a91e:	fc842783          	lw	a5,-56(s0)
    8000a922:	0057d79b          	srliw	a5,a5,0x5
    8000a926:	fef42623          	sw	a5,-20(s0)
    if ( wordDist < size_words ) {
    8000a92a:	fcf44783          	lbu	a5,-49(s0)
    8000a92e:	0007871b          	sext.w	a4,a5
    8000a932:	fec42783          	lw	a5,-20(s0)
    8000a936:	2781                	sext.w	a5,a5
    8000a938:	0ce7fd63          	bleu	a4,a5,8000aa12 <softfloat_shiftLeftM+0x112>
        aPtr += indexMultiwordLoBut( size_words, wordDist );
        innerDist = dist & 31;
    8000a93c:	fc842783          	lw	a5,-56(s0)
    8000a940:	0ff7f793          	andi	a5,a5,255
    8000a944:	8bfd                	andi	a5,a5,31
    8000a946:	fcf40f23          	sb	a5,-34(s0)
        if ( innerDist ) {
    8000a94a:	fde44783          	lbu	a5,-34(s0)
    8000a94e:	0ff7f793          	andi	a5,a5,255
    8000a952:	cf95                	beqz	a5,8000a98e <softfloat_shiftLeftM+0x8e>
            softfloat_shortShiftLeftM(
    8000a954:	fec42783          	lw	a5,-20(s0)
    8000a958:	0ff7f793          	andi	a5,a5,255
    8000a95c:	fcf44703          	lbu	a4,-49(s0)
    8000a960:	40f707bb          	subw	a5,a4,a5
    8000a964:	0ff7f513          	andi	a0,a5,255
                size_words - wordDist,
                aPtr,
                innerDist,
                zPtr + indexMultiwordHiBut( size_words, wordDist )
    8000a968:	fec46783          	lwu	a5,-20(s0)
    8000a96c:	078a                	slli	a5,a5,0x2
            softfloat_shortShiftLeftM(
    8000a96e:	fb843703          	ld	a4,-72(s0)
    8000a972:	973e                	add	a4,a4,a5
    8000a974:	fde44783          	lbu	a5,-34(s0)
    8000a978:	86ba                	mv	a3,a4
    8000a97a:	863e                	mv	a2,a5
    8000a97c:	fc043583          	ld	a1,-64(s0)
    8000a980:	36a000ef          	jal	ra,8000acea <softfloat_shortShiftLeftM>
            );
            if ( ! wordDist ) return;
    8000a984:	fec42783          	lw	a5,-20(s0)
    8000a988:	2781                	sext.w	a5,a5
    8000a98a:	ebc1                	bnez	a5,8000aa1a <softfloat_shiftLeftM+0x11a>
    8000a98c:	a845                	j	8000aa3c <softfloat_shiftLeftM+0x13c>
        } else {
            aPtr += indexWordHi( size_words - wordDist );
    8000a98e:	fcf44783          	lbu	a5,-49(s0)
    8000a992:	0007871b          	sext.w	a4,a5
    8000a996:	fec42783          	lw	a5,-20(s0)
    8000a99a:	40f707bb          	subw	a5,a4,a5
    8000a99e:	2781                	sext.w	a5,a5
    8000a9a0:	37fd                	addiw	a5,a5,-1
    8000a9a2:	2781                	sext.w	a5,a5
    8000a9a4:	1782                	slli	a5,a5,0x20
    8000a9a6:	9381                	srli	a5,a5,0x20
    8000a9a8:	078a                	slli	a5,a5,0x2
    8000a9aa:	fc043703          	ld	a4,-64(s0)
    8000a9ae:	97ba                	add	a5,a5,a4
    8000a9b0:	fcf43023          	sd	a5,-64(s0)
            destPtr = zPtr + indexWordHi( size_words );
    8000a9b4:	fcf44783          	lbu	a5,-49(s0)
    8000a9b8:	078a                	slli	a5,a5,0x2
    8000a9ba:	17f1                	addi	a5,a5,-4
    8000a9bc:	fb843703          	ld	a4,-72(s0)
    8000a9c0:	97ba                	add	a5,a5,a4
    8000a9c2:	fef43023          	sd	a5,-32(s0)
            for ( i = size_words - wordDist; i; --i ) {
    8000a9c6:	fec42783          	lw	a5,-20(s0)
    8000a9ca:	0ff7f793          	andi	a5,a5,255
    8000a9ce:	fcf44703          	lbu	a4,-49(s0)
    8000a9d2:	40f707bb          	subw	a5,a4,a5
    8000a9d6:	fcf40fa3          	sb	a5,-33(s0)
    8000a9da:	a035                	j	8000aa06 <softfloat_shiftLeftM+0x106>
                *destPtr = *aPtr;
    8000a9dc:	fc043783          	ld	a5,-64(s0)
    8000a9e0:	4398                	lw	a4,0(a5)
    8000a9e2:	fe043783          	ld	a5,-32(s0)
    8000a9e6:	c398                	sw	a4,0(a5)
                aPtr -= wordIncr;
    8000a9e8:	fc043783          	ld	a5,-64(s0)
    8000a9ec:	17f1                	addi	a5,a5,-4
    8000a9ee:	fcf43023          	sd	a5,-64(s0)
                destPtr -= wordIncr;
    8000a9f2:	fe043783          	ld	a5,-32(s0)
    8000a9f6:	17f1                	addi	a5,a5,-4
    8000a9f8:	fef43023          	sd	a5,-32(s0)
            for ( i = size_words - wordDist; i; --i ) {
    8000a9fc:	fdf44783          	lbu	a5,-33(s0)
    8000aa00:	37fd                	addiw	a5,a5,-1
    8000aa02:	fcf40fa3          	sb	a5,-33(s0)
    8000aa06:	fdf44783          	lbu	a5,-33(s0)
    8000aa0a:	0ff7f793          	andi	a5,a5,255
    8000aa0e:	f7f9                	bnez	a5,8000a9dc <softfloat_shiftLeftM+0xdc>
    8000aa10:	a029                	j	8000aa1a <softfloat_shiftLeftM+0x11a>
            }
        }
        zPtr += indexMultiwordLo( size_words, wordDist );
    } else {
        wordDist = size_words;
    8000aa12:	fcf44783          	lbu	a5,-49(s0)
    8000aa16:	fef42623          	sw	a5,-20(s0)
    }
    do {
        *zPtr++ = 0;
    8000aa1a:	fb843783          	ld	a5,-72(s0)
    8000aa1e:	00478713          	addi	a4,a5,4
    8000aa22:	fae43c23          	sd	a4,-72(s0)
    8000aa26:	0007a023          	sw	zero,0(a5)
        --wordDist;
    8000aa2a:	fec42783          	lw	a5,-20(s0)
    8000aa2e:	37fd                	addiw	a5,a5,-1
    8000aa30:	fef42623          	sw	a5,-20(s0)
    } while ( wordDist );
    8000aa34:	fec42783          	lw	a5,-20(s0)
    8000aa38:	2781                	sext.w	a5,a5
    8000aa3a:	f3e5                	bnez	a5,8000aa1a <softfloat_shiftLeftM+0x11a>

}
    8000aa3c:	60a6                	ld	ra,72(sp)
    8000aa3e:	6406                	ld	s0,64(sp)
    8000aa40:	6161                	addi	sp,sp,80
    8000aa42:	8082                	ret

000000008000aa44 <softfloat_shiftRightJam32>:
#include "platform.h"

#ifndef softfloat_shiftRightJam32

uint32_t softfloat_shiftRightJam32( uint32_t a, uint_fast16_t dist )
{
    8000aa44:	1101                	addi	sp,sp,-32
    8000aa46:	ec22                	sd	s0,24(sp)
    8000aa48:	1000                	addi	s0,sp,32
    8000aa4a:	87aa                	mv	a5,a0
    8000aa4c:	feb43023          	sd	a1,-32(s0)
    8000aa50:	fef42623          	sw	a5,-20(s0)

    return
        (dist < 31) ? a>>dist | ((uint32_t) (a<<(-dist & 31)) != 0) : (a != 0);
    8000aa54:	fe043703          	ld	a4,-32(s0)
    8000aa58:	47f9                	li	a5,30
    8000aa5a:	04e7e263          	bltu	a5,a4,8000aa9e <softfloat_shiftRightJam32+0x5a>
    8000aa5e:	fe043783          	ld	a5,-32(s0)
    8000aa62:	2781                	sext.w	a5,a5
    8000aa64:	873e                	mv	a4,a5
    8000aa66:	fec42783          	lw	a5,-20(s0)
    8000aa6a:	00e7d7bb          	srlw	a5,a5,a4
    8000aa6e:	0007871b          	sext.w	a4,a5
    8000aa72:	fe043783          	ld	a5,-32(s0)
    8000aa76:	2781                	sext.w	a5,a5
    8000aa78:	40f007bb          	negw	a5,a5
    8000aa7c:	2781                	sext.w	a5,a5
    8000aa7e:	8bfd                	andi	a5,a5,31
    8000aa80:	2781                	sext.w	a5,a5
    8000aa82:	86be                	mv	a3,a5
    8000aa84:	fec42783          	lw	a5,-20(s0)
    8000aa88:	00d797bb          	sllw	a5,a5,a3
    8000aa8c:	2781                	sext.w	a5,a5
    8000aa8e:	00f037b3          	snez	a5,a5
    8000aa92:	0ff7f793          	andi	a5,a5,255
    8000aa96:	2781                	sext.w	a5,a5
    8000aa98:	8fd9                	or	a5,a5,a4
    8000aa9a:	2781                	sext.w	a5,a5
    8000aa9c:	a811                	j	8000aab0 <softfloat_shiftRightJam32+0x6c>
    8000aa9e:	fec42783          	lw	a5,-20(s0)
    8000aaa2:	2781                	sext.w	a5,a5
    8000aaa4:	00f037b3          	snez	a5,a5
    8000aaa8:	0ff7f793          	andi	a5,a5,255
    8000aaac:	2781                	sext.w	a5,a5
    8000aaae:	2781                	sext.w	a5,a5
    8000aab0:	2781                	sext.w	a5,a5

}
    8000aab2:	853e                	mv	a0,a5
    8000aab4:	6462                	ld	s0,24(sp)
    8000aab6:	6105                	addi	sp,sp,32
    8000aab8:	8082                	ret

000000008000aaba <softfloat_shiftRightJam64>:
#include "platform.h"

#ifndef softfloat_shiftRightJam64

uint64_t softfloat_shiftRightJam64( uint64_t a, uint_fast32_t dist )
{
    8000aaba:	1101                	addi	sp,sp,-32
    8000aabc:	ec22                	sd	s0,24(sp)
    8000aabe:	1000                	addi	s0,sp,32
    8000aac0:	fea43423          	sd	a0,-24(s0)
    8000aac4:	feb43023          	sd	a1,-32(s0)

    return
        (dist < 63) ? a>>dist | ((uint64_t) (a<<(-dist & 63)) != 0) : (a != 0);
    8000aac8:	fe043703          	ld	a4,-32(s0)
    8000aacc:	03e00793          	li	a5,62
    8000aad0:	02e7ee63          	bltu	a5,a4,8000ab0c <softfloat_shiftRightJam64+0x52>
    8000aad4:	fe043783          	ld	a5,-32(s0)
    8000aad8:	2781                	sext.w	a5,a5
    8000aada:	873e                	mv	a4,a5
    8000aadc:	fe843783          	ld	a5,-24(s0)
    8000aae0:	00e7d7b3          	srl	a5,a5,a4
    8000aae4:	fe043703          	ld	a4,-32(s0)
    8000aae8:	2701                	sext.w	a4,a4
    8000aaea:	40e0073b          	negw	a4,a4
    8000aaee:	2701                	sext.w	a4,a4
    8000aaf0:	03f77713          	andi	a4,a4,63
    8000aaf4:	2701                	sext.w	a4,a4
    8000aaf6:	86ba                	mv	a3,a4
    8000aaf8:	fe843703          	ld	a4,-24(s0)
    8000aafc:	00d71733          	sll	a4,a4,a3
    8000ab00:	00e03733          	snez	a4,a4
    8000ab04:	0ff77713          	andi	a4,a4,255
    8000ab08:	8fd9                	or	a5,a5,a4
    8000ab0a:	a801                	j	8000ab1a <softfloat_shiftRightJam64+0x60>
    8000ab0c:	fe843783          	ld	a5,-24(s0)
    8000ab10:	00f037b3          	snez	a5,a5
    8000ab14:	0ff7f793          	andi	a5,a5,255
    8000ab18:	2781                	sext.w	a5,a5

}
    8000ab1a:	853e                	mv	a0,a5
    8000ab1c:	6462                	ld	s0,24(sp)
    8000ab1e:	6105                	addi	sp,sp,32
    8000ab20:	8082                	ret

000000008000ab22 <softfloat_shiftRightJamM>:
     uint_fast8_t size_words,
     const uint32_t *aPtr,
     uint32_t dist,
     uint32_t *zPtr
 )
{
    8000ab22:	715d                	addi	sp,sp,-80
    8000ab24:	e486                	sd	ra,72(sp)
    8000ab26:	e0a2                	sd	s0,64(sp)
    8000ab28:	0880                	addi	s0,sp,80
    8000ab2a:	87aa                	mv	a5,a0
    8000ab2c:	fcb43023          	sd	a1,-64(s0)
    8000ab30:	8732                	mv	a4,a2
    8000ab32:	fad43c23          	sd	a3,-72(s0)
    8000ab36:	fcf407a3          	sb	a5,-49(s0)
    8000ab3a:	87ba                	mv	a5,a4
    8000ab3c:	fcf42423          	sw	a5,-56(s0)
    uint32_t wordJam, wordDist, *ptr = 0;
    8000ab40:	fe043023          	sd	zero,-32(s0)
    uint_fast8_t i, innerDist;

    wordJam = 0;
    8000ab44:	fe042623          	sw	zero,-20(s0)
    wordDist = dist>>5;
    8000ab48:	fc842783          	lw	a5,-56(s0)
    8000ab4c:	0057d79b          	srliw	a5,a5,0x5
    8000ab50:	fef42423          	sw	a5,-24(s0)
    if ( wordDist ) {
    8000ab54:	fe842783          	lw	a5,-24(s0)
    8000ab58:	2781                	sext.w	a5,a5
    8000ab5a:	c3bd                	beqz	a5,8000abc0 <softfloat_shiftRightJamM+0x9e>
        if ( size_words < wordDist ) wordDist = size_words;
    8000ab5c:	fcf44783          	lbu	a5,-49(s0)
    8000ab60:	0007871b          	sext.w	a4,a5
    8000ab64:	fe842783          	lw	a5,-24(s0)
    8000ab68:	2781                	sext.w	a5,a5
    8000ab6a:	00f77663          	bleu	a5,a4,8000ab76 <softfloat_shiftRightJamM+0x54>
    8000ab6e:	fcf44783          	lbu	a5,-49(s0)
    8000ab72:	fef42423          	sw	a5,-24(s0)
        ptr = (uint32_t *) (aPtr + indexMultiwordLo( size_words, wordDist ));
    8000ab76:	fc043783          	ld	a5,-64(s0)
    8000ab7a:	fef43023          	sd	a5,-32(s0)
        i = wordDist;
    8000ab7e:	fe842783          	lw	a5,-24(s0)
    8000ab82:	fcf40fa3          	sb	a5,-33(s0)
        do {
            wordJam = *ptr++;
    8000ab86:	fe043783          	ld	a5,-32(s0)
    8000ab8a:	00478713          	addi	a4,a5,4
    8000ab8e:	fee43023          	sd	a4,-32(s0)
    8000ab92:	439c                	lw	a5,0(a5)
    8000ab94:	fef42623          	sw	a5,-20(s0)
            if ( wordJam ) break;
    8000ab98:	fec42783          	lw	a5,-20(s0)
    8000ab9c:	2781                	sext.w	a5,a5
    8000ab9e:	ef81                	bnez	a5,8000abb6 <softfloat_shiftRightJamM+0x94>
            --i;
    8000aba0:	fdf44783          	lbu	a5,-33(s0)
    8000aba4:	37fd                	addiw	a5,a5,-1
    8000aba6:	fcf40fa3          	sb	a5,-33(s0)
        } while ( i );
    8000abaa:	fdf44783          	lbu	a5,-33(s0)
    8000abae:	0ff7f793          	andi	a5,a5,255
    8000abb2:	fbf1                	bnez	a5,8000ab86 <softfloat_shiftRightJamM+0x64>
    8000abb4:	a011                	j	8000abb8 <softfloat_shiftRightJamM+0x96>
            if ( wordJam ) break;
    8000abb6:	0001                	nop
        ptr = zPtr;
    8000abb8:	fb843783          	ld	a5,-72(s0)
    8000abbc:	fef43023          	sd	a5,-32(s0)
    }
    if ( wordDist < size_words ) {
    8000abc0:	fcf44783          	lbu	a5,-49(s0)
    8000abc4:	0007871b          	sext.w	a4,a5
    8000abc8:	fe842783          	lw	a5,-24(s0)
    8000abcc:	2781                	sext.w	a5,a5
    8000abce:	0ce7f963          	bleu	a4,a5,8000aca0 <softfloat_shiftRightJamM+0x17e>
        aPtr += indexMultiwordHiBut( size_words, wordDist );
    8000abd2:	fe846783          	lwu	a5,-24(s0)
    8000abd6:	078a                	slli	a5,a5,0x2
    8000abd8:	fc043703          	ld	a4,-64(s0)
    8000abdc:	97ba                	add	a5,a5,a4
    8000abde:	fcf43023          	sd	a5,-64(s0)
        innerDist = dist & 31;
    8000abe2:	fc842783          	lw	a5,-56(s0)
    8000abe6:	0ff7f793          	andi	a5,a5,255
    8000abea:	8bfd                	andi	a5,a5,31
    8000abec:	fcf40f23          	sb	a5,-34(s0)
        if ( innerDist ) {
    8000abf0:	fde44783          	lbu	a5,-34(s0)
    8000abf4:	0ff7f793          	andi	a5,a5,255
    8000abf8:	cb95                	beqz	a5,8000ac2c <softfloat_shiftRightJamM+0x10a>
            softfloat_shortShiftRightJamM(
    8000abfa:	fe842783          	lw	a5,-24(s0)
    8000abfe:	0ff7f793          	andi	a5,a5,255
    8000ac02:	fcf44703          	lbu	a4,-49(s0)
    8000ac06:	40f707bb          	subw	a5,a4,a5
    8000ac0a:	0ff7f793          	andi	a5,a5,255
    8000ac0e:	fde44703          	lbu	a4,-34(s0)
    8000ac12:	fb843683          	ld	a3,-72(s0)
    8000ac16:	863a                	mv	a2,a4
    8000ac18:	fc043583          	ld	a1,-64(s0)
    8000ac1c:	853e                	mv	a0,a5
    8000ac1e:	2e6000ef          	jal	ra,8000af04 <softfloat_shortShiftRightJamM>
                size_words - wordDist,
                aPtr,
                innerDist,
                zPtr + indexMultiwordLoBut( size_words, wordDist )
            );
            if ( ! wordDist ) goto wordJam;
    8000ac22:	fe842783          	lw	a5,-24(s0)
    8000ac26:	2781                	sext.w	a5,a5
    8000ac28:	ebb9                	bnez	a5,8000ac7e <softfloat_shiftRightJamM+0x15c>
    8000ac2a:	a869                	j	8000acc4 <softfloat_shiftRightJamM+0x1a2>
        } else {
            aPtr += indexWordLo( size_words - wordDist );
            ptr = zPtr + indexWordLo( size_words );
    8000ac2c:	fb843783          	ld	a5,-72(s0)
    8000ac30:	fef43023          	sd	a5,-32(s0)
            for ( i = size_words - wordDist; i; --i ) {
    8000ac34:	fe842783          	lw	a5,-24(s0)
    8000ac38:	0ff7f793          	andi	a5,a5,255
    8000ac3c:	fcf44703          	lbu	a4,-49(s0)
    8000ac40:	40f707bb          	subw	a5,a4,a5
    8000ac44:	fcf40fa3          	sb	a5,-33(s0)
    8000ac48:	a035                	j	8000ac74 <softfloat_shiftRightJamM+0x152>
                *ptr = *aPtr;
    8000ac4a:	fc043783          	ld	a5,-64(s0)
    8000ac4e:	4398                	lw	a4,0(a5)
    8000ac50:	fe043783          	ld	a5,-32(s0)
    8000ac54:	c398                	sw	a4,0(a5)
                aPtr += wordIncr;
    8000ac56:	fc043783          	ld	a5,-64(s0)
    8000ac5a:	0791                	addi	a5,a5,4
    8000ac5c:	fcf43023          	sd	a5,-64(s0)
                ptr += wordIncr;
    8000ac60:	fe043783          	ld	a5,-32(s0)
    8000ac64:	0791                	addi	a5,a5,4
    8000ac66:	fef43023          	sd	a5,-32(s0)
            for ( i = size_words - wordDist; i; --i ) {
    8000ac6a:	fdf44783          	lbu	a5,-33(s0)
    8000ac6e:	37fd                	addiw	a5,a5,-1
    8000ac70:	fcf40fa3          	sb	a5,-33(s0)
    8000ac74:	fdf44783          	lbu	a5,-33(s0)
    8000ac78:	0ff7f793          	andi	a5,a5,255
    8000ac7c:	f7f9                	bnez	a5,8000ac4a <softfloat_shiftRightJamM+0x128>
            }
        }
        ptr = zPtr + indexMultiwordHi( size_words, wordDist );
    8000ac7e:	fcf44783          	lbu	a5,-49(s0)
    8000ac82:	0007871b          	sext.w	a4,a5
    8000ac86:	fe842783          	lw	a5,-24(s0)
    8000ac8a:	40f707bb          	subw	a5,a4,a5
    8000ac8e:	2781                	sext.w	a5,a5
    8000ac90:	1782                	slli	a5,a5,0x20
    8000ac92:	9381                	srli	a5,a5,0x20
    8000ac94:	078a                	slli	a5,a5,0x2
    8000ac96:	fb843703          	ld	a4,-72(s0)
    8000ac9a:	97ba                	add	a5,a5,a4
    8000ac9c:	fef43023          	sd	a5,-32(s0)
    }
    do {
        *ptr++ = 0;
    8000aca0:	fe043783          	ld	a5,-32(s0)
    8000aca4:	00478713          	addi	a4,a5,4
    8000aca8:	fee43023          	sd	a4,-32(s0)
    8000acac:	0007a023          	sw	zero,0(a5)
        --wordDist;
    8000acb0:	fe842783          	lw	a5,-24(s0)
    8000acb4:	37fd                	addiw	a5,a5,-1
    8000acb6:	fef42423          	sw	a5,-24(s0)
    } while ( wordDist );
    8000acba:	fe842783          	lw	a5,-24(s0)
    8000acbe:	2781                	sext.w	a5,a5
    8000acc0:	f3e5                	bnez	a5,8000aca0 <softfloat_shiftRightJamM+0x17e>
 wordJam:
    8000acc2:	0001                	nop
    if ( wordJam ) zPtr[indexWordLo( size_words )] |= 1;
    8000acc4:	fec42783          	lw	a5,-20(s0)
    8000acc8:	2781                	sext.w	a5,a5
    8000acca:	cb99                	beqz	a5,8000ace0 <softfloat_shiftRightJamM+0x1be>
    8000accc:	fb843783          	ld	a5,-72(s0)
    8000acd0:	439c                	lw	a5,0(a5)
    8000acd2:	0017e793          	ori	a5,a5,1
    8000acd6:	0007871b          	sext.w	a4,a5
    8000acda:	fb843783          	ld	a5,-72(s0)
    8000acde:	c398                	sw	a4,0(a5)

}
    8000ace0:	0001                	nop
    8000ace2:	60a6                	ld	ra,72(sp)
    8000ace4:	6406                	ld	s0,64(sp)
    8000ace6:	6161                	addi	sp,sp,80
    8000ace8:	8082                	ret

000000008000acea <softfloat_shortShiftLeftM>:
     uint_fast8_t size_words,
     const uint32_t *aPtr,
     uint_fast8_t dist,
     uint32_t *zPtr
 )
{
    8000acea:	715d                	addi	sp,sp,-80
    8000acec:	e4a2                	sd	s0,72(sp)
    8000acee:	0880                	addi	s0,sp,80
    8000acf0:	87aa                	mv	a5,a0
    8000acf2:	fcb43023          	sd	a1,-64(s0)
    8000acf6:	8732                	mv	a4,a2
    8000acf8:	fad43c23          	sd	a3,-72(s0)
    8000acfc:	fcf407a3          	sb	a5,-49(s0)
    8000ad00:	87ba                	mv	a5,a4
    8000ad02:	fcf40723          	sb	a5,-50(s0)
    uint_fast8_t uNegDist;
    unsigned int index, lastIndex;
    uint32_t partWordZ, wordA;

    uNegDist = -dist;
    8000ad06:	fce44783          	lbu	a5,-50(s0)
    8000ad0a:	40f007b3          	neg	a5,a5
    8000ad0e:	fef403a3          	sb	a5,-25(s0)
    index = indexWordHi( size_words );
    8000ad12:	fcf44783          	lbu	a5,-49(s0)
    8000ad16:	2781                	sext.w	a5,a5
    8000ad18:	37fd                	addiw	a5,a5,-1
    8000ad1a:	2781                	sext.w	a5,a5
    8000ad1c:	fef42623          	sw	a5,-20(s0)
    lastIndex = indexWordLo( size_words );
    8000ad20:	fe042023          	sw	zero,-32(s0)
    partWordZ = aPtr[index]<<dist;
    8000ad24:	fec46783          	lwu	a5,-20(s0)
    8000ad28:	078a                	slli	a5,a5,0x2
    8000ad2a:	fc043703          	ld	a4,-64(s0)
    8000ad2e:	97ba                	add	a5,a5,a4
    8000ad30:	439c                	lw	a5,0(a5)
    8000ad32:	fce44703          	lbu	a4,-50(s0)
    8000ad36:	2701                	sext.w	a4,a4
    8000ad38:	00e797bb          	sllw	a5,a5,a4
    8000ad3c:	fef42423          	sw	a5,-24(s0)
    while ( index != lastIndex ) {
    8000ad40:	a0a5                	j	8000ada8 <softfloat_shortShiftLeftM+0xbe>
        wordA = aPtr[index - wordIncr];
    8000ad42:	fec42783          	lw	a5,-20(s0)
    8000ad46:	37fd                	addiw	a5,a5,-1
    8000ad48:	2781                	sext.w	a5,a5
    8000ad4a:	1782                	slli	a5,a5,0x20
    8000ad4c:	9381                	srli	a5,a5,0x20
    8000ad4e:	078a                	slli	a5,a5,0x2
    8000ad50:	fc043703          	ld	a4,-64(s0)
    8000ad54:	97ba                	add	a5,a5,a4
    8000ad56:	439c                	lw	a5,0(a5)
    8000ad58:	fcf42e23          	sw	a5,-36(s0)
        zPtr[index] = partWordZ | wordA>>(uNegDist & 31);
    8000ad5c:	fe744783          	lbu	a5,-25(s0)
    8000ad60:	2781                	sext.w	a5,a5
    8000ad62:	8bfd                	andi	a5,a5,31
    8000ad64:	2781                	sext.w	a5,a5
    8000ad66:	873e                	mv	a4,a5
    8000ad68:	fdc42783          	lw	a5,-36(s0)
    8000ad6c:	00e7d7bb          	srlw	a5,a5,a4
    8000ad70:	0007869b          	sext.w	a3,a5
    8000ad74:	fec46783          	lwu	a5,-20(s0)
    8000ad78:	078a                	slli	a5,a5,0x2
    8000ad7a:	fb843703          	ld	a4,-72(s0)
    8000ad7e:	97ba                	add	a5,a5,a4
    8000ad80:	fe842703          	lw	a4,-24(s0)
    8000ad84:	8f55                	or	a4,a4,a3
    8000ad86:	2701                	sext.w	a4,a4
    8000ad88:	c398                	sw	a4,0(a5)
        index -= wordIncr;
    8000ad8a:	fec42783          	lw	a5,-20(s0)
    8000ad8e:	37fd                	addiw	a5,a5,-1
    8000ad90:	fef42623          	sw	a5,-20(s0)
        partWordZ = wordA<<dist;
    8000ad94:	fce44783          	lbu	a5,-50(s0)
    8000ad98:	2781                	sext.w	a5,a5
    8000ad9a:	873e                	mv	a4,a5
    8000ad9c:	fdc42783          	lw	a5,-36(s0)
    8000ada0:	00e797bb          	sllw	a5,a5,a4
    8000ada4:	fef42423          	sw	a5,-24(s0)
    while ( index != lastIndex ) {
    8000ada8:	fec42703          	lw	a4,-20(s0)
    8000adac:	fe042783          	lw	a5,-32(s0)
    8000adb0:	2701                	sext.w	a4,a4
    8000adb2:	2781                	sext.w	a5,a5
    8000adb4:	f8f717e3          	bne	a4,a5,8000ad42 <softfloat_shortShiftLeftM+0x58>
    }
    zPtr[index] = partWordZ;
    8000adb8:	fec46783          	lwu	a5,-20(s0)
    8000adbc:	078a                	slli	a5,a5,0x2
    8000adbe:	fb843703          	ld	a4,-72(s0)
    8000adc2:	97ba                	add	a5,a5,a4
    8000adc4:	fe842703          	lw	a4,-24(s0)
    8000adc8:	c398                	sw	a4,0(a5)

}
    8000adca:	0001                	nop
    8000adcc:	6426                	ld	s0,72(sp)
    8000adce:	6161                	addi	sp,sp,80
    8000add0:	8082                	ret

000000008000add2 <softfloat_shortShiftRightM>:
     uint_fast8_t size_words,
     const uint32_t *aPtr,
     uint_fast8_t dist,
     uint32_t *zPtr
 )
{
    8000add2:	715d                	addi	sp,sp,-80
    8000add4:	e4a2                	sd	s0,72(sp)
    8000add6:	0880                	addi	s0,sp,80
    8000add8:	87aa                	mv	a5,a0
    8000adda:	fcb43023          	sd	a1,-64(s0)
    8000adde:	8732                	mv	a4,a2
    8000ade0:	fad43c23          	sd	a3,-72(s0)
    8000ade4:	fcf407a3          	sb	a5,-49(s0)
    8000ade8:	87ba                	mv	a5,a4
    8000adea:	fcf40723          	sb	a5,-50(s0)
    uint_fast8_t uNegDist;
    unsigned int index, lastIndex;
    uint32_t partWordZ, wordA;

    uNegDist = -dist;
    8000adee:	fce44783          	lbu	a5,-50(s0)
    8000adf2:	40f007b3          	neg	a5,a5
    8000adf6:	fef403a3          	sb	a5,-25(s0)
    index = indexWordLo( size_words );
    8000adfa:	fe042623          	sw	zero,-20(s0)
    lastIndex = indexWordHi( size_words );
    8000adfe:	fcf44783          	lbu	a5,-49(s0)
    8000ae02:	2781                	sext.w	a5,a5
    8000ae04:	37fd                	addiw	a5,a5,-1
    8000ae06:	2781                	sext.w	a5,a5
    8000ae08:	fef42023          	sw	a5,-32(s0)
    partWordZ = aPtr[index]>>dist;
    8000ae0c:	fec46783          	lwu	a5,-20(s0)
    8000ae10:	078a                	slli	a5,a5,0x2
    8000ae12:	fc043703          	ld	a4,-64(s0)
    8000ae16:	97ba                	add	a5,a5,a4
    8000ae18:	439c                	lw	a5,0(a5)
    8000ae1a:	fce44703          	lbu	a4,-50(s0)
    8000ae1e:	2701                	sext.w	a4,a4
    8000ae20:	00e7d7bb          	srlw	a5,a5,a4
    8000ae24:	fef42423          	sw	a5,-24(s0)
    while ( index != lastIndex ) {
    8000ae28:	a0a5                	j	8000ae90 <softfloat_shortShiftRightM+0xbe>
        wordA = aPtr[index + wordIncr];
    8000ae2a:	fec42783          	lw	a5,-20(s0)
    8000ae2e:	2785                	addiw	a5,a5,1
    8000ae30:	2781                	sext.w	a5,a5
    8000ae32:	1782                	slli	a5,a5,0x20
    8000ae34:	9381                	srli	a5,a5,0x20
    8000ae36:	078a                	slli	a5,a5,0x2
    8000ae38:	fc043703          	ld	a4,-64(s0)
    8000ae3c:	97ba                	add	a5,a5,a4
    8000ae3e:	439c                	lw	a5,0(a5)
    8000ae40:	fcf42e23          	sw	a5,-36(s0)
        zPtr[index] = wordA<<(uNegDist & 31) | partWordZ;
    8000ae44:	fe744783          	lbu	a5,-25(s0)
    8000ae48:	2781                	sext.w	a5,a5
    8000ae4a:	8bfd                	andi	a5,a5,31
    8000ae4c:	2781                	sext.w	a5,a5
    8000ae4e:	873e                	mv	a4,a5
    8000ae50:	fdc42783          	lw	a5,-36(s0)
    8000ae54:	00e797bb          	sllw	a5,a5,a4
    8000ae58:	0007869b          	sext.w	a3,a5
    8000ae5c:	fec46783          	lwu	a5,-20(s0)
    8000ae60:	078a                	slli	a5,a5,0x2
    8000ae62:	fb843703          	ld	a4,-72(s0)
    8000ae66:	97ba                	add	a5,a5,a4
    8000ae68:	fe842703          	lw	a4,-24(s0)
    8000ae6c:	8f55                	or	a4,a4,a3
    8000ae6e:	2701                	sext.w	a4,a4
    8000ae70:	c398                	sw	a4,0(a5)
        index += wordIncr;
    8000ae72:	fec42783          	lw	a5,-20(s0)
    8000ae76:	2785                	addiw	a5,a5,1
    8000ae78:	fef42623          	sw	a5,-20(s0)
        partWordZ = wordA>>dist;
    8000ae7c:	fce44783          	lbu	a5,-50(s0)
    8000ae80:	2781                	sext.w	a5,a5
    8000ae82:	873e                	mv	a4,a5
    8000ae84:	fdc42783          	lw	a5,-36(s0)
    8000ae88:	00e7d7bb          	srlw	a5,a5,a4
    8000ae8c:	fef42423          	sw	a5,-24(s0)
    while ( index != lastIndex ) {
    8000ae90:	fec42703          	lw	a4,-20(s0)
    8000ae94:	fe042783          	lw	a5,-32(s0)
    8000ae98:	2701                	sext.w	a4,a4
    8000ae9a:	2781                	sext.w	a5,a5
    8000ae9c:	f8f717e3          	bne	a4,a5,8000ae2a <softfloat_shortShiftRightM+0x58>
    }
    zPtr[index] = partWordZ;
    8000aea0:	fec46783          	lwu	a5,-20(s0)
    8000aea4:	078a                	slli	a5,a5,0x2
    8000aea6:	fb843703          	ld	a4,-72(s0)
    8000aeaa:	97ba                	add	a5,a5,a4
    8000aeac:	fe842703          	lw	a4,-24(s0)
    8000aeb0:	c398                	sw	a4,0(a5)

}
    8000aeb2:	0001                	nop
    8000aeb4:	6426                	ld	s0,72(sp)
    8000aeb6:	6161                	addi	sp,sp,80
    8000aeb8:	8082                	ret

000000008000aeba <softfloat_shortShiftRightJam64>:
#include "platform.h"

#ifndef softfloat_shortShiftRightJam64

uint64_t softfloat_shortShiftRightJam64( uint64_t a, uint_fast8_t dist )
{
    8000aeba:	1101                	addi	sp,sp,-32
    8000aebc:	ec22                	sd	s0,24(sp)
    8000aebe:	1000                	addi	s0,sp,32
    8000aec0:	fea43423          	sd	a0,-24(s0)
    8000aec4:	87ae                	mv	a5,a1
    8000aec6:	fef403a3          	sb	a5,-25(s0)

    return a>>dist | ((a & (((uint_fast64_t) 1<<dist) - 1)) != 0);
    8000aeca:	fe744783          	lbu	a5,-25(s0)
    8000aece:	2781                	sext.w	a5,a5
    8000aed0:	873e                	mv	a4,a5
    8000aed2:	fe843783          	ld	a5,-24(s0)
    8000aed6:	00e7d7b3          	srl	a5,a5,a4
    8000aeda:	fe744703          	lbu	a4,-25(s0)
    8000aede:	2701                	sext.w	a4,a4
    8000aee0:	86ba                	mv	a3,a4
    8000aee2:	577d                	li	a4,-1
    8000aee4:	00d71733          	sll	a4,a4,a3
    8000aee8:	fff74693          	not	a3,a4
    8000aeec:	fe843703          	ld	a4,-24(s0)
    8000aef0:	8f75                	and	a4,a4,a3
    8000aef2:	00e03733          	snez	a4,a4
    8000aef6:	0ff77713          	andi	a4,a4,255
    8000aefa:	8fd9                	or	a5,a5,a4

}
    8000aefc:	853e                	mv	a0,a5
    8000aefe:	6462                	ld	s0,24(sp)
    8000af00:	6105                	addi	sp,sp,32
    8000af02:	8082                	ret

000000008000af04 <softfloat_shortShiftRightJamM>:
     uint_fast8_t size_words,
     const uint32_t *aPtr,
     uint_fast8_t dist,
     uint32_t *zPtr
 )
{
    8000af04:	715d                	addi	sp,sp,-80
    8000af06:	e4a2                	sd	s0,72(sp)
    8000af08:	0880                	addi	s0,sp,80
    8000af0a:	87aa                	mv	a5,a0
    8000af0c:	fcb43023          	sd	a1,-64(s0)
    8000af10:	8732                	mv	a4,a2
    8000af12:	fad43c23          	sd	a3,-72(s0)
    8000af16:	fcf407a3          	sb	a5,-49(s0)
    8000af1a:	87ba                	mv	a5,a4
    8000af1c:	fcf40723          	sb	a5,-50(s0)
    uint_fast8_t uNegDist;
    unsigned int index, lastIndex;
    uint32_t partWordZ, wordA;

    uNegDist = -dist;
    8000af20:	fce44783          	lbu	a5,-50(s0)
    8000af24:	40f007b3          	neg	a5,a5
    8000af28:	fef403a3          	sb	a5,-25(s0)
    index = indexWordLo( size_words );
    8000af2c:	fe042623          	sw	zero,-20(s0)
    lastIndex = indexWordHi( size_words );
    8000af30:	fcf44783          	lbu	a5,-49(s0)
    8000af34:	2781                	sext.w	a5,a5
    8000af36:	37fd                	addiw	a5,a5,-1
    8000af38:	2781                	sext.w	a5,a5
    8000af3a:	fef42023          	sw	a5,-32(s0)
    wordA = aPtr[index];
    8000af3e:	fec46783          	lwu	a5,-20(s0)
    8000af42:	078a                	slli	a5,a5,0x2
    8000af44:	fc043703          	ld	a4,-64(s0)
    8000af48:	97ba                	add	a5,a5,a4
    8000af4a:	439c                	lw	a5,0(a5)
    8000af4c:	fcf42e23          	sw	a5,-36(s0)
    partWordZ = wordA>>dist;
    8000af50:	fce44783          	lbu	a5,-50(s0)
    8000af54:	2781                	sext.w	a5,a5
    8000af56:	873e                	mv	a4,a5
    8000af58:	fdc42783          	lw	a5,-36(s0)
    8000af5c:	00e7d7bb          	srlw	a5,a5,a4
    8000af60:	fef42423          	sw	a5,-24(s0)
    if ( partWordZ<<dist != wordA ) partWordZ |= 1;
    8000af64:	fce44783          	lbu	a5,-50(s0)
    8000af68:	2781                	sext.w	a5,a5
    8000af6a:	873e                	mv	a4,a5
    8000af6c:	fe842783          	lw	a5,-24(s0)
    8000af70:	00e797bb          	sllw	a5,a5,a4
    8000af74:	0007871b          	sext.w	a4,a5
    8000af78:	fdc42783          	lw	a5,-36(s0)
    8000af7c:	2781                	sext.w	a5,a5
    8000af7e:	06e78c63          	beq	a5,a4,8000aff6 <softfloat_shortShiftRightJamM+0xf2>
    8000af82:	fe842783          	lw	a5,-24(s0)
    8000af86:	0017e793          	ori	a5,a5,1
    8000af8a:	fef42423          	sw	a5,-24(s0)
    while ( index != lastIndex ) {
    8000af8e:	a0a5                	j	8000aff6 <softfloat_shortShiftRightJamM+0xf2>
        wordA = aPtr[index + wordIncr];
    8000af90:	fec42783          	lw	a5,-20(s0)
    8000af94:	2785                	addiw	a5,a5,1
    8000af96:	2781                	sext.w	a5,a5
    8000af98:	1782                	slli	a5,a5,0x20
    8000af9a:	9381                	srli	a5,a5,0x20
    8000af9c:	078a                	slli	a5,a5,0x2
    8000af9e:	fc043703          	ld	a4,-64(s0)
    8000afa2:	97ba                	add	a5,a5,a4
    8000afa4:	439c                	lw	a5,0(a5)
    8000afa6:	fcf42e23          	sw	a5,-36(s0)
        zPtr[index] = wordA<<(uNegDist & 31) | partWordZ;
    8000afaa:	fe744783          	lbu	a5,-25(s0)
    8000afae:	2781                	sext.w	a5,a5
    8000afb0:	8bfd                	andi	a5,a5,31
    8000afb2:	2781                	sext.w	a5,a5
    8000afb4:	873e                	mv	a4,a5
    8000afb6:	fdc42783          	lw	a5,-36(s0)
    8000afba:	00e797bb          	sllw	a5,a5,a4
    8000afbe:	0007869b          	sext.w	a3,a5
    8000afc2:	fec46783          	lwu	a5,-20(s0)
    8000afc6:	078a                	slli	a5,a5,0x2
    8000afc8:	fb843703          	ld	a4,-72(s0)
    8000afcc:	97ba                	add	a5,a5,a4
    8000afce:	fe842703          	lw	a4,-24(s0)
    8000afd2:	8f55                	or	a4,a4,a3
    8000afd4:	2701                	sext.w	a4,a4
    8000afd6:	c398                	sw	a4,0(a5)
        index += wordIncr;
    8000afd8:	fec42783          	lw	a5,-20(s0)
    8000afdc:	2785                	addiw	a5,a5,1
    8000afde:	fef42623          	sw	a5,-20(s0)
        partWordZ = wordA>>dist;
    8000afe2:	fce44783          	lbu	a5,-50(s0)
    8000afe6:	2781                	sext.w	a5,a5
    8000afe8:	873e                	mv	a4,a5
    8000afea:	fdc42783          	lw	a5,-36(s0)
    8000afee:	00e7d7bb          	srlw	a5,a5,a4
    8000aff2:	fef42423          	sw	a5,-24(s0)
    while ( index != lastIndex ) {
    8000aff6:	fec42703          	lw	a4,-20(s0)
    8000affa:	fe042783          	lw	a5,-32(s0)
    8000affe:	2701                	sext.w	a4,a4
    8000b000:	2781                	sext.w	a5,a5
    8000b002:	f8f717e3          	bne	a4,a5,8000af90 <softfloat_shortShiftRightJamM+0x8c>
    }
    zPtr[index] = partWordZ;
    8000b006:	fec46783          	lwu	a5,-20(s0)
    8000b00a:	078a                	slli	a5,a5,0x2
    8000b00c:	fb843703          	ld	a4,-72(s0)
    8000b010:	97ba                	add	a5,a5,a4
    8000b012:	fe842703          	lw	a4,-24(s0)
    8000b016:	c398                	sw	a4,0(a5)

}
    8000b018:	0001                	nop
    8000b01a:	6426                	ld	s0,72(sp)
    8000b01c:	6161                	addi	sp,sp,80
    8000b01e:	8082                	ret

000000008000b020 <softfloat_subM>:
     uint_fast8_t size_words,
     const uint32_t *aPtr,
     const uint32_t *bPtr,
     uint32_t *zPtr
 )
{
    8000b020:	715d                	addi	sp,sp,-80
    8000b022:	e4a2                	sd	s0,72(sp)
    8000b024:	0880                	addi	s0,sp,80
    8000b026:	87aa                	mv	a5,a0
    8000b028:	fcb43023          	sd	a1,-64(s0)
    8000b02c:	fac43c23          	sd	a2,-72(s0)
    8000b030:	fad43823          	sd	a3,-80(s0)
    8000b034:	fcf407a3          	sb	a5,-49(s0)
    unsigned int index, lastIndex;
    uint_fast8_t borrow;
    uint32_t wordA, wordB;

    index = indexWordLo( size_words );
    8000b038:	fe042623          	sw	zero,-20(s0)
    lastIndex = indexWordHi( size_words );
    8000b03c:	fcf44783          	lbu	a5,-49(s0)
    8000b040:	2781                	sext.w	a5,a5
    8000b042:	37fd                	addiw	a5,a5,-1
    8000b044:	2781                	sext.w	a5,a5
    8000b046:	fef42223          	sw	a5,-28(s0)
    borrow = 0;
    8000b04a:	fe0405a3          	sb	zero,-21(s0)
    for (;;) {
        wordA = aPtr[index];
    8000b04e:	fec46783          	lwu	a5,-20(s0)
    8000b052:	078a                	slli	a5,a5,0x2
    8000b054:	fc043703          	ld	a4,-64(s0)
    8000b058:	97ba                	add	a5,a5,a4
    8000b05a:	439c                	lw	a5,0(a5)
    8000b05c:	fef42023          	sw	a5,-32(s0)
        wordB = bPtr[index];
    8000b060:	fec46783          	lwu	a5,-20(s0)
    8000b064:	078a                	slli	a5,a5,0x2
    8000b066:	fb843703          	ld	a4,-72(s0)
    8000b06a:	97ba                	add	a5,a5,a4
    8000b06c:	439c                	lw	a5,0(a5)
    8000b06e:	fcf42e23          	sw	a5,-36(s0)
        zPtr[index] = wordA - wordB - borrow;
    8000b072:	fe042703          	lw	a4,-32(s0)
    8000b076:	fdc42783          	lw	a5,-36(s0)
    8000b07a:	40f707bb          	subw	a5,a4,a5
    8000b07e:	0007869b          	sext.w	a3,a5
    8000b082:	feb44783          	lbu	a5,-21(s0)
    8000b086:	0007871b          	sext.w	a4,a5
    8000b08a:	fec46783          	lwu	a5,-20(s0)
    8000b08e:	078a                	slli	a5,a5,0x2
    8000b090:	fb043603          	ld	a2,-80(s0)
    8000b094:	97b2                	add	a5,a5,a2
    8000b096:	40e6873b          	subw	a4,a3,a4
    8000b09a:	2701                	sext.w	a4,a4
    8000b09c:	c398                	sw	a4,0(a5)
        if ( index == lastIndex ) break;
    8000b09e:	fec42703          	lw	a4,-20(s0)
    8000b0a2:	fe442783          	lw	a5,-28(s0)
    8000b0a6:	2701                	sext.w	a4,a4
    8000b0a8:	2781                	sext.w	a5,a5
    8000b0aa:	04f70663          	beq	a4,a5,8000b0f6 <softfloat_subM+0xd6>
        borrow = borrow ? (wordA <= wordB) : (wordA < wordB);
    8000b0ae:	feb44783          	lbu	a5,-21(s0)
    8000b0b2:	0ff7f793          	andi	a5,a5,255
    8000b0b6:	cf91                	beqz	a5,8000b0d2 <softfloat_subM+0xb2>
    8000b0b8:	fe042703          	lw	a4,-32(s0)
    8000b0bc:	fdc42783          	lw	a5,-36(s0)
    8000b0c0:	2701                	sext.w	a4,a4
    8000b0c2:	2781                	sext.w	a5,a5
    8000b0c4:	00e7b7b3          	sltu	a5,a5,a4
    8000b0c8:	0017c793          	xori	a5,a5,1
    8000b0cc:	0ff7f793          	andi	a5,a5,255
    8000b0d0:	a819                	j	8000b0e6 <softfloat_subM+0xc6>
    8000b0d2:	fe042703          	lw	a4,-32(s0)
    8000b0d6:	fdc42783          	lw	a5,-36(s0)
    8000b0da:	2701                	sext.w	a4,a4
    8000b0dc:	2781                	sext.w	a5,a5
    8000b0de:	00f737b3          	sltu	a5,a4,a5
    8000b0e2:	0ff7f793          	andi	a5,a5,255
    8000b0e6:	fef405a3          	sb	a5,-21(s0)
        index += wordIncr;
    8000b0ea:	fec42783          	lw	a5,-20(s0)
    8000b0ee:	2785                	addiw	a5,a5,1
    8000b0f0:	fef42623          	sw	a5,-20(s0)
        wordA = aPtr[index];
    8000b0f4:	bfa9                	j	8000b04e <softfloat_subM+0x2e>
        if ( index == lastIndex ) break;
    8000b0f6:	0001                	nop
    }

}
    8000b0f8:	0001                	nop
    8000b0fa:	6426                	ld	s0,72(sp)
    8000b0fc:	6161                	addi	sp,sp,80
    8000b0fe:	8082                	ret

000000008000b100 <softfloat_subMagsF32>:
#include "internals.h"
#include "specialize.h"
#include "softfloat.h"

float32_t softfloat_subMagsF32( uint_fast32_t uiA, uint_fast32_t uiB )
{
    8000b100:	7175                	addi	sp,sp,-144
    8000b102:	e506                	sd	ra,136(sp)
    8000b104:	e122                	sd	s0,128(sp)
    8000b106:	0900                	addi	s0,sp,144
    8000b108:	f6a43c23          	sd	a0,-136(s0)
    8000b10c:	f6b43823          	sd	a1,-144(s0)
    uint_fast32_t sigX, sigY;
    union ui32_f32 uZ;

    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    expA = expF32UI( uiA );
    8000b110:	f7843783          	ld	a5,-136(s0)
    8000b114:	83dd                	srli	a5,a5,0x17
    8000b116:	0ff7f793          	andi	a5,a5,255
    8000b11a:	fef43423          	sd	a5,-24(s0)
    sigA = fracF32UI( uiA );
    8000b11e:	f7843703          	ld	a4,-136(s0)
    8000b122:	008007b7          	lui	a5,0x800
    8000b126:	17fd                	addi	a5,a5,-1
    8000b128:	8ff9                	and	a5,a5,a4
    8000b12a:	faf43423          	sd	a5,-88(s0)
    expB = expF32UI( uiB );
    8000b12e:	f7043783          	ld	a5,-144(s0)
    8000b132:	83dd                	srli	a5,a5,0x17
    8000b134:	0ff7f793          	andi	a5,a5,255
    8000b138:	faf43023          	sd	a5,-96(s0)
    sigB = fracF32UI( uiB );
    8000b13c:	f7043703          	ld	a4,-144(s0)
    8000b140:	008007b7          	lui	a5,0x800
    8000b144:	17fd                	addi	a5,a5,-1
    8000b146:	8ff9                	and	a5,a5,a4
    8000b148:	f8f43c23          	sd	a5,-104(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    expDiff = expA - expB;
    8000b14c:	fe843703          	ld	a4,-24(s0)
    8000b150:	fa043783          	ld	a5,-96(s0)
    8000b154:	40f707b3          	sub	a5,a4,a5
    8000b158:	fef43023          	sd	a5,-32(s0)
    if ( ! expDiff ) {
    8000b15c:	fe043783          	ld	a5,-32(s0)
    8000b160:	12079763          	bnez	a5,8000b28e <softfloat_subMagsF32+0x18e>
        /*--------------------------------------------------------------------
        *--------------------------------------------------------------------*/
        if ( expA == 0xFF ) {
    8000b164:	fe843703          	ld	a4,-24(s0)
    8000b168:	0ff00793          	li	a5,255
    8000b16c:	02f71263          	bne	a4,a5,8000b190 <softfloat_subMagsF32+0x90>
            if ( sigA | sigB ) goto propagateNaN;
    8000b170:	fa843703          	ld	a4,-88(s0)
    8000b174:	f9843783          	ld	a5,-104(s0)
    8000b178:	8fd9                	or	a5,a5,a4
    8000b17a:	24079c63          	bnez	a5,8000b3d2 <softfloat_subMagsF32+0x2d2>
            softfloat_raiseFlags( softfloat_flag_invalid );
    8000b17e:	001867f3          	csrrsi	a5,fflags,16
    8000b182:	f8f43823          	sd	a5,-112(s0)
            uiZ = defaultNaNF32UI;
    8000b186:	7fc007b7          	lui	a5,0x7fc00
    8000b18a:	fcf43c23          	sd	a5,-40(s0)
            goto uiZ;
    8000b18e:	acb9                	j	8000b3ec <softfloat_subMagsF32+0x2ec>
        }
        sigDiff = sigA - sigB;
    8000b190:	fa843703          	ld	a4,-88(s0)
    8000b194:	f9843783          	ld	a5,-104(s0)
    8000b198:	40f707b3          	sub	a5,a4,a5
    8000b19c:	fcf43823          	sd	a5,-48(s0)
        if ( ! sigDiff ) {
    8000b1a0:	fd043783          	ld	a5,-48(s0)
    8000b1a4:	ef91                	bnez	a5,8000b1c0 <softfloat_subMagsF32+0xc0>
            uiZ =
                packToF32UI(
    8000b1a6:	8792                	mv	a5,tp
    8000b1a8:	2781                	sext.w	a5,a5
    8000b1aa:	873e                	mv	a4,a5
    8000b1ac:	4789                	li	a5,2
    8000b1ae:	00f71563          	bne	a4,a5,8000b1b8 <softfloat_subMagsF32+0xb8>
    8000b1b2:	4785                	li	a5,1
    8000b1b4:	07fe                	slli	a5,a5,0x1f
    8000b1b6:	a011                	j	8000b1ba <softfloat_subMagsF32+0xba>
    8000b1b8:	4781                	li	a5,0
            uiZ =
    8000b1ba:	fcf43c23          	sd	a5,-40(s0)
                    (softfloat_roundingMode == softfloat_round_min), 0, 0 );
            goto uiZ;
    8000b1be:	a43d                	j	8000b3ec <softfloat_subMagsF32+0x2ec>
        }
        if ( expA ) --expA;
    8000b1c0:	fe843783          	ld	a5,-24(s0)
    8000b1c4:	c791                	beqz	a5,8000b1d0 <softfloat_subMagsF32+0xd0>
    8000b1c6:	fe843783          	ld	a5,-24(s0)
    8000b1ca:	17fd                	addi	a5,a5,-1
    8000b1cc:	fef43423          	sd	a5,-24(s0)
        signZ = signF32UI( uiA );
    8000b1d0:	f7843783          	ld	a5,-136(s0)
    8000b1d4:	2781                	sext.w	a5,a5
    8000b1d6:	01f7d79b          	srliw	a5,a5,0x1f
    8000b1da:	fcf407a3          	sb	a5,-49(s0)
        if ( sigDiff < 0 ) {
    8000b1de:	fd043783          	ld	a5,-48(s0)
    8000b1e2:	0207db63          	bgez	a5,8000b218 <softfloat_subMagsF32+0x118>
            signZ = ! signZ;
    8000b1e6:	fcf44783          	lbu	a5,-49(s0)
    8000b1ea:	2781                	sext.w	a5,a5
    8000b1ec:	00f037b3          	snez	a5,a5
    8000b1f0:	0ff7f793          	andi	a5,a5,255
    8000b1f4:	0017c793          	xori	a5,a5,1
    8000b1f8:	0ff7f793          	andi	a5,a5,255
    8000b1fc:	2781                	sext.w	a5,a5
    8000b1fe:	fcf407a3          	sb	a5,-49(s0)
    8000b202:	fcf44783          	lbu	a5,-49(s0)
    8000b206:	8b85                	andi	a5,a5,1
    8000b208:	fcf407a3          	sb	a5,-49(s0)
            sigDiff = -sigDiff;
    8000b20c:	fd043783          	ld	a5,-48(s0)
    8000b210:	40f007b3          	neg	a5,a5
    8000b214:	fcf43823          	sd	a5,-48(s0)
        }
        shiftDist = softfloat_countLeadingZeros32( sigDiff ) - 8;
    8000b218:	fd043783          	ld	a5,-48(s0)
    8000b21c:	2781                	sext.w	a5,a5
    8000b21e:	853e                	mv	a0,a5
    8000b220:	6b8000ef          	jal	ra,8000b8d8 <softfloat_countLeadingZeros32>
    8000b224:	87aa                	mv	a5,a0
    8000b226:	37e1                	addiw	a5,a5,-8
    8000b228:	0ff7f793          	andi	a5,a5,255
    8000b22c:	fcf40723          	sb	a5,-50(s0)
        expZ = expA - shiftDist;
    8000b230:	fce40783          	lb	a5,-50(s0)
    8000b234:	fe843703          	ld	a4,-24(s0)
    8000b238:	40f707b3          	sub	a5,a4,a5
    8000b23c:	fcf43023          	sd	a5,-64(s0)
        if ( expZ < 0 ) {
    8000b240:	fc043783          	ld	a5,-64(s0)
    8000b244:	0007d863          	bgez	a5,8000b254 <softfloat_subMagsF32+0x154>
            shiftDist = expA;
    8000b248:	fe843783          	ld	a5,-24(s0)
    8000b24c:	fcf40723          	sb	a5,-50(s0)
            expZ = 0;
    8000b250:	fc043023          	sd	zero,-64(s0)
        }
        uiZ = packToF32UI( signZ, expZ, sigDiff<<shiftDist );
    8000b254:	fcf44783          	lbu	a5,-49(s0)
    8000b258:	2781                	sext.w	a5,a5
    8000b25a:	01f7979b          	slliw	a5,a5,0x1f
    8000b25e:	0007871b          	sext.w	a4,a5
    8000b262:	fc043783          	ld	a5,-64(s0)
    8000b266:	2781                	sext.w	a5,a5
    8000b268:	0177979b          	slliw	a5,a5,0x17
    8000b26c:	2781                	sext.w	a5,a5
    8000b26e:	9fb9                	addw	a5,a5,a4
    8000b270:	2781                	sext.w	a5,a5
    8000b272:	02079713          	slli	a4,a5,0x20
    8000b276:	9301                	srli	a4,a4,0x20
    8000b278:	fce40783          	lb	a5,-50(s0)
    8000b27c:	2781                	sext.w	a5,a5
    8000b27e:	fd043683          	ld	a3,-48(s0)
    8000b282:	00f697b3          	sll	a5,a3,a5
    8000b286:	97ba                	add	a5,a5,a4
    8000b288:	fcf43c23          	sd	a5,-40(s0)
        goto uiZ;
    8000b28c:	a285                	j	8000b3ec <softfloat_subMagsF32+0x2ec>
    } else {
        /*--------------------------------------------------------------------
        *--------------------------------------------------------------------*/
        signZ = signF32UI( uiA );
    8000b28e:	f7843783          	ld	a5,-136(s0)
    8000b292:	2781                	sext.w	a5,a5
    8000b294:	01f7d79b          	srliw	a5,a5,0x1f
    8000b298:	fcf407a3          	sb	a5,-49(s0)
        sigA <<= 7;
    8000b29c:	fa843783          	ld	a5,-88(s0)
    8000b2a0:	079e                	slli	a5,a5,0x7
    8000b2a2:	faf43423          	sd	a5,-88(s0)
        sigB <<= 7;
    8000b2a6:	f9843783          	ld	a5,-104(s0)
    8000b2aa:	079e                	slli	a5,a5,0x7
    8000b2ac:	f8f43c23          	sd	a5,-104(s0)
        if ( expDiff < 0 ) {
    8000b2b0:	fe043783          	ld	a5,-32(s0)
    8000b2b4:	0807de63          	bgez	a5,8000b350 <softfloat_subMagsF32+0x250>
            /*----------------------------------------------------------------
            *----------------------------------------------------------------*/
            signZ = ! signZ;
    8000b2b8:	fcf44783          	lbu	a5,-49(s0)
    8000b2bc:	2781                	sext.w	a5,a5
    8000b2be:	00f037b3          	snez	a5,a5
    8000b2c2:	0ff7f793          	andi	a5,a5,255
    8000b2c6:	0017c793          	xori	a5,a5,1
    8000b2ca:	0ff7f793          	andi	a5,a5,255
    8000b2ce:	2781                	sext.w	a5,a5
    8000b2d0:	fcf407a3          	sb	a5,-49(s0)
    8000b2d4:	fcf44783          	lbu	a5,-49(s0)
    8000b2d8:	8b85                	andi	a5,a5,1
    8000b2da:	fcf407a3          	sb	a5,-49(s0)
            if ( expB == 0xFF ) {
    8000b2de:	fa043703          	ld	a4,-96(s0)
    8000b2e2:	0ff00793          	li	a5,255
    8000b2e6:	02f71563          	bne	a4,a5,8000b310 <softfloat_subMagsF32+0x210>
                if ( sigB ) goto propagateNaN;
    8000b2ea:	f9843783          	ld	a5,-104(s0)
    8000b2ee:	e7e5                	bnez	a5,8000b3d6 <softfloat_subMagsF32+0x2d6>
                uiZ = packToF32UI( signZ, 0xFF, 0 );
    8000b2f0:	fcf44783          	lbu	a5,-49(s0)
    8000b2f4:	2781                	sext.w	a5,a5
    8000b2f6:	01f7979b          	slliw	a5,a5,0x1f
    8000b2fa:	0007871b          	sext.w	a4,a5
    8000b2fe:	7f8007b7          	lui	a5,0x7f800
    8000b302:	9fb9                	addw	a5,a5,a4
    8000b304:	2781                	sext.w	a5,a5
    8000b306:	1782                	slli	a5,a5,0x20
    8000b308:	9381                	srli	a5,a5,0x20
    8000b30a:	fcf43c23          	sd	a5,-40(s0)
                goto uiZ;
    8000b30e:	a8f9                	j	8000b3ec <softfloat_subMagsF32+0x2ec>
            }
            expZ = expB - 1;
    8000b310:	fa043783          	ld	a5,-96(s0)
    8000b314:	17fd                	addi	a5,a5,-1
    8000b316:	fcf43023          	sd	a5,-64(s0)
            sigX = sigB | 0x40000000;
    8000b31a:	f9843703          	ld	a4,-104(s0)
    8000b31e:	400007b7          	lui	a5,0x40000
    8000b322:	8fd9                	or	a5,a5,a4
    8000b324:	faf43c23          	sd	a5,-72(s0)
            sigY = sigA + (expA ? 0x40000000 : sigA);
    8000b328:	fe843783          	ld	a5,-24(s0)
    8000b32c:	e781                	bnez	a5,8000b334 <softfloat_subMagsF32+0x234>
    8000b32e:	fa843783          	ld	a5,-88(s0)
    8000b332:	a019                	j	8000b338 <softfloat_subMagsF32+0x238>
    8000b334:	400007b7          	lui	a5,0x40000
    8000b338:	fa843703          	ld	a4,-88(s0)
    8000b33c:	97ba                	add	a5,a5,a4
    8000b33e:	faf43823          	sd	a5,-80(s0)
            expDiff = -expDiff;
    8000b342:	fe043783          	ld	a5,-32(s0)
    8000b346:	40f007b3          	neg	a5,a5
    8000b34a:	fef43023          	sd	a5,-32(s0)
    8000b34e:	a881                	j	8000b39e <softfloat_subMagsF32+0x29e>
        } else {
            /*----------------------------------------------------------------
            *----------------------------------------------------------------*/
            if ( expA == 0xFF ) {
    8000b350:	fe843703          	ld	a4,-24(s0)
    8000b354:	0ff00793          	li	a5,255
    8000b358:	00f71a63          	bne	a4,a5,8000b36c <softfloat_subMagsF32+0x26c>
                if ( sigA ) goto propagateNaN;
    8000b35c:	fa843783          	ld	a5,-88(s0)
    8000b360:	efad                	bnez	a5,8000b3da <softfloat_subMagsF32+0x2da>
                uiZ = uiA;
    8000b362:	f7843783          	ld	a5,-136(s0)
    8000b366:	fcf43c23          	sd	a5,-40(s0)
                goto uiZ;
    8000b36a:	a049                	j	8000b3ec <softfloat_subMagsF32+0x2ec>
            }
            expZ = expA - 1;
    8000b36c:	fe843783          	ld	a5,-24(s0)
    8000b370:	17fd                	addi	a5,a5,-1
    8000b372:	fcf43023          	sd	a5,-64(s0)
            sigX = sigA | 0x40000000;
    8000b376:	fa843703          	ld	a4,-88(s0)
    8000b37a:	400007b7          	lui	a5,0x40000
    8000b37e:	8fd9                	or	a5,a5,a4
    8000b380:	faf43c23          	sd	a5,-72(s0)
            sigY = sigB + (expB ? 0x40000000 : sigB);
    8000b384:	fa043783          	ld	a5,-96(s0)
    8000b388:	e781                	bnez	a5,8000b390 <softfloat_subMagsF32+0x290>
    8000b38a:	f9843783          	ld	a5,-104(s0)
    8000b38e:	a019                	j	8000b394 <softfloat_subMagsF32+0x294>
    8000b390:	400007b7          	lui	a5,0x40000
    8000b394:	f9843703          	ld	a4,-104(s0)
    8000b398:	97ba                	add	a5,a5,a4
    8000b39a:	faf43823          	sd	a5,-80(s0)
        }
        return
            softfloat_normRoundPackToF32(
                signZ, expZ, sigX - softfloat_shiftRightJam32( sigY, expDiff )
    8000b39e:	fb043783          	ld	a5,-80(s0)
    8000b3a2:	2781                	sext.w	a5,a5
    8000b3a4:	fe043703          	ld	a4,-32(s0)
    8000b3a8:	85ba                	mv	a1,a4
    8000b3aa:	853e                	mv	a0,a5
    8000b3ac:	e98ff0ef          	jal	ra,8000aa44 <softfloat_shiftRightJam32>
    8000b3b0:	87aa                	mv	a5,a0
    8000b3b2:	2781                	sext.w	a5,a5
    8000b3b4:	1782                	slli	a5,a5,0x20
    8000b3b6:	9381                	srli	a5,a5,0x20
            softfloat_normRoundPackToF32(
    8000b3b8:	fb843703          	ld	a4,-72(s0)
    8000b3bc:	8f1d                	sub	a4,a4,a5
    8000b3be:	fcf44783          	lbu	a5,-49(s0)
    8000b3c2:	863a                	mv	a2,a4
    8000b3c4:	fc043583          	ld	a1,-64(s0)
    8000b3c8:	853e                	mv	a0,a5
    8000b3ca:	642000ef          	jal	ra,8000ba0c <softfloat_normRoundPackToF32>
    8000b3ce:	87aa                	mv	a5,a0
    8000b3d0:	a02d                	j	8000b3fa <softfloat_subMagsF32+0x2fa>
            if ( sigA | sigB ) goto propagateNaN;
    8000b3d2:	0001                	nop
    8000b3d4:	a021                	j	8000b3dc <softfloat_subMagsF32+0x2dc>
                if ( sigB ) goto propagateNaN;
    8000b3d6:	0001                	nop
    8000b3d8:	a011                	j	8000b3dc <softfloat_subMagsF32+0x2dc>
                if ( sigA ) goto propagateNaN;
    8000b3da:	0001                	nop
            );
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 propagateNaN:
    uiZ = softfloat_propagateNaNF32UI( uiA, uiB );
    8000b3dc:	f7043583          	ld	a1,-144(s0)
    8000b3e0:	f7843503          	ld	a0,-136(s0)
    8000b3e4:	366000ef          	jal	ra,8000b74a <softfloat_propagateNaNF32UI>
    8000b3e8:	fca43c23          	sd	a0,-40(s0)
 uiZ:
    uZ.ui = uiZ;
    8000b3ec:	fd843783          	ld	a5,-40(s0)
    8000b3f0:	2781                	sext.w	a5,a5
    8000b3f2:	f8f42423          	sw	a5,-120(s0)
    return uZ.f;
    8000b3f6:	f8842783          	lw	a5,-120(s0)

}
    8000b3fa:	853e                	mv	a0,a5
    8000b3fc:	60aa                	ld	ra,136(sp)
    8000b3fe:	640a                	ld	s0,128(sp)
    8000b400:	6149                	addi	sp,sp,144
    8000b402:	8082                	ret

000000008000b404 <softfloat_subMagsF64>:
#include "specialize.h"
#include "softfloat.h"

float64_t
 softfloat_subMagsF64( uint_fast64_t uiA, uint_fast64_t uiB, bool signZ )
{
    8000b404:	7175                	addi	sp,sp,-144
    8000b406:	e506                	sd	ra,136(sp)
    8000b408:	e122                	sd	s0,128(sp)
    8000b40a:	0900                	addi	s0,sp,144
    8000b40c:	f8a43423          	sd	a0,-120(s0)
    8000b410:	f8b43023          	sd	a1,-128(s0)
    8000b414:	87b2                	mv	a5,a2
    8000b416:	f6f40fa3          	sb	a5,-129(s0)
    uint_fast64_t sigZ;
    union ui64_f64 uZ;

    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    expA = expF64UI( uiA );
    8000b41a:	f8843783          	ld	a5,-120(s0)
    8000b41e:	93d1                	srli	a5,a5,0x34
    8000b420:	7ff7f793          	andi	a5,a5,2047
    8000b424:	fef43423          	sd	a5,-24(s0)
    sigA = fracF64UI( uiA );
    8000b428:	f8843703          	ld	a4,-120(s0)
    8000b42c:	57fd                	li	a5,-1
    8000b42e:	83b1                	srli	a5,a5,0xc
    8000b430:	8ff9                	and	a5,a5,a4
    8000b432:	faf43c23          	sd	a5,-72(s0)
    expB = expF64UI( uiB );
    8000b436:	f8043783          	ld	a5,-128(s0)
    8000b43a:	93d1                	srli	a5,a5,0x34
    8000b43c:	7ff7f793          	andi	a5,a5,2047
    8000b440:	faf43823          	sd	a5,-80(s0)
    sigB = fracF64UI( uiB );
    8000b444:	f8043703          	ld	a4,-128(s0)
    8000b448:	57fd                	li	a5,-1
    8000b44a:	83b1                	srli	a5,a5,0xc
    8000b44c:	8ff9                	and	a5,a5,a4
    8000b44e:	faf43423          	sd	a5,-88(s0)
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
    expDiff = expA - expB;
    8000b452:	fe843703          	ld	a4,-24(s0)
    8000b456:	fb043783          	ld	a5,-80(s0)
    8000b45a:	40f707b3          	sub	a5,a4,a5
    8000b45e:	faf43023          	sd	a5,-96(s0)
    if ( ! expDiff ) {
    8000b462:	fa043783          	ld	a5,-96(s0)
    8000b466:	10079663          	bnez	a5,8000b572 <softfloat_subMagsF64+0x16e>
        /*--------------------------------------------------------------------
        *--------------------------------------------------------------------*/
        if ( expA == 0x7FF ) {
    8000b46a:	fe843703          	ld	a4,-24(s0)
    8000b46e:	7ff00793          	li	a5,2047
    8000b472:	02f71363          	bne	a4,a5,8000b498 <softfloat_subMagsF64+0x94>
            if ( sigA | sigB ) goto propagateNaN;
    8000b476:	fb843703          	ld	a4,-72(s0)
    8000b47a:	fa843783          	ld	a5,-88(s0)
    8000b47e:	8fd9                	or	a5,a5,a4
    8000b480:	24079063          	bnez	a5,8000b6c0 <softfloat_subMagsF64+0x2bc>
            softfloat_raiseFlags( softfloat_flag_invalid );
    8000b484:	001867f3          	csrrsi	a5,fflags,16
    8000b488:	f8f43c23          	sd	a5,-104(s0)
            uiZ = defaultNaNF64UI;
    8000b48c:	00fff7b7          	lui	a5,0xfff
    8000b490:	179e                	slli	a5,a5,0x27
    8000b492:	fef43023          	sd	a5,-32(s0)
            goto uiZ;
    8000b496:	a491                	j	8000b6da <softfloat_subMagsF64+0x2d6>
        }
        sigDiff = sigA - sigB;
    8000b498:	fb843703          	ld	a4,-72(s0)
    8000b49c:	fa843783          	ld	a5,-88(s0)
    8000b4a0:	40f707b3          	sub	a5,a4,a5
    8000b4a4:	fcf43c23          	sd	a5,-40(s0)
        if ( ! sigDiff ) {
    8000b4a8:	fd843783          	ld	a5,-40(s0)
    8000b4ac:	ef91                	bnez	a5,8000b4c8 <softfloat_subMagsF64+0xc4>
            uiZ =
                packToF64UI(
    8000b4ae:	8792                	mv	a5,tp
    8000b4b0:	2781                	sext.w	a5,a5
    8000b4b2:	873e                	mv	a4,a5
    8000b4b4:	4789                	li	a5,2
    8000b4b6:	00f71563          	bne	a4,a5,8000b4c0 <softfloat_subMagsF64+0xbc>
    8000b4ba:	57fd                	li	a5,-1
    8000b4bc:	17fe                	slli	a5,a5,0x3f
    8000b4be:	a011                	j	8000b4c2 <softfloat_subMagsF64+0xbe>
    8000b4c0:	4781                	li	a5,0
            uiZ =
    8000b4c2:	fef43023          	sd	a5,-32(s0)
                    (softfloat_roundingMode == softfloat_round_min), 0, 0 );
            goto uiZ;
    8000b4c6:	ac11                	j	8000b6da <softfloat_subMagsF64+0x2d6>
        }
        if ( expA ) --expA;
    8000b4c8:	fe843783          	ld	a5,-24(s0)
    8000b4cc:	c791                	beqz	a5,8000b4d8 <softfloat_subMagsF64+0xd4>
    8000b4ce:	fe843783          	ld	a5,-24(s0)
    8000b4d2:	17fd                	addi	a5,a5,-1
    8000b4d4:	fef43423          	sd	a5,-24(s0)
        if ( sigDiff < 0 ) {
    8000b4d8:	fd843783          	ld	a5,-40(s0)
    8000b4dc:	0207db63          	bgez	a5,8000b512 <softfloat_subMagsF64+0x10e>
            signZ = ! signZ;
    8000b4e0:	f7f44783          	lbu	a5,-129(s0)
    8000b4e4:	2781                	sext.w	a5,a5
    8000b4e6:	00f037b3          	snez	a5,a5
    8000b4ea:	0ff7f793          	andi	a5,a5,255
    8000b4ee:	0017c793          	xori	a5,a5,1
    8000b4f2:	0ff7f793          	andi	a5,a5,255
    8000b4f6:	2781                	sext.w	a5,a5
    8000b4f8:	f6f40fa3          	sb	a5,-129(s0)
    8000b4fc:	f7f44783          	lbu	a5,-129(s0)
    8000b500:	8b85                	andi	a5,a5,1
    8000b502:	f6f40fa3          	sb	a5,-129(s0)
            sigDiff = -sigDiff;
    8000b506:	fd843783          	ld	a5,-40(s0)
    8000b50a:	40f007b3          	neg	a5,a5
    8000b50e:	fcf43c23          	sd	a5,-40(s0)
        }
        shiftDist = softfloat_countLeadingZeros64( sigDiff ) - 11;
    8000b512:	fd843783          	ld	a5,-40(s0)
    8000b516:	853e                	mv	a0,a5
    8000b518:	448000ef          	jal	ra,8000b960 <softfloat_countLeadingZeros64>
    8000b51c:	87aa                	mv	a5,a0
    8000b51e:	37d5                	addiw	a5,a5,-11
    8000b520:	0ff7f793          	andi	a5,a5,255
    8000b524:	fcf40ba3          	sb	a5,-41(s0)
        expZ = expA - shiftDist;
    8000b528:	fd740783          	lb	a5,-41(s0)
    8000b52c:	fe843703          	ld	a4,-24(s0)
    8000b530:	40f707b3          	sub	a5,a4,a5
    8000b534:	fcf43423          	sd	a5,-56(s0)
        if ( expZ < 0 ) {
    8000b538:	fc843783          	ld	a5,-56(s0)
    8000b53c:	0007d863          	bgez	a5,8000b54c <softfloat_subMagsF64+0x148>
            shiftDist = expA;
    8000b540:	fe843783          	ld	a5,-24(s0)
    8000b544:	fcf40ba3          	sb	a5,-41(s0)
            expZ = 0;
    8000b548:	fc043423          	sd	zero,-56(s0)
        }
        uiZ = packToF64UI( signZ, expZ, sigDiff<<shiftDist );
    8000b54c:	f7f44783          	lbu	a5,-129(s0)
    8000b550:	03f79713          	slli	a4,a5,0x3f
    8000b554:	fc843783          	ld	a5,-56(s0)
    8000b558:	17d2                	slli	a5,a5,0x34
    8000b55a:	97ba                	add	a5,a5,a4
    8000b55c:	fd740703          	lb	a4,-41(s0)
    8000b560:	2701                	sext.w	a4,a4
    8000b562:	fd843683          	ld	a3,-40(s0)
    8000b566:	00e69733          	sll	a4,a3,a4
    8000b56a:	97ba                	add	a5,a5,a4
    8000b56c:	fef43023          	sd	a5,-32(s0)
        goto uiZ;
    8000b570:	a2ad                	j	8000b6da <softfloat_subMagsF64+0x2d6>
    } else {
        /*--------------------------------------------------------------------
        *--------------------------------------------------------------------*/
        sigA <<= 10;
    8000b572:	fb843783          	ld	a5,-72(s0)
    8000b576:	07aa                	slli	a5,a5,0xa
    8000b578:	faf43c23          	sd	a5,-72(s0)
        sigB <<= 10;
    8000b57c:	fa843783          	ld	a5,-88(s0)
    8000b580:	07aa                	slli	a5,a5,0xa
    8000b582:	faf43423          	sd	a5,-88(s0)
        if ( expDiff < 0 ) {
    8000b586:	fa043783          	ld	a5,-96(s0)
    8000b58a:	0a07d663          	bgez	a5,8000b636 <softfloat_subMagsF64+0x232>
            /*----------------------------------------------------------------
            *----------------------------------------------------------------*/
            signZ = ! signZ;
    8000b58e:	f7f44783          	lbu	a5,-129(s0)
    8000b592:	2781                	sext.w	a5,a5
    8000b594:	00f037b3          	snez	a5,a5
    8000b598:	0ff7f793          	andi	a5,a5,255
    8000b59c:	0017c793          	xori	a5,a5,1
    8000b5a0:	0ff7f793          	andi	a5,a5,255
    8000b5a4:	2781                	sext.w	a5,a5
    8000b5a6:	f6f40fa3          	sb	a5,-129(s0)
    8000b5aa:	f7f44783          	lbu	a5,-129(s0)
    8000b5ae:	8b85                	andi	a5,a5,1
    8000b5b0:	f6f40fa3          	sb	a5,-129(s0)
            if ( expB == 0x7FF ) {
    8000b5b4:	fb043703          	ld	a4,-80(s0)
    8000b5b8:	7ff00793          	li	a5,2047
    8000b5bc:	02f71163          	bne	a4,a5,8000b5de <softfloat_subMagsF64+0x1da>
                if ( sigB ) goto propagateNaN;
    8000b5c0:	fa843783          	ld	a5,-88(s0)
    8000b5c4:	10079063          	bnez	a5,8000b6c4 <softfloat_subMagsF64+0x2c0>
                uiZ = packToF64UI( signZ, 0x7FF, 0 );
    8000b5c8:	f7f44783          	lbu	a5,-129(s0)
    8000b5cc:	03f79713          	slli	a4,a5,0x3f
    8000b5d0:	7ff00793          	li	a5,2047
    8000b5d4:	17d2                	slli	a5,a5,0x34
    8000b5d6:	97ba                	add	a5,a5,a4
    8000b5d8:	fef43023          	sd	a5,-32(s0)
                goto uiZ;
    8000b5dc:	a8fd                	j	8000b6da <softfloat_subMagsF64+0x2d6>
            }
            sigA += expA ? UINT64_C( 0x4000000000000000 ) : sigA;
    8000b5de:	fe843783          	ld	a5,-24(s0)
    8000b5e2:	e781                	bnez	a5,8000b5ea <softfloat_subMagsF64+0x1e6>
    8000b5e4:	fb843783          	ld	a5,-72(s0)
    8000b5e8:	a019                	j	8000b5ee <softfloat_subMagsF64+0x1ea>
    8000b5ea:	4785                	li	a5,1
    8000b5ec:	17fa                	slli	a5,a5,0x3e
    8000b5ee:	fb843703          	ld	a4,-72(s0)
    8000b5f2:	97ba                	add	a5,a5,a4
    8000b5f4:	faf43c23          	sd	a5,-72(s0)
            sigA = softfloat_shiftRightJam64( sigA, -expDiff );
    8000b5f8:	fa043783          	ld	a5,-96(s0)
    8000b5fc:	40f007b3          	neg	a5,a5
    8000b600:	85be                	mv	a1,a5
    8000b602:	fb843503          	ld	a0,-72(s0)
    8000b606:	cb4ff0ef          	jal	ra,8000aaba <softfloat_shiftRightJam64>
    8000b60a:	faa43c23          	sd	a0,-72(s0)
            sigB |= UINT64_C( 0x4000000000000000 );
    8000b60e:	fa843703          	ld	a4,-88(s0)
    8000b612:	4785                	li	a5,1
    8000b614:	17fa                	slli	a5,a5,0x3e
    8000b616:	8fd9                	or	a5,a5,a4
    8000b618:	faf43423          	sd	a5,-88(s0)
            expZ = expB;
    8000b61c:	fb043783          	ld	a5,-80(s0)
    8000b620:	fcf43423          	sd	a5,-56(s0)
            sigZ = sigB - sigA;
    8000b624:	fa843703          	ld	a4,-88(s0)
    8000b628:	fb843783          	ld	a5,-72(s0)
    8000b62c:	40f707b3          	sub	a5,a4,a5
    8000b630:	fcf43023          	sd	a5,-64(s0)
    8000b634:	a885                	j	8000b6a4 <softfloat_subMagsF64+0x2a0>
        } else {
            /*----------------------------------------------------------------
            *----------------------------------------------------------------*/
            if ( expA == 0x7FF ) {
    8000b636:	fe843703          	ld	a4,-24(s0)
    8000b63a:	7ff00793          	li	a5,2047
    8000b63e:	00f71a63          	bne	a4,a5,8000b652 <softfloat_subMagsF64+0x24e>
                if ( sigA ) goto propagateNaN;
    8000b642:	fb843783          	ld	a5,-72(s0)
    8000b646:	e3c9                	bnez	a5,8000b6c8 <softfloat_subMagsF64+0x2c4>
                uiZ = uiA;
    8000b648:	f8843783          	ld	a5,-120(s0)
    8000b64c:	fef43023          	sd	a5,-32(s0)
                goto uiZ;
    8000b650:	a069                	j	8000b6da <softfloat_subMagsF64+0x2d6>
            }
            sigB += expB ? UINT64_C( 0x4000000000000000 ) : sigB;
    8000b652:	fb043783          	ld	a5,-80(s0)
    8000b656:	e781                	bnez	a5,8000b65e <softfloat_subMagsF64+0x25a>
    8000b658:	fa843783          	ld	a5,-88(s0)
    8000b65c:	a019                	j	8000b662 <softfloat_subMagsF64+0x25e>
    8000b65e:	4785                	li	a5,1
    8000b660:	17fa                	slli	a5,a5,0x3e
    8000b662:	fa843703          	ld	a4,-88(s0)
    8000b666:	97ba                	add	a5,a5,a4
    8000b668:	faf43423          	sd	a5,-88(s0)
            sigB = softfloat_shiftRightJam64( sigB, expDiff );
    8000b66c:	fa043783          	ld	a5,-96(s0)
    8000b670:	85be                	mv	a1,a5
    8000b672:	fa843503          	ld	a0,-88(s0)
    8000b676:	c44ff0ef          	jal	ra,8000aaba <softfloat_shiftRightJam64>
    8000b67a:	faa43423          	sd	a0,-88(s0)
            sigA |= UINT64_C( 0x4000000000000000 );
    8000b67e:	fb843703          	ld	a4,-72(s0)
    8000b682:	4785                	li	a5,1
    8000b684:	17fa                	slli	a5,a5,0x3e
    8000b686:	8fd9                	or	a5,a5,a4
    8000b688:	faf43c23          	sd	a5,-72(s0)
            expZ = expA;
    8000b68c:	fe843783          	ld	a5,-24(s0)
    8000b690:	fcf43423          	sd	a5,-56(s0)
            sigZ = sigA - sigB;
    8000b694:	fb843703          	ld	a4,-72(s0)
    8000b698:	fa843783          	ld	a5,-88(s0)
    8000b69c:	40f707b3          	sub	a5,a4,a5
    8000b6a0:	fcf43023          	sd	a5,-64(s0)
        }
        return softfloat_normRoundPackToF64( signZ, expZ - 1, sigZ );
    8000b6a4:	fc843783          	ld	a5,-56(s0)
    8000b6a8:	fff78713          	addi	a4,a5,-1 # ffefff <MEM_START-0x7f001001>
    8000b6ac:	f7f44783          	lbu	a5,-129(s0)
    8000b6b0:	fc043603          	ld	a2,-64(s0)
    8000b6b4:	85ba                	mv	a1,a4
    8000b6b6:	853e                	mv	a0,a5
    8000b6b8:	42e000ef          	jal	ra,8000bae6 <softfloat_normRoundPackToF64>
    8000b6bc:	87aa                	mv	a5,a0
    8000b6be:	a025                	j	8000b6e6 <softfloat_subMagsF64+0x2e2>
            if ( sigA | sigB ) goto propagateNaN;
    8000b6c0:	0001                	nop
    8000b6c2:	a021                	j	8000b6ca <softfloat_subMagsF64+0x2c6>
                if ( sigB ) goto propagateNaN;
    8000b6c4:	0001                	nop
    8000b6c6:	a011                	j	8000b6ca <softfloat_subMagsF64+0x2c6>
                if ( sigA ) goto propagateNaN;
    8000b6c8:	0001                	nop
    }
    /*------------------------------------------------------------------------
    *------------------------------------------------------------------------*/
 propagateNaN:
    uiZ = softfloat_propagateNaNF64UI( uiA, uiB );
    8000b6ca:	f8043583          	ld	a1,-128(s0)
    8000b6ce:	f8843503          	ld	a0,-120(s0)
    8000b6d2:	0da000ef          	jal	ra,8000b7ac <softfloat_propagateNaNF64UI>
    8000b6d6:	fea43023          	sd	a0,-32(s0)
 uiZ:
    uZ.ui = uiZ;
    8000b6da:	fe043783          	ld	a5,-32(s0)
    8000b6de:	f8f43823          	sd	a5,-112(s0)
    return uZ.f;
    8000b6e2:	f9043783          	ld	a5,-112(s0)

}
    8000b6e6:	853e                	mv	a0,a5
    8000b6e8:	60aa                	ld	ra,136(sp)
    8000b6ea:	640a                	ld	s0,128(sp)
    8000b6ec:	6149                	addi	sp,sp,144
    8000b6ee:	8082                	ret

000000008000b6f0 <ui64_to_f64>:
#include "platform.h"
#include "internals.h"
#include "softfloat.h"

float64_t ui64_to_f64( uint64_t a )
{
    8000b6f0:	7179                	addi	sp,sp,-48
    8000b6f2:	f406                	sd	ra,40(sp)
    8000b6f4:	f022                	sd	s0,32(sp)
    8000b6f6:	1800                	addi	s0,sp,48
    8000b6f8:	fca43c23          	sd	a0,-40(s0)
    union ui64_f64 uZ;

    if ( ! a ) {
    8000b6fc:	fd843783          	ld	a5,-40(s0)
    8000b700:	e791                	bnez	a5,8000b70c <ui64_to_f64+0x1c>
        uZ.ui = 0;
    8000b702:	fe043423          	sd	zero,-24(s0)
        return uZ.f;
    8000b706:	fe843783          	ld	a5,-24(s0)
    8000b70a:	a81d                	j	8000b740 <ui64_to_f64+0x50>
    }
    if ( a & UINT64_C( 0x8000000000000000 ) ) {
    8000b70c:	fd843783          	ld	a5,-40(s0)
    8000b710:	0207d063          	bgez	a5,8000b730 <ui64_to_f64+0x40>
        return
            softfloat_roundPackToF64(
    8000b714:	4585                	li	a1,1
    8000b716:	fd843503          	ld	a0,-40(s0)
    8000b71a:	fa0ff0ef          	jal	ra,8000aeba <softfloat_shortShiftRightJam64>
    8000b71e:	87aa                	mv	a5,a0
    8000b720:	863e                	mv	a2,a5
    8000b722:	43d00593          	li	a1,1085
    8000b726:	4501                	li	a0,0
    8000b728:	ffdfe0ef          	jal	ra,8000a724 <softfloat_roundPackToF64>
    8000b72c:	87aa                	mv	a5,a0
    8000b72e:	a809                	j	8000b740 <ui64_to_f64+0x50>
                0, 0x43D, softfloat_shortShiftRightJam64( a, 1 ) );
    } else {
        return softfloat_normRoundPackToF64( 0, 0x43C, a );
    8000b730:	fd843603          	ld	a2,-40(s0)
    8000b734:	43c00593          	li	a1,1084
    8000b738:	4501                	li	a0,0
    8000b73a:	3ac000ef          	jal	ra,8000bae6 <softfloat_normRoundPackToF64>
    8000b73e:	87aa                	mv	a5,a0
    }

}
    8000b740:	853e                	mv	a0,a5
    8000b742:	70a2                	ld	ra,40(sp)
    8000b744:	7402                	ld	s0,32(sp)
    8000b746:	6145                	addi	sp,sp,48
    8000b748:	8082                	ret

000000008000b74a <softfloat_propagateNaNF32UI>:
| the combined NaN result.  If either `uiA' or `uiB' has the pattern of a
| signaling NaN, the invalid exception is raised.
*----------------------------------------------------------------------------*/
uint_fast32_t
 softfloat_propagateNaNF32UI( uint_fast32_t uiA, uint_fast32_t uiB )
{
    8000b74a:	7179                	addi	sp,sp,-48
    8000b74c:	f422                	sd	s0,40(sp)
    8000b74e:	1800                	addi	s0,sp,48
    8000b750:	fca43c23          	sd	a0,-40(s0)
    8000b754:	fcb43823          	sd	a1,-48(s0)

    if ( softfloat_isSigNaNF32UI( uiA ) || softfloat_isSigNaNF32UI( uiB ) ) {
    8000b758:	fd843703          	ld	a4,-40(s0)
    8000b75c:	7fc007b7          	lui	a5,0x7fc00
    8000b760:	8f7d                	and	a4,a4,a5
    8000b762:	7f8007b7          	lui	a5,0x7f800
    8000b766:	00f71963          	bne	a4,a5,8000b778 <softfloat_propagateNaNF32UI+0x2e>
    8000b76a:	fd843703          	ld	a4,-40(s0)
    8000b76e:	004007b7          	lui	a5,0x400
    8000b772:	17fd                	addi	a5,a5,-1
    8000b774:	8ff9                	and	a5,a5,a4
    8000b776:	e38d                	bnez	a5,8000b798 <softfloat_propagateNaNF32UI+0x4e>
    8000b778:	fd043703          	ld	a4,-48(s0)
    8000b77c:	7fc007b7          	lui	a5,0x7fc00
    8000b780:	8f7d                	and	a4,a4,a5
    8000b782:	7f8007b7          	lui	a5,0x7f800
    8000b786:	00f71d63          	bne	a4,a5,8000b7a0 <softfloat_propagateNaNF32UI+0x56>
    8000b78a:	fd043703          	ld	a4,-48(s0)
    8000b78e:	004007b7          	lui	a5,0x400
    8000b792:	17fd                	addi	a5,a5,-1
    8000b794:	8ff9                	and	a5,a5,a4
    8000b796:	c789                	beqz	a5,8000b7a0 <softfloat_propagateNaNF32UI+0x56>
        softfloat_raiseFlags( softfloat_flag_invalid );
    8000b798:	001867f3          	csrrsi	a5,fflags,16
    8000b79c:	fef43423          	sd	a5,-24(s0)
    }
    return defaultNaNF32UI;
    8000b7a0:	7fc007b7          	lui	a5,0x7fc00

}
    8000b7a4:	853e                	mv	a0,a5
    8000b7a6:	7422                	ld	s0,40(sp)
    8000b7a8:	6145                	addi	sp,sp,48
    8000b7aa:	8082                	ret

000000008000b7ac <softfloat_propagateNaNF64UI>:
| the combined NaN result.  If either `uiA' or `uiB' has the pattern of a
| signaling NaN, the invalid exception is raised.
*----------------------------------------------------------------------------*/
uint_fast64_t
 softfloat_propagateNaNF64UI( uint_fast64_t uiA, uint_fast64_t uiB )
{
    8000b7ac:	7179                	addi	sp,sp,-48
    8000b7ae:	f422                	sd	s0,40(sp)
    8000b7b0:	1800                	addi	s0,sp,48
    8000b7b2:	fca43c23          	sd	a0,-40(s0)
    8000b7b6:	fcb43823          	sd	a1,-48(s0)

    if ( softfloat_isSigNaNF64UI( uiA ) || softfloat_isSigNaNF64UI( uiB ) ) {
    8000b7ba:	fd843703          	ld	a4,-40(s0)
    8000b7be:	00fff7b7          	lui	a5,0xfff
    8000b7c2:	179e                	slli	a5,a5,0x27
    8000b7c4:	8f7d                	and	a4,a4,a5
    8000b7c6:	7ff00793          	li	a5,2047
    8000b7ca:	17d2                	slli	a5,a5,0x34
    8000b7cc:	00f71863          	bne	a4,a5,8000b7dc <softfloat_propagateNaNF64UI+0x30>
    8000b7d0:	fd843703          	ld	a4,-40(s0)
    8000b7d4:	57fd                	li	a5,-1
    8000b7d6:	83b5                	srli	a5,a5,0xd
    8000b7d8:	8ff9                	and	a5,a5,a4
    8000b7da:	e395                	bnez	a5,8000b7fe <softfloat_propagateNaNF64UI+0x52>
    8000b7dc:	fd043703          	ld	a4,-48(s0)
    8000b7e0:	00fff7b7          	lui	a5,0xfff
    8000b7e4:	179e                	slli	a5,a5,0x27
    8000b7e6:	8f7d                	and	a4,a4,a5
    8000b7e8:	7ff00793          	li	a5,2047
    8000b7ec:	17d2                	slli	a5,a5,0x34
    8000b7ee:	00f71c63          	bne	a4,a5,8000b806 <softfloat_propagateNaNF64UI+0x5a>
    8000b7f2:	fd043703          	ld	a4,-48(s0)
    8000b7f6:	57fd                	li	a5,-1
    8000b7f8:	83b5                	srli	a5,a5,0xd
    8000b7fa:	8ff9                	and	a5,a5,a4
    8000b7fc:	c789                	beqz	a5,8000b806 <softfloat_propagateNaNF64UI+0x5a>
        softfloat_raiseFlags( softfloat_flag_invalid );
    8000b7fe:	001867f3          	csrrsi	a5,fflags,16
    8000b802:	fef43423          	sd	a5,-24(s0)
    }
    return defaultNaNF64UI;
    8000b806:	00fff7b7          	lui	a5,0xfff
    8000b80a:	179e                	slli	a5,a5,0x27

}
    8000b80c:	853e                	mv	a0,a5
    8000b80e:	7422                	ld	s0,40(sp)
    8000b810:	6145                	addi	sp,sp,48
    8000b812:	8082                	ret

000000008000b814 <softfloat_addM>:
     uint_fast8_t size_words,
     const uint32_t *aPtr,
     const uint32_t *bPtr,
     uint32_t *zPtr
 )
{
    8000b814:	715d                	addi	sp,sp,-80
    8000b816:	e4a2                	sd	s0,72(sp)
    8000b818:	0880                	addi	s0,sp,80
    8000b81a:	87aa                	mv	a5,a0
    8000b81c:	fcb43023          	sd	a1,-64(s0)
    8000b820:	fac43c23          	sd	a2,-72(s0)
    8000b824:	fad43823          	sd	a3,-80(s0)
    8000b828:	fcf407a3          	sb	a5,-49(s0)
    unsigned int index, lastIndex;
    uint_fast8_t carry;
    uint32_t wordA, wordZ;

    index = indexWordLo( size_words );
    8000b82c:	fe042623          	sw	zero,-20(s0)
    lastIndex = indexWordHi( size_words );
    8000b830:	fcf44783          	lbu	a5,-49(s0)
    8000b834:	2781                	sext.w	a5,a5
    8000b836:	37fd                	addiw	a5,a5,-1
    8000b838:	2781                	sext.w	a5,a5
    8000b83a:	fef42223          	sw	a5,-28(s0)
    carry = 0;
    8000b83e:	fe0405a3          	sb	zero,-21(s0)
    for (;;) {
        wordA = aPtr[index];
    8000b842:	fec46783          	lwu	a5,-20(s0)
    8000b846:	078a                	slli	a5,a5,0x2
    8000b848:	fc043703          	ld	a4,-64(s0)
    8000b84c:	97ba                	add	a5,a5,a4
    8000b84e:	439c                	lw	a5,0(a5)
    8000b850:	fef42023          	sw	a5,-32(s0)
        wordZ = wordA + bPtr[index] + carry;
    8000b854:	fec46783          	lwu	a5,-20(s0)
    8000b858:	078a                	slli	a5,a5,0x2
    8000b85a:	fb843703          	ld	a4,-72(s0)
    8000b85e:	97ba                	add	a5,a5,a4
    8000b860:	439c                	lw	a5,0(a5)
    8000b862:	fe042703          	lw	a4,-32(s0)
    8000b866:	9fb9                	addw	a5,a5,a4
    8000b868:	0007871b          	sext.w	a4,a5
    8000b86c:	feb44783          	lbu	a5,-21(s0)
    8000b870:	2781                	sext.w	a5,a5
    8000b872:	9fb9                	addw	a5,a5,a4
    8000b874:	fcf42e23          	sw	a5,-36(s0)
        zPtr[index] = wordZ;
    8000b878:	fec46783          	lwu	a5,-20(s0)
    8000b87c:	078a                	slli	a5,a5,0x2
    8000b87e:	fb043703          	ld	a4,-80(s0)
    8000b882:	97ba                	add	a5,a5,a4
    8000b884:	fdc42703          	lw	a4,-36(s0)
    8000b888:	c398                	sw	a4,0(a5)
        if ( index == lastIndex ) break;
    8000b88a:	fec42703          	lw	a4,-20(s0)
    8000b88e:	fe442783          	lw	a5,-28(s0)
    8000b892:	2701                	sext.w	a4,a4
    8000b894:	2781                	sext.w	a5,a5
    8000b896:	02f70c63          	beq	a4,a5,8000b8ce <softfloat_addM+0xba>
        if ( wordZ != wordA ) carry = (wordZ < wordA);
    8000b89a:	fdc42703          	lw	a4,-36(s0)
    8000b89e:	fe042783          	lw	a5,-32(s0)
    8000b8a2:	2701                	sext.w	a4,a4
    8000b8a4:	2781                	sext.w	a5,a5
    8000b8a6:	00f70e63          	beq	a4,a5,8000b8c2 <softfloat_addM+0xae>
    8000b8aa:	fdc42703          	lw	a4,-36(s0)
    8000b8ae:	fe042783          	lw	a5,-32(s0)
    8000b8b2:	2701                	sext.w	a4,a4
    8000b8b4:	2781                	sext.w	a5,a5
    8000b8b6:	00f737b3          	sltu	a5,a4,a5
    8000b8ba:	0ff7f793          	andi	a5,a5,255
    8000b8be:	fef405a3          	sb	a5,-21(s0)
        index += wordIncr;
    8000b8c2:	fec42783          	lw	a5,-20(s0)
    8000b8c6:	2785                	addiw	a5,a5,1
    8000b8c8:	fef42623          	sw	a5,-20(s0)
        wordA = aPtr[index];
    8000b8cc:	bf9d                	j	8000b842 <softfloat_addM+0x2e>
        if ( index == lastIndex ) break;
    8000b8ce:	0001                	nop
    }

}
    8000b8d0:	0001                	nop
    8000b8d2:	6426                	ld	s0,72(sp)
    8000b8d4:	6161                	addi	sp,sp,80
    8000b8d6:	8082                	ret

000000008000b8d8 <softfloat_countLeadingZeros32>:

#define softfloat_countLeadingZeros32 softfloat_countLeadingZeros32
#include "primitives.h"

uint_fast8_t softfloat_countLeadingZeros32( uint32_t a )
{
    8000b8d8:	7179                	addi	sp,sp,-48
    8000b8da:	f422                	sd	s0,40(sp)
    8000b8dc:	1800                	addi	s0,sp,48
    8000b8de:	87aa                	mv	a5,a0
    8000b8e0:	fcf42e23          	sw	a5,-36(s0)
    uint_fast8_t count;

    count = 0;
    8000b8e4:	fe0407a3          	sb	zero,-17(s0)
    if ( a < 0x10000 ) {
    8000b8e8:	fdc42783          	lw	a5,-36(s0)
    8000b8ec:	0007871b          	sext.w	a4,a5
    8000b8f0:	67c1                	lui	a5,0x10
    8000b8f2:	00f77b63          	bleu	a5,a4,8000b908 <softfloat_countLeadingZeros32+0x30>
        count = 16;
    8000b8f6:	47c1                	li	a5,16
    8000b8f8:	fef407a3          	sb	a5,-17(s0)
        a <<= 16;
    8000b8fc:	fdc42783          	lw	a5,-36(s0)
    8000b900:	0107979b          	slliw	a5,a5,0x10
    8000b904:	fcf42e23          	sw	a5,-36(s0)
    }
    if ( a < 0x1000000 ) {
    8000b908:	fdc42783          	lw	a5,-36(s0)
    8000b90c:	0007871b          	sext.w	a4,a5
    8000b910:	010007b7          	lui	a5,0x1000
    8000b914:	00f77d63          	bleu	a5,a4,8000b92e <softfloat_countLeadingZeros32+0x56>
        count += 8;
    8000b918:	fef44783          	lbu	a5,-17(s0)
    8000b91c:	27a1                	addiw	a5,a5,8
    8000b91e:	fef407a3          	sb	a5,-17(s0)
        a <<= 8;
    8000b922:	fdc42783          	lw	a5,-36(s0)
    8000b926:	0087979b          	slliw	a5,a5,0x8
    8000b92a:	fcf42e23          	sw	a5,-36(s0)
    }
    count += softfloat_countLeadingZeros8[a>>24];
    8000b92e:	fdc42783          	lw	a5,-36(s0)
    8000b932:	0187d79b          	srliw	a5,a5,0x18
    8000b936:	2781                	sext.w	a5,a5
    8000b938:	00001717          	auipc	a4,0x1
    8000b93c:	7e870713          	addi	a4,a4,2024 # 8000d120 <softfloat_countLeadingZeros8>
    8000b940:	1782                	slli	a5,a5,0x20
    8000b942:	9381                	srli	a5,a5,0x20
    8000b944:	97ba                	add	a5,a5,a4
    8000b946:	0007c783          	lbu	a5,0(a5) # 1000000 <MEM_START-0x7f000000>
    8000b94a:	fef44703          	lbu	a4,-17(s0)
    8000b94e:	9fb9                	addw	a5,a5,a4
    8000b950:	fef407a3          	sb	a5,-17(s0)
    return count;
    8000b954:	fef44783          	lbu	a5,-17(s0)

}
    8000b958:	853e                	mv	a0,a5
    8000b95a:	7422                	ld	s0,40(sp)
    8000b95c:	6145                	addi	sp,sp,48
    8000b95e:	8082                	ret

000000008000b960 <softfloat_countLeadingZeros64>:

#define softfloat_countLeadingZeros64 softfloat_countLeadingZeros64
#include "primitives.h"

uint_fast8_t softfloat_countLeadingZeros64( uint64_t a )
{
    8000b960:	7179                	addi	sp,sp,-48
    8000b962:	f422                	sd	s0,40(sp)
    8000b964:	1800                	addi	s0,sp,48
    8000b966:	fca43c23          	sd	a0,-40(s0)
    uint_fast8_t count;
    uint32_t a32;

    count = 0;
    8000b96a:	fe0407a3          	sb	zero,-17(s0)
    a32 = a>>32;
    8000b96e:	fd843783          	ld	a5,-40(s0)
    8000b972:	9381                	srli	a5,a5,0x20
    8000b974:	fef42423          	sw	a5,-24(s0)
    if ( ! a32 ) {
    8000b978:	fe842783          	lw	a5,-24(s0)
    8000b97c:	2781                	sext.w	a5,a5
    8000b97e:	eb89                	bnez	a5,8000b990 <softfloat_countLeadingZeros64+0x30>
        count = 32;
    8000b980:	02000793          	li	a5,32
    8000b984:	fef407a3          	sb	a5,-17(s0)
        a32 = a;
    8000b988:	fd843783          	ld	a5,-40(s0)
    8000b98c:	fef42423          	sw	a5,-24(s0)
    }
    /*------------------------------------------------------------------------
    | From here, result is current count + count leading zeros of `a32'.
    *------------------------------------------------------------------------*/
    if ( a32 < 0x10000 ) {
    8000b990:	fe842783          	lw	a5,-24(s0)
    8000b994:	0007871b          	sext.w	a4,a5
    8000b998:	67c1                	lui	a5,0x10
    8000b99a:	00f77d63          	bleu	a5,a4,8000b9b4 <softfloat_countLeadingZeros64+0x54>
        count += 16;
    8000b99e:	fef44783          	lbu	a5,-17(s0)
    8000b9a2:	27c1                	addiw	a5,a5,16
    8000b9a4:	fef407a3          	sb	a5,-17(s0)
        a32 <<= 16;
    8000b9a8:	fe842783          	lw	a5,-24(s0)
    8000b9ac:	0107979b          	slliw	a5,a5,0x10
    8000b9b0:	fef42423          	sw	a5,-24(s0)
    }
    if ( a32 < 0x1000000 ) {
    8000b9b4:	fe842783          	lw	a5,-24(s0)
    8000b9b8:	0007871b          	sext.w	a4,a5
    8000b9bc:	010007b7          	lui	a5,0x1000
    8000b9c0:	00f77d63          	bleu	a5,a4,8000b9da <softfloat_countLeadingZeros64+0x7a>
        count += 8;
    8000b9c4:	fef44783          	lbu	a5,-17(s0)
    8000b9c8:	27a1                	addiw	a5,a5,8
    8000b9ca:	fef407a3          	sb	a5,-17(s0)
        a32 <<= 8;
    8000b9ce:	fe842783          	lw	a5,-24(s0)
    8000b9d2:	0087979b          	slliw	a5,a5,0x8
    8000b9d6:	fef42423          	sw	a5,-24(s0)
    }
    count += softfloat_countLeadingZeros8[a32>>24];
    8000b9da:	fe842783          	lw	a5,-24(s0)
    8000b9de:	0187d79b          	srliw	a5,a5,0x18
    8000b9e2:	2781                	sext.w	a5,a5
    8000b9e4:	00001717          	auipc	a4,0x1
    8000b9e8:	73c70713          	addi	a4,a4,1852 # 8000d120 <softfloat_countLeadingZeros8>
    8000b9ec:	1782                	slli	a5,a5,0x20
    8000b9ee:	9381                	srli	a5,a5,0x20
    8000b9f0:	97ba                	add	a5,a5,a4
    8000b9f2:	0007c783          	lbu	a5,0(a5) # 1000000 <MEM_START-0x7f000000>
    8000b9f6:	fef44703          	lbu	a4,-17(s0)
    8000b9fa:	9fb9                	addw	a5,a5,a4
    8000b9fc:	fef407a3          	sb	a5,-17(s0)
    return count;
    8000ba00:	fef44783          	lbu	a5,-17(s0)

}
    8000ba04:	853e                	mv	a0,a5
    8000ba06:	7422                	ld	s0,40(sp)
    8000ba08:	6145                	addi	sp,sp,48
    8000ba0a:	8082                	ret

000000008000ba0c <softfloat_normRoundPackToF32>:
#include "platform.h"
#include "internals.h"

float32_t
 softfloat_normRoundPackToF32( bool sign, int_fast16_t exp, uint_fast32_t sig )
{
    8000ba0c:	7139                	addi	sp,sp,-64
    8000ba0e:	fc06                	sd	ra,56(sp)
    8000ba10:	f822                	sd	s0,48(sp)
    8000ba12:	0080                	addi	s0,sp,64
    8000ba14:	87aa                	mv	a5,a0
    8000ba16:	fcb43823          	sd	a1,-48(s0)
    8000ba1a:	fcc43423          	sd	a2,-56(s0)
    8000ba1e:	fcf40fa3          	sb	a5,-33(s0)
    int_fast8_t shiftDist;
    union ui32_f32 uZ;

    shiftDist = softfloat_countLeadingZeros32( sig ) - 1;
    8000ba22:	fc843783          	ld	a5,-56(s0)
    8000ba26:	2781                	sext.w	a5,a5
    8000ba28:	853e                	mv	a0,a5
    8000ba2a:	eafff0ef          	jal	ra,8000b8d8 <softfloat_countLeadingZeros32>
    8000ba2e:	87aa                	mv	a5,a0
    8000ba30:	37fd                	addiw	a5,a5,-1
    8000ba32:	0ff7f793          	andi	a5,a5,255
    8000ba36:	fef407a3          	sb	a5,-17(s0)
    exp -= shiftDist;
    8000ba3a:	fef40783          	lb	a5,-17(s0)
    8000ba3e:	fd043703          	ld	a4,-48(s0)
    8000ba42:	40f707b3          	sub	a5,a4,a5
    8000ba46:	fcf43823          	sd	a5,-48(s0)
    if ( (7 <= shiftDist) && ((unsigned int) exp < 0xFD) ) {
    8000ba4a:	fef44783          	lbu	a5,-17(s0)
    8000ba4e:	0187971b          	slliw	a4,a5,0x18
    8000ba52:	4187571b          	sraiw	a4,a4,0x18
    8000ba56:	4799                	li	a5,6
    8000ba58:	06e7d163          	ble	a4,a5,8000baba <softfloat_normRoundPackToF32+0xae>
    8000ba5c:	fd043783          	ld	a5,-48(s0)
    8000ba60:	2781                	sext.w	a5,a5
    8000ba62:	873e                	mv	a4,a5
    8000ba64:	0fc00793          	li	a5,252
    8000ba68:	04e7e963          	bltu	a5,a4,8000baba <softfloat_normRoundPackToF32+0xae>
        uZ.ui = packToF32UI( sign, sig ? exp : 0, sig<<(shiftDist - 7) );
    8000ba6c:	fdf44783          	lbu	a5,-33(s0)
    8000ba70:	2781                	sext.w	a5,a5
    8000ba72:	01f7979b          	slliw	a5,a5,0x1f
    8000ba76:	0007871b          	sext.w	a4,a5
    8000ba7a:	fc843783          	ld	a5,-56(s0)
    8000ba7e:	cb81                	beqz	a5,8000ba8e <softfloat_normRoundPackToF32+0x82>
    8000ba80:	fd043783          	ld	a5,-48(s0)
    8000ba84:	2781                	sext.w	a5,a5
    8000ba86:	0177979b          	slliw	a5,a5,0x17
    8000ba8a:	2781                	sext.w	a5,a5
    8000ba8c:	a011                	j	8000ba90 <softfloat_normRoundPackToF32+0x84>
    8000ba8e:	4781                	li	a5,0
    8000ba90:	9fb9                	addw	a5,a5,a4
    8000ba92:	0007871b          	sext.w	a4,a5
    8000ba96:	fef40783          	lb	a5,-17(s0)
    8000ba9a:	2781                	sext.w	a5,a5
    8000ba9c:	37e5                	addiw	a5,a5,-7
    8000ba9e:	2781                	sext.w	a5,a5
    8000baa0:	86be                	mv	a3,a5
    8000baa2:	fc843783          	ld	a5,-56(s0)
    8000baa6:	00d797b3          	sll	a5,a5,a3
    8000baaa:	2781                	sext.w	a5,a5
    8000baac:	9fb9                	addw	a5,a5,a4
    8000baae:	2781                	sext.w	a5,a5
    8000bab0:	fef42423          	sw	a5,-24(s0)
        return uZ.f;
    8000bab4:	fe842783          	lw	a5,-24(s0)
    8000bab8:	a015                	j	8000badc <softfloat_normRoundPackToF32+0xd0>
    } else {
        return softfloat_roundPackToF32( sign, exp, sig<<shiftDist );
    8000baba:	fef40783          	lb	a5,-17(s0)
    8000babe:	2781                	sext.w	a5,a5
    8000bac0:	873e                	mv	a4,a5
    8000bac2:	fc843783          	ld	a5,-56(s0)
    8000bac6:	00e79733          	sll	a4,a5,a4
    8000baca:	fdf44783          	lbu	a5,-33(s0)
    8000bace:	863a                	mv	a2,a4
    8000bad0:	fd043583          	ld	a1,-48(s0)
    8000bad4:	853e                	mv	a0,a5
    8000bad6:	a19fe0ef          	jal	ra,8000a4ee <softfloat_roundPackToF32>
    8000bada:	87aa                	mv	a5,a0
    }

}
    8000badc:	853e                	mv	a0,a5
    8000bade:	70e2                	ld	ra,56(sp)
    8000bae0:	7442                	ld	s0,48(sp)
    8000bae2:	6121                	addi	sp,sp,64
    8000bae4:	8082                	ret

000000008000bae6 <softfloat_normRoundPackToF64>:
#include "platform.h"
#include "internals.h"

float64_t
 softfloat_normRoundPackToF64( bool sign, int_fast16_t exp, uint_fast64_t sig )
{
    8000bae6:	7139                	addi	sp,sp,-64
    8000bae8:	fc06                	sd	ra,56(sp)
    8000baea:	f822                	sd	s0,48(sp)
    8000baec:	0080                	addi	s0,sp,64
    8000baee:	87aa                	mv	a5,a0
    8000baf0:	fcb43823          	sd	a1,-48(s0)
    8000baf4:	fcc43423          	sd	a2,-56(s0)
    8000baf8:	fcf40fa3          	sb	a5,-33(s0)
    int_fast8_t shiftDist;
    union ui64_f64 uZ;

    shiftDist = softfloat_countLeadingZeros64( sig ) - 1;
    8000bafc:	fc843503          	ld	a0,-56(s0)
    8000bb00:	e61ff0ef          	jal	ra,8000b960 <softfloat_countLeadingZeros64>
    8000bb04:	87aa                	mv	a5,a0
    8000bb06:	37fd                	addiw	a5,a5,-1
    8000bb08:	0ff7f793          	andi	a5,a5,255
    8000bb0c:	fef407a3          	sb	a5,-17(s0)
    exp -= shiftDist;
    8000bb10:	fef40783          	lb	a5,-17(s0)
    8000bb14:	fd043703          	ld	a4,-48(s0)
    8000bb18:	40f707b3          	sub	a5,a4,a5
    8000bb1c:	fcf43823          	sd	a5,-48(s0)
    if ( (10 <= shiftDist) && ((unsigned int) exp < 0x7FD) ) {
    8000bb20:	fef44783          	lbu	a5,-17(s0)
    8000bb24:	0187971b          	slliw	a4,a5,0x18
    8000bb28:	4187571b          	sraiw	a4,a4,0x18
    8000bb2c:	47a5                	li	a5,9
    8000bb2e:	04e7d763          	ble	a4,a5,8000bb7c <softfloat_normRoundPackToF64+0x96>
    8000bb32:	fd043783          	ld	a5,-48(s0)
    8000bb36:	2781                	sext.w	a5,a5
    8000bb38:	873e                	mv	a4,a5
    8000bb3a:	7fc00793          	li	a5,2044
    8000bb3e:	02e7ef63          	bltu	a5,a4,8000bb7c <softfloat_normRoundPackToF64+0x96>
        uZ.ui = packToF64UI( sign, sig ? exp : 0, sig<<(shiftDist - 10) );
    8000bb42:	fdf44783          	lbu	a5,-33(s0)
    8000bb46:	03f79713          	slli	a4,a5,0x3f
    8000bb4a:	fc843783          	ld	a5,-56(s0)
    8000bb4e:	c789                	beqz	a5,8000bb58 <softfloat_normRoundPackToF64+0x72>
    8000bb50:	fd043783          	ld	a5,-48(s0)
    8000bb54:	17d2                	slli	a5,a5,0x34
    8000bb56:	a011                	j	8000bb5a <softfloat_normRoundPackToF64+0x74>
    8000bb58:	4781                	li	a5,0
    8000bb5a:	973e                	add	a4,a4,a5
    8000bb5c:	fef40783          	lb	a5,-17(s0)
    8000bb60:	2781                	sext.w	a5,a5
    8000bb62:	37d9                	addiw	a5,a5,-10
    8000bb64:	2781                	sext.w	a5,a5
    8000bb66:	86be                	mv	a3,a5
    8000bb68:	fc843783          	ld	a5,-56(s0)
    8000bb6c:	00d797b3          	sll	a5,a5,a3
    8000bb70:	97ba                	add	a5,a5,a4
    8000bb72:	fef43023          	sd	a5,-32(s0)
        return uZ.f;
    8000bb76:	fe043783          	ld	a5,-32(s0)
    8000bb7a:	a015                	j	8000bb9e <softfloat_normRoundPackToF64+0xb8>
    } else {
        return softfloat_roundPackToF64( sign, exp, sig<<shiftDist );
    8000bb7c:	fef40783          	lb	a5,-17(s0)
    8000bb80:	2781                	sext.w	a5,a5
    8000bb82:	873e                	mv	a4,a5
    8000bb84:	fc843783          	ld	a5,-56(s0)
    8000bb88:	00e79733          	sll	a4,a5,a4
    8000bb8c:	fdf44783          	lbu	a5,-33(s0)
    8000bb90:	863a                	mv	a2,a4
    8000bb92:	fd043583          	ld	a1,-48(s0)
    8000bb96:	853e                	mv	a0,a5
    8000bb98:	b8dfe0ef          	jal	ra,8000a724 <softfloat_roundPackToF64>
    8000bb9c:	87aa                	mv	a5,a0
    }

}
    8000bb9e:	853e                	mv	a0,a5
    8000bba0:	70e2                	ld	ra,56(sp)
    8000bba2:	7442                	ld	s0,48(sp)
    8000bba4:	6121                	addi	sp,sp,64
    8000bba6:	8082                	ret

000000008000bba8 <vsnprintf>:
#include <string.h>
#include <stdarg.h>
#include <stdbool.h>

int vsnprintf(char* out, size_t n, const char* s, va_list vl)
{
    8000bba8:	7119                	addi	sp,sp,-128
    8000bbaa:	fca2                	sd	s0,120(sp)
    8000bbac:	0100                	addi	s0,sp,128
    8000bbae:	f8a43c23          	sd	a0,-104(s0)
    8000bbb2:	f8b43823          	sd	a1,-112(s0)
    8000bbb6:	f8c43423          	sd	a2,-120(s0)
    8000bbba:	f8d43023          	sd	a3,-128(s0)
  bool format = false;
    8000bbbe:	fe0407a3          	sb	zero,-17(s0)
  bool longarg = false;
    8000bbc2:	fe040723          	sb	zero,-18(s0)
  bool longlongarg = false;
    8000bbc6:	fe0406a3          	sb	zero,-19(s0)
  size_t pos = 0;
    8000bbca:	fe043023          	sd	zero,-32(s0)
  for( ; *s; s++)
    8000bbce:	a6cd                	j	8000bfb0 <vsnprintf+0x408>
  {
    if(format)
    8000bbd0:	fef44783          	lbu	a5,-17(s0)
    8000bbd4:	0ff7f793          	andi	a5,a5,255
    8000bbd8:	38078163          	beqz	a5,8000bf5a <vsnprintf+0x3b2>
    {
      switch(*s)
    8000bbdc:	f8843783          	ld	a5,-120(s0)
    8000bbe0:	0007c783          	lbu	a5,0(a5)
    8000bbe4:	2781                	sext.w	a5,a5
    8000bbe6:	f9d7869b          	addiw	a3,a5,-99
    8000bbea:	0006871b          	sext.w	a4,a3
    8000bbee:	47d5                	li	a5,21
    8000bbf0:	3ae7ea63          	bltu	a5,a4,8000bfa4 <vsnprintf+0x3fc>
    8000bbf4:	02069793          	slli	a5,a3,0x20
    8000bbf8:	9381                	srli	a5,a5,0x20
    8000bbfa:	00279713          	slli	a4,a5,0x2
    8000bbfe:	00001797          	auipc	a5,0x1
    8000bc02:	62278793          	addi	a5,a5,1570 # 8000d220 <softfloat_countLeadingZeros8+0x100>
    8000bc06:	97ba                	add	a5,a5,a4
    8000bc08:	439c                	lw	a5,0(a5)
    8000bc0a:	0007871b          	sext.w	a4,a5
    8000bc0e:	00001797          	auipc	a5,0x1
    8000bc12:	61278793          	addi	a5,a5,1554 # 8000d220 <softfloat_countLeadingZeros8+0x100>
    8000bc16:	97ba                	add	a5,a5,a4
    8000bc18:	8782                	jr	a5
      {
        case 'l':
          if (s[1] == 'l') {
    8000bc1a:	f8843783          	ld	a5,-120(s0)
    8000bc1e:	0785                	addi	a5,a5,1
    8000bc20:	0007c783          	lbu	a5,0(a5)
    8000bc24:	873e                	mv	a4,a5
    8000bc26:	06c00793          	li	a5,108
    8000bc2a:	00f71b63          	bne	a4,a5,8000bc40 <vsnprintf+0x98>
              longlongarg = true;
    8000bc2e:	4785                	li	a5,1
    8000bc30:	fef406a3          	sb	a5,-19(s0)
              s++;
    8000bc34:	f8843783          	ld	a5,-120(s0)
    8000bc38:	0785                	addi	a5,a5,1
    8000bc3a:	f8f43423          	sd	a5,-120(s0)
          }
          else
              longarg = true;
          break;
    8000bc3e:	a6a5                	j	8000bfa6 <vsnprintf+0x3fe>
              longarg = true;
    8000bc40:	4785                	li	a5,1
    8000bc42:	fef40723          	sb	a5,-18(s0)
          break;
    8000bc46:	a685                	j	8000bfa6 <vsnprintf+0x3fe>
        case 'p':
          longarg = true;
    8000bc48:	4785                	li	a5,1
    8000bc4a:	fef40723          	sb	a5,-18(s0)
          if (++pos < n) out[pos-1] = '0';
    8000bc4e:	fe043783          	ld	a5,-32(s0)
    8000bc52:	0785                	addi	a5,a5,1
    8000bc54:	fef43023          	sd	a5,-32(s0)
    8000bc58:	fe043703          	ld	a4,-32(s0)
    8000bc5c:	f9043783          	ld	a5,-112(s0)
    8000bc60:	00f77c63          	bleu	a5,a4,8000bc78 <vsnprintf+0xd0>
    8000bc64:	fe043783          	ld	a5,-32(s0)
    8000bc68:	17fd                	addi	a5,a5,-1
    8000bc6a:	f9843703          	ld	a4,-104(s0)
    8000bc6e:	97ba                	add	a5,a5,a4
    8000bc70:	03000713          	li	a4,48
    8000bc74:	00e78023          	sb	a4,0(a5)
          if (++pos < n) out[pos-1] = 'x';
    8000bc78:	fe043783          	ld	a5,-32(s0)
    8000bc7c:	0785                	addi	a5,a5,1
    8000bc7e:	fef43023          	sd	a5,-32(s0)
    8000bc82:	fe043703          	ld	a4,-32(s0)
    8000bc86:	f9043783          	ld	a5,-112(s0)
    8000bc8a:	00f77c63          	bleu	a5,a4,8000bca2 <vsnprintf+0xfa>
    8000bc8e:	fe043783          	ld	a5,-32(s0)
    8000bc92:	17fd                	addi	a5,a5,-1
    8000bc94:	f9843703          	ld	a4,-104(s0)
    8000bc98:	97ba                	add	a5,a5,a4
    8000bc9a:	07800713          	li	a4,120
    8000bc9e:	00e78023          	sb	a4,0(a5)
        case 'x':
        {
          long num = longarg ? va_arg(vl, long) : va_arg(vl, int);
    8000bca2:	fee44783          	lbu	a5,-18(s0)
    8000bca6:	0ff7f793          	andi	a5,a5,255
    8000bcaa:	cb89                	beqz	a5,8000bcbc <vsnprintf+0x114>
    8000bcac:	f8043783          	ld	a5,-128(s0)
    8000bcb0:	00878713          	addi	a4,a5,8
    8000bcb4:	f8e43023          	sd	a4,-128(s0)
    8000bcb8:	639c                	ld	a5,0(a5)
    8000bcba:	a801                	j	8000bcca <vsnprintf+0x122>
    8000bcbc:	f8043783          	ld	a5,-128(s0)
    8000bcc0:	00878713          	addi	a4,a5,8
    8000bcc4:	f8e43023          	sd	a4,-128(s0)
    8000bcc8:	439c                	lw	a5,0(a5)
    8000bcca:	faf43423          	sd	a5,-88(s0)
          for(int i = 2*(longarg ? sizeof(long) : sizeof(int))-1; i >= 0; i--) {
    8000bcce:	fee44783          	lbu	a5,-18(s0)
    8000bcd2:	0ff7f793          	andi	a5,a5,255
    8000bcd6:	c399                	beqz	a5,8000bcdc <vsnprintf+0x134>
    8000bcd8:	47bd                	li	a5,15
    8000bcda:	a011                	j	8000bcde <vsnprintf+0x136>
    8000bcdc:	479d                	li	a5,7
    8000bcde:	fcf42e23          	sw	a5,-36(s0)
    8000bce2:	a8b5                	j	8000bd5e <vsnprintf+0x1b6>
            int d = (num >> (4*i)) & 0xF;
    8000bce4:	fdc42783          	lw	a5,-36(s0)
    8000bce8:	0027979b          	slliw	a5,a5,0x2
    8000bcec:	2781                	sext.w	a5,a5
    8000bcee:	fa843703          	ld	a4,-88(s0)
    8000bcf2:	40f757b3          	sra	a5,a4,a5
    8000bcf6:	2781                	sext.w	a5,a5
    8000bcf8:	8bbd                	andi	a5,a5,15
    8000bcfa:	faf42223          	sw	a5,-92(s0)
            if (++pos < n) out[pos-1] = (d < 10 ? '0'+d : 'a'+d-10);
    8000bcfe:	fe043783          	ld	a5,-32(s0)
    8000bd02:	0785                	addi	a5,a5,1
    8000bd04:	fef43023          	sd	a5,-32(s0)
    8000bd08:	fe043703          	ld	a4,-32(s0)
    8000bd0c:	f9043783          	ld	a5,-112(s0)
    8000bd10:	04f77263          	bleu	a5,a4,8000bd54 <vsnprintf+0x1ac>
    8000bd14:	fa442783          	lw	a5,-92(s0)
    8000bd18:	0007871b          	sext.w	a4,a5
    8000bd1c:	47a5                	li	a5,9
    8000bd1e:	00e7cb63          	blt	a5,a4,8000bd34 <vsnprintf+0x18c>
    8000bd22:	fa442783          	lw	a5,-92(s0)
    8000bd26:	0ff7f793          	andi	a5,a5,255
    8000bd2a:	0307879b          	addiw	a5,a5,48
    8000bd2e:	0ff7f793          	andi	a5,a5,255
    8000bd32:	a809                	j	8000bd44 <vsnprintf+0x19c>
    8000bd34:	fa442783          	lw	a5,-92(s0)
    8000bd38:	0ff7f793          	andi	a5,a5,255
    8000bd3c:	0577879b          	addiw	a5,a5,87
    8000bd40:	0ff7f793          	andi	a5,a5,255
    8000bd44:	fe043703          	ld	a4,-32(s0)
    8000bd48:	177d                	addi	a4,a4,-1
    8000bd4a:	f9843683          	ld	a3,-104(s0)
    8000bd4e:	9736                	add	a4,a4,a3
    8000bd50:	00f70023          	sb	a5,0(a4)
          for(int i = 2*(longarg ? sizeof(long) : sizeof(int))-1; i >= 0; i--) {
    8000bd54:	fdc42783          	lw	a5,-36(s0)
    8000bd58:	37fd                	addiw	a5,a5,-1
    8000bd5a:	fcf42e23          	sw	a5,-36(s0)
    8000bd5e:	fdc42783          	lw	a5,-36(s0)
    8000bd62:	2781                	sext.w	a5,a5
    8000bd64:	f807d0e3          	bgez	a5,8000bce4 <vsnprintf+0x13c>
          }
          longarg = false;
    8000bd68:	fe040723          	sb	zero,-18(s0)
          format = false;
    8000bd6c:	fe0407a3          	sb	zero,-17(s0)
          break;
    8000bd70:	ac1d                	j	8000bfa6 <vsnprintf+0x3fe>
        }
        case 'd':
        {
          long long num;
          if (longarg)
    8000bd72:	fee44783          	lbu	a5,-18(s0)
    8000bd76:	0ff7f793          	andi	a5,a5,255
    8000bd7a:	cb99                	beqz	a5,8000bd90 <vsnprintf+0x1e8>
              num = va_arg(vl, long);
    8000bd7c:	f8043783          	ld	a5,-128(s0)
    8000bd80:	00878713          	addi	a4,a5,8
    8000bd84:	f8e43023          	sd	a4,-128(s0)
    8000bd88:	639c                	ld	a5,0(a5)
    8000bd8a:	fcf43823          	sd	a5,-48(s0)
    8000bd8e:	a80d                	j	8000bdc0 <vsnprintf+0x218>
          else if (longlongarg)
    8000bd90:	fed44783          	lbu	a5,-19(s0)
    8000bd94:	0ff7f793          	andi	a5,a5,255
    8000bd98:	cb99                	beqz	a5,8000bdae <vsnprintf+0x206>
              num = va_arg(vl, long long);
    8000bd9a:	f8043783          	ld	a5,-128(s0)
    8000bd9e:	00878713          	addi	a4,a5,8
    8000bda2:	f8e43023          	sd	a4,-128(s0)
    8000bda6:	639c                	ld	a5,0(a5)
    8000bda8:	fcf43823          	sd	a5,-48(s0)
    8000bdac:	a811                	j	8000bdc0 <vsnprintf+0x218>
          else
              num = va_arg(vl, int);
    8000bdae:	f8043783          	ld	a5,-128(s0)
    8000bdb2:	00878713          	addi	a4,a5,8
    8000bdb6:	f8e43023          	sd	a4,-128(s0)
    8000bdba:	439c                	lw	a5,0(a5)
    8000bdbc:	fcf43823          	sd	a5,-48(s0)
          if (num < 0) {
    8000bdc0:	fd043783          	ld	a5,-48(s0)
    8000bdc4:	0207dd63          	bgez	a5,8000bdfe <vsnprintf+0x256>
            num = -num;
    8000bdc8:	fd043783          	ld	a5,-48(s0)
    8000bdcc:	40f007b3          	neg	a5,a5
    8000bdd0:	fcf43823          	sd	a5,-48(s0)
            if (++pos < n) out[pos-1] = '-';
    8000bdd4:	fe043783          	ld	a5,-32(s0)
    8000bdd8:	0785                	addi	a5,a5,1
    8000bdda:	fef43023          	sd	a5,-32(s0)
    8000bdde:	fe043703          	ld	a4,-32(s0)
    8000bde2:	f9043783          	ld	a5,-112(s0)
    8000bde6:	00f77c63          	bleu	a5,a4,8000bdfe <vsnprintf+0x256>
    8000bdea:	fe043783          	ld	a5,-32(s0)
    8000bdee:	17fd                	addi	a5,a5,-1
    8000bdf0:	f9843703          	ld	a4,-104(s0)
    8000bdf4:	97ba                	add	a5,a5,a4
    8000bdf6:	02d00713          	li	a4,45
    8000bdfa:	00e78023          	sb	a4,0(a5)
          }
          long digits = 1;
    8000bdfe:	4785                	li	a5,1
    8000be00:	fcf43423          	sd	a5,-56(s0)
          for (long long nn = num; nn /= 10; digits++)
    8000be04:	fd043783          	ld	a5,-48(s0)
    8000be08:	fcf43023          	sd	a5,-64(s0)
    8000be0c:	a031                	j	8000be18 <vsnprintf+0x270>
    8000be0e:	fc843783          	ld	a5,-56(s0)
    8000be12:	0785                	addi	a5,a5,1
    8000be14:	fcf43423          	sd	a5,-56(s0)
    8000be18:	fc043703          	ld	a4,-64(s0)
    8000be1c:	47a9                	li	a5,10
    8000be1e:	02f747b3          	div	a5,a4,a5
    8000be22:	fcf43023          	sd	a5,-64(s0)
    8000be26:	fc043783          	ld	a5,-64(s0)
    8000be2a:	f3f5                	bnez	a5,8000be0e <vsnprintf+0x266>
            ;
          for (int i = digits-1; i >= 0; i--) {
    8000be2c:	fc843783          	ld	a5,-56(s0)
    8000be30:	2781                	sext.w	a5,a5
    8000be32:	37fd                	addiw	a5,a5,-1
    8000be34:	2781                	sext.w	a5,a5
    8000be36:	faf42e23          	sw	a5,-68(s0)
    8000be3a:	a8a1                	j	8000be92 <vsnprintf+0x2ea>
            if (pos + i + 1 < n) out[pos + i] = '0' + (num % 10);
    8000be3c:	fbc42703          	lw	a4,-68(s0)
    8000be40:	fe043783          	ld	a5,-32(s0)
    8000be44:	97ba                	add	a5,a5,a4
    8000be46:	0785                	addi	a5,a5,1
    8000be48:	f9043703          	ld	a4,-112(s0)
    8000be4c:	02e7f763          	bleu	a4,a5,8000be7a <vsnprintf+0x2d2>
    8000be50:	fd043703          	ld	a4,-48(s0)
    8000be54:	47a9                	li	a5,10
    8000be56:	02f767b3          	rem	a5,a4,a5
    8000be5a:	0ff7f713          	andi	a4,a5,255
    8000be5e:	fbc42683          	lw	a3,-68(s0)
    8000be62:	fe043783          	ld	a5,-32(s0)
    8000be66:	97b6                	add	a5,a5,a3
    8000be68:	f9843683          	ld	a3,-104(s0)
    8000be6c:	97b6                	add	a5,a5,a3
    8000be6e:	0307071b          	addiw	a4,a4,48
    8000be72:	0ff77713          	andi	a4,a4,255
    8000be76:	00e78023          	sb	a4,0(a5)
            num /= 10;
    8000be7a:	fd043703          	ld	a4,-48(s0)
    8000be7e:	47a9                	li	a5,10
    8000be80:	02f747b3          	div	a5,a4,a5
    8000be84:	fcf43823          	sd	a5,-48(s0)
          for (int i = digits-1; i >= 0; i--) {
    8000be88:	fbc42783          	lw	a5,-68(s0)
    8000be8c:	37fd                	addiw	a5,a5,-1
    8000be8e:	faf42e23          	sw	a5,-68(s0)
    8000be92:	fbc42783          	lw	a5,-68(s0)
    8000be96:	2781                	sext.w	a5,a5
    8000be98:	fa07d2e3          	bgez	a5,8000be3c <vsnprintf+0x294>
          }
          pos += digits;
    8000be9c:	fc843783          	ld	a5,-56(s0)
    8000bea0:	fe043703          	ld	a4,-32(s0)
    8000bea4:	97ba                	add	a5,a5,a4
    8000bea6:	fef43023          	sd	a5,-32(s0)
          longarg = false;
    8000beaa:	fe040723          	sb	zero,-18(s0)
          longlongarg = false;
    8000beae:	fe0406a3          	sb	zero,-19(s0)
          format = false;
    8000beb2:	fe0407a3          	sb	zero,-17(s0)
          break;
    8000beb6:	a8c5                	j	8000bfa6 <vsnprintf+0x3fe>
        }
        case 's':
        {
          const char* s2 = va_arg(vl, const char*);
    8000beb8:	f8043783          	ld	a5,-128(s0)
    8000bebc:	00878713          	addi	a4,a5,8
    8000bec0:	f8e43023          	sd	a4,-128(s0)
    8000bec4:	639c                	ld	a5,0(a5)
    8000bec6:	faf43823          	sd	a5,-80(s0)
          while (*s2) {
    8000beca:	a82d                	j	8000bf04 <vsnprintf+0x35c>
            if (++pos < n)
    8000becc:	fe043783          	ld	a5,-32(s0)
    8000bed0:	0785                	addi	a5,a5,1
    8000bed2:	fef43023          	sd	a5,-32(s0)
    8000bed6:	fe043703          	ld	a4,-32(s0)
    8000beda:	f9043783          	ld	a5,-112(s0)
    8000bede:	00f77e63          	bleu	a5,a4,8000befa <vsnprintf+0x352>
              out[pos-1] = *s2;
    8000bee2:	fe043783          	ld	a5,-32(s0)
    8000bee6:	17fd                	addi	a5,a5,-1
    8000bee8:	f9843703          	ld	a4,-104(s0)
    8000beec:	97ba                	add	a5,a5,a4
    8000beee:	fb043703          	ld	a4,-80(s0)
    8000bef2:	00074703          	lbu	a4,0(a4)
    8000bef6:	00e78023          	sb	a4,0(a5)
            s2++;
    8000befa:	fb043783          	ld	a5,-80(s0)
    8000befe:	0785                	addi	a5,a5,1
    8000bf00:	faf43823          	sd	a5,-80(s0)
          while (*s2) {
    8000bf04:	fb043783          	ld	a5,-80(s0)
    8000bf08:	0007c783          	lbu	a5,0(a5)
    8000bf0c:	f3e1                	bnez	a5,8000becc <vsnprintf+0x324>
          }
          longarg = false;
    8000bf0e:	fe040723          	sb	zero,-18(s0)
          format = false;
    8000bf12:	fe0407a3          	sb	zero,-17(s0)
          break;
    8000bf16:	a841                	j	8000bfa6 <vsnprintf+0x3fe>
        }
        case 'c':
        {
          if (++pos < n) out[pos-1] = (char)va_arg(vl,int);
    8000bf18:	fe043783          	ld	a5,-32(s0)
    8000bf1c:	0785                	addi	a5,a5,1
    8000bf1e:	fef43023          	sd	a5,-32(s0)
    8000bf22:	fe043703          	ld	a4,-32(s0)
    8000bf26:	f9043783          	ld	a5,-112(s0)
    8000bf2a:	02f77363          	bleu	a5,a4,8000bf50 <vsnprintf+0x3a8>
    8000bf2e:	f8043783          	ld	a5,-128(s0)
    8000bf32:	00878713          	addi	a4,a5,8
    8000bf36:	f8e43023          	sd	a4,-128(s0)
    8000bf3a:	4394                	lw	a3,0(a5)
    8000bf3c:	fe043783          	ld	a5,-32(s0)
    8000bf40:	17fd                	addi	a5,a5,-1
    8000bf42:	f9843703          	ld	a4,-104(s0)
    8000bf46:	97ba                	add	a5,a5,a4
    8000bf48:	0ff6f713          	andi	a4,a3,255
    8000bf4c:	00e78023          	sb	a4,0(a5)
          longarg = false;
    8000bf50:	fe040723          	sb	zero,-18(s0)
          format = false;
    8000bf54:	fe0407a3          	sb	zero,-17(s0)
          break;
    8000bf58:	a0b9                	j	8000bfa6 <vsnprintf+0x3fe>
        }
        default:
          break;
      }
    }
    else if(*s == '%')
    8000bf5a:	f8843783          	ld	a5,-120(s0)
    8000bf5e:	0007c783          	lbu	a5,0(a5)
    8000bf62:	873e                	mv	a4,a5
    8000bf64:	02500793          	li	a5,37
    8000bf68:	00f71663          	bne	a4,a5,8000bf74 <vsnprintf+0x3cc>
      format = true;
    8000bf6c:	4785                	li	a5,1
    8000bf6e:	fef407a3          	sb	a5,-17(s0)
    8000bf72:	a815                	j	8000bfa6 <vsnprintf+0x3fe>
    else
      if (++pos < n) out[pos-1] = *s;
    8000bf74:	fe043783          	ld	a5,-32(s0)
    8000bf78:	0785                	addi	a5,a5,1
    8000bf7a:	fef43023          	sd	a5,-32(s0)
    8000bf7e:	fe043703          	ld	a4,-32(s0)
    8000bf82:	f9043783          	ld	a5,-112(s0)
    8000bf86:	02f77063          	bleu	a5,a4,8000bfa6 <vsnprintf+0x3fe>
    8000bf8a:	fe043783          	ld	a5,-32(s0)
    8000bf8e:	17fd                	addi	a5,a5,-1
    8000bf90:	f9843703          	ld	a4,-104(s0)
    8000bf94:	97ba                	add	a5,a5,a4
    8000bf96:	f8843703          	ld	a4,-120(s0)
    8000bf9a:	00074703          	lbu	a4,0(a4)
    8000bf9e:	00e78023          	sb	a4,0(a5)
    8000bfa2:	a011                	j	8000bfa6 <vsnprintf+0x3fe>
          break;
    8000bfa4:	0001                	nop
  for( ; *s; s++)
    8000bfa6:	f8843783          	ld	a5,-120(s0)
    8000bfaa:	0785                	addi	a5,a5,1
    8000bfac:	f8f43423          	sd	a5,-120(s0)
    8000bfb0:	f8843783          	ld	a5,-120(s0)
    8000bfb4:	0007c783          	lbu	a5,0(a5)
    8000bfb8:	c0079ce3          	bnez	a5,8000bbd0 <vsnprintf+0x28>
  }
  if (pos < n)
    8000bfbc:	fe043703          	ld	a4,-32(s0)
    8000bfc0:	f9043783          	ld	a5,-112(s0)
    8000bfc4:	00f77a63          	bleu	a5,a4,8000bfd8 <vsnprintf+0x430>
    out[pos] = 0;
    8000bfc8:	f9843703          	ld	a4,-104(s0)
    8000bfcc:	fe043783          	ld	a5,-32(s0)
    8000bfd0:	97ba                	add	a5,a5,a4
    8000bfd2:	00078023          	sb	zero,0(a5)
    8000bfd6:	a821                	j	8000bfee <vsnprintf+0x446>
  else if (n)
    8000bfd8:	f9043783          	ld	a5,-112(s0)
    8000bfdc:	cb89                	beqz	a5,8000bfee <vsnprintf+0x446>
    out[n-1] = 0;
    8000bfde:	f9043783          	ld	a5,-112(s0)
    8000bfe2:	17fd                	addi	a5,a5,-1
    8000bfe4:	f9843703          	ld	a4,-104(s0)
    8000bfe8:	97ba                	add	a5,a5,a4
    8000bfea:	00078023          	sb	zero,0(a5)
  return pos;
    8000bfee:	fe043783          	ld	a5,-32(s0)
    8000bff2:	2781                	sext.w	a5,a5
}
    8000bff4:	853e                	mv	a0,a5
    8000bff6:	7466                	ld	s0,120(sp)
    8000bff8:	6109                	addi	sp,sp,128
    8000bffa:	8082                	ret

000000008000bffc <snprintf>:

int snprintf(char* out, size_t n, const char* s, ...)
{
    8000bffc:	7159                	addi	sp,sp,-112
    8000bffe:	fc06                	sd	ra,56(sp)
    8000c000:	f822                	sd	s0,48(sp)
    8000c002:	0080                	addi	s0,sp,64
    8000c004:	fca43c23          	sd	a0,-40(s0)
    8000c008:	fcb43823          	sd	a1,-48(s0)
    8000c00c:	fcc43423          	sd	a2,-56(s0)
    8000c010:	e414                	sd	a3,8(s0)
    8000c012:	e818                	sd	a4,16(s0)
    8000c014:	ec1c                	sd	a5,24(s0)
    8000c016:	03043023          	sd	a6,32(s0)
    8000c01a:	03143423          	sd	a7,40(s0)
  va_list vl;
  va_start(vl, s);
    8000c01e:	03040793          	addi	a5,s0,48
    8000c022:	fd878793          	addi	a5,a5,-40
    8000c026:	fef43023          	sd	a5,-32(s0)
  int res = vsnprintf(out, n, s, vl);
    8000c02a:	fe043783          	ld	a5,-32(s0)
    8000c02e:	86be                	mv	a3,a5
    8000c030:	fc843603          	ld	a2,-56(s0)
    8000c034:	fd043583          	ld	a1,-48(s0)
    8000c038:	fd843503          	ld	a0,-40(s0)
    8000c03c:	b6dff0ef          	jal	ra,8000bba8 <vsnprintf>
    8000c040:	87aa                	mv	a5,a0
    8000c042:	fef42623          	sw	a5,-20(s0)
  va_end(vl);
  return res;
    8000c046:	fec42783          	lw	a5,-20(s0)
}
    8000c04a:	853e                	mv	a0,a5
    8000c04c:	70e2                	ld	ra,56(sp)
    8000c04e:	7442                	ld	s0,48(sp)
    8000c050:	6165                	addi	sp,sp,112
    8000c052:	8082                	ret

000000008000c054 <memcpy>:
// Don't let GCC pattern-match these functions' bodies into self-calls
#pragma GCC optimize ("no-tree-loop-distribute-patterns")
#endif

void* memcpy(void* dest, const void* src, size_t len)
{
    8000c054:	7139                	addi	sp,sp,-64
    8000c056:	fc22                	sd	s0,56(sp)
    8000c058:	0080                	addi	s0,sp,64
    8000c05a:	fca43c23          	sd	a0,-40(s0)
    8000c05e:	fcb43823          	sd	a1,-48(s0)
    8000c062:	fcc43423          	sd	a2,-56(s0)
  const char* s = src;
    8000c066:	fd043783          	ld	a5,-48(s0)
    8000c06a:	fef43423          	sd	a5,-24(s0)
  char *d = dest;
    8000c06e:	fd843783          	ld	a5,-40(s0)
    8000c072:	fef43023          	sd	a5,-32(s0)

  if ((((uintptr_t)dest | (uintptr_t)src) & (sizeof(uintptr_t)-1)) == 0) {
    8000c076:	fd843703          	ld	a4,-40(s0)
    8000c07a:	fd043783          	ld	a5,-48(s0)
    8000c07e:	8fd9                	or	a5,a5,a4
    8000c080:	8b9d                	andi	a5,a5,7
    8000c082:	efa9                	bnez	a5,8000c0dc <memcpy+0x88>
    while ((void*)d < (dest + len - (sizeof(uintptr_t)-1))) {
    8000c084:	a00d                	j	8000c0a6 <memcpy+0x52>
      *(uintptr_t*)d = *(const uintptr_t*)s;
    8000c086:	fe843783          	ld	a5,-24(s0)
    8000c08a:	6398                	ld	a4,0(a5)
    8000c08c:	fe043783          	ld	a5,-32(s0)
    8000c090:	e398                	sd	a4,0(a5)
      d += sizeof(uintptr_t);
    8000c092:	fe043783          	ld	a5,-32(s0)
    8000c096:	07a1                	addi	a5,a5,8
    8000c098:	fef43023          	sd	a5,-32(s0)
      s += sizeof(uintptr_t);
    8000c09c:	fe843783          	ld	a5,-24(s0)
    8000c0a0:	07a1                	addi	a5,a5,8
    8000c0a2:	fef43423          	sd	a5,-24(s0)
    while ((void*)d < (dest + len - (sizeof(uintptr_t)-1))) {
    8000c0a6:	fc843783          	ld	a5,-56(s0)
    8000c0aa:	17e5                	addi	a5,a5,-7
    8000c0ac:	fd843703          	ld	a4,-40(s0)
    8000c0b0:	97ba                	add	a5,a5,a4
    8000c0b2:	fe043703          	ld	a4,-32(s0)
    8000c0b6:	fcf768e3          	bltu	a4,a5,8000c086 <memcpy+0x32>
    }
  }

  while (d < (char*)(dest + len))
    8000c0ba:	a00d                	j	8000c0dc <memcpy+0x88>
    *d++ = *s++;
    8000c0bc:	fe843703          	ld	a4,-24(s0)
    8000c0c0:	00170793          	addi	a5,a4,1
    8000c0c4:	fef43423          	sd	a5,-24(s0)
    8000c0c8:	fe043783          	ld	a5,-32(s0)
    8000c0cc:	00178693          	addi	a3,a5,1
    8000c0d0:	fed43023          	sd	a3,-32(s0)
    8000c0d4:	00074703          	lbu	a4,0(a4)
    8000c0d8:	00e78023          	sb	a4,0(a5)
  while (d < (char*)(dest + len))
    8000c0dc:	fd843703          	ld	a4,-40(s0)
    8000c0e0:	fc843783          	ld	a5,-56(s0)
    8000c0e4:	97ba                	add	a5,a5,a4
    8000c0e6:	fe043703          	ld	a4,-32(s0)
    8000c0ea:	fcf769e3          	bltu	a4,a5,8000c0bc <memcpy+0x68>

  return dest;
    8000c0ee:	fd843783          	ld	a5,-40(s0)
}
    8000c0f2:	853e                	mv	a0,a5
    8000c0f4:	7462                	ld	s0,56(sp)
    8000c0f6:	6121                	addi	sp,sp,64
    8000c0f8:	8082                	ret

000000008000c0fa <memset>:

void* memset(void* dest, int byte, size_t len)
{
    8000c0fa:	715d                	addi	sp,sp,-80
    8000c0fc:	e4a2                	sd	s0,72(sp)
    8000c0fe:	0880                	addi	s0,sp,80
    8000c100:	fca43423          	sd	a0,-56(s0)
    8000c104:	87ae                	mv	a5,a1
    8000c106:	fac43c23          	sd	a2,-72(s0)
    8000c10a:	fcf42223          	sw	a5,-60(s0)
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    8000c10e:	fc843703          	ld	a4,-56(s0)
    8000c112:	fb843783          	ld	a5,-72(s0)
    8000c116:	8fd9                	or	a5,a5,a4
    8000c118:	8b9d                	andi	a5,a5,7
    8000c11a:	e7bd                	bnez	a5,8000c188 <memset+0x8e>
    uintptr_t word = byte & 0xFF;
    8000c11c:	fc442783          	lw	a5,-60(s0)
    8000c120:	0ff7f793          	andi	a5,a5,255
    8000c124:	fcf43c23          	sd	a5,-40(s0)
    word |= word << 8;
    8000c128:	fd843783          	ld	a5,-40(s0)
    8000c12c:	07a2                	slli	a5,a5,0x8
    8000c12e:	fd843703          	ld	a4,-40(s0)
    8000c132:	8fd9                	or	a5,a5,a4
    8000c134:	fcf43c23          	sd	a5,-40(s0)
    word |= word << 16;
    8000c138:	fd843783          	ld	a5,-40(s0)
    8000c13c:	07c2                	slli	a5,a5,0x10
    8000c13e:	fd843703          	ld	a4,-40(s0)
    8000c142:	8fd9                	or	a5,a5,a4
    8000c144:	fcf43c23          	sd	a5,-40(s0)
    word |= word << 16 << 16;
    8000c148:	fd843783          	ld	a5,-40(s0)
    8000c14c:	1782                	slli	a5,a5,0x20
    8000c14e:	fd843703          	ld	a4,-40(s0)
    8000c152:	8fd9                	or	a5,a5,a4
    8000c154:	fcf43c23          	sd	a5,-40(s0)

    uintptr_t *d = dest;
    8000c158:	fc843783          	ld	a5,-56(s0)
    8000c15c:	fef43423          	sd	a5,-24(s0)
    while (d < (uintptr_t*)(dest + len))
    8000c160:	a811                	j	8000c174 <memset+0x7a>
      *d++ = word;
    8000c162:	fe843783          	ld	a5,-24(s0)
    8000c166:	00878713          	addi	a4,a5,8
    8000c16a:	fee43423          	sd	a4,-24(s0)
    8000c16e:	fd843703          	ld	a4,-40(s0)
    8000c172:	e398                	sd	a4,0(a5)
    while (d < (uintptr_t*)(dest + len))
    8000c174:	fc843703          	ld	a4,-56(s0)
    8000c178:	fb843783          	ld	a5,-72(s0)
    8000c17c:	97ba                	add	a5,a5,a4
    8000c17e:	fe843703          	ld	a4,-24(s0)
    8000c182:	fef760e3          	bltu	a4,a5,8000c162 <memset+0x68>
    8000c186:	a81d                	j	8000c1bc <memset+0xc2>
  } else {
    char *d = dest;
    8000c188:	fc843783          	ld	a5,-56(s0)
    8000c18c:	fef43023          	sd	a5,-32(s0)
    while (d < (char*)(dest + len))
    8000c190:	a829                	j	8000c1aa <memset+0xb0>
      *d++ = byte;
    8000c192:	fe043783          	ld	a5,-32(s0)
    8000c196:	00178713          	addi	a4,a5,1
    8000c19a:	fee43023          	sd	a4,-32(s0)
    8000c19e:	fc442703          	lw	a4,-60(s0)
    8000c1a2:	0ff77713          	andi	a4,a4,255
    8000c1a6:	00e78023          	sb	a4,0(a5)
    while (d < (char*)(dest + len))
    8000c1aa:	fc843703          	ld	a4,-56(s0)
    8000c1ae:	fb843783          	ld	a5,-72(s0)
    8000c1b2:	97ba                	add	a5,a5,a4
    8000c1b4:	fe043703          	ld	a4,-32(s0)
    8000c1b8:	fcf76de3          	bltu	a4,a5,8000c192 <memset+0x98>
  }
  return dest;
    8000c1bc:	fc843783          	ld	a5,-56(s0)
}
    8000c1c0:	853e                	mv	a0,a5
    8000c1c2:	6426                	ld	s0,72(sp)
    8000c1c4:	6161                	addi	sp,sp,80
    8000c1c6:	8082                	ret

000000008000c1c8 <strlen>:

size_t strlen(const char *s)
{
    8000c1c8:	7179                	addi	sp,sp,-48
    8000c1ca:	f422                	sd	s0,40(sp)
    8000c1cc:	1800                	addi	s0,sp,48
    8000c1ce:	fca43c23          	sd	a0,-40(s0)
  const char *p = s;
    8000c1d2:	fd843783          	ld	a5,-40(s0)
    8000c1d6:	fef43423          	sd	a5,-24(s0)
  while (*p)
    8000c1da:	a031                	j	8000c1e6 <strlen+0x1e>
    p++;
    8000c1dc:	fe843783          	ld	a5,-24(s0)
    8000c1e0:	0785                	addi	a5,a5,1
    8000c1e2:	fef43423          	sd	a5,-24(s0)
  while (*p)
    8000c1e6:	fe843783          	ld	a5,-24(s0)
    8000c1ea:	0007c783          	lbu	a5,0(a5)
    8000c1ee:	f7fd                	bnez	a5,8000c1dc <strlen+0x14>
  return p - s;
    8000c1f0:	fe843703          	ld	a4,-24(s0)
    8000c1f4:	fd843783          	ld	a5,-40(s0)
    8000c1f8:	40f707b3          	sub	a5,a4,a5
}
    8000c1fc:	853e                	mv	a0,a5
    8000c1fe:	7422                	ld	s0,40(sp)
    8000c200:	6145                	addi	sp,sp,48
    8000c202:	8082                	ret

000000008000c204 <strcmp>:

int strcmp(const char* s1, const char* s2)
{
    8000c204:	7179                	addi	sp,sp,-48
    8000c206:	f422                	sd	s0,40(sp)
    8000c208:	1800                	addi	s0,sp,48
    8000c20a:	fca43c23          	sd	a0,-40(s0)
    8000c20e:	fcb43823          	sd	a1,-48(s0)
  unsigned char c1, c2;

  do {
    c1 = *s1++;
    8000c212:	fd843783          	ld	a5,-40(s0)
    8000c216:	00178713          	addi	a4,a5,1
    8000c21a:	fce43c23          	sd	a4,-40(s0)
    8000c21e:	0007c783          	lbu	a5,0(a5)
    8000c222:	fef407a3          	sb	a5,-17(s0)
    c2 = *s2++;
    8000c226:	fd043783          	ld	a5,-48(s0)
    8000c22a:	00178713          	addi	a4,a5,1
    8000c22e:	fce43823          	sd	a4,-48(s0)
    8000c232:	0007c783          	lbu	a5,0(a5)
    8000c236:	fef40723          	sb	a5,-18(s0)
  } while (c1 != 0 && c1 == c2);
    8000c23a:	fef44783          	lbu	a5,-17(s0)
    8000c23e:	0ff7f793          	andi	a5,a5,255
    8000c242:	cb99                	beqz	a5,8000c258 <strcmp+0x54>
    8000c244:	fef44703          	lbu	a4,-17(s0)
    8000c248:	fee44783          	lbu	a5,-18(s0)
    8000c24c:	0ff77713          	andi	a4,a4,255
    8000c250:	0ff7f793          	andi	a5,a5,255
    8000c254:	faf70fe3          	beq	a4,a5,8000c212 <strcmp+0xe>

  return c1 - c2;
    8000c258:	fef44783          	lbu	a5,-17(s0)
    8000c25c:	0007871b          	sext.w	a4,a5
    8000c260:	fee44783          	lbu	a5,-18(s0)
    8000c264:	2781                	sext.w	a5,a5
    8000c266:	40f707bb          	subw	a5,a4,a5
    8000c26a:	2781                	sext.w	a5,a5
}
    8000c26c:	853e                	mv	a0,a5
    8000c26e:	7422                	ld	s0,40(sp)
    8000c270:	6145                	addi	sp,sp,48
    8000c272:	8082                	ret

000000008000c274 <strcpy>:

char* strcpy(char* dest, const char* src)
{
    8000c274:	7179                	addi	sp,sp,-48
    8000c276:	f422                	sd	s0,40(sp)
    8000c278:	1800                	addi	s0,sp,48
    8000c27a:	fca43c23          	sd	a0,-40(s0)
    8000c27e:	fcb43823          	sd	a1,-48(s0)
  char* d = dest;
    8000c282:	fd843783          	ld	a5,-40(s0)
    8000c286:	fef43423          	sd	a5,-24(s0)
  while ((*d++ = *src++))
    8000c28a:	0001                	nop
    8000c28c:	fd043703          	ld	a4,-48(s0)
    8000c290:	00170793          	addi	a5,a4,1
    8000c294:	fcf43823          	sd	a5,-48(s0)
    8000c298:	fe843783          	ld	a5,-24(s0)
    8000c29c:	00178693          	addi	a3,a5,1
    8000c2a0:	fed43423          	sd	a3,-24(s0)
    8000c2a4:	00074703          	lbu	a4,0(a4)
    8000c2a8:	00e78023          	sb	a4,0(a5)
    8000c2ac:	0007c783          	lbu	a5,0(a5)
    8000c2b0:	fff1                	bnez	a5,8000c28c <strcpy+0x18>
    ;
  return dest;
    8000c2b2:	fd843783          	ld	a5,-40(s0)
}
    8000c2b6:	853e                	mv	a0,a5
    8000c2b8:	7422                	ld	s0,40(sp)
    8000c2ba:	6145                	addi	sp,sp,48
    8000c2bc:	8082                	ret

000000008000c2be <atol>:

long atol(const char* str)
{
    8000c2be:	7179                	addi	sp,sp,-48
    8000c2c0:	f422                	sd	s0,40(sp)
    8000c2c2:	1800                	addi	s0,sp,48
    8000c2c4:	fca43c23          	sd	a0,-40(s0)
  long res = 0;
    8000c2c8:	fe043423          	sd	zero,-24(s0)
  int sign = 0;
    8000c2cc:	fe042223          	sw	zero,-28(s0)

  while (*str == ' ')
    8000c2d0:	a031                	j	8000c2dc <atol+0x1e>
    str++;
    8000c2d2:	fd843783          	ld	a5,-40(s0)
    8000c2d6:	0785                	addi	a5,a5,1
    8000c2d8:	fcf43c23          	sd	a5,-40(s0)
  while (*str == ' ')
    8000c2dc:	fd843783          	ld	a5,-40(s0)
    8000c2e0:	0007c783          	lbu	a5,0(a5)
    8000c2e4:	873e                	mv	a4,a5
    8000c2e6:	02000793          	li	a5,32
    8000c2ea:	fef704e3          	beq	a4,a5,8000c2d2 <atol+0x14>

  if (*str == '-' || *str == '+') {
    8000c2ee:	fd843783          	ld	a5,-40(s0)
    8000c2f2:	0007c783          	lbu	a5,0(a5)
    8000c2f6:	873e                	mv	a4,a5
    8000c2f8:	02d00793          	li	a5,45
    8000c2fc:	00f70b63          	beq	a4,a5,8000c312 <atol+0x54>
    8000c300:	fd843783          	ld	a5,-40(s0)
    8000c304:	0007c783          	lbu	a5,0(a5)
    8000c308:	873e                	mv	a4,a5
    8000c30a:	02b00793          	li	a5,43
    8000c30e:	06f71263          	bne	a4,a5,8000c372 <atol+0xb4>
    sign = *str == '-';
    8000c312:	fd843783          	ld	a5,-40(s0)
    8000c316:	0007c783          	lbu	a5,0(a5)
    8000c31a:	0007871b          	sext.w	a4,a5
    8000c31e:	02d00793          	li	a5,45
    8000c322:	40f707b3          	sub	a5,a4,a5
    8000c326:	0017b793          	seqz	a5,a5
    8000c32a:	0ff7f793          	andi	a5,a5,255
    8000c32e:	fef42223          	sw	a5,-28(s0)
    str++;
    8000c332:	fd843783          	ld	a5,-40(s0)
    8000c336:	0785                	addi	a5,a5,1
    8000c338:	fcf43c23          	sd	a5,-40(s0)
  }

  while (*str) {
    8000c33c:	a81d                	j	8000c372 <atol+0xb4>
    res *= 10;
    8000c33e:	fe843703          	ld	a4,-24(s0)
    8000c342:	87ba                	mv	a5,a4
    8000c344:	078a                	slli	a5,a5,0x2
    8000c346:	97ba                	add	a5,a5,a4
    8000c348:	0786                	slli	a5,a5,0x1
    8000c34a:	fef43423          	sd	a5,-24(s0)
    res += *str++ - '0';
    8000c34e:	fd843783          	ld	a5,-40(s0)
    8000c352:	00178713          	addi	a4,a5,1
    8000c356:	fce43c23          	sd	a4,-40(s0)
    8000c35a:	0007c783          	lbu	a5,0(a5)
    8000c35e:	2781                	sext.w	a5,a5
    8000c360:	fd07879b          	addiw	a5,a5,-48
    8000c364:	2781                	sext.w	a5,a5
    8000c366:	873e                	mv	a4,a5
    8000c368:	fe843783          	ld	a5,-24(s0)
    8000c36c:	97ba                	add	a5,a5,a4
    8000c36e:	fef43423          	sd	a5,-24(s0)
  while (*str) {
    8000c372:	fd843783          	ld	a5,-40(s0)
    8000c376:	0007c783          	lbu	a5,0(a5)
    8000c37a:	f3f1                	bnez	a5,8000c33e <atol+0x80>
  }

  return sign ? -res : res;
    8000c37c:	fe442783          	lw	a5,-28(s0)
    8000c380:	2781                	sext.w	a5,a5
    8000c382:	c791                	beqz	a5,8000c38e <atol+0xd0>
    8000c384:	fe843783          	ld	a5,-24(s0)
    8000c388:	40f007b3          	neg	a5,a5
    8000c38c:	a019                	j	8000c392 <atol+0xd4>
    8000c38e:	fe843783          	ld	a5,-24(s0)
}
    8000c392:	853e                	mv	a0,a5
    8000c394:	7422                	ld	s0,40(sp)
    8000c396:	6145                	addi	sp,sp,48
    8000c398:	8082                	ret
