include util.mak

CC=riscv64-unknown-elf-gcc
CPP=riscv64-unknown-elf-gcc
OBJDUMP=riscv64-unknown-elf-objdump

FPU_ENABLED=1

CFLAGS= -c -g -static -std=gnu99 -O0 -mcmodel=medany -fvisibility=hidden -nostdlib -nostartfiles
ifeq ($(FPU_ENABLED), 1)
  CFLAGS += -march=rv64imafd -DFPU_ENABLED
else
  CFLAGS += -march=rv64imac -mabi=lp64
endif

LDFLAGS=-T link.ld -nostdlib -nostartfiles
ifeq ($(FPU_ENABLED), 1)
else
  LDFLAGS += -march=rv64imac -mabi=lp64
endif

DUMPFLAGS=--disassemble-all --disassemble-zeroes --section=.text --section=.text.startup --section=.text.init --section=.data

INCL_KEY=-I
DIR_KEY=-B


# include sub-folders list
INCL_PATH=\
	$(TOP_DIR)common \
	$(TOP_DIR)../common

# source files directories list:
SRC_PATH =\
	$(TOP_DIR)isa \
	$(TOP_DIR)isa/rv64ua \
	$(TOP_DIR)isa/rv64ui \
	$(TOP_DIR)isa/rv64um \
	$(TOP_DIR)isa/rv64uc

LIB_NAMES =\
	gcc \
	c \
	m

VPATH = $(SRC_PATH)

SOURCE_64UA = \
	amoadd_w amoxor_w amoor_w amoand_w amomin_w amomax_w \
	amominu_w amomaxu_w amoswap_w \
	amoadd_d amoxor_d amoor_d amoand_d amomin_d amomax_d \
	amominu_d amomaxu_d amoswap_d lrsc

SOURCE_64UI = \
	add addi addiw addw \
	and andi \
	auipc \
	beq bge bgeu blt bltu bne \
	fence_i \
	jal jalr \
	lb lbu lh lhu lw lwu ld \
	lui \
	or ori \
	sb sh sw sd \
	sll slli slliw sllw \
	slt slti sltiu sltu \
	sra srai sraiw sraw \
	srl srli srliw srlw \
	sub subw \
	xor xori

SOURCE_64UM = \
	div divu divuw divw \
	mul mulw mulhsu mulhu mulh \
	rem remu remuw remw

SOURCE_64UC = \
	rvc

SOURCES = u_mode $(SOURCE_64UI) $(SOURCE_64UA) $(SOURCE_64UC) $(SOURCE_64UM) \
	passfail trap


OBJ_FILES = $(addsuffix .o,$(SOURCES))
OUTNAME = riscv-tests
EXECUTABLE = $(OUTNAME).elf
DUMPFILE = $(OUTNAME).dump
HEXFILE = $(OUTNAME).hex
LSTFILE = $(OUTNAME).lst

all: tests

.PHONY: $(EXECUTABLE) $(DUMPFILE)


tests: $(EXECUTABLE) $(DUMPFILE) $(HEXFILE)
$(HEXFILE): $(EXECUTABLE)
	echo elf2rawx $(addprefix $(ELF_DIR)/,$<) -h -f 262144 -l 8 -o $(addprefix $(ELF_DIR)/,$(HEXFILE))
	elf2rawx $(addprefix $(ELF_DIR)/,$<) -h -f 262144 -l 8 -o $(addprefix $(ELF_DIR)/,$(HEXFILE))

$(DUMPFILE): $(EXECUTABLE)
	echo $(OBJDUMP) $(DUMPFLAGS) $(addprefix $(ELF_DIR)/,$<) > $(addprefix $(ELF_DIR)/,$@)
	$(OBJDUMP) $(DUMPFLAGS) $(addprefix $(ELF_DIR)/,$<) > $(addprefix $(ELF_DIR)/,$@)
	$(OBJDUMP) -S $(addprefix $(ELF_DIR)/,$<) > $(addprefix $(ELF_DIR)/,$(LSTFILE))


$(EXECUTABLE): $(OBJ_FILES)
	echo $(CPP) $(LDFLAGS) $(addprefix $(OBJ_DIR)/,$(OBJ_FILES)) -o $(addprefix $(ELF_DIR)/,$@) $(addprefix -l,$(LIB_NAMES))
	$(CPP) $(LDFLAGS) $(addprefix $(OBJ_DIR)/,$(OBJ_FILES)) -o $(addprefix $(ELF_DIR)/,$@) $(addprefix -l,$(LIB_NAMES))
	$(ECHO) "\n  Shared Library has been built successfully.\n"

#.cpp.o:
%.o: %.cpp
	echo $(CPP) $(CFLAGS) $(addprefix $(INCL_KEY),$(INCL_PATH)) $< -o $(addprefix $(OBJ_DIR)/,$@)
	$(CPP) $(CFLAGS) $(addprefix $(INCL_KEY),$(INCL_PATH)) $< -o $(addprefix $(OBJ_DIR)/,$@)

#.c.o:
%.o: %.c
	echo $(CC) $(CFLAGS) $(addprefix $(INCL_KEY),$(INCL_PATH)) $< -o $(addprefix $(OBJ_DIR)/,$@)
	$(CC) $(CFLAGS) $(addprefix $(INCL_KEY),$(INCL_PATH)) $< -o $(addprefix $(OBJ_DIR)/,$@)

%.o: %.S
	echo $(CC) $(CFLAGS) -D__ASSEMBLY__=1 $(addprefix $(INCL_KEY),$(INCL_PATH)) $< -o $(addprefix $(OBJ_DIR)/,$@)
	$(CC) $(CFLAGS) -D__ASSEMBLY__=1 $(addprefix $(INCL_KEY),$(INCL_PATH)) $< -o $(addprefix $(OBJ_DIR)/,$@)


